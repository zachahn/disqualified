# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activesupport` gem.
# Please instead update this file by running `bin/tapioca gem activesupport`.


# source://activesupport//lib/active_support/deep_mergeable.rb#3
module ActiveSupport
  extend ::ActiveSupport::LazyLoadHooks
  extend ::ActiveSupport::Autoload

  # source://activesupport//lib/active_support/json/decoding.rb#9
  def parse_json_times; end

  # source://activesupport//lib/active_support/json/decoding.rb#9
  def parse_json_times=(val); end

  # source://activesupport//lib/active_support.rb#99
  def test_order; end

  # source://activesupport//lib/active_support.rb#99
  def test_order=(val); end

  # source://activesupport//lib/active_support.rb#100
  def test_parallelization_threshold; end

  # source://activesupport//lib/active_support.rb#100
  def test_parallelization_threshold=(val); end

  class << self
    # source://activesupport//lib/active_support.rb#105
    def cache_format_version; end

    # source://activesupport//lib/active_support.rb#109
    def cache_format_version=(value); end

    # source://activesupport//lib/active_support/deprecator.rb#4
    def deprecator; end

    # source://activesupport//lib/active_support.rb#93
    def eager_load!; end

    # source://activesupport//lib/active_support.rb#103
    def error_reporter; end

    # source://activesupport//lib/active_support.rb#103
    def error_reporter=(_arg0); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def escape_html_entities_in_json(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def escape_html_entities_in_json=(arg); end

    # source://activesupport//lib/active_support/gem_version.rb#5
    def gem_version; end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def json_encoder(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def json_encoder=(arg); end

    # source://activesupport//lib/active_support/json/decoding.rb#9
    def parse_json_times; end

    # source://activesupport//lib/active_support/json/decoding.rb#9
    def parse_json_times=(val); end

    # source://activesupport//lib/active_support.rb#99
    def test_order; end

    # source://activesupport//lib/active_support.rb#99
    def test_order=(val); end

    # source://activesupport//lib/active_support.rb#100
    def test_parallelization_threshold; end

    # source://activesupport//lib/active_support.rb#100
    def test_parallelization_threshold=(val); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def time_precision(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def time_precision=(arg); end

    # source://activesupport//lib/active_support.rb#113
    def to_time_preserves_timezone; end

    # source://activesupport//lib/active_support.rb#117
    def to_time_preserves_timezone=(value); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def use_standard_json_time_format(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def use_standard_json_time_format=(arg); end

    # source://activesupport//lib/active_support.rb#127
    def utc_to_local_returns_utc_offset_times; end

    # source://activesupport//lib/active_support.rb#131
    def utc_to_local_returns_utc_offset_times=(value); end

    # source://activesupport//lib/active_support/version.rb#7
    def version; end
  end
end

# source://activesupport//lib/active_support/actionable_error.rb#11
module ActiveSupport::ActionableError
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::ActionableError::ClassMethods

  class << self
    # source://activesupport//lib/active_support/actionable_error.rb#20
    def actions(error); end

    # source://activesupport//lib/active_support/actionable_error.rb#29
    def dispatch(error, name); end
  end

  module GeneratedClassMethods
    def _actions; end
    def _actions=(value); end
    def _actions?; end
  end

  module GeneratedInstanceMethods
    def _actions; end
    def _actions=(value); end
    def _actions?; end
  end
end

# source://activesupport//lib/active_support/actionable_error.rb#35
module ActiveSupport::ActionableError::ClassMethods
  # source://activesupport//lib/active_support/actionable_error.rb#45
  def action(name, &block); end
end

# source://activesupport//lib/active_support/actionable_error.rb#14
class ActiveSupport::ActionableError::NonActionable < ::StandardError; end

# source://activesupport//lib/active_support/array_inquirer.rb#14
class ActiveSupport::ArrayInquirer < ::Array
  # source://activesupport//lib/active_support/array_inquirer.rb#27
  def any?(*candidates); end

  private

  # source://activesupport//lib/active_support/array_inquirer.rb#42
  def method_missing(name, *_arg1, **_arg2, &_arg3); end

  # source://activesupport//lib/active_support/array_inquirer.rb#38
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/dependencies/autoload.rb#29
module ActiveSupport::Autoload
  # source://activesupport//lib/active_support/dependencies/autoload.rb#30
  def autoload(const_name, path = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/dependencies/autoload.rb#51
  def autoload_at(path); end

  # source://activesupport//lib/active_support/dependencies/autoload.rb#44
  def autoload_under(path); end

  # source://activesupport//lib/active_support/dependencies/autoload.rb#58
  def eager_autoload; end

  # source://activesupport//lib/active_support/dependencies/autoload.rb#65
  def eager_load!; end
end

# source://activesupport//lib/active_support/backtrace_cleaner.rb#34
class ActiveSupport::BacktraceCleaner
  # source://activesupport//lib/active_support/backtrace_cleaner.rb#35
  def initialize; end

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#83
  def add_filter(&block); end

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#92
  def add_silencer(&block); end

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#45
  def clean(backtrace, kind = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#61
  def clean_frame(frame, kind = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#45
  def filter(backtrace, kind = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#106
  def remove_filters!; end

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#99
  def remove_silencers!; end

  private

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#127
  def add_core_silencer; end

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#118
  def add_gem_filter; end

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#131
  def add_gem_silencer; end

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#135
  def add_stdlib_silencer; end

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#139
  def filter_backtrace(backtrace); end

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#113
  def initialize_copy(_other); end

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#155
  def noise(backtrace); end

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#147
  def silence(backtrace); end
end

# source://activesupport//lib/active_support/backtrace_cleaner.rb#111
ActiveSupport::BacktraceCleaner::FORMATTED_GEMS_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/benchmarkable.rb#8
module ActiveSupport::Benchmarkable
  # source://activesupport//lib/active_support/benchmarkable.rb#38
  def benchmark(message = T.unsafe(nil), options = T.unsafe(nil), &block); end
end

# source://activesupport//lib/active_support/core_ext/big_decimal/conversions.rb#7
module ActiveSupport::BigDecimalWithDefaultFormat
  # source://activesupport//lib/active_support/core_ext/big_decimal/conversions.rb#8
  def to_s(format = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/broadcast_logger.rb#74
class ActiveSupport::BroadcastLogger
  include ::ActiveSupport::LoggerSilence
  include ::ActiveSupport::LoggerThreadSafeLevel

  # source://activesupport//lib/active_support/broadcast_logger.rb#82
  def initialize(*loggers); end

  # source://activesupport//lib/active_support/broadcast_logger.rb#112
  def <<(message); end

  # source://activesupport//lib/active_support/broadcast_logger.rb#116
  def add(*args, &block); end

  # source://activesupport//lib/active_support/broadcast_logger.rb#93
  def broadcast_to(*loggers); end

  # source://activesupport//lib/active_support/broadcast_logger.rb#78
  def broadcasts; end

  # source://activesupport//lib/active_support/broadcast_logger.rb#162
  def close; end

  # source://activesupport//lib/active_support/broadcast_logger.rb#121
  def debug(*args, &block); end

  # source://activesupport//lib/active_support/broadcast_logger.rb#173
  def debug!; end

  # source://activesupport//lib/active_support/broadcast_logger.rb#168
  def debug?; end

  # source://activesupport//lib/active_support/broadcast_logger.rb#133
  def error(*args, &block); end

  # source://activesupport//lib/active_support/broadcast_logger.rb#206
  def error!; end

  # source://activesupport//lib/active_support/broadcast_logger.rb#201
  def error?; end

  # source://activesupport//lib/active_support/broadcast_logger.rb#137
  def fatal(*args, &block); end

  # source://activesupport//lib/active_support/broadcast_logger.rb#217
  def fatal!; end

  # source://activesupport//lib/active_support/broadcast_logger.rb#212
  def fatal?; end

  # source://activesupport//lib/active_support/broadcast_logger.rb#79
  def formatter; end

  # source://activesupport//lib/active_support/broadcast_logger.rb#145
  def formatter=(formatter); end

  # source://activesupport//lib/active_support/broadcast_logger.rb#125
  def info(*args, &block); end

  # source://activesupport//lib/active_support/broadcast_logger.rb#184
  def info!; end

  # source://activesupport//lib/active_support/broadcast_logger.rb#179
  def info?; end

  # source://activesupport//lib/active_support/broadcast_logger.rb#108
  def level; end

  # source://activesupport//lib/active_support/broadcast_logger.rb#151
  def level=(level); end

  # source://activesupport//lib/active_support/broadcast_logger.rb#156
  def local_level=(level); end

  # source://activesupport//lib/active_support/broadcast_logger.rb#116
  def log(*args, &block); end

  # source://activesupport//lib/active_support/broadcast_logger.rb#80
  def progname; end

  # source://activesupport//lib/active_support/broadcast_logger.rb#80
  def progname=(_arg0); end

  # source://activesupport//lib/active_support/broadcast_logger.rb#151
  def sev_threshold=(level); end

  # source://activesupport//lib/active_support/logger_silence.rb#12
  def silencer; end

  # source://activesupport//lib/active_support/logger_silence.rb#12
  def silencer=(val); end

  # source://activesupport//lib/active_support/broadcast_logger.rb#104
  def stop_broadcasting_to(logger); end

  # source://activesupport//lib/active_support/broadcast_logger.rb#141
  def unknown(*args, &block); end

  # source://activesupport//lib/active_support/broadcast_logger.rb#129
  def warn(*args, &block); end

  # source://activesupport//lib/active_support/broadcast_logger.rb#195
  def warn!; end

  # source://activesupport//lib/active_support/broadcast_logger.rb#190
  def warn?; end

  private

  # source://activesupport//lib/active_support/broadcast_logger.rb#230
  def dispatch(&block); end

  # source://activesupport//lib/active_support/broadcast_logger.rb#221
  def initialize_copy(other); end

  # source://activesupport//lib/active_support/broadcast_logger.rb#235
  def method_missing(name, *_arg1, **_arg2, &_arg3); end

  # source://activesupport//lib/active_support/broadcast_logger.rb#247
  def respond_to_missing?(method, include_all); end

  class << self
    # source://activesupport//lib/active_support/logger_silence.rb#12
    def silencer; end

    # source://activesupport//lib/active_support/logger_silence.rb#12
    def silencer=(val); end
  end
end

# source://activesupport//lib/active_support/cache/entry.rb#6
module ActiveSupport::Cache
  class << self
    # source://activesupport//lib/active_support/cache.rb#111
    def expand_cache_key(key, namespace = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/cache.rb#58
    def format_version; end

    # source://activesupport//lib/active_support/cache.rb#58
    def format_version=(_arg0); end

    # source://activesupport//lib/active_support/cache.rb#85
    def lookup_store(store = T.unsafe(nil), *parameters); end

    private

    # source://activesupport//lib/active_support/cache.rb#123
    def retrieve_cache_key(key); end

    # source://activesupport//lib/active_support/cache.rb#135
    def retrieve_store_class(store); end
  end
end

# source://activesupport//lib/active_support/cache/coder.rb#7
class ActiveSupport::Cache::Coder
  # source://activesupport//lib/active_support/cache/coder.rb#8
  def initialize(serializer, compressor, legacy_serializer: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/coder.rb#14
  def dump(entry); end

  # source://activesupport//lib/active_support/cache/coder.rb#20
  def dump_compressed(entry, threshold); end

  # source://activesupport//lib/active_support/cache/coder.rb#48
  def load(dumped); end

  private

  # source://activesupport//lib/active_support/cache/coder.rb#136
  def dump_version(version); end

  # source://activesupport//lib/active_support/cache/coder.rb#144
  def load_version(dumped_version); end

  # source://activesupport//lib/active_support/cache/coder.rb#121
  def signature?(dumped); end

  # source://activesupport//lib/active_support/cache/coder.rb#129
  def try_compress(string, threshold); end

  # source://activesupport//lib/active_support/cache/coder.rb#125
  def type_for_string(value); end
end

# source://activesupport//lib/active_support/cache/coder.rb#76
ActiveSupport::Cache::Coder::COMPRESSED_FLAG = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/cache/coder.rb#98
class ActiveSupport::Cache::Coder::LazyEntry < ::ActiveSupport::Cache::Entry
  # source://activesupport//lib/active_support/cache/coder.rb#99
  def initialize(serializer, compressor, payload, **options); end

  # source://activesupport//lib/active_support/cache/coder.rb#114
  def mismatched?(version); end

  # source://activesupport//lib/active_support/cache/coder.rb#106
  def value; end
end

# source://activesupport//lib/active_support/cache/coder.rb#84
ActiveSupport::Cache::Coder::MARSHAL_SIGNATURE = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/cache/coder.rb#68
ActiveSupport::Cache::Coder::OBJECT_DUMP_TYPE = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/cache/coder.rb#80
ActiveSupport::Cache::Coder::PACKED_EXPIRES_AT_TEMPLATE = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/cache/coder.rb#78
ActiveSupport::Cache::Coder::PACKED_TEMPLATE = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/cache/coder.rb#79
ActiveSupport::Cache::Coder::PACKED_TYPE_TEMPLATE = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/cache/coder.rb#82
ActiveSupport::Cache::Coder::PACKED_VERSION_INDEX = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/cache/coder.rb#81
ActiveSupport::Cache::Coder::PACKED_VERSION_LENGTH_TEMPLATE = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/cache/coder.rb#66
ActiveSupport::Cache::Coder::SIGNATURE = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/cache/coder.rb#96
ActiveSupport::Cache::Coder::STRING_DESERIALIZERS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/cache/coder.rb#70
ActiveSupport::Cache::Coder::STRING_ENCODINGS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/cache/coder.rb#86
class ActiveSupport::Cache::Coder::StringDeserializer
  # source://activesupport//lib/active_support/cache/coder.rb#87
  def initialize(encoding); end

  # source://activesupport//lib/active_support/cache/coder.rb#91
  def load(payload); end
end

# source://activesupport//lib/active_support/cache.rb#45
ActiveSupport::Cache::DEFAULT_COMPRESS_LIMIT = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/cache.rb#49
class ActiveSupport::Cache::DeserializationError < ::StandardError; end

# source://activesupport//lib/active_support/cache/entry.rb#14
class ActiveSupport::Cache::Entry
  # source://activesupport//lib/active_support/cache/entry.rb#25
  def initialize(value, compressed: T.unsafe(nil), version: T.unsafe(nil), expires_in: T.unsafe(nil), expires_at: T.unsafe(nil), **_arg5); end

  # source://activesupport//lib/active_support/cache/entry.rb#61
  def bytesize; end

  # source://activesupport//lib/active_support/cache/entry.rb#76
  def compressed(compress_threshold); end

  # source://activesupport//lib/active_support/cache/entry.rb#72
  def compressed?; end

  # source://activesupport//lib/active_support/cache/entry.rb#106
  def dup_value!; end

  # source://activesupport//lib/active_support/cache/entry.rb#43
  def expired?; end

  # source://activesupport//lib/active_support/cache/entry.rb#47
  def expires_at; end

  # source://activesupport//lib/active_support/cache/entry.rb#51
  def expires_at=(value); end

  # source://activesupport//lib/active_support/cache/entry.rb#100
  def local?; end

  # source://activesupport//lib/active_support/cache/entry.rb#37
  def mismatched?(version); end

  # source://activesupport//lib/active_support/cache/entry.rb#116
  def pack; end

  # source://activesupport//lib/active_support/cache/entry.rb#33
  def value; end

  # source://activesupport//lib/active_support/cache/entry.rb#21
  def version; end

  private

  # source://activesupport//lib/active_support/cache/entry.rb#127
  def marshal_load(payload); end

  # source://activesupport//lib/active_support/cache/entry.rb#123
  def uncompress(value); end

  class << self
    # source://activesupport//lib/active_support/cache/entry.rb#16
    def unpack(members); end
  end
end

# source://activesupport//lib/active_support/cache/file_store.rb#12
class ActiveSupport::Cache::FileStore < ::ActiveSupport::Cache::Store
  # source://activesupport//lib/active_support/cache/file_store.rb#20
  def initialize(cache_path, **options); end

  # source://activesupport//lib/active_support/cache/file_store.rb#13
  def cache_path; end

  # source://activesupport//lib/active_support/cache/file_store.rb#40
  def cleanup(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/file_store.rb#33
  def clear(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/file_store.rb#75
  def decrement(name, amount = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/file_store.rb#79
  def delete_matched(matcher, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/file_store.rb#60
  def increment(name, amount = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/file_store.rb#91
  def inspect; end

  private

  # source://activesupport//lib/active_support/cache/file_store.rb#185
  def delete_empty_directories(dir); end

  # source://activesupport//lib/active_support/cache/file_store.rb#121
  def delete_entry(key, **options); end

  # source://activesupport//lib/active_support/cache/file_store.rb#194
  def ensure_cache_path(path); end

  # source://activesupport//lib/active_support/cache/file_store.rb#179
  def file_path_key(path); end

  # source://activesupport//lib/active_support/cache/file_store.rb#138
  def lock_file(file_name, &block); end

  # source://activesupport//lib/active_support/cache/file_store.rb#212
  def modify_value(name, amount, options); end

  # source://activesupport//lib/active_support/cache/file_store.rb#152
  def normalize_key(key, options); end

  # source://activesupport//lib/active_support/cache/file_store.rb#96
  def read_entry(key, **options); end

  # source://activesupport//lib/active_support/cache/file_store.rb#103
  def read_serialized_entry(key, **_arg1); end

  # source://activesupport//lib/active_support/cache/file_store.rb#198
  def search_dir(dir, &callback); end

  # source://activesupport//lib/active_support/cache/file_store.rb#110
  def write_entry(key, entry, **options); end

  # source://activesupport//lib/active_support/cache/file_store.rb#114
  def write_serialized_entry(key, payload, **options); end

  class << self
    # source://activesupport//lib/active_support/cache/file_store.rb#26
    def supports_cache_versioning?; end
  end
end

# source://activesupport//lib/active_support/cache/file_store.rb#15
ActiveSupport::Cache::FileStore::DIR_FORMATTER = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/cache/file_store.rb#16
ActiveSupport::Cache::FileStore::FILENAME_MAX_SIZE = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/cache/file_store.rb#17
ActiveSupport::Cache::FileStore::FILEPATH_MAX_SIZE = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/cache/file_store.rb#18
ActiveSupport::Cache::FileStore::GITKEEP_FILES = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/cache/memory_store.rb#28
class ActiveSupport::Cache::MemoryStore < ::ActiveSupport::Cache::Store
  # source://activesupport//lib/active_support/cache/memory_store.rb#73
  def initialize(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#101
  def cleanup(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#93
  def clear(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#164
  def decrement(name, amount = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#169
  def delete_matched(matcher, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#149
  def increment(name, amount = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#181
  def inspect; end

  # source://activesupport//lib/active_support/cache/memory_store.rb#114
  def prune(target_size, max_time = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#133
  def pruning?; end

  # source://activesupport//lib/active_support/cache/memory_store.rb#187
  def synchronize(&block); end

  private

  # source://activesupport//lib/active_support/cache/memory_store.rb#194
  def cached_size(key, payload); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#227
  def delete_entry(key, **options); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#237
  def modify_value(name, amount, options); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#198
  def read_entry(key, **options); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#210
  def write_entry(key, entry, **options); end

  class << self
    # source://activesupport//lib/active_support/cache/memory_store.rb#88
    def supports_cache_versioning?; end
  end
end

# source://activesupport//lib/active_support/cache/memory_store.rb#29
module ActiveSupport::Cache::MemoryStore::DupCoder
  extend ::ActiveSupport::Cache::MemoryStore::DupCoder

  # source://activesupport//lib/active_support/cache/memory_store.rb#32
  def dump(entry); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#40
  def dump_compressed(entry, threshold); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#45
  def load(entry); end

  private

  # source://activesupport//lib/active_support/cache/memory_store.rb#56
  def dump_value(value); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#64
  def load_value(string); end
end

# source://activesupport//lib/active_support/cache/memory_store.rb#54
ActiveSupport::Cache::MemoryStore::DupCoder::MARSHAL_SIGNATURE = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/cache/memory_store.rb#192
ActiveSupport::Cache::MemoryStore::PER_ENTRY_OVERHEAD = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/cache/null_store.rb#14
class ActiveSupport::Cache::NullStore < ::ActiveSupport::Cache::Store
  include ::ActiveSupport::Cache::Strategy::LocalCache

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#85
  def cleanup(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#79
  def clear(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#108
  def decrement(name, amount = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#91
  def delete_matched(matcher, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#97
  def increment(name, amount = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/null_store.rb#37
  def inspect; end

  private

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#162
  def delete_entry(key, **_arg1); end

  # source://activesupport//lib/active_support/cache/null_store.rb#42
  def read_entry(key, **s); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#120
  def read_serialized_entry(key, raw: T.unsafe(nil), **options); end

  # source://activesupport//lib/active_support/cache/null_store.rb#49
  def write_entry(key, entry, **_arg2); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#153
  def write_serialized_entry(key, payload, **_arg2); end

  class << self
    # source://activesupport//lib/active_support/cache/null_store.rb#18
    def supports_cache_versioning?; end
  end
end

# source://activesupport//lib/active_support/cache.rb#41
ActiveSupport::Cache::OPTION_ALIASES = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#8
module ActiveSupport::Cache::SerializerWithFallback
  # source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#17
  def load(dumped); end

  private

  # source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#39
  def marshal_load(payload); end

  class << self
    # source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#9
    def [](format); end
  end
end

# source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#66
module ActiveSupport::Cache::SerializerWithFallback::Marshal70WithFallback
  include ::ActiveSupport::Cache::SerializerWithFallback
  extend ::ActiveSupport::Cache::SerializerWithFallback
  extend ::ActiveSupport::Cache::SerializerWithFallback::Marshal70WithFallback

  # source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#88
  def _load(marked); end

  # source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#73
  def dump(entry); end

  # source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#77
  def dump_compressed(entry, threshold); end

  # source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#94
  def dumped?(dumped); end
end

# source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#71
ActiveSupport::Cache::SerializerWithFallback::Marshal70WithFallback::MARK_COMPRESSED = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#70
ActiveSupport::Cache::SerializerWithFallback::Marshal70WithFallback::MARK_UNCOMPRESSED = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#99
module ActiveSupport::Cache::SerializerWithFallback::Marshal71WithFallback
  include ::ActiveSupport::Cache::SerializerWithFallback
  extend ::ActiveSupport::Cache::SerializerWithFallback
  extend ::ActiveSupport::Cache::SerializerWithFallback::Marshal71WithFallback

  # source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#109
  def _load(dumped); end

  # source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#105
  def dump(value); end

  # source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#113
  def dumped?(dumped); end
end

# source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#103
ActiveSupport::Cache::SerializerWithFallback::Marshal71WithFallback::MARSHAL_SIGNATURE = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#118
module ActiveSupport::Cache::SerializerWithFallback::MessagePackWithFallback
  include ::ActiveSupport::Cache::SerializerWithFallback
  extend ::ActiveSupport::Cache::SerializerWithFallback
  extend ::ActiveSupport::Cache::SerializerWithFallback::MessagePackWithFallback

  # source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#126
  def _load(dumped); end

  # source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#122
  def dump(value); end

  # source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#130
  def dumped?(dumped); end

  private

  # source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#135
  def available?; end
end

# source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#45
module ActiveSupport::Cache::SerializerWithFallback::PassthroughWithFallback
  include ::ActiveSupport::Cache::SerializerWithFallback
  extend ::ActiveSupport::Cache::SerializerWithFallback
  extend ::ActiveSupport::Cache::SerializerWithFallback::PassthroughWithFallback

  # source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#57
  def _load(entry); end

  # source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#49
  def dump(entry); end

  # source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#53
  def dump_compressed(entry, threshold); end

  # source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#61
  def dumped?(dumped); end
end

# source://activesupport//lib/active_support/cache/serializer_with_fallback.rb#144
ActiveSupport::Cache::SerializerWithFallback::SERIALIZERS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/cache.rb#188
class ActiveSupport::Cache::Store
  # source://activesupport//lib/active_support/cache.rb#295
  def initialize(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#747
  def cleanup(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#757
  def clear(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#738
  def decrement(name, amount = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#674
  def delete(name, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#720
  def delete_matched(matcher, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#687
  def delete_multi(names, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#701
  def exist?(name, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#444
  def fetch(name, options = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/cache.rb#593
  def fetch_multi(*names); end

  # source://activesupport//lib/active_support/cache.rb#729
  def increment(name, amount = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#189
  def logger; end

  # source://activesupport//lib/active_support/cache.rb#189
  def logger=(val); end

  # source://activesupport//lib/active_support/cache.rb#322
  def mute; end

  # source://activesupport//lib/active_support/cache.rb#711
  def new_entry(value, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#192
  def options; end

  # source://activesupport//lib/active_support/cache.rb#190
  def raise_on_invalid_cache_expiration_time; end

  # source://activesupport//lib/active_support/cache.rb#190
  def raise_on_invalid_cache_expiration_time=(val); end

  # source://activesupport//lib/active_support/cache.rb#498
  def read(name, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#536
  def read_multi(*names); end

  # source://activesupport//lib/active_support/cache.rb#192
  def silence; end

  # source://activesupport//lib/active_support/cache.rb#316
  def silence!; end

  # source://activesupport//lib/active_support/cache.rb#192
  def silence?; end

  # source://activesupport//lib/active_support/cache.rb#660
  def write(name, value, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#550
  def write_multi(hash, options = T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/cache.rb#1005
  def _instrument(operation, multi: T.unsafe(nil), options: T.unsafe(nil), **payload, &block); end

  # source://activesupport//lib/active_support/cache.rb#762
  def default_serializer; end

  # source://activesupport//lib/active_support/cache.rb#848
  def delete_entry(key, **options); end

  # source://activesupport//lib/active_support/cache.rb#854
  def delete_multi_entries(entries, **options); end

  # source://activesupport//lib/active_support/cache.rb#813
  def deserialize_entry(payload, **_arg1); end

  # source://activesupport//lib/active_support/cache.rb#968
  def expanded_key(key); end

  # source://activesupport//lib/active_support/cache.rb#989
  def expanded_version(key); end

  # source://activesupport//lib/active_support/cache.rb#1043
  def get_entry_value(entry, name, options); end

  # source://activesupport//lib/active_support/cache.rb#1026
  def handle_expired_entry(entry, key, options); end

  # source://activesupport//lib/active_support/cache.rb#888
  def handle_invalid_expires_in(message); end

  # source://activesupport//lib/active_support/cache.rb#997
  def instrument(operation, key, options = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/cache.rb#1001
  def instrument_multi(operation, keys, options = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/cache.rb#777
  def key_matcher(pattern, options); end

  # source://activesupport//lib/active_support/cache.rb#859
  def merged_options(call_options); end

  # source://activesupport//lib/active_support/cache.rb#946
  def namespace_key(key, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#930
  def normalize_key(key, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#899
  def normalize_options(options); end

  # source://activesupport//lib/active_support/cache.rb#985
  def normalize_version(key, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#794
  def read_entry(key, **options); end

  # source://activesupport//lib/active_support/cache.rb#821
  def read_multi_entries(names, **options); end

  # source://activesupport//lib/active_support/cache.rb#1048
  def save_block_result_to_cache(name, key, options); end

  # source://activesupport//lib/active_support/cache.rb#804
  def serialize_entry(entry, **options); end

  # source://activesupport//lib/active_support/cache.rb#910
  def validate_options(options); end

  # source://activesupport//lib/active_support/cache.rb#800
  def write_entry(key, entry, **options); end

  # source://activesupport//lib/active_support/cache.rb#840
  def write_multi_entries(hash, **options); end

  class << self
    # source://activesupport//lib/active_support/cache.rb#189
    def logger; end

    # source://activesupport//lib/active_support/cache.rb#189
    def logger=(val); end

    # source://activesupport//lib/active_support/cache.rb#190
    def raise_on_invalid_cache_expiration_time; end

    # source://activesupport//lib/active_support/cache.rb#190
    def raise_on_invalid_cache_expiration_time=(val); end

    private

    # source://activesupport//lib/active_support/cache.rb#200
    def retrieve_pool_options(options); end
  end
end

# source://activesupport//lib/active_support/cache.rb#51
module ActiveSupport::Cache::Strategy; end

# source://activesupport//lib/active_support/cache/strategy/local_cache.rb#13
module ActiveSupport::Cache::Strategy::LocalCache
  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#85
  def cleanup(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#79
  def clear(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#108
  def decrement(name, amount = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#91
  def delete_matched(matcher, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#97
  def increment(name, amount = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#73
  def middleware; end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#67
  def with_local_cache(&block); end

  private

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#185
  def bypass_local_cache(&block); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#162
  def delete_entry(key, **_arg1); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#181
  def local_cache; end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#177
  def local_cache_key; end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#134
  def read_multi_entries(names, **options); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#120
  def read_serialized_entry(key, raw: T.unsafe(nil), **options); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#189
  def use_temporary_local_cache(temporary_cache); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#167
  def write_cache_value(name, value, **options); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#153
  def write_serialized_entry(key, payload, **_arg2); end
end

# source://activesupport//lib/active_support/cache/strategy/local_cache.rb#17
module ActiveSupport::Cache::Strategy::LocalCache::LocalCacheRegistry
  extend ::ActiveSupport::Cache::Strategy::LocalCache::LocalCacheRegistry

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#20
  def cache_for(local_cache_key); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#25
  def set_cache_for(local_cache_key, value); end
end

# source://activesupport//lib/active_support/cache/strategy/local_cache.rb#35
class ActiveSupport::Cache::Strategy::LocalCache::LocalStore
  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#36
  def initialize; end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#40
  def clear(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#57
  def delete_entry(key); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#61
  def fetch_entry(key); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#44
  def read_entry(key); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#48
  def read_multi_entries(keys); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#52
  def write_entry(key, entry); end
end

# source://activesupport//lib/active_support/cache/strategy/local_cache_middleware.rb#13
class ActiveSupport::Cache::Strategy::LocalCache::Middleware
  # source://activesupport//lib/active_support/cache/strategy/local_cache_middleware.rb#16
  def initialize(name, local_cache_key); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache_middleware.rb#27
  def call(env); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache_middleware.rb#14
  def local_cache_key; end

  # source://activesupport//lib/active_support/cache/strategy/local_cache_middleware.rb#14
  def name; end

  # source://activesupport//lib/active_support/cache/strategy/local_cache_middleware.rb#22
  def new(app); end
end

# source://activesupport//lib/active_support/cache.rb#26
ActiveSupport::Cache::UNIVERSAL_OPTIONS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/cache.rb#1064
class ActiveSupport::Cache::WriteOptions
  # source://activesupport//lib/active_support/cache.rb#1065
  def initialize(options); end

  # source://activesupport//lib/active_support/cache.rb#1089
  def expires_at; end

  # source://activesupport//lib/active_support/cache.rb#1096
  def expires_at=(expires_at); end

  # source://activesupport//lib/active_support/cache.rb#1077
  def expires_in; end

  # source://activesupport//lib/active_support/cache.rb#1084
  def expires_in=(expires_in); end

  # source://activesupport//lib/active_support/cache.rb#1069
  def version; end

  # source://activesupport//lib/active_support/cache.rb#1073
  def version=(version); end
end

# source://activesupport//lib/active_support/key_generator.rb#55
class ActiveSupport::CachingKeyGenerator
  # source://activesupport//lib/active_support/key_generator.rb#56
  def initialize(key_generator); end

  # source://activesupport//lib/active_support/key_generator.rb#62
  def generate_key(*args); end
end

# source://activesupport//lib/active_support/callbacks.rb#65
module ActiveSupport::Callbacks
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker

  # source://activesupport//lib/active_support/callbacks.rb#97
  def run_callbacks(kind, type = T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/callbacks.rb#150
  def halted_callback_hook(filter, name); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

# source://activesupport//lib/active_support/callbacks.rb#73
ActiveSupport::Callbacks::CALLBACK_FILTER_TYPES = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/callbacks.rb#337
module ActiveSupport::Callbacks::CallTemplate
  class << self
    # source://activesupport//lib/active_support/callbacks.rb#495
    def build(filter, callback); end
  end
end

# source://activesupport//lib/active_support/callbacks.rb#396
class ActiveSupport::Callbacks::CallTemplate::InstanceExec0
  # source://activesupport//lib/active_support/callbacks.rb#397
  def initialize(block); end

  # source://activesupport//lib/active_support/callbacks.rb#401
  def expand(target, value, block); end

  # source://activesupport//lib/active_support/callbacks.rb#411
  def inverted_lambda; end

  # source://activesupport//lib/active_support/callbacks.rb#405
  def make_lambda; end
end

# source://activesupport//lib/active_support/callbacks.rb#418
class ActiveSupport::Callbacks::CallTemplate::InstanceExec1
  # source://activesupport//lib/active_support/callbacks.rb#419
  def initialize(block); end

  # source://activesupport//lib/active_support/callbacks.rb#423
  def expand(target, value, block); end

  # source://activesupport//lib/active_support/callbacks.rb#433
  def inverted_lambda; end

  # source://activesupport//lib/active_support/callbacks.rb#427
  def make_lambda; end
end

# source://activesupport//lib/active_support/callbacks.rb#440
class ActiveSupport::Callbacks::CallTemplate::InstanceExec2
  # source://activesupport//lib/active_support/callbacks.rb#441
  def initialize(block); end

  # source://activesupport//lib/active_support/callbacks.rb#445
  def expand(target, value, block); end

  # source://activesupport//lib/active_support/callbacks.rb#457
  def inverted_lambda; end

  # source://activesupport//lib/active_support/callbacks.rb#450
  def make_lambda; end
end

# source://activesupport//lib/active_support/callbacks.rb#338
class ActiveSupport::Callbacks::CallTemplate::MethodCall
  # source://activesupport//lib/active_support/callbacks.rb#339
  def initialize(method); end

  # source://activesupport//lib/active_support/callbacks.rb#356
  def expand(target, value, block); end

  # source://activesupport//lib/active_support/callbacks.rb#366
  def inverted_lambda; end

  # source://activesupport//lib/active_support/callbacks.rb#360
  def make_lambda; end
end

# source://activesupport//lib/active_support/callbacks.rb#373
class ActiveSupport::Callbacks::CallTemplate::ObjectCall
  # source://activesupport//lib/active_support/callbacks.rb#374
  def initialize(target, method); end

  # source://activesupport//lib/active_support/callbacks.rb#379
  def expand(target, value, block); end

  # source://activesupport//lib/active_support/callbacks.rb#389
  def inverted_lambda; end

  # source://activesupport//lib/active_support/callbacks.rb#383
  def make_lambda; end
end

# source://activesupport//lib/active_support/callbacks.rb#465
class ActiveSupport::Callbacks::CallTemplate::ProcCall
  # source://activesupport//lib/active_support/callbacks.rb#466
  def initialize(target); end

  # source://activesupport//lib/active_support/callbacks.rb#470
  def expand(target, value, block); end

  # source://activesupport//lib/active_support/callbacks.rb#480
  def inverted_lambda; end

  # source://activesupport//lib/active_support/callbacks.rb#474
  def make_lambda; end
end

# source://activesupport//lib/active_support/callbacks.rb#231
class ActiveSupport::Callbacks::Callback
  # source://activesupport//lib/active_support/callbacks.rb#246
  def initialize(name, filter, kind, options, chain_config); end

  # source://activesupport//lib/active_support/callbacks.rb#300
  def apply(callback_sequence); end

  # source://activesupport//lib/active_support/callbacks.rb#244
  def chain_config; end

  # source://activesupport//lib/active_support/callbacks.rb#282
  def compiled; end

  # source://activesupport//lib/active_support/callbacks.rb#304
  def current_scopes; end

  # source://activesupport//lib/active_support/callbacks.rb#273
  def duplicates?(other); end

  # source://activesupport//lib/active_support/callbacks.rb#244
  def filter; end

  # source://activesupport//lib/active_support/callbacks.rb#243
  def kind; end

  # source://activesupport//lib/active_support/callbacks.rb#243
  def kind=(_arg0); end

  # source://activesupport//lib/active_support/callbacks.rb#269
  def matches?(_kind, _filter); end

  # source://activesupport//lib/active_support/callbacks.rb#257
  def merge_conditional_options(chain, if_option:, unless_option:); end

  # source://activesupport//lib/active_support/callbacks.rb#243
  def name; end

  # source://activesupport//lib/active_support/callbacks.rb#243
  def name=(_arg0); end

  private

  # source://activesupport//lib/active_support/callbacks.rb#312
  def check_conditionals(conditionals); end

  # source://activesupport//lib/active_support/callbacks.rb#327
  def conditions_lambdas; end

  class << self
    # source://activesupport//lib/active_support/callbacks.rb#232
    def build(chain, filter, kind, options); end
  end
end

# source://activesupport//lib/active_support/callbacks.rb#309
ActiveSupport::Callbacks::Callback::EMPTY_ARRAY = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/callbacks.rb#567
class ActiveSupport::Callbacks::CallbackChain
  include ::Enumerable

  # source://activesupport//lib/active_support/callbacks.rb#572
  def initialize(name, config); end

  # source://activesupport//lib/active_support/callbacks.rb#632
  def append(*callbacks); end

  # source://activesupport//lib/active_support/callbacks.rb#600
  def clear; end

  # source://activesupport//lib/active_support/callbacks.rb#614
  def compile(type); end

  # source://activesupport//lib/active_support/callbacks.rb#570
  def config; end

  # source://activesupport//lib/active_support/callbacks.rb#594
  def delete(o); end

  # source://activesupport//lib/active_support/callbacks.rb#584
  def each(&block); end

  # source://activesupport//lib/active_support/callbacks.rb#586
  def empty?; end

  # source://activesupport//lib/active_support/callbacks.rb#585
  def index(o); end

  # source://activesupport//lib/active_support/callbacks.rb#588
  def insert(index, o); end

  # source://activesupport//lib/active_support/callbacks.rb#570
  def name; end

  # source://activesupport//lib/active_support/callbacks.rb#636
  def prepend(*callbacks); end

  protected

  # source://activesupport//lib/active_support/callbacks.rb#641
  def chain; end

  private

  # source://activesupport//lib/active_support/callbacks.rb#644
  def append_one(callback); end

  # source://activesupport//lib/active_support/callbacks.rb#664
  def default_terminator; end

  # source://activesupport//lib/active_support/callbacks.rb#607
  def initialize_copy(other); end

  # source://activesupport//lib/active_support/callbacks.rb#651
  def prepend_one(callback); end

  # source://activesupport//lib/active_support/callbacks.rb#658
  def remove_duplicates(callback); end
end

# source://activesupport//lib/active_support/callbacks.rb#518
class ActiveSupport::Callbacks::CallbackSequence
  # source://activesupport//lib/active_support/callbacks.rb#519
  def initialize(nested = T.unsafe(nil), call_template = T.unsafe(nil), user_conditions = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/callbacks.rb#534
  def after(after); end

  # source://activesupport//lib/active_support/callbacks.rb#540
  def around(call_template, user_conditions); end

  # source://activesupport//lib/active_support/callbacks.rb#528
  def before(before); end

  # source://activesupport//lib/active_support/callbacks.rb#554
  def expand_call_template(arg, block); end

  # source://activesupport//lib/active_support/callbacks.rb#550
  def final?; end

  # source://activesupport//lib/active_support/callbacks.rb#562
  def invoke_after(arg); end

  # source://activesupport//lib/active_support/callbacks.rb#558
  def invoke_before(arg); end

  # source://activesupport//lib/active_support/callbacks.rb#548
  def nested; end

  # source://activesupport//lib/active_support/callbacks.rb#544
  def skip?(arg); end
end

# source://activesupport//lib/active_support/callbacks.rb#676
module ActiveSupport::Callbacks::ClassMethods
  # source://activesupport//lib/active_support/callbacks.rb#686
  def __update_callbacks(name); end

  # source://activesupport//lib/active_support/callbacks.rb#901
  def define_callbacks(*names); end

  # source://activesupport//lib/active_support/callbacks.rb#677
  def normalize_callback_params(filters, block); end

  # source://activesupport//lib/active_support/callbacks.rb#811
  def reset_callbacks(name); end

  # source://activesupport//lib/active_support/callbacks.rb#737
  def set_callback(name, *filter_list, &block); end

  # source://activesupport//lib/active_support/callbacks.rb#786
  def skip_callback(name, *filter_list, &block); end

  protected

  # source://activesupport//lib/active_support/callbacks.rb#932
  def get_callbacks(name); end

  # source://activesupport//lib/active_support/callbacks.rb#936
  def set_callbacks(name, callbacks); end
end

# source://activesupport//lib/active_support/callbacks.rb#153
module ActiveSupport::Callbacks::Conditionals; end

# source://activesupport//lib/active_support/callbacks.rb#154
class ActiveSupport::Callbacks::Conditionals::Value
  # source://activesupport//lib/active_support/callbacks.rb#155
  def initialize(&block); end

  # source://activesupport//lib/active_support/callbacks.rb#158
  def call(target, value); end
end

# source://activesupport//lib/active_support/callbacks.rb#162
module ActiveSupport::Callbacks::Filters; end

# source://activesupport//lib/active_support/callbacks.rb#194
class ActiveSupport::Callbacks::Filters::After
  # source://activesupport//lib/active_support/callbacks.rb#196
  def initialize(user_callback, user_conditions, chain_config); end

  # source://activesupport//lib/active_support/callbacks.rb#214
  def apply(callback_sequence); end

  # source://activesupport//lib/active_support/callbacks.rb#202
  def call(env); end

  # source://activesupport//lib/active_support/callbacks.rb#195
  def halting; end

  # source://activesupport//lib/active_support/callbacks.rb#195
  def user_callback; end

  # source://activesupport//lib/active_support/callbacks.rb#195
  def user_conditions; end
end

# source://activesupport//lib/active_support/callbacks.rb#219
class ActiveSupport::Callbacks::Filters::Around
  # source://activesupport//lib/active_support/callbacks.rb#220
  def initialize(user_callback, user_conditions); end

  # source://activesupport//lib/active_support/callbacks.rb#225
  def apply(callback_sequence); end
end

# source://activesupport//lib/active_support/callbacks.rb#165
class ActiveSupport::Callbacks::Filters::Before
  # source://activesupport//lib/active_support/callbacks.rb#166
  def initialize(user_callback, user_conditions, chain_config, filter, name); end

  # source://activesupport//lib/active_support/callbacks.rb#189
  def apply(callback_sequence); end

  # source://activesupport//lib/active_support/callbacks.rb#173
  def call(env); end

  # source://activesupport//lib/active_support/callbacks.rb#171
  def filter; end

  # source://activesupport//lib/active_support/callbacks.rb#171
  def halted_lambda; end

  # source://activesupport//lib/active_support/callbacks.rb#171
  def name; end

  # source://activesupport//lib/active_support/callbacks.rb#171
  def user_callback; end

  # source://activesupport//lib/active_support/callbacks.rb#171
  def user_conditions; end
end

# source://activesupport//lib/active_support/callbacks.rb#163
class ActiveSupport::Callbacks::Filters::Environment < ::Struct
  def halted; end
  def halted=(_); end
  def target; end
  def target=(_); end
  def value; end
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activesupport//lib/active_support/code_generator.rb#4
class ActiveSupport::CodeGenerator
  # source://activesupport//lib/active_support/code_generator.rb#53
  def initialize(owner, path, line); end

  # source://activesupport//lib/active_support/code_generator.rb#60
  def define_cached_method(canonical_name, namespace:, as: T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/code_generator.rb#64
  def execute; end

  class << self
    # source://activesupport//lib/active_support/code_generator.rb#41
    def batch(owner, path, line); end
  end
end

# source://activesupport//lib/active_support/code_generator.rb#5
class ActiveSupport::CodeGenerator::MethodSet
  # source://activesupport//lib/active_support/code_generator.rb#8
  def initialize(namespace); end

  # source://activesupport//lib/active_support/code_generator.rb#28
  def apply(owner, path, line); end

  # source://activesupport//lib/active_support/code_generator.rb#15
  def define_cached_method(canonical_name, as: T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/code_generator.rb#6
ActiveSupport::CodeGenerator::MethodSet::METHOD_CACHES = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/core_ext/range/compare_range.rb#4
module ActiveSupport::CompareWithRange
  # source://activesupport//lib/active_support/core_ext/range/compare_range.rb#16
  def ===(value); end

  # source://activesupport//lib/active_support/core_ext/range/compare_range.rb#41
  def include?(value); end
end

# source://activesupport//lib/active_support/concern.rb#112
module ActiveSupport::Concern
  # source://activesupport//lib/active_support/concern.rb#129
  def append_features(base); end

  # source://activesupport//lib/active_support/concern.rb#209
  def class_methods(&class_methods_module_definition); end

  # source://activesupport//lib/active_support/concern.rb#158
  def included(base = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/concern.rb#142
  def prepend_features(base); end

  # source://activesupport//lib/active_support/concern.rb#175
  def prepended(base = T.unsafe(nil), &block); end

  class << self
    # source://activesupport//lib/active_support/concern.rb#125
    def extended(base); end
  end
end

# source://activesupport//lib/active_support/concern.rb#113
class ActiveSupport::Concern::MultipleIncludedBlocks < ::StandardError
  # source://activesupport//lib/active_support/concern.rb#114
  def initialize; end
end

# source://activesupport//lib/active_support/concern.rb#119
class ActiveSupport::Concern::MultiplePrependBlocks < ::StandardError
  # source://activesupport//lib/active_support/concern.rb#120
  def initialize; end
end

# source://activesupport//lib/active_support/concurrency/share_lock.rb#7
module ActiveSupport::Concurrency; end

# source://activesupport//lib/active_support/concurrency/load_interlock_aware_monitor.rb#32
class ActiveSupport::Concurrency::LoadInterlockAwareMonitor < ::Monitor
  include ::ActiveSupport::Concurrency::LoadInterlockAwareMonitorMixin
end

# source://activesupport//lib/active_support/concurrency/load_interlock_aware_monitor.rb#7
module ActiveSupport::Concurrency::LoadInterlockAwareMonitorMixin
  # source://activesupport//lib/active_support/concurrency/load_interlock_aware_monitor.rb#13
  def mon_enter; end

  # source://activesupport//lib/active_support/concurrency/load_interlock_aware_monitor.rb#18
  def synchronize(&block); end
end

# source://activesupport//lib/active_support/concurrency/load_interlock_aware_monitor.rb#9
ActiveSupport::Concurrency::LoadInterlockAwareMonitorMixin::EXCEPTION_IMMEDIATE = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/concurrency/load_interlock_aware_monitor.rb#8
ActiveSupport::Concurrency::LoadInterlockAwareMonitorMixin::EXCEPTION_NEVER = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/concurrency/null_lock.rb#5
module ActiveSupport::Concurrency::NullLock
  extend ::ActiveSupport::Concurrency::NullLock

  # source://activesupport//lib/active_support/concurrency/null_lock.rb#8
  def synchronize; end
end

# source://activesupport//lib/active_support/concurrency/share_lock.rb#11
class ActiveSupport::Concurrency::ShareLock
  include ::MonitorMixin

  # source://activesupport//lib/active_support/concurrency/share_lock.rb#50
  def initialize; end

  # source://activesupport//lib/active_support/concurrency/share_lock.rb#148
  def exclusive(purpose: T.unsafe(nil), compatible: T.unsafe(nil), after_compatible: T.unsafe(nil), no_wait: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/concurrency/share_lock.rb#18
  def raw_state; end

  # source://activesupport//lib/active_support/concurrency/share_lock.rb#159
  def sharing; end

  # source://activesupport//lib/active_support/concurrency/share_lock.rb#76
  def start_exclusive(purpose: T.unsafe(nil), compatible: T.unsafe(nil), no_wait: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/concurrency/share_lock.rb#114
  def start_sharing; end

  # source://activesupport//lib/active_support/concurrency/share_lock.rb#96
  def stop_exclusive(compatible: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/concurrency/share_lock.rb#131
  def stop_sharing; end

  # source://activesupport//lib/active_support/concurrency/share_lock.rb#171
  def yield_shares(purpose: T.unsafe(nil), compatible: T.unsafe(nil), block_share: T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/concurrency/share_lock.rb#204
  def busy_for_exclusive?(purpose); end

  # source://activesupport//lib/active_support/concurrency/share_lock.rb#209
  def busy_for_sharing?(purpose); end

  # source://activesupport//lib/active_support/concurrency/share_lock.rb#214
  def eligible_waiters?(compatible); end

  # source://activesupport//lib/active_support/concurrency/share_lock.rb#218
  def wait_for(method, &block); end
end

# source://activesupport//lib/active_support/concurrency/load_interlock_aware_monitor.rb#36
class ActiveSupport::Concurrency::ThreadLoadInterlockAwareMonitor
  include ::ActiveSupport::Concurrency::LoadInterlockAwareMonitorMixin

  # source://activesupport//lib/active_support/concurrency/load_interlock_aware_monitor.rb#39
  def initialize; end

  # source://activesupport//lib/active_support/concurrency/load_interlock_aware_monitor.rb#13
  def mon_enter; end

  private

  # source://activesupport//lib/active_support/concurrency/load_interlock_aware_monitor.rb#60
  def mon_exit; end

  # source://activesupport//lib/active_support/concurrency/load_interlock_aware_monitor.rb#46
  def mon_try_enter; end
end

# source://activesupport//lib/active_support/configurable.rb#11
module ActiveSupport::Configurable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveSupport::Configurable::ClassMethods

  # source://activesupport//lib/active_support/configurable.rb#155
  def config; end
end

# source://activesupport//lib/active_support/configurable.rb#29
module ActiveSupport::Configurable::ClassMethods
  # source://activesupport//lib/active_support/configurable.rb#30
  def config; end

  # source://activesupport//lib/active_support/configurable.rb#39
  def configure; end

  private

  # source://activesupport//lib/active_support/configurable.rb#111
  def config_accessor(*names, instance_reader: T.unsafe(nil), instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/configurable.rb#132
  def inherited(subclass); end
end

# source://activesupport//lib/active_support/configurable.rb#14
class ActiveSupport::Configurable::Configuration < ::ActiveSupport::InheritableOptions
  # source://activesupport//lib/active_support/configurable.rb#15
  def compile_methods!; end

  class << self
    # source://activesupport//lib/active_support/configurable.rb#20
    def compile_methods!(keys); end
  end
end

# source://activesupport//lib/active_support/configuration_file.rb#9
class ActiveSupport::ConfigurationFile
  # source://activesupport//lib/active_support/configuration_file.rb#12
  def initialize(content_path); end

  # source://activesupport//lib/active_support/configuration_file.rb#21
  def parse(context: T.unsafe(nil), **options); end

  private

  # source://activesupport//lib/active_support/configuration_file.rb#35
  def read(content_path); end

  # source://activesupport//lib/active_support/configuration_file.rb#46
  def render(context); end

  class << self
    # source://activesupport//lib/active_support/configuration_file.rb#17
    def parse(content_path, **options); end
  end
end

# source://activesupport//lib/active_support/configuration_file.rb#10
class ActiveSupport::ConfigurationFile::FormatError < ::StandardError; end

# source://activesupport//lib/active_support/core_ext/erb/util.rb#6
module ActiveSupport::CoreExt; end

# source://activesupport//lib/active_support/core_ext/erb/util.rb#7
module ActiveSupport::CoreExt::ERBUtil
  # source://activesupport//lib/active_support/core_ext/erb/util.rb#25
  def h(s); end

  # source://activesupport//lib/active_support/core_ext/erb/util.rb#25
  def html_escape(s); end

  # source://activesupport//lib/active_support/core_ext/erb/util.rb#10
  def unwrapped_html_escape(s); end
end

# source://activesupport//lib/active_support/core_ext/erb/util.rb#31
module ActiveSupport::CoreExt::ERBUtilPrivate
  include ::ActiveSupport::CoreExt::ERBUtil

  private

  # source://activesupport//lib/active_support/core_ext/erb/util.rb#25
  def h(s); end

  # source://activesupport//lib/active_support/core_ext/erb/util.rb#25
  def html_escape(s); end

  # source://activesupport//lib/active_support/core_ext/erb/util.rb#10
  def unwrapped_html_escape(s); end
end

# source://activesupport//lib/active_support/current_attributes.rb#92
class ActiveSupport::CurrentAttributes
  include ::ActiveSupport::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker

  # source://activesupport//lib/active_support/current_attributes.rb#196
  def initialize; end

  # source://activesupport//lib/active_support/callbacks.rb#70
  def __callbacks; end

  # source://activesupport//lib/active_support/callbacks.rb#70
  def __callbacks?; end

  # source://activesupport//lib/active_support/callbacks.rb#924
  def _reset_callbacks; end

  # source://activesupport//lib/active_support/callbacks.rb#912
  def _run_reset_callbacks(&block); end

  # source://activesupport//lib/active_support/current_attributes.rb#194
  def attributes; end

  # source://activesupport//lib/active_support/current_attributes.rb#194
  def attributes=(_arg0); end

  # source://activesupport//lib/active_support/current_attributes.rb#192
  def defaults; end

  # source://activesupport//lib/active_support/current_attributes.rb#192
  def defaults?; end

  # source://activesupport//lib/active_support/current_attributes.rb#215
  def reset; end

  # source://activesupport//lib/active_support/current_attributes.rb#210
  def set(attributes, &block); end

  private

  # source://activesupport//lib/active_support/current_attributes.rb#222
  def resolve_defaults; end

  class << self
    # source://activesupport//lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activesupport//lib/active_support/callbacks.rb#70
    def __callbacks=(value); end

    # source://activesupport//lib/active_support/callbacks.rb#70
    def __callbacks?; end

    # source://activesupport//lib/active_support/callbacks.rb#916
    def _reset_callbacks; end

    # source://activesupport//lib/active_support/callbacks.rb#920
    def _reset_callbacks=(value); end

    # source://activesupport//lib/active_support/current_attributes.rb#147
    def after_reset(*methods, &block); end

    # source://activesupport//lib/active_support/current_attributes.rb#112
    def attribute(*names, default: T.unsafe(nil)); end

    # source://activesupport//lib/active_support/current_attributes.rb#142
    def before_reset(*methods, &block); end

    # source://activesupport//lib/active_support/current_attributes.rb#158
    def clear_all; end

    # source://activesupport//lib/active_support/current_attributes.rb#192
    def defaults; end

    # source://activesupport//lib/active_support/current_attributes.rb#192
    def defaults=(value); end

    # source://activesupport//lib/active_support/current_attributes.rb#192
    def defaults?; end

    # source://activesupport//lib/active_support/current_attributes.rb#100
    def instance; end

    # source://activesupport//lib/active_support/current_attributes.rb#152
    def reset(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/current_attributes.rb#154
    def reset_all; end

    # source://activesupport//lib/active_support/current_attributes.rb#147
    def resets(*methods, &block); end

    # source://activesupport//lib/active_support/current_attributes.rb#152
    def set(*_arg0, **_arg1, &_arg2); end

    private

    # source://activesupport//lib/active_support/current_attributes.rb#168
    def current_instances; end

    # source://activesupport//lib/active_support/current_attributes.rb#172
    def current_instances_key; end

    # source://activesupport//lib/active_support/current_attributes.rb#164
    def generated_attribute_methods; end

    # source://activesupport//lib/active_support/current_attributes.rb#184
    def method_added(name); end

    # source://activesupport//lib/active_support/current_attributes.rb#176
    def method_missing(name, *_arg1, **_arg2, &_arg3); end

    # source://activesupport//lib/active_support/current_attributes.rb#180
    def respond_to_missing?(name, _); end
  end
end

# source://activesupport//lib/active_support/current_attributes.rb#96
ActiveSupport::CurrentAttributes::INVALID_ATTRIBUTE_NAMES = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/deep_mergeable.rb#6
module ActiveSupport::DeepMergeable
  # source://activesupport//lib/active_support/deep_mergeable.rb#29
  def deep_merge(other, &block); end

  # source://activesupport//lib/active_support/deep_mergeable.rb#34
  def deep_merge!(other, &block); end

  # source://activesupport//lib/active_support/deep_mergeable.rb#49
  def deep_merge?(other); end
end

# source://activesupport//lib/active_support/delegation.rb#16
module ActiveSupport::Delegation
  class << self
    # source://activesupport//lib/active_support/delegation.rb#23
    def generate(owner, methods, location: T.unsafe(nil), to: T.unsafe(nil), prefix: T.unsafe(nil), allow_nil: T.unsafe(nil), nilable: T.unsafe(nil), private: T.unsafe(nil), as: T.unsafe(nil), signature: T.unsafe(nil)); end

    # source://activesupport//lib/active_support/delegation.rb#152
    def generate_method_missing(owner, target, allow_nil: T.unsafe(nil)); end
  end
end

# source://activesupport//lib/active_support/delegation.rb#20
ActiveSupport::Delegation::RESERVED_METHOD_NAMES = T.let(T.unsafe(nil), Set)

# source://activesupport//lib/active_support/delegation.rb#17
ActiveSupport::Delegation::RUBY_RESERVED_KEYWORDS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/delegation.rb#8
class ActiveSupport::DelegationError < ::NoMethodError
  class << self
    # source://activesupport//lib/active_support/delegation.rb#10
    def nil_target(method_name, target); end
  end
end

# source://activesupport//lib/active_support/dependencies/interlock.rb#6
module ActiveSupport::Dependencies
  class << self
    # source://activesupport//lib/active_support/dependencies.rb#62
    def _autoloaded_tracked_classes; end

    # source://activesupport//lib/active_support/dependencies.rb#62
    def _autoloaded_tracked_classes=(_arg0); end

    # source://activesupport//lib/active_support/dependencies.rb#56
    def _eager_load_paths; end

    # source://activesupport//lib/active_support/dependencies.rb#56
    def _eager_load_paths=(_arg0); end

    # source://activesupport//lib/active_support/dependencies.rb#49
    def autoload_once_paths; end

    # source://activesupport//lib/active_support/dependencies.rb#49
    def autoload_once_paths=(_arg0); end

    # source://activesupport//lib/active_support/dependencies.rb#43
    def autoload_paths; end

    # source://activesupport//lib/active_support/dependencies.rb#43
    def autoload_paths=(_arg0); end

    # source://activesupport//lib/active_support/dependencies.rb#69
    def autoloader; end

    # source://activesupport//lib/active_support/dependencies.rb#69
    def autoloader=(_arg0); end

    # source://activesupport//lib/active_support/dependencies.rb#76
    def clear; end

    # source://activesupport//lib/active_support/dependencies.rb#94
    def eager_load?(path); end

    # source://activesupport//lib/active_support/dependencies.rb#10
    def interlock; end

    # source://activesupport//lib/active_support/dependencies.rb#10
    def interlock=(_arg0); end

    # source://activesupport//lib/active_support/dependencies.rb#24
    def load_interlock(&block); end

    # source://activesupport//lib/active_support/dependencies.rb#17
    def run_interlock(&block); end

    # source://activesupport//lib/active_support/dependencies.rb#84
    def search_for_file(relpath); end

    # source://activesupport//lib/active_support/dependencies.rb#31
    def unload_interlock(&block); end
  end
end

# source://activesupport//lib/active_support/dependencies/interlock.rb#7
class ActiveSupport::Dependencies::Interlock
  # source://activesupport//lib/active_support/dependencies/interlock.rb#8
  def initialize; end

  # source://activesupport//lib/active_support/dependencies/interlock.rb#32
  def done_running; end

  # source://activesupport//lib/active_support/dependencies/interlock.rb#24
  def done_unloading; end

  # source://activesupport//lib/active_support/dependencies/interlock.rb#12
  def loading(&block); end

  # source://activesupport//lib/active_support/dependencies/interlock.rb#40
  def permit_concurrent_loads(&block); end

  # source://activesupport//lib/active_support/dependencies/interlock.rb#44
  def raw_state(&block); end

  # source://activesupport//lib/active_support/dependencies/interlock.rb#36
  def running(&block); end

  # source://activesupport//lib/active_support/dependencies/interlock.rb#28
  def start_running; end

  # source://activesupport//lib/active_support/dependencies/interlock.rb#20
  def start_unloading; end

  # source://activesupport//lib/active_support/dependencies/interlock.rb#16
  def unloading(&block); end
end

# source://activesupport//lib/active_support/dependencies/require_dependency.rb#3
module ActiveSupport::Dependencies::RequireDependency
  # source://activesupport//lib/active_support/dependencies/require_dependency.rb#11
  def require_dependency(filename); end
end

# source://activesupport//lib/active_support/deprecation.rb#33
class ActiveSupport::Deprecation
  include ::ActiveSupport::Deprecation::Behavior
  include ::ActiveSupport::Deprecation::Reporting
  include ::ActiveSupport::Deprecation::Disallowed
  include ::ActiveSupport::Deprecation::MethodWrapper

  # source://activesupport//lib/active_support/deprecation.rb#71
  def initialize(deprecation_horizon = T.unsafe(nil), gem_name = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/deprecation.rb#65
  def deprecation_horizon; end

  # source://activesupport//lib/active_support/deprecation.rb#65
  def deprecation_horizon=(_arg0); end

  class << self
    # source://activesupport//lib/active_support/deprecation.rb#60
    def _instance; end
  end
end

# source://activesupport//lib/active_support/deprecation/behaviors.rb#69
module ActiveSupport::Deprecation::Behavior
  # source://activesupport//lib/active_support/deprecation/behaviors.rb#74
  def behavior; end

  # source://activesupport//lib/active_support/deprecation/behaviors.rb#111
  def behavior=(behavior); end

  # source://activesupport//lib/active_support/deprecation/behaviors.rb#71
  def debug; end

  # source://activesupport//lib/active_support/deprecation/behaviors.rb#71
  def debug=(_arg0); end

  # source://activesupport//lib/active_support/deprecation/behaviors.rb#79
  def disallowed_behavior; end

  # source://activesupport//lib/active_support/deprecation/behaviors.rb#119
  def disallowed_behavior=(behavior); end

  private

  # source://activesupport//lib/active_support/deprecation/behaviors.rb#124
  def arity_coerce(behavior); end

  # source://activesupport//lib/active_support/deprecation/behaviors.rb#143
  def arity_of_callable(callable); end
end

# source://activesupport//lib/active_support/deprecation/behaviors.rb#13
ActiveSupport::Deprecation::DEFAULT_BEHAVIORS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/deprecation/constant_accessor.rb#5
module ActiveSupport::Deprecation::DeprecatedConstantAccessor
  class << self
    # source://activesupport//lib/active_support/deprecation/constant_accessor.rb#6
    def included(base); end
  end
end

# source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#120
class ActiveSupport::Deprecation::DeprecatedConstantProxy < ::Module
  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#128
  def initialize(old_const, new_const, deprecator, message: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#158
  def append_features(base); end

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#154
  def class; end

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#168
  def extended(base); end

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#147
  def hash(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#141
  def inspect; end

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#147
  def instance_methods(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#147
  def name(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#163
  def prepend_features(base); end

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#147
  def respond_to?(*_arg0, **_arg1, &_arg2); end

  private

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#178
  def const_missing(name); end

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#183
  def method_missing(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#174
  def target; end

  class << self
    # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#121
    def new(*args, **options, &block); end
  end
end

# source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#87
class ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy < ::ActiveSupport::Deprecation::DeprecationProxy
  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#88
  def initialize(instance, method, var = T.unsafe(nil), deprecator:); end

  private

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#96
  def target; end

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#100
  def warn(callstack, called, args); end
end

# source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#38
class ActiveSupport::Deprecation::DeprecatedObjectProxy < ::ActiveSupport::Deprecation::DeprecationProxy
  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#39
  def initialize(object, message, deprecator); end

  private

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#46
  def target; end

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#50
  def warn(callstack, called, args); end
end

# source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#5
class ActiveSupport::Deprecation::DeprecationProxy
  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#17
  def inspect; end

  private

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#22
  def method_missing(called, *args, &block); end

  class << self
    # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#6
    def new(*args, **kwargs, &block); end
  end
end

# source://activesupport//lib/active_support/deprecation/deprecators.rb#9
class ActiveSupport::Deprecation::Deprecators
  # source://activesupport//lib/active_support/deprecation/deprecators.rb#10
  def initialize; end

  # source://activesupport//lib/active_support/deprecation/deprecators.rb#16
  def [](name); end

  # source://activesupport//lib/active_support/deprecation/deprecators.rb#34
  def []=(name, deprecator); end

  # source://activesupport//lib/active_support/deprecation/deprecators.rb#60
  def behavior=(behavior); end

  # source://activesupport//lib/active_support/deprecation/deprecators.rb#52
  def debug=(debug); end

  # source://activesupport//lib/active_support/deprecation/deprecators.rb#68
  def disallowed_behavior=(disallowed_behavior); end

  # source://activesupport//lib/active_support/deprecation/deprecators.rb#76
  def disallowed_warnings=(disallowed_warnings); end

  # source://activesupport//lib/active_support/deprecation/deprecators.rb#41
  def each(&block); end

  # source://activesupport//lib/active_support/deprecation/deprecators.rb#84
  def silence(&block); end

  # source://activesupport//lib/active_support/deprecation/deprecators.rb#47
  def silenced=(silenced); end

  private

  # source://activesupport//lib/active_support/deprecation/deprecators.rb#97
  def apply_options(deprecator); end

  # source://activesupport//lib/active_support/deprecation/deprecators.rb#92
  def set_option(name, value); end
end

# source://activesupport//lib/active_support/deprecation/disallowed.rb#5
module ActiveSupport::Deprecation::Disallowed
  # source://activesupport//lib/active_support/deprecation/disallowed.rb#21
  def disallowed_warnings; end

  # source://activesupport//lib/active_support/deprecation/disallowed.rb#17
  def disallowed_warnings=(_arg0); end

  private

  # source://activesupport//lib/active_support/deprecation/disallowed.rb#26
  def deprecation_disallowed?(message); end

  # source://activesupport//lib/active_support/deprecation/disallowed.rb#39
  def explicitly_allowed?(message); end
end

# source://activesupport//lib/active_support/deprecation.rb#57
ActiveSupport::Deprecation::MUTEX = T.let(T.unsafe(nil), Thread::Mutex)

# source://activesupport//lib/active_support/deprecation/method_wrappers.rb#8
module ActiveSupport::Deprecation::MethodWrapper
  # source://activesupport//lib/active_support/deprecation/method_wrappers.rb#35
  def deprecate_methods(target_module, *method_names); end
end

# source://activesupport//lib/active_support/deprecation/reporting.rb#7
module ActiveSupport::Deprecation::Reporting
  # source://activesupport//lib/active_support/deprecation/reporting.rb#89
  def allow(allowed_warnings = T.unsafe(nil), if: T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/deprecation/reporting.rb#48
  def begin_silence; end

  # source://activesupport//lib/active_support/deprecation/reporting.rb#99
  def deprecation_warning(deprecated_method_name, message = T.unsafe(nil), caller_backtrace = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/deprecation/reporting.rb#52
  def end_silence; end

  # source://activesupport//lib/active_support/deprecation/reporting.rb#11
  def gem_name; end

  # source://activesupport//lib/active_support/deprecation/reporting.rb#11
  def gem_name=(_arg0); end

  # source://activesupport//lib/active_support/deprecation/reporting.rb#41
  def silence(&block); end

  # source://activesupport//lib/active_support/deprecation/reporting.rb#56
  def silenced; end

  # source://activesupport//lib/active_support/deprecation/reporting.rb#9
  def silenced=(_arg0); end

  # source://activesupport//lib/active_support/deprecation/reporting.rb#18
  def warn(message = T.unsafe(nil), callstack = T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/deprecation/reporting.rb#153
  def _extract_callstack(callstack); end

  # source://activesupport//lib/active_support/deprecation/reporting.rb#115
  def deprecated_method_warning(method_name, message = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/deprecation/reporting.rb#129
  def deprecation_caller_message(callstack); end

  # source://activesupport//lib/active_support/deprecation/reporting.rb#124
  def deprecation_message(callstack, message = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/deprecation/reporting.rb#140
  def extract_callstack(callstack); end

  # source://activesupport//lib/active_support/deprecation/reporting.rb#174
  def ignored_callstack?(path); end
end

# source://activesupport//lib/active_support/deprecation/reporting.rb#172
ActiveSupport::Deprecation::Reporting::LIB_DIR = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/deprecation/reporting.rb#171
ActiveSupport::Deprecation::Reporting::RAILS_GEM_ROOT = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/deprecation/behaviors.rb#8
class ActiveSupport::DeprecationException < ::StandardError; end

# source://activesupport//lib/active_support/descendants_tracker.rb#14
module ActiveSupport::DescendantsTracker
  # source://activesupport//lib/active_support/descendants_tracker.rb#107
  def descendants; end

  class << self
    # source://activesupport//lib/active_support/descendants_tracker.rb#78
    def clear(classes); end

    # source://activesupport//lib/active_support/descendants_tracker.rb#102
    def descendants(klass); end

    # source://activesupport//lib/active_support/descendants_tracker.rb#69
    def disable_clear!; end

    # source://activesupport//lib/active_support/descendants_tracker.rb#89
    def reject!(classes); end

    # source://activesupport//lib/active_support/descendants_tracker.rb#98
    def subclasses(klass); end
  end
end

# source://activesupport//lib/active_support/descendants_tracker.rb#58
module ActiveSupport::DescendantsTracker::ReloadedClassesFiltering
  # source://activesupport//lib/active_support/descendants_tracker.rb#63
  def descendants; end

  # source://activesupport//lib/active_support/descendants_tracker.rb#59
  def subclasses; end
end

# source://activesupport//lib/active_support/descendants_tracker.rb#20
class ActiveSupport::DescendantsTracker::WeakSet < ::ObjectSpace::WeakMap
  # source://activesupport//lib/active_support/descendants_tracker.rb#23
  def <<(object); end

  def to_a; end
end

# source://activesupport//lib/active_support/digest.rb#6
class ActiveSupport::Digest
  class << self
    # source://activesupport//lib/active_support/digest.rb#8
    def hash_digest_class; end

    # source://activesupport//lib/active_support/digest.rb#12
    def hash_digest_class=(klass); end

    # source://activesupport//lib/active_support/digest.rb#17
    def hexdigest(arg); end
  end
end

# source://activesupport//lib/active_support/duration.rb#14
class ActiveSupport::Duration
  # source://activesupport//lib/active_support/duration.rb#226
  def initialize(value, parts, variable = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#312
  def %(other); end

  # source://activesupport//lib/active_support/duration.rb#287
  def *(other); end

  # source://activesupport//lib/active_support/duration.rb#268
  def +(other); end

  # source://activesupport//lib/active_support/duration.rb#326
  def +@; end

  # source://activesupport//lib/active_support/duration.rb#282
  def -(other); end

  # source://activesupport//lib/active_support/duration.rb#322
  def -@; end

  # source://activesupport//lib/active_support/duration.rb#298
  def /(other); end

  # source://activesupport//lib/active_support/duration.rb#258
  def <=>(other); end

  # source://activesupport//lib/active_support/duration.rb#341
  def ==(other); end

  # source://activesupport//lib/active_support/duration.rb#481
  def _parts; end

  # source://activesupport//lib/active_support/duration.rb#224
  def abs(&_arg0); end

  # source://activesupport//lib/active_support/duration.rb#436
  def after(time = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#444
  def ago(time = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#459
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#444
  def before(time = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#245
  def coerce(other); end

  # source://activesupport//lib/active_support/duration.rb#467
  def encode_with(coder); end

  # source://activesupport//lib/active_support/duration.rb#426
  def eql?(other); end

  # source://activesupport//lib/active_support/duration.rb#436
  def from_now(time = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#430
  def hash; end

  # source://activesupport//lib/active_support/duration.rb#399
  def in_days; end

  # source://activesupport//lib/active_support/duration.rb#392
  def in_hours; end

  # source://activesupport//lib/active_support/duration.rb#385
  def in_minutes; end

  # source://activesupport//lib/active_support/duration.rb#413
  def in_months; end

  # source://activesupport//lib/active_support/duration.rb#377
  def in_seconds; end

  # source://activesupport//lib/active_support/duration.rb#406
  def in_weeks; end

  # source://activesupport//lib/active_support/duration.rb#420
  def in_years; end

  # source://activesupport//lib/active_support/duration.rb#463
  def init_with(coder); end

  # source://activesupport//lib/active_support/duration.rb#450
  def inspect; end

  # source://activesupport//lib/active_support/duration.rb#335
  def instance_of?(klass); end

  # source://activesupport//lib/active_support/duration.rb#330
  def is_a?(klass); end

  # source://activesupport//lib/active_support/duration.rb#473
  def iso8601(precision: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#330
  def kind_of?(klass); end

  # source://activesupport//lib/active_support/duration.rb#224
  def negative?(&_arg0); end

  # source://activesupport//lib/active_support/duration.rb#241
  def parts; end

  # source://activesupport//lib/active_support/duration.rb#224
  def positive?(&_arg0); end

  # source://activesupport//lib/active_support/duration.rb#436
  def since(time = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#224
  def to_f(&_arg0); end

  # source://activesupport//lib/active_support/duration.rb#377
  def to_i; end

  # source://activesupport//lib/active_support/duration.rb#353
  def to_s; end

  # source://activesupport//lib/active_support/duration.rb#444
  def until(time = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#133
  def value; end

  # source://activesupport//lib/active_support/duration.rb#477
  def variable?; end

  # source://activesupport//lib/active_support/duration.rb#224
  def zero?(&_arg0); end

  private

  # source://activesupport//lib/active_support/duration.rb#512
  def method_missing(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/duration.rb#516
  def raise_type_error(other); end

  # source://activesupport//lib/active_support/duration.rb#508
  def respond_to_missing?(method, _); end

  # source://activesupport//lib/active_support/duration.rb#486
  def sum(sign, time = T.unsafe(nil)); end

  class << self
    # source://activesupport//lib/active_support/duration.rb#149
    def ===(other); end

    # source://activesupport//lib/active_support/duration.rb#189
    def build(value); end

    # source://activesupport//lib/active_support/duration.rb#167
    def days(value); end

    # source://activesupport//lib/active_support/duration.rb#163
    def hours(value); end

    # source://activesupport//lib/active_support/duration.rb#159
    def minutes(value); end

    # source://activesupport//lib/active_support/duration.rb#175
    def months(value); end

    # source://activesupport//lib/active_support/duration.rb#144
    def parse(iso8601duration); end

    # source://activesupport//lib/active_support/duration.rb#155
    def seconds(value); end

    # source://activesupport//lib/active_support/duration.rb#171
    def weeks(value); end

    # source://activesupport//lib/active_support/duration.rb#179
    def years(value); end

    private

    # source://activesupport//lib/active_support/duration.rb#217
    def calculate_total_seconds(parts); end
  end
end

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#12
class ActiveSupport::Duration::ISO8601Parser
  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#34
  def initialize(string); end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#32
  def mode; end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#32
  def mode=(_arg0); end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#41
  def parse!; end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#31
  def parts; end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#31
  def scanner; end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#32
  def sign; end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#32
  def sign=(_arg0); end

  private

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#83
  def finished?; end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#88
  def number; end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#96
  def raise_parsing_error(reason = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#92
  def scan(pattern); end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#101
  def validate!; end
end

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#17
ActiveSupport::Duration::ISO8601Parser::COMMA = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#22
ActiveSupport::Duration::ISO8601Parser::DATE_COMPONENT = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#28
ActiveSupport::Duration::ISO8601Parser::DATE_COMPONENTS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#20
ActiveSupport::Duration::ISO8601Parser::DATE_MARKER = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#25
ActiveSupport::Duration::ISO8601Parser::DATE_TO_PART = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#16
ActiveSupport::Duration::ISO8601Parser::PERIOD = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#15
ActiveSupport::Duration::ISO8601Parser::PERIOD_OR_COMMA = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#13
class ActiveSupport::Duration::ISO8601Parser::ParsingError < ::ArgumentError; end

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#19
ActiveSupport::Duration::ISO8601Parser::SIGN_MARKER = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#23
ActiveSupport::Duration::ISO8601Parser::TIME_COMPONENT = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#29
ActiveSupport::Duration::ISO8601Parser::TIME_COMPONENTS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#21
ActiveSupport::Duration::ISO8601Parser::TIME_MARKER = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#26
ActiveSupport::Duration::ISO8601Parser::TIME_TO_PART = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/duration/iso8601_serializer.rb#6
class ActiveSupport::Duration::ISO8601Serializer
  # source://activesupport//lib/active_support/duration/iso8601_serializer.rb#9
  def initialize(duration, precision: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration/iso8601_serializer.rb#15
  def serialize; end

  private

  # source://activesupport//lib/active_support/duration/iso8601_serializer.rb#55
  def format_seconds(seconds); end

  # source://activesupport//lib/active_support/duration/iso8601_serializer.rb#38
  def normalize; end

  # source://activesupport//lib/active_support/duration/iso8601_serializer.rb#51
  def week_mixed_with_date?(parts); end
end

# source://activesupport//lib/active_support/duration/iso8601_serializer.rb#7
ActiveSupport::Duration::ISO8601Serializer::DATE_COMPONENTS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/duration.rb#130
ActiveSupport::Duration::PARTS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/duration.rb#120
ActiveSupport::Duration::PARTS_IN_SECONDS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/duration.rb#115
ActiveSupport::Duration::SECONDS_PER_DAY = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/duration.rb#114
ActiveSupport::Duration::SECONDS_PER_HOUR = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/duration.rb#113
ActiveSupport::Duration::SECONDS_PER_MINUTE = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/duration.rb#117
ActiveSupport::Duration::SECONDS_PER_MONTH = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/duration.rb#116
ActiveSupport::Duration::SECONDS_PER_WEEK = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/duration.rb#118
ActiveSupport::Duration::SECONDS_PER_YEAR = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/duration.rb#15
class ActiveSupport::Duration::Scalar < ::Numeric
  # source://activesupport//lib/active_support/duration.rb#19
  def initialize(value); end

  # source://activesupport//lib/active_support/duration.rb#85
  def %(other); end

  # source://activesupport//lib/active_support/duration.rb#66
  def *(other); end

  # source://activesupport//lib/active_support/duration.rb#41
  def +(other); end

  # source://activesupport//lib/active_support/duration.rb#53
  def -(other); end

  # source://activesupport//lib/active_support/duration.rb#27
  def -@; end

  # source://activesupport//lib/active_support/duration.rb#77
  def /(other); end

  # source://activesupport//lib/active_support/duration.rb#31
  def <=>(other); end

  # source://activesupport//lib/active_support/duration.rb#23
  def coerce(other); end

  # source://activesupport//lib/active_support/duration.rb#17
  def to_f(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/duration.rb#17
  def to_i(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/duration.rb#17
  def to_s(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/duration.rb#16
  def value; end

  # source://activesupport//lib/active_support/duration.rb#93
  def variable?; end

  private

  # source://activesupport//lib/active_support/duration.rb#98
  def calculate(op, other); end

  # source://activesupport//lib/active_support/duration.rb#108
  def raise_type_error(other); end
end

# source://activesupport//lib/active_support/duration.rb#131
ActiveSupport::Duration::VARIABLE_PARTS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/core_ext/range/each.rb#6
module ActiveSupport::EachTimeWithZone
  # source://activesupport//lib/active_support/core_ext/range/each.rb#7
  def each(&block); end

  # source://activesupport//lib/active_support/core_ext/range/each.rb#12
  def step(n = T.unsafe(nil), &block); end

  private

  # source://activesupport//lib/active_support/core_ext/range/each.rb#18
  def ensure_iteration_allowed; end
end

# source://activesupport//lib/active_support/encrypted_configuration.rb#35
class ActiveSupport::EncryptedConfiguration < ::ActiveSupport::EncryptedFile
  # source://activesupport//lib/active_support/encrypted_configuration.rb#48
  def initialize(config_path:, key_path:, env_key:, raise_if_missing_key:); end

  # source://activesupport//lib/active_support/encrypted_configuration.rb#75
  def config; end

  # source://activesupport//lib/active_support/encrypted_configuration.rb#79
  def inspect; end

  # source://activesupport//lib/active_support/delegation.rb#187
  def method_missing(method, *_arg1, **_arg2, &_arg3); end

  # source://activesupport//lib/active_support/encrypted_configuration.rb#56
  def read; end

  # source://activesupport//lib/active_support/encrypted_configuration.rb#63
  def validate!; end

  private

  # source://activesupport//lib/active_support/encrypted_configuration.rb#84
  def deep_transform(hash); end

  # source://activesupport//lib/active_support/encrypted_configuration.rb#98
  def deserialize(content); end

  # source://activesupport//lib/active_support/encrypted_configuration.rb#94
  def options; end

  # source://activesupport//lib/active_support/delegation.rb#179
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/encrypted_configuration.rb#36
class ActiveSupport::EncryptedConfiguration::InvalidContentError < ::RuntimeError
  # source://activesupport//lib/active_support/encrypted_configuration.rb#37
  def initialize(content_path); end

  # source://activesupport//lib/active_support/encrypted_configuration.rb#41
  def message; end
end

# source://activesupport//lib/active_support/encrypted_file.rb#8
class ActiveSupport::EncryptedFile
  # source://activesupport//lib/active_support/encrypted_file.rb#42
  def initialize(content_path:, key_path:, env_key:, raise_if_missing_key:); end

  # source://activesupport//lib/active_support/encrypted_file.rb#83
  def change(&block); end

  # source://activesupport//lib/active_support/encrypted_file.rb#40
  def content_path; end

  # source://activesupport//lib/active_support/encrypted_file.rb#40
  def env_key; end

  # source://activesupport//lib/active_support/encrypted_file.rb#52
  def key; end

  # source://activesupport//lib/active_support/encrypted_file.rb#58
  def key?; end

  # source://activesupport//lib/active_support/encrypted_file.rb#40
  def key_path; end

  # source://activesupport//lib/active_support/encrypted_file.rb#40
  def raise_if_missing_key; end

  # source://activesupport//lib/active_support/encrypted_file.rb#70
  def read; end

  # source://activesupport//lib/active_support/encrypted_file.rb#78
  def write(contents); end

  private

  # source://activesupport//lib/active_support/encrypted_file.rb#129
  def check_key_length; end

  # source://activesupport//lib/active_support/encrypted_file.rb#108
  def decrypt(contents); end

  # source://activesupport//lib/active_support/encrypted_file.rb#103
  def encrypt(contents); end

  # source://activesupport//lib/active_support/encrypted_file.rb#112
  def encryptor; end

  # source://activesupport//lib/active_support/encrypted_file.rb#125
  def handle_missing_key; end

  # source://activesupport//lib/active_support/encrypted_file.rb#117
  def read_env_key; end

  # source://activesupport//lib/active_support/encrypted_file.rb#121
  def read_key_file; end

  # source://activesupport//lib/active_support/encrypted_file.rb#89
  def writing(contents); end

  class << self
    # source://activesupport//lib/active_support/encrypted_file.rb#35
    def expected_key_length; end

    # source://activesupport//lib/active_support/encrypted_file.rb#31
    def generate_key; end
  end
end

# source://activesupport//lib/active_support/encrypted_file.rb#29
ActiveSupport::EncryptedFile::CIPHER = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/encrypted_file.rb#23
class ActiveSupport::EncryptedFile::InvalidKeyLengthError < ::RuntimeError
  # source://activesupport//lib/active_support/encrypted_file.rb#24
  def initialize; end
end

# source://activesupport//lib/active_support/encrypted_file.rb#9
class ActiveSupport::EncryptedFile::MissingContentError < ::RuntimeError
  # source://activesupport//lib/active_support/encrypted_file.rb#10
  def initialize(content_path); end
end

# source://activesupport//lib/active_support/encrypted_file.rb#15
class ActiveSupport::EncryptedFile::MissingKeyError < ::RuntimeError
  # source://activesupport//lib/active_support/encrypted_file.rb#16
  def initialize(key_path:, env_key:); end
end

# source://activesupport//lib/active_support/core_ext/enumerable.rb#4
module ActiveSupport::EnumerableCoreExt; end

# source://activesupport//lib/active_support/core_ext/enumerable.rb#5
module ActiveSupport::EnumerableCoreExt::Constants
  private

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#7
  def const_missing(name); end
end

# source://activesupport//lib/active_support/core_ext/enumerable.rb#25
ActiveSupport::EnumerableCoreExt::SoleItemExpectedError = Enumerable::SoleItemExpectedError

# source://activesupport//lib/active_support/environment_inquirer.rb#9
class ActiveSupport::EnvironmentInquirer < ::ActiveSupport::StringInquirer
  # source://activesupport//lib/active_support/environment_inquirer.rb#15
  def initialize(env); end

  # source://activesupport//lib/active_support/environment_inquirer.rb#29
  def development?; end

  # source://activesupport//lib/active_support/environment_inquirer.rb#36
  def local?; end

  # source://activesupport//lib/active_support/environment_inquirer.rb#29
  def production?; end

  # source://activesupport//lib/active_support/environment_inquirer.rb#29
  def test?; end
end

# source://activesupport//lib/active_support/environment_inquirer.rb#10
ActiveSupport::EnvironmentInquirer::DEFAULT_ENVIRONMENTS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/environment_inquirer.rb#13
ActiveSupport::EnvironmentInquirer::LOCAL_ENVIRONMENTS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/error_reporter.rb#26
class ActiveSupport::ErrorReporter
  # source://activesupport//lib/active_support/error_reporter.rb#35
  def initialize(*subscribers, logger: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/error_reporter.rb#31
  def debug_mode; end

  # source://activesupport//lib/active_support/error_reporter.rb#31
  def debug_mode=(_arg0); end

  # source://activesupport//lib/active_support/error_reporter.rb#185
  def disable(subscriber); end

  # source://activesupport//lib/active_support/error_reporter.rb#78
  def handle(*error_classes, severity: T.unsafe(nil), context: T.unsafe(nil), fallback: T.unsafe(nil), source: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/error_reporter.rb#31
  def logger; end

  # source://activesupport//lib/active_support/error_reporter.rb#31
  def logger=(_arg0); end

  # source://activesupport//lib/active_support/error_reporter.rb#114
  def record(*error_classes, severity: T.unsafe(nil), context: T.unsafe(nil), source: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/error_reporter.rb#210
  def report(error, handled: T.unsafe(nil), severity: T.unsafe(nil), context: T.unsafe(nil), source: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/error_reporter.rb#201
  def set_context(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/error_reporter.rb#161
  def subscribe(subscriber); end

  # source://activesupport//lib/active_support/error_reporter.rb#145
  def unexpected(error, severity: T.unsafe(nil), context: T.unsafe(nil), source: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/error_reporter.rb#176
  def unsubscribe(subscriber); end
end

# source://activesupport//lib/active_support/error_reporter.rb#29
ActiveSupport::ErrorReporter::DEFAULT_RESCUE = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/error_reporter.rb#28
ActiveSupport::ErrorReporter::DEFAULT_SOURCE = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/error_reporter.rb#27
ActiveSupport::ErrorReporter::SEVERITIES = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/error_reporter.rb#33
class ActiveSupport::ErrorReporter::UnexpectedError < ::Exception; end

# source://activesupport//lib/active_support/execution_context.rb#4
module ActiveSupport::ExecutionContext
  class << self
    # source://activesupport//lib/active_support/execution_context.rb#34
    def []=(key, value); end

    # source://activesupport//lib/active_support/execution_context.rb#7
    def after_change(&block); end

    # source://activesupport//lib/active_support/execution_context.rb#43
    def clear; end

    # source://activesupport//lib/active_support/execution_context.rb#13
    def set(**options); end

    # source://activesupport//lib/active_support/execution_context.rb#39
    def to_h; end

    private

    # source://activesupport//lib/active_support/execution_context.rb#48
    def store; end
  end
end

# source://activesupport//lib/active_support/execution_wrapper.rb#7
class ActiveSupport::ExecutionWrapper
  include ::ActiveSupport::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker

  # source://activesupport//lib/active_support/callbacks.rb#70
  def __callbacks; end

  # source://activesupport//lib/active_support/callbacks.rb#70
  def __callbacks?; end

  # source://activesupport//lib/active_support/callbacks.rb#924
  def _complete_callbacks; end

  # source://activesupport//lib/active_support/callbacks.rb#924
  def _run_callbacks; end

  # source://activesupport//lib/active_support/callbacks.rb#912
  def _run_complete_callbacks(&block); end

  # source://activesupport//lib/active_support/callbacks.rb#912
  def _run_run_callbacks(&block); end

  # source://activesupport//lib/active_support/execution_wrapper.rb#141
  def complete; end

  # source://activesupport//lib/active_support/execution_wrapper.rb#135
  def complete!; end

  # source://activesupport//lib/active_support/execution_wrapper.rb#127
  def run; end

  # source://activesupport//lib/active_support/execution_wrapper.rb#122
  def run!; end

  private

  # source://activesupport//lib/active_support/execution_wrapper.rb#146
  def hook_state; end

  class << self
    # source://activesupport//lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activesupport//lib/active_support/callbacks.rb#70
    def __callbacks=(value); end

    # source://activesupport//lib/active_support/callbacks.rb#70
    def __callbacks?; end

    # source://activesupport//lib/active_support/callbacks.rb#916
    def _complete_callbacks; end

    # source://activesupport//lib/active_support/callbacks.rb#920
    def _complete_callbacks=(value); end

    # source://activesupport//lib/active_support/callbacks.rb#916
    def _run_callbacks; end

    # source://activesupport//lib/active_support/callbacks.rb#920
    def _run_callbacks=(value); end

    # source://activesupport//lib/active_support/execution_wrapper.rb#118
    def active?; end

    # source://activesupport//lib/active_support/execution_wrapper.rb#114
    def active_key; end

    # source://activesupport//lib/active_support/execution_wrapper.rb#110
    def error_reporter; end

    # source://activesupport//lib/active_support/execution_wrapper.rb#100
    def perform; end

    # source://activesupport//lib/active_support/execution_wrapper.rb#50
    def register_hook(hook, outer: T.unsafe(nil)); end

    # source://activesupport//lib/active_support/execution_wrapper.rb#66
    def run!(reset: T.unsafe(nil)); end

    # source://activesupport//lib/active_support/execution_wrapper.rb#21
    def to_complete(*args, &block); end

    # source://activesupport//lib/active_support/execution_wrapper.rb#17
    def to_run(*args, &block); end

    # source://activesupport//lib/active_support/execution_wrapper.rb#86
    def wrap(source: T.unsafe(nil)); end
  end
end

# source://activesupport//lib/active_support/execution_wrapper.rb#32
class ActiveSupport::ExecutionWrapper::CompleteHook < ::Struct
  # source://activesupport//lib/active_support/execution_wrapper.rb#33
  def after(target); end

  # source://activesupport//lib/active_support/execution_wrapper.rb#33
  def before(target); end

  def hook; end
  def hook=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activesupport//lib/active_support/execution_wrapper.rb#10
ActiveSupport::ExecutionWrapper::Null = T.let(T.unsafe(nil), Object)

# source://activesupport//lib/active_support/execution_wrapper.rb#25
class ActiveSupport::ExecutionWrapper::RunHook < ::Struct
  # source://activesupport//lib/active_support/execution_wrapper.rb#26
  def before(target); end

  def hook; end
  def hook=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activesupport//lib/active_support/executor.rb#6
class ActiveSupport::Executor < ::ActiveSupport::ExecutionWrapper; end

# source://activesupport//lib/active_support/file_update_checker.rb#35
class ActiveSupport::FileUpdateChecker
  # source://activesupport//lib/active_support/file_update_checker.rb#44
  def initialize(files, dirs = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/file_update_checker.rb#82
  def execute; end

  # source://activesupport//lib/active_support/file_update_checker.rb#92
  def execute_if_updated; end

  # source://activesupport//lib/active_support/file_update_checker.rb#63
  def updated?; end

  private

  # source://activesupport//lib/active_support/file_update_checker.rb#158
  def compile_ext(array); end

  # source://activesupport//lib/active_support/file_update_checker.rb#144
  def compile_glob(hash); end

  # source://activesupport//lib/active_support/file_update_checker.rb#154
  def escape(key); end

  # source://activesupport//lib/active_support/file_update_checker.rb#122
  def max_mtime(paths); end

  # source://activesupport//lib/active_support/file_update_checker.rb#111
  def updated_at(paths); end

  # source://activesupport//lib/active_support/file_update_checker.rb#103
  def watched; end
end

# source://activesupport//lib/active_support/fork_tracker.rb#4
module ActiveSupport::ForkTracker
  class << self
    # source://activesupport//lib/active_support/fork_tracker.rb#31
    def after_fork(&block); end

    # source://activesupport//lib/active_support/fork_tracker.rb#19
    def after_fork_callback; end

    # source://activesupport//lib/active_support/fork_tracker.rb#27
    def hook!; end

    # source://activesupport//lib/active_support/fork_tracker.rb#36
    def unregister(callback); end
  end
end

# source://activesupport//lib/active_support/fork_tracker.rb#5
module ActiveSupport::ForkTracker::CoreExt
  # source://activesupport//lib/active_support/fork_tracker.rb#6
  def _fork; end
end

# source://activesupport//lib/active_support/gzip.rb#17
module ActiveSupport::Gzip
  class << self
    # source://activesupport//lib/active_support/gzip.rb#32
    def compress(source, level = T.unsafe(nil), strategy = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/gzip.rb#27
    def decompress(source); end
  end
end

# source://activesupport//lib/active_support/gzip.rb#18
class ActiveSupport::Gzip::Stream < ::StringIO
  # source://activesupport//lib/active_support/gzip.rb#19
  def initialize(*_arg0); end

  # source://activesupport//lib/active_support/gzip.rb#23
  def close; end
end

# source://activesupport//lib/active_support/hash_with_indifferent_access.rb#55
class ActiveSupport::HashWithIndifferentAccess < ::Hash
  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#70
  def initialize(constructor = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#168
  def [](key); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#98
  def []=(key, value); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#181
  def assoc(key); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#375
  def compact; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#319
  def deep_stringify_keys; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#317
  def deep_stringify_keys!; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#324
  def deep_symbolize_keys; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#223
  def default(key = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#303
  def delete(key); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#208
  def dig(*args); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#264
  def dup; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#311
  def except(*keys); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#58
  def extractable_options?; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#195
  def fetch(key, *extras); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#251
  def fetch_values(*indices, &block); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#151
  def has_key?(key); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#151
  def include?(key); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#151
  def key?(key); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#151
  def member?(key); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#273
  def merge(*hashes, &block); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#132
  def merge!(*other_hashes, &block); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#66
  def nested_under_indifferent_access; end

  def regular_update(*_arg0); end
  def regular_writer(_arg0, _arg1); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#332
  def reject(*args, &block); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#298
  def replace(other_hash); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#283
  def reverse_merge(other_hash); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#289
  def reverse_merge!(other_hash); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#327
  def select(*args, &block); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#365
  def slice(*keys); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#370
  def slice!(*keys); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#98
  def store(key, value); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#318
  def stringify_keys; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#316
  def stringify_keys!; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#322
  def symbolize_keys; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#380
  def to_hash; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#322
  def to_options; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#325
  def to_options!; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#390
  def to_proc; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#344
  def transform_keys(hash = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#349
  def transform_keys!(hash = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#337
  def transform_values(&block); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#132
  def update(*other_hashes, &block); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#237
  def values_at(*keys); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#283
  def with_defaults(other_hash); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#289
  def with_defaults!(other_hash); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#62
  def with_indifferent_access; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#311
  def without(*keys); end

  private

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#395
  def convert_key(key); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#399
  def convert_value(value, conversion: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#416
  def set_defaults(target); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#424
  def update_with_single_argument(other_hash, block); end

  class << self
    # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#85
    def [](*args); end
  end
end

# source://activesupport//lib/active_support/hash_with_indifferent_access.rb#342
ActiveSupport::HashWithIndifferentAccess::NOT_GIVEN = T.let(T.unsafe(nil), Object)

# source://activesupport//lib/active_support/html_safe_translation.rb#4
module ActiveSupport::HtmlSafeTranslation
  extend ::ActiveSupport::HtmlSafeTranslation

  # source://activesupport//lib/active_support/html_safe_translation.rb#30
  def html_safe_translation_key?(key); end

  # source://activesupport//lib/active_support/html_safe_translation.rb#7
  def translate(key, **options); end

  private

  # source://activesupport//lib/active_support/html_safe_translation.rb#35
  def html_escape_translation_options(options); end

  # source://activesupport//lib/active_support/html_safe_translation.rb#48
  def html_safe_translation(translation); end

  # source://activesupport//lib/active_support/html_safe_translation.rb#43
  def i18n_option?(name); end
end

# source://activesupport//lib/active_support/inflector/inflections.rb#7
module ActiveSupport::Inflector
  extend ::ActiveSupport::Inflector

  # source://activesupport//lib/active_support/inflector/methods.rb#70
  def camelize(term, uppercase_first_letter = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#218
  def classify(table_name); end

  # source://activesupport//lib/active_support/inflector/methods.rb#289
  def constantize(camel_cased_word); end

  # source://activesupport//lib/active_support/inflector/methods.rb#226
  def dasherize(underscored_word); end

  # source://activesupport//lib/active_support/inflector/methods.rb#256
  def deconstantize(path); end

  # source://activesupport//lib/active_support/inflector/methods.rb#238
  def demodulize(path); end

  # source://activesupport//lib/active_support/inflector/methods.rb#175
  def downcase_first(string); end

  # source://activesupport//lib/active_support/inflector/methods.rb#267
  def foreign_key(class_name, separate_class_name_and_id_with_underscore = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#135
  def humanize(lower_case_and_underscored_word, capitalize: T.unsafe(nil), keep_id_suffix: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#265
  def inflections(locale = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#334
  def ordinal(number); end

  # source://activesupport//lib/active_support/inflector/methods.rb#347
  def ordinalize(number); end

  # source://activesupport//lib/active_support/inflector/transliterate.rb#123
  def parameterize(string, separator: T.unsafe(nil), preserve_case: T.unsafe(nil), locale: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#33
  def pluralize(word, locale = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#315
  def safe_constantize(camel_cased_word); end

  # source://activesupport//lib/active_support/inflector/methods.rb#50
  def singularize(word, locale = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#204
  def tableize(class_name); end

  # source://activesupport//lib/active_support/inflector/methods.rb#192
  def titleize(word, keep_id_suffix: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/transliterate.rb#64
  def transliterate(string, replacement = T.unsafe(nil), locale: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#99
  def underscore(camel_cased_word); end

  # source://activesupport//lib/active_support/inflector/methods.rb#166
  def upcase_first(string); end

  private

  # source://activesupport//lib/active_support/inflector/methods.rb#376
  def apply_inflections(word, rules, locale = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#357
  def const_regexp(camel_cased_word); end
end

# source://activesupport//lib/active_support/inflector/transliterate.rb#8
ActiveSupport::Inflector::ALLOWED_ENCODINGS_FOR_TRANSLITERATE = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/inflector/inflections.rb#30
class ActiveSupport::Inflector::Inflections
  # source://activesupport//lib/active_support/inflector/inflections.rb#80
  def initialize; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#142
  def acronym(word); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#76
  def acronyms; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#78
  def acronyms_camelize_regex; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#78
  def acronyms_underscore_regex; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#231
  def clear(scope = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#220
  def human(rule, replacement); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#76
  def humans; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#174
  def irregular(singular, plural); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#151
  def plural(rule, replacement); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#76
  def plurals; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#161
  def singular(rule, replacement); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#76
  def singulars; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#208
  def uncountable(*words); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#76
  def uncountables; end

  private

  # source://activesupport//lib/active_support/inflector/inflections.rb#250
  def define_acronym_regex_patterns; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#86
  def initialize_dup(orig); end

  class << self
    # source://activesupport//lib/active_support/inflector/inflections.rb#65
    def instance(locale = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/inflector/inflections.rb#69
    def instance_or_fallback(locale); end
  end
end

# source://activesupport//lib/active_support/inflector/inflections.rb#33
class ActiveSupport::Inflector::Inflections::Uncountables < ::Array
  # source://activesupport//lib/active_support/inflector/inflections.rb#34
  def initialize; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#44
  def <<(*word); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#48
  def add(words); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#39
  def delete(entry); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#55
  def uncountable?(str); end

  private

  # source://activesupport//lib/active_support/inflector/inflections.rb#60
  def to_regex(string); end
end

# source://activesupport//lib/active_support/ordered_options.rb#89
class ActiveSupport::InheritableOptions < ::ActiveSupport::OrderedOptions
  # source://activesupport//lib/active_support/ordered_options.rb#90
  def initialize(parent = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/ordered_options.rb#107
  def ==(other); end

  # source://activesupport//lib/active_support/ordered_options.rb#142
  def each(&block); end

  # source://activesupport//lib/active_support/ordered_options.rb#134
  def inheritable_copy; end

  # source://activesupport//lib/active_support/ordered_options.rb#111
  def inspect; end

  # source://activesupport//lib/active_support/ordered_options.rb#126
  def key?(key); end

  # source://activesupport//lib/active_support/ordered_options.rb#130
  def overridden?(key); end

  # source://activesupport//lib/active_support/ordered_options.rb#119
  def pretty_print(pp); end

  # source://activesupport//lib/active_support/ordered_options.rb#138
  def to_a; end

  # source://activesupport//lib/active_support/ordered_options.rb#103
  def to_h; end

  # source://activesupport//lib/active_support/ordered_options.rb#115
  def to_s; end

  private

  def own_key?(_arg0); end
end

# source://activesupport//lib/active_support/isolated_execution_state.rb#6
module ActiveSupport::IsolatedExecutionState
  class << self
    # source://activesupport//lib/active_support/isolated_execution_state.rb#37
    def [](key); end

    # source://activesupport//lib/active_support/isolated_execution_state.rb#41
    def []=(key, value); end

    # source://activesupport//lib/active_support/isolated_execution_state.rb#53
    def clear; end

    # source://activesupport//lib/active_support/isolated_execution_state.rb#57
    def context; end

    # source://activesupport//lib/active_support/isolated_execution_state.rb#49
    def delete(key); end

    # source://activesupport//lib/active_support/isolated_execution_state.rb#13
    def isolation_level; end

    # source://activesupport//lib/active_support/isolated_execution_state.rb#15
    def isolation_level=(level); end

    # source://activesupport//lib/active_support/isolated_execution_state.rb#45
    def key?(key); end

    # source://activesupport//lib/active_support/isolated_execution_state.rb#13
    def scope; end

    # source://activesupport//lib/active_support/isolated_execution_state.rb#61
    def share_with(other); end

    # source://activesupport//lib/active_support/isolated_execution_state.rb#33
    def unique_id; end

    private

    # source://activesupport//lib/active_support/isolated_execution_state.rb#69
    def state; end
  end
end

# source://activesupport//lib/active_support/json/decoding.rb#11
module ActiveSupport::JSON
  class << self
    # source://activesupport//lib/active_support/json/decoding.rb#22
    def decode(json); end

    # source://activesupport//lib/active_support/json/encoding.rb#22
    def dump(value, options = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/json/encoding.rb#22
    def encode(value, options = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/json/decoding.rb#22
    def load(json); end

    # source://activesupport//lib/active_support/json/decoding.rb#43
    def parse_error; end

    private

    # source://activesupport//lib/active_support/json/decoding.rb#48
    def convert_dates_from(data); end
  end
end

# source://activesupport//lib/active_support/json/decoding.rb#14
ActiveSupport::JSON::DATETIME_REGEX = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/json/decoding.rb#13
ActiveSupport::JSON::DATE_REGEX = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/json/encoding.rb#28
module ActiveSupport::JSON::Encoding
  class << self
    # source://activesupport//lib/active_support/json/encoding.rb#103
    def escape_html_entities_in_json; end

    # source://activesupport//lib/active_support/json/encoding.rb#103
    def escape_html_entities_in_json=(_arg0); end

    # source://activesupport//lib/active_support/json/encoding.rb#111
    def json_encoder; end

    # source://activesupport//lib/active_support/json/encoding.rb#111
    def json_encoder=(_arg0); end

    # source://activesupport//lib/active_support/json/encoding.rb#107
    def time_precision; end

    # source://activesupport//lib/active_support/json/encoding.rb#107
    def time_precision=(_arg0); end

    # source://activesupport//lib/active_support/json/encoding.rb#99
    def use_standard_json_time_format; end

    # source://activesupport//lib/active_support/json/encoding.rb#99
    def use_standard_json_time_format=(_arg0); end
  end
end

# source://activesupport//lib/active_support/json/encoding.rb#29
class ActiveSupport::JSON::Encoding::JSONGemEncoder
  # source://activesupport//lib/active_support/json/encoding.rb#32
  def initialize(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/json/encoding.rb#37
  def encode(value); end

  # source://activesupport//lib/active_support/json/encoding.rb#30
  def options; end

  private

  # source://activesupport//lib/active_support/json/encoding.rb#70
  def jsonify(value); end

  # source://activesupport//lib/active_support/json/encoding.rb#91
  def stringify(jsonified); end
end

# source://activesupport//lib/active_support/key_generator.rb#13
class ActiveSupport::KeyGenerator
  # source://activesupport//lib/active_support/key_generator.rb#28
  def initialize(secret, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/key_generator.rb#41
  def generate_key(salt, key_size = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/key_generator.rb#45
  def inspect; end

  class << self
    # source://activesupport//lib/active_support/key_generator.rb#23
    def hash_digest_class; end

    # source://activesupport//lib/active_support/key_generator.rb#15
    def hash_digest_class=(klass); end
  end
end

# source://activesupport//lib/active_support/lazy_load_hooks.rb#43
module ActiveSupport::LazyLoadHooks
  # source://activesupport//lib/active_support/lazy_load_hooks.rb#60
  def on_load(name, options = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/lazy_load_hooks.rb#75
  def run_load_hooks(name, base = T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/lazy_load_hooks.rb#91
  def execute_hook(name, base, options, block); end

  # source://activesupport//lib/active_support/lazy_load_hooks.rb#83
  def with_execution_control(name, block, once); end

  class << self
    # source://activesupport//lib/active_support/lazy_load_hooks.rb#44
    def extended(base); end
  end
end

# source://activesupport//lib/active_support/log_subscriber.rb#64
class ActiveSupport::LogSubscriber < ::ActiveSupport::Subscriber
  # source://activesupport//lib/active_support/log_subscriber.rb#133
  def initialize; end

  # source://activesupport//lib/active_support/log_subscriber.rb#146
  def call(event); end

  # source://activesupport//lib/active_support/log_subscriber.rb#83
  def colorize_logging; end

  # source://activesupport//lib/active_support/log_subscriber.rb#83
  def colorize_logging=(val); end

  # source://activesupport//lib/active_support/log_subscriber.rb#163
  def debug(progname = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/log_subscriber.rb#163
  def error(progname = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/log_subscriber.rb#158
  def event_levels=(_arg0); end

  # source://activesupport//lib/active_support/log_subscriber.rb#163
  def fatal(progname = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/log_subscriber.rb#163
  def info(progname = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/log_subscriber.rb#138
  def logger; end

  # source://activesupport//lib/active_support/log_subscriber.rb#152
  def publish_event(event); end

  # source://activesupport//lib/active_support/log_subscriber.rb#142
  def silenced?(event); end

  # source://activesupport//lib/active_support/log_subscriber.rb#163
  def unknown(progname = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/log_subscriber.rb#163
  def warn(progname = T.unsafe(nil), &block); end

  private

  # source://activesupport//lib/active_support/log_subscriber.rb#172
  def color(text, color, mode_options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/log_subscriber.rb#186
  def log_exception(name, e); end

  # source://activesupport//lib/active_support/log_subscriber.rb#180
  def mode_from(options); end

  class << self
    # source://activesupport//lib/active_support/log_subscriber.rb#99
    def attach_to(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/log_subscriber.rb#83
    def colorize_logging; end

    # source://activesupport//lib/active_support/log_subscriber.rb#83
    def colorize_logging=(val); end

    # source://activesupport//lib/active_support/log_subscriber.rb#112
    def flush_all!; end

    # source://activesupport//lib/active_support/log_subscriber.rb#84
    def log_levels; end

    # source://activesupport//lib/active_support/log_subscriber.rb#84
    def log_levels=(value); end

    # source://activesupport//lib/active_support/log_subscriber.rb#84
    def log_levels?; end

    # source://activesupport//lib/active_support/log_subscriber.rb#107
    def log_subscribers; end

    # source://activesupport//lib/active_support/log_subscriber.rb#93
    def logger; end

    # source://activesupport//lib/active_support/log_subscriber.rb#105
    def logger=(_arg0); end

    private

    # source://activesupport//lib/active_support/log_subscriber.rb#117
    def fetch_public_methods(subscriber, inherit_all); end

    # source://activesupport//lib/active_support/log_subscriber.rb#121
    def set_event_levels; end

    # source://activesupport//lib/active_support/log_subscriber.rb#127
    def subscribe_log_level(method, level); end
  end
end

# source://activesupport//lib/active_support/log_subscriber.rb#74
ActiveSupport::LogSubscriber::BLACK = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/log_subscriber.rb#78
ActiveSupport::LogSubscriber::BLUE = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/log_subscriber.rb#80
ActiveSupport::LogSubscriber::CYAN = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/log_subscriber.rb#76
ActiveSupport::LogSubscriber::GREEN = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/log_subscriber.rb#86
ActiveSupport::LogSubscriber::LEVEL_CHECKS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/log_subscriber.rb#79
ActiveSupport::LogSubscriber::MAGENTA = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/log_subscriber.rb#66
ActiveSupport::LogSubscriber::MODES = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/log_subscriber.rb#75
ActiveSupport::LogSubscriber::RED = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/log_subscriber.rb#81
ActiveSupport::LogSubscriber::WHITE = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/log_subscriber.rb#77
ActiveSupport::LogSubscriber::YELLOW = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/logger.rb#8
class ActiveSupport::Logger < ::Logger
  include ::ActiveSupport::LoggerSilence
  include ::ActiveSupport::LoggerThreadSafeLevel

  # source://activesupport//lib/active_support/logger.rb#33
  def initialize(*args, **kwargs); end

  # source://activesupport//lib/active_support/logger_silence.rb#12
  def silencer; end

  # source://activesupport//lib/active_support/logger_silence.rb#12
  def silencer=(val); end

  class << self
    # source://activesupport//lib/active_support/logger.rb#20
    def logger_outputs_to?(logger, *sources); end

    # source://activesupport//lib/active_support/logger.rb#47
    def normalize_sources(sources); end

    # source://activesupport//lib/active_support/logger_silence.rb#12
    def silencer; end

    # source://activesupport//lib/active_support/logger_silence.rb#12
    def silencer=(val); end
  end
end

# source://activesupport//lib/active_support/logger.rb#39
class ActiveSupport::Logger::SimpleFormatter < ::Logger::Formatter
  # source://activesupport//lib/active_support/logger.rb#41
  def call(severity, timestamp, progname, msg); end
end

# source://activesupport//lib/active_support/logger_silence.rb#8
module ActiveSupport::LoggerSilence
  extend ::ActiveSupport::Concern
  include ::ActiveSupport::LoggerThreadSafeLevel

  # source://activesupport//lib/active_support/logger_silence.rb#17
  def silence(severity = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/logger_thread_safe_level.rb#7
module ActiveSupport::LoggerThreadSafeLevel
  extend ::ActiveSupport::Concern

  # source://activesupport//lib/active_support/logger_thread_safe_level.rb#30
  def level; end

  # source://activesupport//lib/active_support/logger_thread_safe_level.rb#10
  def local_level; end

  # source://activesupport//lib/active_support/logger_thread_safe_level.rb#14
  def local_level=(level); end

  # source://activesupport//lib/active_support/logger_thread_safe_level.rb#35
  def log_at(level); end

  private

  # source://activesupport//lib/active_support/logger_thread_safe_level.rb#43
  def local_level_key; end
end

# source://activesupport//lib/active_support/message_encryptor.rb#90
class ActiveSupport::MessageEncryptor < ::ActiveSupport::Messages::Codec
  include ::ActiveSupport::Messages::Rotator

  # source://activesupport//lib/active_support/messages/rotator.rb#6
  def initialize(*args, on_rotation: T.unsafe(nil), **options); end

  # source://activesupport//lib/active_support/message_encryptor.rb#256
  def create_message(value, **options); end

  # source://activesupport//lib/active_support/message_encryptor.rb#241
  def decrypt_and_verify(message, **options); end

  # source://activesupport//lib/active_support/message_encryptor.rb#220
  def encrypt_and_sign(value, **options); end

  # source://activesupport//lib/active_support/message_encryptor.rb#264
  def inspect; end

  # source://activesupport//lib/active_support/messages/rotator.rb#23
  def read_message(message, on_rotation: T.unsafe(nil), **options); end

  private

  # source://activesupport//lib/active_support/message_encryptor.rb#371
  def aead_mode; end

  # source://activesupport//lib/active_support/message_encryptor.rb#371
  def aead_mode?; end

  # source://activesupport//lib/active_support/message_encryptor.rb#295
  def decrypt(encrypted_message); end

  # source://activesupport//lib/active_support/message_encryptor.rb#277
  def encrypt(data); end

  # source://activesupport//lib/active_support/message_encryptor.rb#340
  def extract_part(encrypted_message, rindex, length); end

  # source://activesupport//lib/active_support/message_encryptor.rb#350
  def extract_parts(encrypted_message); end

  # source://activesupport//lib/active_support/message_encryptor.rb#336
  def join_parts(parts); end

  # source://activesupport//lib/active_support/message_encryptor.rb#320
  def length_after_encode(length_before_encode); end

  # source://activesupport//lib/active_support/message_encryptor.rb#332
  def length_of_encoded_auth_tag; end

  # source://activesupport//lib/active_support/message_encryptor.rb#328
  def length_of_encoded_iv; end

  # source://activesupport//lib/active_support/message_encryptor.rb#367
  def new_cipher; end

  # source://activesupport//lib/active_support/message_encryptor.rb#269
  def sign(data); end

  # source://activesupport//lib/active_support/message_encryptor.rb#273
  def verify(data); end

  class << self
    # source://activesupport//lib/active_support/message_encryptor.rb#96
    def default_cipher; end

    # source://activesupport//lib/active_support/message_encryptor.rb#252
    def key_len(cipher = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/message_encryptor.rb#93
    def use_authenticated_message_encryption; end

    # source://activesupport//lib/active_support/message_encryptor.rb#93
    def use_authenticated_message_encryption=(val); end
  end
end

# source://activesupport//lib/active_support/message_encryptor.rb#118
ActiveSupport::MessageEncryptor::AUTH_TAG_LENGTH = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/message_encryptor.rb#115
class ActiveSupport::MessageEncryptor::InvalidMessage < ::StandardError; end

# source://activesupport//lib/active_support/message_encryptor.rb#105
module ActiveSupport::MessageEncryptor::NullSerializer
  class << self
    # source://activesupport//lib/active_support/message_encryptor.rb#110
    def dump(value); end

    # source://activesupport//lib/active_support/message_encryptor.rb#106
    def load(value); end
  end
end

# source://activesupport//lib/active_support/message_encryptor.rb#116
ActiveSupport::MessageEncryptor::OpenSSLCipherError = OpenSSL::Cipher::CipherError

# source://activesupport//lib/active_support/message_encryptor.rb#119
ActiveSupport::MessageEncryptor::SEPARATOR = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/message_encryptors.rb#6
class ActiveSupport::MessageEncryptors < ::ActiveSupport::Messages::RotationCoordinator
  private

  # source://activesupport//lib/active_support/message_encryptors.rb#135
  def build(salt, secret_generator:, secret_generator_options:, **options); end
end

# source://activesupport//lib/active_support/message_verifier.rb#110
class ActiveSupport::MessageVerifier < ::ActiveSupport::Messages::Codec
  include ::ActiveSupport::Messages::Rotator

  # source://activesupport//lib/active_support/messages/rotator.rb#6
  def initialize(*args, on_rotation: T.unsafe(nil), **options); end

  # source://activesupport//lib/active_support/message_verifier.rb#308
  def create_message(value, **options); end

  # source://activesupport//lib/active_support/message_verifier.rb#304
  def generate(value, **options); end

  # source://activesupport//lib/active_support/message_verifier.rb#316
  def inspect; end

  # source://activesupport//lib/active_support/messages/rotator.rb#23
  def read_message(message, on_rotation: T.unsafe(nil), **options); end

  # source://activesupport//lib/active_support/message_verifier.rb#181
  def valid_message?(message); end

  # source://activesupport//lib/active_support/message_verifier.rb#222
  def verified(message, **options); end

  # source://activesupport//lib/active_support/message_verifier.rb#260
  def verify(message, **options); end

  private

  # source://activesupport//lib/active_support/message_verifier.rb#347
  def digest_length_in_hex; end

  # source://activesupport//lib/active_support/message_verifier.rb#364
  def digest_matches_data?(digest, data); end

  # source://activesupport//lib/active_support/message_verifier.rb#326
  def extract_encoded(signed); end

  # source://activesupport//lib/active_support/message_verifier.rb#343
  def generate_digest(data); end

  # source://activesupport//lib/active_support/message_verifier.rb#355
  def separator_at?(signed_message, index); end

  # source://activesupport//lib/active_support/message_verifier.rb#359
  def separator_index_for(signed_message); end

  # source://activesupport//lib/active_support/message_verifier.rb#321
  def sign_encoded(encoded); end
end

# source://activesupport//lib/active_support/message_verifier.rb#113
class ActiveSupport::MessageVerifier::InvalidSignature < ::StandardError; end

# source://activesupport//lib/active_support/message_verifier.rb#115
ActiveSupport::MessageVerifier::SEPARATOR = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/message_verifier.rb#116
ActiveSupport::MessageVerifier::SEPARATOR_LENGTH = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/message_verifiers.rb#6
class ActiveSupport::MessageVerifiers < ::ActiveSupport::Messages::RotationCoordinator
  private

  # source://activesupport//lib/active_support/message_verifiers.rb#131
  def build(salt, secret_generator:, secret_generator_options:, **options); end
end

# source://activesupport//lib/active_support/messages/rotation_coordinator.rb#6
module ActiveSupport::Messages; end

# source://activesupport//lib/active_support/messages/codec.rb#9
class ActiveSupport::Messages::Codec
  include ::ActiveSupport::Messages::Metadata

  # source://activesupport//lib/active_support/messages/codec.rb#15
  def initialize(**options); end

  private

  # source://activesupport//lib/active_support/messages/codec.rb#45
  def catch_and_ignore(throwable, &block); end

  # source://activesupport//lib/active_support/messages/codec.rb#52
  def catch_and_raise(throwable, as: T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/messages/codec.rb#29
  def decode(encoded, url_safe: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/messages/codec.rb#39
  def deserialize(serialized); end

  # source://activesupport//lib/active_support/messages/codec.rb#25
  def encode(data, url_safe: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/messages/codec.rb#35
  def serialize(data); end

  # source://activesupport//lib/active_support/messages/codec.rb#23
  def serializer; end

  # source://activesupport//lib/active_support/messages/codec.rb#60
  def use_message_serializer_for_metadata?; end

  class << self
    # source://activesupport//lib/active_support/messages/codec.rb#12
    def default_serializer; end

    # source://activesupport//lib/active_support/messages/codec.rb#12
    def default_serializer=(value); end
  end
end

# source://activesupport//lib/active_support/messages/metadata.rb#9
module ActiveSupport::Messages::Metadata
  private

  # source://activesupport//lib/active_support/messages/metadata.rb#128
  def deserialize_from_json(serialized); end

  # source://activesupport//lib/active_support/messages/metadata.rb#141
  def deserialize_from_json_safe_string(string); end

  # source://activesupport//lib/active_support/messages/metadata.rb#43
  def deserialize_with_metadata(message, **expected_metadata); end

  # source://activesupport//lib/active_support/messages/metadata.rb#96
  def dual_serialized_metadata_envelope_json?(string); end

  # source://activesupport//lib/active_support/messages/metadata.rb#78
  def extract_from_metadata_envelope(envelope, purpose: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/messages/metadata.rb#92
  def metadata_envelope?(object); end

  # source://activesupport//lib/active_support/messages/metadata.rb#114
  def parse_expiry(expires_at); end

  # source://activesupport//lib/active_support/messages/metadata.rb#100
  def pick_expiry(expires_at, expires_in); end

  # source://activesupport//lib/active_support/messages/metadata.rb#124
  def serialize_to_json(data); end

  # source://activesupport//lib/active_support/messages/metadata.rb#137
  def serialize_to_json_safe_string(data); end

  # source://activesupport//lib/active_support/messages/metadata.rb#30
  def serialize_with_metadata(data, **metadata); end

  # source://activesupport//lib/active_support/messages/metadata.rb#60
  def use_message_serializer_for_metadata?; end

  # source://activesupport//lib/active_support/messages/metadata.rb#64
  def wrap_in_metadata_envelope(hash, expires_at: T.unsafe(nil), expires_in: T.unsafe(nil), purpose: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/messages/metadata.rb#71
  def wrap_in_metadata_legacy_envelope(hash, expires_at: T.unsafe(nil), expires_in: T.unsafe(nil), purpose: T.unsafe(nil)); end

  class << self
    # source://activesupport//lib/active_support/messages/metadata.rb#10
    def use_message_serializer_for_metadata; end

    # source://activesupport//lib/active_support/messages/metadata.rb#10
    def use_message_serializer_for_metadata=(_arg0); end
  end
end

# source://activesupport//lib/active_support/messages/metadata.rb#12
ActiveSupport::Messages::Metadata::ENVELOPE_SERIALIZERS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/messages/metadata.rb#19
ActiveSupport::Messages::Metadata::TIMESTAMP_SERIALIZERS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/messages/rotation_configuration.rb#5
class ActiveSupport::Messages::RotationConfiguration
  # source://activesupport//lib/active_support/messages/rotation_configuration.rb#8
  def initialize; end

  # source://activesupport//lib/active_support/messages/rotation_configuration.rb#6
  def encrypted; end

  # source://activesupport//lib/active_support/messages/rotation_configuration.rb#12
  def rotate(kind, *args, **options); end

  # source://activesupport//lib/active_support/messages/rotation_configuration.rb#6
  def signed; end
end

# source://activesupport//lib/active_support/messages/rotation_coordinator.rb#7
class ActiveSupport::Messages::RotationCoordinator
  # source://activesupport//lib/active_support/messages/rotation_coordinator.rb#10
  def initialize(&secret_generator); end

  # source://activesupport//lib/active_support/messages/rotation_coordinator.rb#18
  def [](salt); end

  # source://activesupport//lib/active_support/messages/rotation_coordinator.rb#22
  def []=(salt, codec); end

  # source://activesupport//lib/active_support/messages/rotation_coordinator.rb#39
  def clear_rotations; end

  # source://activesupport//lib/active_support/messages/rotation_coordinator.rb#45
  def on_rotation(&callback); end

  # source://activesupport//lib/active_support/messages/rotation_coordinator.rb#26
  def rotate(**options, &block); end

  # source://activesupport//lib/active_support/messages/rotation_coordinator.rb#35
  def rotate_defaults; end

  # source://activesupport//lib/active_support/messages/rotation_coordinator.rb#8
  def transitional; end

  # source://activesupport//lib/active_support/messages/rotation_coordinator.rb#8
  def transitional=(_arg0); end

  private

  # source://activesupport//lib/active_support/messages/rotation_coordinator.rb#88
  def build(salt, secret_generator:, secret_generator_options:, **options); end

  # source://activesupport//lib/active_support/messages/rotation_coordinator.rb#76
  def build_with_rotations(salt); end

  # source://activesupport//lib/active_support/messages/rotation_coordinator.rb#51
  def changing_configuration!; end

  # source://activesupport//lib/active_support/messages/rotation_coordinator.rb#62
  def normalize_options(options); end
end

# source://activesupport//lib/active_support/messages/rotator.rb#5
module ActiveSupport::Messages::Rotator
  # source://activesupport//lib/active_support/messages/rotator.rb#6
  def initialize(*args, on_rotation: T.unsafe(nil), **options); end

  # source://activesupport//lib/active_support/messages/rotator.rb#18
  def fall_back_to(fallback); end

  # source://activesupport//lib/active_support/messages/rotator.rb#23
  def read_message(message, on_rotation: T.unsafe(nil), **options); end

  # source://activesupport//lib/active_support/messages/rotator.rb#14
  def rotate(*args, **options); end

  private

  # source://activesupport//lib/active_support/messages/rotator.rb#44
  def build_rotation(*args, **options); end

  # source://activesupport//lib/active_support/messages/rotator.rb#48
  def catch_rotation_error(&block); end
end

# source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#8
module ActiveSupport::Messages::SerializerWithFallback
  # source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#17
  def load(dumped); end

  private

  # source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#33
  def detect_format(dumped); end

  # source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#44
  def fallback?(format); end

  class << self
    # source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#9
    def [](format); end
  end
end

# source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#48
module ActiveSupport::Messages::SerializerWithFallback::AllowMarshal
  private

  # source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#50
  def fallback?(format); end
end

# source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#78
module ActiveSupport::Messages::SerializerWithFallback::JsonWithFallback
  include ::ActiveSupport::Messages::SerializerWithFallback
  extend ::ActiveSupport::Messages::SerializerWithFallback
  extend ::ActiveSupport::Messages::SerializerWithFallback::JsonWithFallback

  # source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#90
  def _load(dumped); end

  # source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#86
  def dump(object); end

  # source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#96
  def dumped?(dumped); end

  # source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#82
  def format; end

  private

  # source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#101
  def detect_format(dumped); end
end

# source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#94
ActiveSupport::Messages::SerializerWithFallback::JsonWithFallback::JSON_START_WITH = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#107
module ActiveSupport::Messages::SerializerWithFallback::JsonWithFallbackAllowMarshal
  include ::ActiveSupport::Messages::SerializerWithFallback
  include ::ActiveSupport::Messages::SerializerWithFallback::JsonWithFallback
  include ::ActiveSupport::Messages::SerializerWithFallback::AllowMarshal
  extend ::ActiveSupport::Messages::SerializerWithFallback
  extend ::ActiveSupport::Messages::SerializerWithFallback::JsonWithFallback
  extend ::ActiveSupport::Messages::SerializerWithFallback::AllowMarshal
  extend ::ActiveSupport::Messages::SerializerWithFallback::JsonWithFallbackAllowMarshal
end

# source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#55
module ActiveSupport::Messages::SerializerWithFallback::MarshalWithFallback
  include ::ActiveSupport::Messages::SerializerWithFallback
  extend ::ActiveSupport::Messages::SerializerWithFallback
  extend ::ActiveSupport::Messages::SerializerWithFallback::MarshalWithFallback

  # source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#67
  def _load(dumped); end

  # source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#63
  def dump(object); end

  # source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#73
  def dumped?(dumped); end

  # source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#59
  def format; end
end

# source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#71
ActiveSupport::Messages::SerializerWithFallback::MarshalWithFallback::MARSHAL_SIGNATURE = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#113
module ActiveSupport::Messages::SerializerWithFallback::MessagePackWithFallback
  include ::ActiveSupport::Messages::SerializerWithFallback
  extend ::ActiveSupport::Messages::SerializerWithFallback
  extend ::ActiveSupport::Messages::SerializerWithFallback::MessagePackWithFallback

  # source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#125
  def _load(dumped); end

  # source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#121
  def dump(object); end

  # source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#129
  def dumped?(dumped); end

  # source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#117
  def format; end

  private

  # source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#134
  def available?; end
end

# source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#143
module ActiveSupport::Messages::SerializerWithFallback::MessagePackWithFallbackAllowMarshal
  include ::ActiveSupport::Messages::SerializerWithFallback
  include ::ActiveSupport::Messages::SerializerWithFallback::MessagePackWithFallback
  include ::ActiveSupport::Messages::SerializerWithFallback::AllowMarshal
  extend ::ActiveSupport::Messages::SerializerWithFallback
  extend ::ActiveSupport::Messages::SerializerWithFallback::MessagePackWithFallback
  extend ::ActiveSupport::Messages::SerializerWithFallback::AllowMarshal
  extend ::ActiveSupport::Messages::SerializerWithFallback::MessagePackWithFallbackAllowMarshal
end

# source://activesupport//lib/active_support/messages/serializer_with_fallback.rb#149
ActiveSupport::Messages::SerializerWithFallback::SERIALIZERS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/multibyte.rb#4
module ActiveSupport::Multibyte
  class << self
    # source://activesupport//lib/active_support/multibyte.rb#19
    def proxy_class; end

    # source://activesupport//lib/active_support/multibyte.rb#14
    def proxy_class=(klass); end
  end
end

# source://activesupport//lib/active_support/multibyte/chars.rb#47
class ActiveSupport::Multibyte::Chars
  include ::Comparable

  # source://activesupport//lib/active_support/multibyte/chars.rb#56
  def initialize(string); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#53
  def <=>(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#53
  def =~(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#53
  def acts_like_string?(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#161
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#140
  def compose; end

  # source://activesupport//lib/active_support/multibyte/chars.rb#132
  def decompose; end

  # source://activesupport//lib/active_support/multibyte/chars.rb#148
  def grapheme_length; end

  # source://activesupport//lib/active_support/multibyte/chars.rb#115
  def limit(limit); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#53
  def match?(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#62
  def method_missing(method, *_arg1, **_arg2, &_arg3); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#106
  def reverse; end

  # source://activesupport//lib/active_support/multibyte/chars.rb#166
  def reverse!(*args); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#96
  def slice!(*args); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#83
  def split(*args); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#157
  def tidy_bytes(force = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#166
  def tidy_bytes!(*args); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#123
  def titlecase; end

  # source://activesupport//lib/active_support/multibyte/chars.rb#123
  def titleize; end

  # source://activesupport//lib/active_support/multibyte/chars.rb#49
  def to_s; end

  # source://activesupport//lib/active_support/multibyte/chars.rb#49
  def to_str; end

  # source://activesupport//lib/active_support/multibyte/chars.rb#49
  def wrapped_string; end

  private

  # source://activesupport//lib/active_support/multibyte/chars.rb#173
  def chars(string); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#74
  def respond_to_missing?(method, include_private); end
end

# source://activesupport//lib/active_support/multibyte/unicode.rb#5
module ActiveSupport::Multibyte::Unicode
  extend ::ActiveSupport::Multibyte::Unicode

  # source://activesupport//lib/active_support/multibyte/unicode.rb#21
  def compose(codepoints); end

  # source://activesupport//lib/active_support/multibyte/unicode.rb#12
  def decompose(type, codepoints); end

  # source://activesupport//lib/active_support/multibyte/unicode.rb#30
  def tidy_bytes(string, force = T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/multibyte/unicode.rb#37
  def recode_windows1252_chars(string); end
end

# source://activesupport//lib/active_support/multibyte/unicode.rb#9
ActiveSupport::Multibyte::Unicode::UNICODE_VERSION = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/notifications/instrumenter.rb#7
module ActiveSupport::Notifications
  class << self
    # source://activesupport//lib/active_support/notifications.rb#208
    def instrument(name, payload = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/notifications.rb#269
    def instrumenter; end

    # source://activesupport//lib/active_support/notifications.rb#254
    def monotonic_subscribe(pattern = T.unsafe(nil), callback = T.unsafe(nil), &block); end

    # source://activesupport//lib/active_support/notifications.rb#198
    def notifier; end

    # source://activesupport//lib/active_support/notifications.rb#198
    def notifier=(_arg0); end

    # source://activesupport//lib/active_support/notifications.rb#200
    def publish(name, *args); end

    # source://activesupport//lib/active_support/notifications.rb#204
    def publish_event(event); end

    # source://activesupport//lib/active_support/notifications.rb#244
    def subscribe(pattern = T.unsafe(nil), callback = T.unsafe(nil), &block); end

    # source://activesupport//lib/active_support/notifications.rb#258
    def subscribed(callback, pattern = T.unsafe(nil), monotonic: T.unsafe(nil), &block); end

    # source://activesupport//lib/active_support/notifications.rb#265
    def unsubscribe(subscriber_or_name); end

    private

    # source://activesupport//lib/active_support/notifications.rb#274
    def registry; end
  end
end

# source://activesupport//lib/active_support/notifications/instrumenter.rb#106
class ActiveSupport::Notifications::Event
  # source://activesupport//lib/active_support/notifications/instrumenter.rb#110
  def initialize(name, start, ending, transaction_id, payload); end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#176
  def allocations; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#163
  def cpu_time; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#198
  def duration; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#128
  def end; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#154
  def finish!; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#182
  def gc_time; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#169
  def idle_time; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#107
  def name; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#108
  def payload; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#108
  def payload=(_arg0); end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#132
  def record; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#146
  def start!; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#124
  def time; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#107
  def transaction_id; end

  private

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#203
  def now; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#230
  def now_allocations; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#210
  def now_cpu; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#220
  def now_gc; end
end

# source://activesupport//lib/active_support/notifications/fanout.rb#50
class ActiveSupport::Notifications::Fanout
  include ::ActiveSupport::Notifications::FanoutIteration

  # source://activesupport//lib/active_support/notifications/fanout.rb#51
  def initialize; end

  # source://activesupport//lib/active_support/notifications/fanout.rb#298
  def all_listeners_for(name); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#273
  def build_handle(name, id, payload); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#102
  def clear_cache(key = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#284
  def finish(name, id, payload, listeners = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#188
  def groups_for(name); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#60
  def inspect; end

  # source://activesupport//lib/active_support/notifications/fanout.rb#307
  def listeners_for(name); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#311
  def listening?(name); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#290
  def publish(name, *args); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#294
  def publish_event(event); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#277
  def start(name, id, payload); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#65
  def subscribe(pattern = T.unsafe(nil), callable = T.unsafe(nil), monotonic: T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#82
  def unsubscribe(subscriber_or_name); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#316
  def wait; end
end

# source://activesupport//lib/active_support/notifications/fanout.rb#114
class ActiveSupport::Notifications::Fanout::BaseGroup
  include ::ActiveSupport::Notifications::FanoutIteration

  # source://activesupport//lib/active_support/notifications/fanout.rb#117
  def initialize(listeners, name, id, payload); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#121
  def each(&block); end
end

# source://activesupport//lib/active_support/notifications/fanout.rb#126
class ActiveSupport::Notifications::Fanout::BaseTimeGroup < ::ActiveSupport::Notifications::Fanout::BaseGroup
  # source://activesupport//lib/active_support/notifications/fanout.rb#131
  def finish(name, id, payload); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#127
  def start(name, id, payload); end
end

# source://activesupport//lib/active_support/notifications/fanout.rb#167
class ActiveSupport::Notifications::Fanout::EventObjectGroup < ::ActiveSupport::Notifications::Fanout::BaseGroup
  # source://activesupport//lib/active_support/notifications/fanout.rb#173
  def finish(name, id, payload); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#168
  def start(name, id, payload); end

  private

  # source://activesupport//lib/active_support/notifications/fanout.rb#183
  def build_event(name, id, payload); end
end

# source://activesupport//lib/active_support/notifications/fanout.rb#153
class ActiveSupport::Notifications::Fanout::EventedGroup < ::ActiveSupport::Notifications::Fanout::BaseGroup
  # source://activesupport//lib/active_support/notifications/fanout.rb#160
  def finish(name, id, payload); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#154
  def start(name, id, payload); end
end

# source://activesupport//lib/active_support/notifications/fanout.rb#228
class ActiveSupport::Notifications::Fanout::Handle
  include ::ActiveSupport::Notifications::FanoutIteration

  # source://activesupport//lib/active_support/notifications/fanout.rb#231
  def initialize(notifier, name, id, payload); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#250
  def finish; end

  # source://activesupport//lib/active_support/notifications/fanout.rb#254
  def finish_with_values(name, id, payload); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#241
  def start; end

  private

  # source://activesupport//lib/active_support/notifications/fanout.rb#264
  def ensure_state!(expected); end
end

# source://activesupport//lib/active_support/notifications/fanout.rb#139
class ActiveSupport::Notifications::Fanout::MonotonicTimedGroup < ::ActiveSupport::Notifications::Fanout::BaseTimeGroup
  private

  # source://activesupport//lib/active_support/notifications/fanout.rb#141
  def now; end
end

# source://activesupport//lib/active_support/notifications/fanout.rb#319
module ActiveSupport::Notifications::Fanout::Subscribers
  class << self
    # source://activesupport//lib/active_support/notifications/fanout.rb#320
    def new(pattern, listener, monotonic); end
  end
end

# source://activesupport//lib/active_support/notifications/fanout.rb#434
class ActiveSupport::Notifications::Fanout::Subscribers::EventObject < ::ActiveSupport::Notifications::Fanout::Subscribers::Evented
  # source://activesupport//lib/active_support/notifications/fanout.rb#435
  def group_class; end

  # source://activesupport//lib/active_support/notifications/fanout.rb#439
  def publish_event(event); end
end

# source://activesupport//lib/active_support/notifications/fanout.rb#376
class ActiveSupport::Notifications::Fanout::Subscribers::Evented
  # source://activesupport//lib/active_support/notifications/fanout.rb#379
  def initialize(pattern, delegate); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#377
  def delegate; end

  # source://activesupport//lib/active_support/notifications/fanout.rb#387
  def group_class; end

  # source://activesupport//lib/active_support/notifications/fanout.rb#377
  def pattern; end

  # source://activesupport//lib/active_support/notifications/fanout.rb#391
  def publish(name, *args); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#397
  def publish_event(event); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#377
  def silenceable; end

  # source://activesupport//lib/active_support/notifications/fanout.rb#405
  def silenced?(name); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#409
  def subscribed_to?(name); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#413
  def unsubscribe!(name); end
end

# source://activesupport//lib/active_support/notifications/fanout.rb#339
class ActiveSupport::Notifications::Fanout::Subscribers::Matcher
  # source://activesupport//lib/active_support/notifications/fanout.rb#352
  def initialize(pattern); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#361
  def ===(name); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#340
  def exclusions; end

  # source://activesupport//lib/active_support/notifications/fanout.rb#340
  def pattern; end

  # source://activesupport//lib/active_support/notifications/fanout.rb#357
  def unsubscribe!(name); end

  class << self
    # source://activesupport//lib/active_support/notifications/fanout.rb#342
    def wrap(pattern); end
  end
end

# source://activesupport//lib/active_support/notifications/fanout.rb#365
class ActiveSupport::Notifications::Fanout::Subscribers::Matcher::AllMessages
  # source://activesupport//lib/active_support/notifications/fanout.rb#366
  def ===(name); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#370
  def unsubscribe!(*_arg0); end
end

# source://activesupport//lib/active_support/notifications/fanout.rb#428
class ActiveSupport::Notifications::Fanout::Subscribers::MonotonicTimed < ::ActiveSupport::Notifications::Fanout::Subscribers::Timed
  # source://activesupport//lib/active_support/notifications/fanout.rb#429
  def group_class; end
end

# source://activesupport//lib/active_support/notifications/fanout.rb#418
class ActiveSupport::Notifications::Fanout::Subscribers::Timed < ::ActiveSupport::Notifications::Fanout::Subscribers::Evented
  # source://activesupport//lib/active_support/notifications/fanout.rb#419
  def group_class; end

  # source://activesupport//lib/active_support/notifications/fanout.rb#423
  def publish(name, *args); end
end

# source://activesupport//lib/active_support/notifications/fanout.rb#146
class ActiveSupport::Notifications::Fanout::TimedGroup < ::ActiveSupport::Notifications::Fanout::BaseTimeGroup
  private

  # source://activesupport//lib/active_support/notifications/fanout.rb#148
  def now; end
end

# source://activesupport//lib/active_support/notifications/fanout.rb#19
module ActiveSupport::Notifications::FanoutIteration
  private

  # source://activesupport//lib/active_support/notifications/fanout.rb#21
  def iterate_guarding_exceptions(collection); end
end

# source://activesupport//lib/active_support/notifications/fanout.rb#9
class ActiveSupport::Notifications::InstrumentationSubscriberError < ::RuntimeError
  # source://activesupport//lib/active_support/notifications/fanout.rb#12
  def initialize(exceptions); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#10
  def exceptions; end
end

# source://activesupport//lib/active_support/notifications/instrumenter.rb#9
class ActiveSupport::Notifications::Instrumenter
  # source://activesupport//lib/active_support/notifications/instrumenter.rb#12
  def initialize(notifier); end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#78
  def build_handle(name, payload); end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#92
  def finish(name, payload); end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#96
  def finish_with_state(listeners_state, name, payload); end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#10
  def id; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#54
  def instrument(name, payload = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#82
  def new_event(name, payload = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#87
  def start(name, payload); end

  private

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#101
  def unique_id; end
end

# source://activesupport//lib/active_support/notifications/instrumenter.rb#21
class ActiveSupport::Notifications::Instrumenter::LegacyHandle
  # source://activesupport//lib/active_support/notifications/instrumenter.rb#34
  def initialize(notifier, name, id, payload); end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#45
  def finish; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#41
  def start; end
end

# source://activesupport//lib/active_support/notifications/instrumenter.rb#22
class ActiveSupport::Notifications::Instrumenter::LegacyHandle::Wrapper
  # source://activesupport//lib/active_support/notifications/instrumenter.rb#23
  def initialize(notifier); end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#27
  def build_handle(name, id, payload); end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#31
  def finish(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#31
  def start(*_arg0, **_arg1, &_arg2); end
end

# source://activesupport//lib/active_support/number_helper.rb#4
module ActiveSupport::NumberHelper
  extend ::ActiveSupport::Autoload
  extend ::ActiveSupport::NumberHelper

  # source://activesupport//lib/active_support/number_helper.rb#139
  def number_to_currency(number, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/number_helper.rb#242
  def number_to_delimited(number, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/number_helper.rb#453
  def number_to_human(number, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/number_helper.rb#351
  def number_to_human_size(number, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/number_helper.rb#201
  def number_to_percentage(number, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/number_helper.rb#66
  def number_to_phone(number, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/number_helper.rb#298
  def number_to_rounded(number, options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/number_helper/number_converter.rb#12
class ActiveSupport::NumberHelper::NumberConverter
  # source://activesupport//lib/active_support/number_helper/number_converter.rb#124
  def initialize(number, options); end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#130
  def execute; end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#14
  def namespace; end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#14
  def namespace=(_arg0); end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#14
  def namespace?; end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#19
  def number; end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#19
  def opts; end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#17
  def validate_float; end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#17
  def validate_float=(_arg0); end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#17
  def validate_float?; end

  private

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#149
  def default_format_options; end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#174
  def default_value(key); end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#145
  def format_options; end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#155
  def i18n_format_options; end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#141
  def options; end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#170
  def translate_in_locale(key, **i18n_options); end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#166
  def translate_number_value_with_default(key, **i18n_options); end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#178
  def valid_bigdecimal; end

  class << self
    # source://activesupport//lib/active_support/number_helper/number_converter.rb#120
    def convert(number, options); end

    # source://activesupport//lib/active_support/number_helper/number_converter.rb#14
    def namespace; end

    # source://activesupport//lib/active_support/number_helper/number_converter.rb#14
    def namespace=(value); end

    # source://activesupport//lib/active_support/number_helper/number_converter.rb#14
    def namespace?; end

    # source://activesupport//lib/active_support/number_helper/number_converter.rb#17
    def validate_float; end

    # source://activesupport//lib/active_support/number_helper/number_converter.rb#17
    def validate_float=(value); end

    # source://activesupport//lib/active_support/number_helper/number_converter.rb#17
    def validate_float?; end
  end
end

# source://activesupport//lib/active_support/number_helper/number_converter.rb#21
ActiveSupport::NumberHelper::NumberConverter::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/number_helper/number_to_currency_converter.rb#7
class ActiveSupport::NumberHelper::NumberToCurrencyConverter < ::ActiveSupport::NumberHelper::NumberConverter
  # source://activesupport//lib/active_support/number_helper/number_to_currency_converter.rb#10
  def convert; end

  private

  # source://activesupport//lib/active_support/number_helper/number_to_currency_converter.rb#38
  def i18n_opts; end

  # source://activesupport//lib/active_support/number_helper/number_to_currency_converter.rb#29
  def options; end

  class << self
    # source://activesupport//lib/active_support/number_helper/number_converter.rb#14
    def namespace; end
  end
end

# source://activesupport//lib/active_support/number_helper/number_to_delimited_converter.rb#7
class ActiveSupport::NumberHelper::NumberToDelimitedConverter < ::ActiveSupport::NumberHelper::NumberConverter
  # source://activesupport//lib/active_support/number_helper/number_to_delimited_converter.rb#12
  def convert; end

  private

  # source://activesupport//lib/active_support/number_helper/number_to_delimited_converter.rb#25
  def delimiter_pattern; end

  # source://activesupport//lib/active_support/number_helper/number_to_delimited_converter.rb#17
  def parts; end

  class << self
    # source://activesupport//lib/active_support/number_helper/number_converter.rb#17
    def validate_float; end
  end
end

# source://activesupport//lib/active_support/number_helper/number_to_delimited_converter.rb#10
ActiveSupport::NumberHelper::NumberToDelimitedConverter::DEFAULT_DELIMITER_REGEX = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/number_helper/number_to_human_converter.rb#7
class ActiveSupport::NumberHelper::NumberToHumanConverter < ::ActiveSupport::NumberHelper::NumberConverter
  # source://activesupport//lib/active_support/number_helper/number_to_human_converter.rb#15
  def convert; end

  private

  # source://activesupport//lib/active_support/number_helper/number_to_human_converter.rb#50
  def calculate_exponent(units); end

  # source://activesupport//lib/active_support/number_helper/number_to_human_converter.rb#38
  def determine_unit(units, exponent); end

  # source://activesupport//lib/active_support/number_helper/number_to_human_converter.rb#34
  def format; end

  # source://activesupport//lib/active_support/number_helper/number_to_human_converter.rb#55
  def unit_exponents(units); end

  class << self
    # source://activesupport//lib/active_support/number_helper/number_converter.rb#14
    def namespace; end

    # source://activesupport//lib/active_support/number_helper/number_converter.rb#17
    def validate_float; end
  end
end

# source://activesupport//lib/active_support/number_helper/number_to_human_converter.rb#8
ActiveSupport::NumberHelper::NumberToHumanConverter::DECIMAL_UNITS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/number_helper/number_to_human_converter.rb#10
ActiveSupport::NumberHelper::NumberToHumanConverter::INVERTED_DECIMAL_UNITS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/number_helper/number_to_human_size_converter.rb#7
class ActiveSupport::NumberHelper::NumberToHumanSizeConverter < ::ActiveSupport::NumberHelper::NumberConverter
  # source://activesupport//lib/active_support/number_helper/number_to_human_size_converter.rb#13
  def convert; end

  private

  # source://activesupport//lib/active_support/number_helper/number_to_human_size_converter.rb#55
  def base; end

  # source://activesupport//lib/active_support/number_helper/number_to_human_size_converter.rb#31
  def conversion_format; end

  # source://activesupport//lib/active_support/number_helper/number_to_human_size_converter.rb#44
  def exponent; end

  # source://activesupport//lib/active_support/number_helper/number_to_human_size_converter.rb#51
  def smaller_than_base?; end

  # source://activesupport//lib/active_support/number_helper/number_to_human_size_converter.rb#39
  def storage_unit_key; end

  # source://activesupport//lib/active_support/number_helper/number_to_human_size_converter.rb#35
  def unit; end

  class << self
    # source://activesupport//lib/active_support/number_helper/number_converter.rb#14
    def namespace; end

    # source://activesupport//lib/active_support/number_helper/number_converter.rb#17
    def validate_float; end
  end
end

# source://activesupport//lib/active_support/number_helper/number_to_human_size_converter.rb#8
ActiveSupport::NumberHelper::NumberToHumanSizeConverter::STORAGE_UNITS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/number_helper/number_to_percentage_converter.rb#7
class ActiveSupport::NumberHelper::NumberToPercentageConverter < ::ActiveSupport::NumberHelper::NumberConverter
  # source://activesupport//lib/active_support/number_helper/number_to_percentage_converter.rb#10
  def convert; end

  class << self
    # source://activesupport//lib/active_support/number_helper/number_converter.rb#14
    def namespace; end
  end
end

# source://activesupport//lib/active_support/number_helper/number_to_phone_converter.rb#8
class ActiveSupport::NumberHelper::NumberToPhoneConverter < ::ActiveSupport::NumberHelper::NumberConverter
  # source://activesupport//lib/active_support/number_helper/number_to_phone_converter.rb#9
  def convert; end

  private

  # source://activesupport//lib/active_support/number_helper/number_to_phone_converter.rb#16
  def convert_to_phone_number(number); end

  # source://activesupport//lib/active_support/number_helper/number_to_phone_converter.rb#24
  def convert_with_area_code(number); end

  # source://activesupport//lib/active_support/number_helper/number_to_phone_converter.rb#31
  def convert_without_area_code(number); end

  # source://activesupport//lib/active_support/number_helper/number_to_phone_converter.rb#47
  def country_code(code); end

  # source://activesupport//lib/active_support/number_helper/number_to_phone_converter.rb#43
  def delimiter; end

  # source://activesupport//lib/active_support/number_helper/number_to_phone_converter.rb#51
  def phone_ext(ext); end

  # source://activesupport//lib/active_support/number_helper/number_to_phone_converter.rb#55
  def regexp_pattern(default_pattern); end

  # source://activesupport//lib/active_support/number_helper/number_to_phone_converter.rb#39
  def start_with_delimiter?(number); end
end

# source://activesupport//lib/active_support/number_helper/number_to_rounded_converter.rb#7
class ActiveSupport::NumberHelper::NumberToRoundedConverter < ::ActiveSupport::NumberHelper::NumberConverter
  # source://activesupport//lib/active_support/number_helper/number_to_rounded_converter.rb#11
  def convert; end

  private

  # source://activesupport//lib/active_support/number_helper/number_to_rounded_converter.rb#49
  def format_number(number); end

  # source://activesupport//lib/active_support/number_helper/number_to_rounded_converter.rb#45
  def strip_insignificant_zeros; end

  class << self
    # source://activesupport//lib/active_support/number_helper/number_converter.rb#14
    def namespace; end

    # source://activesupport//lib/active_support/number_helper/number_converter.rb#17
    def validate_float; end
  end
end

# source://activesupport//lib/active_support/number_helper/rounding_helper.rb#5
class ActiveSupport::NumberHelper::RoundingHelper
  # source://activesupport//lib/active_support/number_helper/rounding_helper.rb#8
  def initialize(options); end

  # source://activesupport//lib/active_support/number_helper/rounding_helper.rb#20
  def digit_count(number); end

  # source://activesupport//lib/active_support/number_helper/rounding_helper.rb#6
  def options; end

  # source://activesupport//lib/active_support/number_helper/rounding_helper.rb#12
  def round(number); end

  private

  # source://activesupport//lib/active_support/number_helper/rounding_helper.rb#37
  def absolute_precision(number); end

  # source://activesupport//lib/active_support/number_helper/rounding_helper.rb#26
  def convert_to_decimal(number); end
end

# source://activesupport//lib/active_support/core_ext/numeric/conversions.rb#7
module ActiveSupport::NumericWithFormat
  # source://activesupport//lib/active_support/core_ext/numeric/conversions.rb#113
  def to_formatted_s(format = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/numeric/conversions.rb#113
  def to_fs(format = T.unsafe(nil), options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/option_merger.rb#6
class ActiveSupport::OptionMerger
  # source://activesupport//lib/active_support/option_merger.rb#11
  def initialize(context, options); end

  private

  # source://activesupport//lib/active_support/option_merger.rb#16
  def method_missing(method, *arguments, &block); end

  # source://activesupport//lib/active_support/option_merger.rb#34
  def respond_to_missing?(*_arg0, **_arg1, &_arg2); end
end

# source://activesupport//lib/active_support/ordered_hash.rb#24
class ActiveSupport::OrderedHash < ::Hash
  # source://activesupport//lib/active_support/ordered_hash.rb#29
  def encode_with(coder); end

  # source://activesupport//lib/active_support/ordered_hash.rb#46
  def extractable_options?; end

  # source://activesupport//lib/active_support/ordered_hash.rb#41
  def nested_under_indifferent_access; end

  # source://activesupport//lib/active_support/ordered_hash.rb#37
  def reject(*args, &block); end

  # source://activesupport//lib/active_support/ordered_hash.rb#33
  def select(*args, &block); end

  # source://activesupport//lib/active_support/ordered_hash.rb#25
  def to_yaml_type; end
end

# source://activesupport//lib/active_support/ordered_options.rb#33
class ActiveSupport::OrderedOptions < ::Hash
  # source://activesupport//lib/active_support/ordered_options.rb#41
  def [](key); end

  # source://activesupport//lib/active_support/ordered_options.rb#37
  def []=(key, value); end

  # source://activesupport//lib/active_support/ordered_options.rb#45
  def dig(key, *identifiers); end

  # source://activesupport//lib/active_support/ordered_options.rb#64
  def extractable_options?; end

  # source://activesupport//lib/active_support/ordered_options.rb#68
  def inspect; end

  # source://activesupport//lib/active_support/ordered_options.rb#49
  def method_missing(method, *args); end

  protected

  def _get(_arg0); end

  private

  # source://activesupport//lib/active_support/ordered_options.rb#60
  def respond_to_missing?(name, include_private); end
end

# source://activesupport//lib/active_support/parameter_filter.rb#39
class ActiveSupport::ParameterFilter
  # source://activesupport//lib/active_support/parameter_filter.rb#77
  def initialize(filters = T.unsafe(nil), mask: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/parameter_filter.rb#83
  def filter(params); end

  # source://activesupport//lib/active_support/parameter_filter.rb#88
  def filter_param(key, value); end

  private

  # source://activesupport//lib/active_support/parameter_filter.rb#125
  def call(params, full_parent_key = T.unsafe(nil), original_params = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/parameter_filter.rb#93
  def compile_filters!(filters); end

  # source://activesupport//lib/active_support/parameter_filter.rb#135
  def value_for_key(key, value, full_parent_key = T.unsafe(nil), original_params = T.unsafe(nil)); end

  class << self
    # source://activesupport//lib/active_support/parameter_filter.rb#55
    def precompile_filters(filters); end
  end
end

# source://activesupport//lib/active_support/parameter_filter.rb#40
ActiveSupport::ParameterFilter::FILTERED = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/proxy_object.rb#4
class ActiveSupport::ProxyObject < ::BasicObject
  # source://activesupport//lib/active_support/proxy_object.rb#9
  def raise(*args); end

  class << self
    # source://activesupport//lib/active_support/proxy_object.rb#13
    def inherited(_subclass); end
  end
end

# source://activesupport//lib/active_support/railtie.rb#7
class ActiveSupport::Railtie < ::Rails::Railtie; end

# source://activesupport//lib/active_support/core_ext/range/conversions.rb#5
module ActiveSupport::RangeWithFormat
  # source://activesupport//lib/active_support/core_ext/range/conversions.rb#51
  def to_formatted_s(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/range/conversions.rb#51
  def to_fs(format = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/range/conversions.rb#6
ActiveSupport::RangeWithFormat::RANGE_FORMATS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/reloader.rb#28
class ActiveSupport::Reloader < ::ActiveSupport::ExecutionWrapper
  # source://activesupport//lib/active_support/reloader.rb#99
  def initialize; end

  # source://activesupport//lib/active_support/callbacks.rb#924
  def _class_unload_callbacks; end

  # source://activesupport//lib/active_support/callbacks.rb#924
  def _prepare_callbacks; end

  # source://activesupport//lib/active_support/callbacks.rb#912
  def _run_class_unload_callbacks(&block); end

  # source://activesupport//lib/active_support/callbacks.rb#912
  def _run_prepare_callbacks(&block); end

  # source://activesupport//lib/active_support/reloader.rb#85
  def check; end

  # source://activesupport//lib/active_support/reloader.rb#85
  def check=(_arg0); end

  # source://activesupport//lib/active_support/reloader.rb#85
  def check?; end

  # source://activesupport//lib/active_support/reloader.rb#126
  def class_unload!(&block); end

  # source://activesupport//lib/active_support/reloader.rb#131
  def complete!; end

  # source://activesupport//lib/active_support/reloader.rb#84
  def executor; end

  # source://activesupport//lib/active_support/reloader.rb#84
  def executor=(_arg0); end

  # source://activesupport//lib/active_support/reloader.rb#84
  def executor?; end

  # source://activesupport//lib/active_support/reloader.rb#114
  def release_unload_lock!; end

  # source://activesupport//lib/active_support/reloader.rb#106
  def require_unload_lock!; end

  # source://activesupport//lib/active_support/reloader.rb#121
  def run!; end

  class << self
    # source://activesupport//lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activesupport//lib/active_support/callbacks.rb#916
    def _class_unload_callbacks; end

    # source://activesupport//lib/active_support/callbacks.rb#920
    def _class_unload_callbacks=(value); end

    # source://activesupport//lib/active_support/callbacks.rb#916
    def _prepare_callbacks; end

    # source://activesupport//lib/active_support/callbacks.rb#920
    def _prepare_callbacks=(value); end

    # source://activesupport//lib/active_support/reloader.rb#44
    def after_class_unload(*args, &block); end

    # source://activesupport//lib/active_support/reloader.rb#39
    def before_class_unload(*args, &block); end

    # source://activesupport//lib/active_support/reloader.rb#85
    def check; end

    # source://activesupport//lib/active_support/reloader.rb#87
    def check!; end

    # source://activesupport//lib/active_support/reloader.rb#85
    def check=(value); end

    # source://activesupport//lib/active_support/reloader.rb#85
    def check?; end

    # source://activesupport//lib/active_support/reloader.rb#84
    def executor; end

    # source://activesupport//lib/active_support/reloader.rb#84
    def executor=(value); end

    # source://activesupport//lib/active_support/reloader.rb#84
    def executor?; end

    # source://activesupport//lib/active_support/reloader.rb#95
    def prepare!; end

    # source://activesupport//lib/active_support/reloader.rb#51
    def reload!; end

    # source://activesupport//lib/active_support/reloader.rb#91
    def reloaded!; end

    # source://activesupport//lib/active_support/reloader.rb#62
    def run!(reset: T.unsafe(nil)); end

    # source://activesupport//lib/active_support/reloader.rb#34
    def to_prepare(*args, &block); end

    # source://activesupport//lib/active_support/reloader.rb#71
    def wrap(**kwargs); end
  end
end

# source://activesupport//lib/active_support/rescuable.rb#11
module ActiveSupport::Rescuable
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Rescuable::ClassMethods

  # source://activesupport//lib/active_support/rescuable.rb#172
  def handler_for_rescue(exception); end

  # source://activesupport//lib/active_support/rescuable.rb#166
  def rescue_with_handler(exception); end

  module GeneratedClassMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end

  module GeneratedInstanceMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end
end

# source://activesupport//lib/active_support/rescuable.rb#18
module ActiveSupport::Rescuable::ClassMethods
  # source://activesupport//lib/active_support/rescuable.rb#105
  def handler_for_rescue(exception, object: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/rescuable.rb#53
  def rescue_from(*klasses, with: T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/rescuable.rb#90
  def rescue_with_handler(exception, object: T.unsafe(nil), visited_exceptions: T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/rescuable.rb#139
  def constantize_rescue_handler_class(class_or_name); end

  # source://activesupport//lib/active_support/rescuable.rb#124
  def find_rescue_handler(exception); end
end

# source://activesupport//lib/active_support/core_ext/string/output_safety.rb#19
class ActiveSupport::SafeBuffer < ::String
  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#70
  def initialize(str = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#123
  def %(args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#116
  def *(_); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#112
  def +(other); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#80
  def <<(value); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#38
  def [](*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#104
  def []=(arg1, arg2, arg3 = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#88
  def bytesplice(*args, value); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def capitalize(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def capitalize!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def chomp(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def chomp!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def chop(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def chop!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#59
  def chr; end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#80
  def concat(value); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def delete(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def delete!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def delete_prefix(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def delete_prefix!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def delete_suffix(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def delete_suffix!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def downcase(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def downcase!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#146
  def encode_with(coder); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#167
  def gsub(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#178
  def gsub!(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#134
  def html_safe?; end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#92
  def insert(index, value); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def lstrip(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def lstrip!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def next(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def next!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#96
  def prepend(value); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#100
  def replace(value); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def reverse(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def reverse!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def rstrip(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def rstrip!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#65
  def safe_concat(value); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def scrub(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def scrub!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#38
  def slice(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#51
  def slice!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def squeeze(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def squeeze!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def strip(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def strip!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#167
  def sub(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#178
  def sub!(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def succ(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def succ!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def swapcase(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def swapcase!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#142
  def to_param; end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#138
  def to_s; end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def tr(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def tr!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def tr_s(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def tr_s!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def unicode_normalize(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def unicode_normalize!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def upcase(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def upcase!(*args); end

  private

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#193
  def explicit_html_escape_interpolated_argument(arg); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#197
  def implicit_html_escape_interpolated_argument(arg); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#75
  def initialize_copy(other); end

  def original_concat(*_arg0); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#205
  def set_block_back_references(block, match_data); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#211
  def string_into_safe_buffer(new_string, is_html_safe); end
end

# source://activesupport//lib/active_support/core_ext/string/output_safety.rb#32
class ActiveSupport::SafeBuffer::SafeConcatError < ::StandardError
  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#33
  def initialize; end
end

# source://activesupport//lib/active_support/core_ext/string/output_safety.rb#20
ActiveSupport::SafeBuffer::UNSAFE_STRING_METHODS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/core_ext/string/output_safety.rb#26
ActiveSupport::SafeBuffer::UNSAFE_STRING_METHODS_WITH_BACKREF = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/secure_compare_rotator.rb#32
class ActiveSupport::SecureCompareRotator
  include ::ActiveSupport::SecurityUtils

  # source://activesupport//lib/active_support/secure_compare_rotator.rb#37
  def initialize(value, on_rotation: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/secure_compare_rotator.rb#43
  def rotate(previous_value); end

  # source://activesupport//lib/active_support/secure_compare_rotator.rb#47
  def secure_compare!(other_value, on_rotation: T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/secure_compare_rotator.rb#35
class ActiveSupport::SecureCompareRotator::InvalidMatch < ::StandardError; end

# source://activesupport//lib/active_support/security_utils.rb#4
module ActiveSupport::SecurityUtils
  private

  # source://activesupport//lib/active_support/security_utils.rb#11
  def fixed_length_secure_compare(a, b); end

  # source://activesupport//lib/active_support/security_utils.rb#33
  def secure_compare(a, b); end

  class << self
    # source://activesupport//lib/active_support/security_utils.rb#11
    def fixed_length_secure_compare(a, b); end

    # source://activesupport//lib/active_support/security_utils.rb#33
    def secure_compare(a, b); end
  end
end

# source://activesupport//lib/active_support/string_inquirer.rb#21
class ActiveSupport::StringInquirer < ::String
  private

  # source://activesupport//lib/active_support/string_inquirer.rb#27
  def method_missing(method_name, *_arg1, **_arg2, &_arg3); end

  # source://activesupport//lib/active_support/string_inquirer.rb#23
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/subscriber.rb#32
class ActiveSupport::Subscriber
  # source://activesupport//lib/active_support/subscriber.rb#130
  def initialize; end

  # source://activesupport//lib/active_support/subscriber.rb#135
  def call(event); end

  # source://activesupport//lib/active_support/subscriber.rb#128
  def patterns; end

  # source://activesupport//lib/active_support/subscriber.rb#140
  def publish_event(event); end

  class << self
    # source://activesupport//lib/active_support/subscriber.rb#35
    def attach_to(namespace, subscriber = T.unsafe(nil), notifier = T.unsafe(nil), inherit_all: T.unsafe(nil)); end

    # source://activesupport//lib/active_support/subscriber.rb#50
    def detach_from(namespace, notifier = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/subscriber.rb#69
    def method_added(event); end

    # source://activesupport//lib/active_support/subscriber.rb#78
    def subscribers; end

    private

    # source://activesupport//lib/active_support/subscriber.rb#85
    def add_event_subscriber(event); end

    # source://activesupport//lib/active_support/subscriber.rb#123
    def fetch_public_methods(subscriber, inherit_all); end

    # source://activesupport//lib/active_support/subscriber.rb#107
    def find_attached_subscriber; end

    # source://activesupport//lib/active_support/subscriber.rb#111
    def invalid_event?(event); end

    # source://activesupport//lib/active_support/subscriber.rb#83
    def namespace; end

    # source://activesupport//lib/active_support/subscriber.rb#83
    def notifier; end

    # source://activesupport//lib/active_support/subscriber.rb#119
    def pattern_subscribed?(pattern); end

    # source://activesupport//lib/active_support/subscriber.rb#115
    def prepare_pattern(event); end

    # source://activesupport//lib/active_support/subscriber.rb#96
    def remove_event_subscriber(event); end

    # source://activesupport//lib/active_support/subscriber.rb#83
    def subscriber; end
  end
end

# source://activesupport//lib/active_support/syntax_error_proxy.rb#10
class ActiveSupport::SyntaxErrorProxy
  # source://activesupport//lib/active_support/syntax_error_proxy.rb#11
  def backtrace; end

  # source://activesupport//lib/active_support/syntax_error_proxy.rb#34
  def backtrace_locations; end

  private

  # source://activesupport//lib/active_support/syntax_error_proxy.rb#47
  def parse_message_for_trace; end
end

# source://activesupport//lib/active_support/syntax_error_proxy.rb#15
class ActiveSupport::SyntaxErrorProxy::BacktraceLocation < ::Struct
  # source://activesupport//lib/active_support/syntax_error_proxy.rb#19
  def label; end

  # source://activesupport//lib/active_support/syntax_error_proxy.rb#16
  def spot(_); end
end

# source://activesupport//lib/active_support/syntax_error_proxy.rb#23
class ActiveSupport::SyntaxErrorProxy::BacktraceLocationProxy
  # source://activesupport//lib/active_support/syntax_error_proxy.rb#24
  def initialize(loc, ex); end

  # source://activesupport//lib/active_support/syntax_error_proxy.rb#29
  def spot(_); end
end

# source://activesupport//lib/active_support/tagged_logging.rb#29
module ActiveSupport::TaggedLogging
  # source://activesupport//lib/active_support/tagged_logging.rb#134
  def clear_tags!(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/tagged_logging.rb#147
  def flush; end

  # source://activesupport//lib/active_support/tagged_logging.rb#134
  def pop_tags(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/tagged_logging.rb#134
  def push_tags(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/tagged_logging.rb#136
  def tagged(*tags); end

  class << self
    # source://activesupport//lib/active_support/tagged_logging.rb#116
    def new(logger); end
  end
end

# source://activesupport//lib/active_support/tagged_logging.rb#30
module ActiveSupport::TaggedLogging::Formatter
  # source://activesupport//lib/active_support/tagged_logging.rb#32
  def call(severity, timestamp, progname, msg); end

  # source://activesupport//lib/active_support/tagged_logging.rb#51
  def clear_tags!; end

  # source://activesupport//lib/active_support/tagged_logging.rb#61
  def current_tags; end

  # source://activesupport//lib/active_support/tagged_logging.rb#47
  def pop_tags(count = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/tagged_logging.rb#43
  def push_tags(*tags); end

  # source://activesupport//lib/active_support/tagged_logging.rb#55
  def tag_stack; end

  # source://activesupport//lib/active_support/tagged_logging.rb#36
  def tagged(*tags); end

  # source://activesupport//lib/active_support/tagged_logging.rb#65
  def tags_text; end
end

# source://activesupport//lib/active_support/tagged_logging.rb#108
module ActiveSupport::TaggedLogging::LocalTagStorage
  # source://activesupport//lib/active_support/tagged_logging.rb#109
  def tag_stack; end

  # source://activesupport//lib/active_support/tagged_logging.rb#109
  def tag_stack=(_arg0); end

  class << self
    # source://activesupport//lib/active_support/tagged_logging.rb#111
    def extended(base); end
  end
end

# source://activesupport//lib/active_support/tagged_logging.rb#70
class ActiveSupport::TaggedLogging::TagStack
  # source://activesupport//lib/active_support/tagged_logging.rb#73
  def initialize; end

  # source://activesupport//lib/active_support/tagged_logging.rb#91
  def clear; end

  # source://activesupport//lib/active_support/tagged_logging.rb#96
  def format_message(message); end

  # source://activesupport//lib/active_support/tagged_logging.rb#86
  def pop_tags(count); end

  # source://activesupport//lib/active_support/tagged_logging.rb#78
  def push_tags(tags); end

  # source://activesupport//lib/active_support/tagged_logging.rb#71
  def tags; end
end

# source://activesupport//lib/active_support/test_case.rb#21
class ActiveSupport::TestCase < ::Minitest::Test
  include ::ActiveSupport::Testing::SetupAndTeardown
  include ::ActiveSupport::Testing::TestsWithoutAssertions
  include ::ActiveSupport::Testing::TaggedLogging
  include ::ActiveSupport::Callbacks
  include ::ActiveSupport::Testing::Assertions
  include ::ActiveSupport::Testing::ErrorReporterAssertions
  include ::ActiveSupport::Testing::Deprecation
  include ::ActiveSupport::Testing::ConstantStubbing
  include ::ActiveSupport::Testing::TimeHelpers
  include ::ActiveSupport::Testing::FileFixtures
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveSupport::Testing::SetupAndTeardown::ClassMethods
  extend ::ActiveSupport::Testing::Declarative

  # source://activesupport//lib/active_support/callbacks.rb#70
  def __callbacks; end

  # source://activesupport//lib/active_support/callbacks.rb#70
  def __callbacks?; end

  # source://activesupport//lib/active_support/callbacks.rb#912
  def _run_setup_callbacks(&block); end

  # source://activesupport//lib/active_support/callbacks.rb#912
  def _run_teardown_callbacks(&block); end

  # source://activesupport//lib/active_support/callbacks.rb#924
  def _setup_callbacks; end

  # source://activesupport//lib/active_support/callbacks.rb#924
  def _teardown_callbacks; end

  # source://minitest/5.24.1/lib/minitest/assertions.rb#736
  def assert_no_match(matcher, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.24.1/lib/minitest/assertions.rb#665
  def assert_not_empty(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.24.1/lib/minitest/assertions.rb#676
  def assert_not_equal(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.24.1/lib/minitest/assertions.rb#688
  def assert_not_in_delta(exp, act, delta = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.24.1/lib/minitest/assertions.rb#700
  def assert_not_in_epsilon(a, b, epsilon = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.24.1/lib/minitest/assertions.rb#707
  def assert_not_includes(collection, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.24.1/lib/minitest/assertions.rb#718
  def assert_not_instance_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.24.1/lib/minitest/assertions.rb#728
  def assert_not_kind_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.24.1/lib/minitest/assertions.rb#746
  def assert_not_nil(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.24.1/lib/minitest/assertions.rb#781
  def assert_not_operator(o1, op, o2 = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.24.1/lib/minitest/assertions.rb#804
  def assert_not_predicate(o1, op, msg = T.unsafe(nil)); end

  # source://minitest/5.24.1/lib/minitest/assertions.rb#813
  def assert_not_respond_to(obj, meth, msg = T.unsafe(nil), include_all: T.unsafe(nil)); end

  # source://minitest/5.24.1/lib/minitest/assertions.rb#822
  def assert_not_same(exp, act, msg = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/testing/file_fixtures.rb#20
  def file_fixture_path; end

  # source://activesupport//lib/active_support/testing/file_fixtures.rb#20
  def file_fixture_path?; end

  # source://activesupport//lib/active_support/test_case.rb#300
  def inspect; end

  # source://minitest/5.24.1/lib/minitest.rb#376
  def method_name; end

  class << self
    # source://activesupport//lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activesupport//lib/active_support/callbacks.rb#70
    def __callbacks=(value); end

    # source://activesupport//lib/active_support/callbacks.rb#70
    def __callbacks?; end

    # source://activesupport//lib/active_support/callbacks.rb#916
    def _setup_callbacks; end

    # source://activesupport//lib/active_support/callbacks.rb#920
    def _setup_callbacks=(value); end

    # source://activesupport//lib/active_support/callbacks.rb#916
    def _teardown_callbacks; end

    # source://activesupport//lib/active_support/callbacks.rb#920
    def _teardown_callbacks=(value); end

    # source://activesupport//lib/active_support/testing/file_fixtures.rb#20
    def file_fixture_path; end

    # source://activesupport//lib/active_support/testing/file_fixtures.rb#20
    def file_fixture_path=(value); end

    # source://activesupport//lib/active_support/testing/file_fixtures.rb#20
    def file_fixture_path?; end

    # source://activesupport//lib/active_support/test_case.rb#81
    def parallelize(workers: T.unsafe(nil), with: T.unsafe(nil), threshold: T.unsafe(nil)); end

    # source://activesupport//lib/active_support/test_case.rb#101
    def parallelize_setup(&block); end

    # source://activesupport//lib/active_support/test_case.rb#118
    def parallelize_teardown(&block); end

    # source://activesupport//lib/active_support/test_case.rb#44
    def test_order; end

    # source://activesupport//lib/active_support/test_case.rb#34
    def test_order=(new_order); end
  end
end

# source://activesupport//lib/active_support/test_case.rb#22
ActiveSupport::TestCase::Assertion = Minitest::Assertion

# source://activesupport//lib/active_support/testing/stream.rb#4
module ActiveSupport::Testing; end

# source://activesupport//lib/active_support/testing/assertions.rb#7
module ActiveSupport::Testing::Assertions
  # source://activesupport//lib/active_support/testing/assertions.rb#191
  def assert_changes(expression, message = T.unsafe(nil), from: T.unsafe(nil), to: T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/testing/assertions.rb#101
  def assert_difference(expression, *args, &block); end

  # source://activesupport//lib/active_support/testing/assertions.rb#238
  def assert_no_changes(expression, message = T.unsafe(nil), from: T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/testing/assertions.rb#153
  def assert_no_difference(expression, message = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/testing/assertions.rb#21
  def assert_not(object, message = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/testing/assertions.rb#48
  def assert_nothing_raised; end

  # source://activesupport//lib/active_support/testing/assertions.rb#34
  def assert_raise(*exp, match: T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/testing/assertions.rb#34
  def assert_raises(*exp, match: T.unsafe(nil), &block); end

  private

  # source://activesupport//lib/active_support/testing/assertions.rb#265
  def _assert_nothing_raised_or_warn(assertion, &block); end
end

# source://activesupport//lib/active_support/testing/assertions.rb#8
ActiveSupport::Testing::Assertions::UNTRACKED = T.let(T.unsafe(nil), Object)

# source://activesupport//lib/active_support/testing/constant_lookup.rb#32
module ActiveSupport::Testing::ConstantLookup
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveSupport::Testing::ConstantLookup::ClassMethods
end

# source://activesupport//lib/active_support/testing/constant_lookup.rb#35
module ActiveSupport::Testing::ConstantLookup::ClassMethods
  # source://activesupport//lib/active_support/testing/constant_lookup.rb#36
  def determine_constant_from_test_name(test_name); end
end

# source://activesupport//lib/active_support/testing/constant_stubbing.rb#5
module ActiveSupport::Testing::ConstantStubbing
  # source://activesupport//lib/active_support/testing/constant_stubbing.rb#28
  def stub_const(mod, constant, new_value, exists: T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/testing/declarative.rb#5
module ActiveSupport::Testing::Declarative
  # source://activesupport//lib/active_support/testing/declarative.rb#13
  def test(name, &block); end
end

# source://activesupport//lib/active_support/testing/deprecation.rb#7
module ActiveSupport::Testing::Deprecation
  # source://activesupport//lib/active_support/testing/deprecation.rb#30
  def assert_deprecated(match = T.unsafe(nil), deprecator = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/testing/deprecation.rb#55
  def assert_not_deprecated(deprecator, &block); end

  # source://activesupport//lib/active_support/testing/deprecation.rb#69
  def collect_deprecations(deprecator); end
end

# source://activesupport//lib/active_support/testing/error_reporter_assertions.rb#5
module ActiveSupport::Testing::ErrorReporterAssertions
  # source://activesupport//lib/active_support/testing/error_reporter_assertions.rb#88
  def assert_error_reported(error_class = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/testing/error_reporter_assertions.rb#62
  def assert_no_error_reported(&block); end
end

# source://activesupport//lib/active_support/testing/error_reporter_assertions.rb#6
module ActiveSupport::Testing::ErrorReporterAssertions::ErrorCollector
  class << self
    # source://activesupport//lib/active_support/testing/error_reporter_assertions.rb#16
    def record; end

    # source://activesupport//lib/active_support/testing/error_reporter_assertions.rb#29
    def report(error, **kwargs); end

    private

    # source://activesupport//lib/active_support/testing/error_reporter_assertions.rb#38
    def subscribe; end
  end
end

# source://activesupport//lib/active_support/testing/error_reporter_assertions.rb#10
class ActiveSupport::Testing::ErrorReporterAssertions::ErrorCollector::Report < ::Struct
  def context; end
  def context=(_); end
  def error; end
  def error=(_); end
  def handled; end
  def handled=(_); end
  def handled?; end
  def severity; end
  def severity=(_); end
  def source; end
  def source=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activesupport//lib/active_support/testing/file_fixtures.rb#16
module ActiveSupport::Testing::FileFixtures
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods

  # source://activesupport//lib/active_support/testing/file_fixtures.rb#26
  def file_fixture(fixture_name); end

  module GeneratedClassMethods
    def file_fixture_path; end
    def file_fixture_path=(value); end
    def file_fixture_path?; end
  end

  module GeneratedInstanceMethods
    def file_fixture_path; end
    def file_fixture_path?; end
  end
end

# source://activesupport//lib/active_support/testing/isolation.rb#5
module ActiveSupport::Testing::Isolation
  include ::ActiveSupport::Testing::Isolation::Forking

  # source://activesupport//lib/active_support/testing/isolation.rb#20
  def run; end

  class << self
    # source://activesupport//lib/active_support/testing/isolation.rb#16
    def forking_env?; end

    # source://activesupport//lib/active_support/testing/isolation.rb#10
    def included(klass); end
  end
end

# source://activesupport//lib/active_support/testing/isolation.rb#35
module ActiveSupport::Testing::Isolation::Forking
  # source://activesupport//lib/active_support/testing/isolation.rb#36
  def run_in_isolation(&blk); end
end

# source://activesupport//lib/active_support/testing/isolation.rb#73
module ActiveSupport::Testing::Isolation::Subprocess
  # source://activesupport//lib/active_support/testing/isolation.rb#78
  def run_in_isolation(&blk); end
end

# source://activesupport//lib/active_support/testing/isolation.rb#74
ActiveSupport::Testing::Isolation::Subprocess::ORIG_ARGV = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/testing/isolation.rb#8
class ActiveSupport::Testing::Isolation::SubprocessCrashed < ::StandardError; end

# source://activesupport//lib/active_support/testing/parallelization/server.rb#8
class ActiveSupport::Testing::Parallelization
  # source://activesupport//lib/active_support/testing/parallelization.rb#28
  def initialize(worker_count); end

  # source://activesupport//lib/active_support/testing/parallelization.rb#41
  def <<(work); end

  # source://activesupport//lib/active_support/testing/parallelization.rb#18
  def after_fork_hooks; end

  # source://activesupport//lib/active_support/testing/parallelization.rb#26
  def run_cleanup_hooks; end

  # source://activesupport//lib/active_support/testing/parallelization.rb#49
  def shutdown; end

  # source://activesupport//lib/active_support/testing/parallelization.rb#45
  def size; end

  # source://activesupport//lib/active_support/testing/parallelization.rb#35
  def start; end

  class << self
    # source://activesupport//lib/active_support/testing/parallelization.rb#14
    def after_fork_hook(&blk); end

    # source://activesupport//lib/active_support/testing/parallelization.rb#18
    def after_fork_hooks; end

    # source://activesupport//lib/active_support/testing/parallelization.rb#22
    def run_cleanup_hook(&blk); end

    # source://activesupport//lib/active_support/testing/parallelization.rb#26
    def run_cleanup_hooks; end
  end
end

# source://activesupport//lib/active_support/testing/parallelization/server.rb#9
class ActiveSupport::Testing::Parallelization::Server
  include ::DRb::DRbUndumped

  # source://activesupport//lib/active_support/testing/parallelization/server.rb#12
  def initialize; end

  # source://activesupport//lib/active_support/testing/parallelization/server.rb#28
  def <<(o); end

  # source://activesupport//lib/active_support/testing/parallelization/server.rb#48
  def active_workers?; end

  # source://activesupport//lib/active_support/testing/parallelization/server.rb#52
  def interrupt; end

  # source://activesupport//lib/active_support/testing/parallelization/server.rb#33
  def pop; end

  # source://activesupport//lib/active_support/testing/parallelization/server.rb#18
  def record(reporter, result); end

  # source://activesupport//lib/active_support/testing/parallelization/server.rb#56
  def shutdown; end

  # source://activesupport//lib/active_support/testing/parallelization/server.rb#40
  def start_worker(worker_id); end

  # source://activesupport//lib/active_support/testing/parallelization/server.rb#44
  def stop_worker(worker_id); end
end

# source://activesupport//lib/active_support/testing/parallelization/worker.rb#6
class ActiveSupport::Testing::Parallelization::Worker
  # source://activesupport//lib/active_support/testing/parallelization/worker.rb#7
  def initialize(number, url); end

  # source://activesupport//lib/active_support/testing/parallelization/worker.rb#80
  def after_fork; end

  # source://activesupport//lib/active_support/testing/parallelization/worker.rb#42
  def perform_job(job); end

  # source://activesupport//lib/active_support/testing/parallelization/worker.rb#86
  def run_cleanup; end

  # source://activesupport//lib/active_support/testing/parallelization/worker.rb#56
  def safe_record(reporter, result); end

  # source://activesupport//lib/active_support/testing/parallelization/worker.rb#14
  def start; end

  # source://activesupport//lib/active_support/testing/parallelization/worker.rb#36
  def work_from_queue; end

  private

  # source://activesupport//lib/active_support/testing/parallelization/worker.rb#93
  def add_setup_exception(result); end

  # source://activesupport//lib/active_support/testing/parallelization/worker.rb#97
  def set_process_title(status); end
end

# source://activesupport//lib/active_support/testing/parallelize_executor.rb#5
class ActiveSupport::Testing::ParallelizeExecutor
  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#8
  def initialize(size:, with:, threshold: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#22
  def <<(work); end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#6
  def parallelize_with; end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#26
  def shutdown; end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#6
  def size; end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#15
  def start; end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#6
  def threshold; end

  private

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#35
  def build_parallel_executor; end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#72
  def execution_info; end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#60
  def many_workers?; end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#31
  def parallel_executor; end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#47
  def parallelize; end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#52
  def parallelized?; end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#56
  def should_parallelize?; end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#68
  def show_execution_info; end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#64
  def tests_count; end
end

# source://activesupport//lib/active_support/testing/setup_and_teardown.rb#20
module ActiveSupport::Testing::SetupAndTeardown
  # source://activesupport//lib/active_support/testing/setup_and_teardown.rb#44
  def after_teardown; end

  # source://activesupport//lib/active_support/testing/setup_and_teardown.rb#39
  def before_setup; end

  class << self
    # source://activesupport//lib/active_support/testing/setup_and_teardown.rb#21
    def prepended(klass); end
  end
end

# source://activesupport//lib/active_support/testing/setup_and_teardown.rb#27
module ActiveSupport::Testing::SetupAndTeardown::ClassMethods
  # source://activesupport//lib/active_support/testing/setup_and_teardown.rb#29
  def setup(*args, &block); end

  # source://activesupport//lib/active_support/testing/setup_and_teardown.rb#34
  def teardown(*args, &block); end
end

# source://activesupport//lib/active_support/testing/time_helpers.rb#9
class ActiveSupport::Testing::SimpleStubs
  # source://activesupport//lib/active_support/testing/time_helpers.rb#12
  def initialize; end

  # source://activesupport//lib/active_support/testing/time_helpers.rb#23
  def stub_object(object, method_name, &block); end

  # source://activesupport//lib/active_support/testing/time_helpers.rb#53
  def stubbed?; end

  # source://activesupport//lib/active_support/testing/time_helpers.rb#48
  def stubbing(object, method_name); end

  # source://activesupport//lib/active_support/testing/time_helpers.rb#37
  def unstub_all!; end

  private

  # source://activesupport//lib/active_support/testing/time_helpers.rb#59
  def unstub_object(stub); end
end

# source://activesupport//lib/active_support/testing/time_helpers.rb#10
class ActiveSupport::Testing::SimpleStubs::Stub < ::Struct
  def method_name; end
  def method_name=(_); end
  def object; end
  def object=(_); end
  def original_method; end
  def original_method=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activesupport//lib/active_support/testing/stream.rb#5
module ActiveSupport::Testing::Stream
  private

  # source://activesupport//lib/active_support/testing/stream.rb#23
  def capture(stream); end

  # source://activesupport//lib/active_support/testing/stream.rb#17
  def quietly(&block); end

  # source://activesupport//lib/active_support/testing/stream.rb#7
  def silence_stream(stream); end
end

# source://activesupport//lib/active_support/testing/tagged_logging.rb#7
module ActiveSupport::Testing::TaggedLogging
  # source://activesupport//lib/active_support/testing/tagged_logging.rb#10
  def before_setup; end

  # source://activesupport//lib/active_support/testing/tagged_logging.rb#8
  def tagged_logger=(_arg0); end

  private

  # source://activesupport//lib/active_support/testing/tagged_logging.rb#22
  def tagged_logger; end
end

# source://activesupport//lib/active_support/testing/tests_without_assertions.rb#8
module ActiveSupport::Testing::TestsWithoutAssertions
  # source://activesupport//lib/active_support/testing/tests_without_assertions.rb#9
  def after_teardown; end
end

# source://activesupport//lib/active_support/testing/time_helpers.rb#68
module ActiveSupport::Testing::TimeHelpers
  # source://activesupport//lib/active_support/testing/time_helpers.rb#69
  def after_teardown; end

  # source://activesupport//lib/active_support/testing/time_helpers.rb#256
  def freeze_time(with_usec: T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/testing/time_helpers.rb#97
  def travel(duration, with_usec: T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/testing/time_helpers.rb#230
  def travel_back; end

  # source://activesupport//lib/active_support/testing/time_helpers.rb#133
  def travel_to(date_or_time, with_usec: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/testing/time_helpers.rb#230
  def unfreeze_time; end

  private

  # source://activesupport//lib/active_support/testing/time_helpers.rb#265
  def in_block; end

  # source://activesupport//lib/active_support/testing/time_helpers.rb#265
  def in_block=(_arg0); end

  # source://activesupport//lib/active_support/testing/time_helpers.rb#261
  def simple_stubs; end
end

# source://activesupport//lib/active_support/time_with_zone.rb#44
class ActiveSupport::TimeWithZone
  include ::DateAndTime::Compatibility
  include ::Comparable

  # source://activesupport//lib/active_support/time_with_zone.rb#51
  def initialize(utc_time, time_zone, local_time = T.unsafe(nil), period = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#299
  def +(other); end

  # source://activesupport//lib/active_support/time_with_zone.rb#333
  def -(other); end

  # source://activesupport//lib/active_support/time_with_zone.rb#232
  def <=>(other); end

  # source://activesupport//lib/active_support/time_with_zone.rb#494
  def acts_like_time?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#422
  def advance(options); end

  def after?(_arg0); end

  # source://activesupport//lib/active_support/time_with_zone.rb#361
  def ago(other); end

  # source://activesupport//lib/active_support/time_with_zone.rb#166
  def as_json(options = T.unsafe(nil)); end

  def before?(_arg0); end

  # source://activesupport//lib/active_support/time_with_zone.rb#240
  def between?(min, max); end

  # source://activesupport//lib/active_support/time_with_zone.rb#505
  def blank?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#382
  def change(options); end

  # source://activesupport//lib/active_support/time_with_zone.rb#63
  def comparable_time; end

  # source://activesupport//lib/active_support/time_with_zone.rb#434
  def day; end

  # source://activesupport//lib/active_support/time_with_zone.rb#94
  def dst?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#178
  def encode_with(coder); end

  # source://activesupport//lib/active_support/time_with_zone.rb#275
  def eql?(other); end

  # source://activesupport//lib/active_support/time_with_zone.rb#125
  def formatted_offset(colon = T.unsafe(nil), alternate_utc_string = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#513
  def freeze; end

  # source://activesupport//lib/active_support/time_with_zone.rb#270
  def future?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#63
  def getgm; end

  # source://activesupport//lib/active_support/time_with_zone.rb#83
  def getlocal(utc_offset = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#63
  def getutc; end

  # source://activesupport//lib/active_support/time_with_zone.rb#105
  def gmt?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#111
  def gmt_offset; end

  # source://activesupport//lib/active_support/time_with_zone.rb#63
  def gmtime; end

  # source://activesupport//lib/active_support/time_with_zone.rb#111
  def gmtoff; end

  # source://activesupport//lib/active_support/time_with_zone.rb#279
  def hash; end

  # source://activesupport//lib/active_support/time_with_zone.rb#434
  def hour; end

  # source://activesupport//lib/active_support/time_with_zone.rb#186
  def httpdate; end

  # source://activesupport//lib/active_support/time_with_zone.rb#299
  def in(other); end

  # source://activesupport//lib/active_support/time_with_zone.rb#77
  def in_time_zone(new_zone = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#174
  def init_with(coder); end

  # source://activesupport//lib/active_support/time_with_zone.rb#140
  def inspect; end

  # source://activesupport//lib/active_support/time_with_zone.rb#499
  def is_a?(klass); end

  # source://activesupport//lib/active_support/time_with_zone.rb#94
  def isdst; end

  # source://activesupport//lib/active_support/time_with_zone.rb#148
  def iso8601(fraction_digits = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#499
  def kind_of?(klass); end

  # source://activesupport//lib/active_support/time_with_zone.rb#83
  def localtime(utc_offset = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#519
  def marshal_dump; end

  # source://activesupport//lib/active_support/time_with_zone.rb#523
  def marshal_load(variables); end

  # source://activesupport//lib/active_support/time_with_zone.rb#434
  def mday; end

  # source://activesupport//lib/active_support/time_with_zone.rb#544
  def method_missing(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/time_with_zone.rb#434
  def min; end

  # source://activesupport//lib/active_support/time_with_zone.rb#434
  def mon; end

  # source://activesupport//lib/active_support/time_with_zone.rb#434
  def month; end

  # source://activesupport//lib/active_support/time_with_zone.rb#257
  def next_day?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#434
  def nsec; end

  # source://activesupport//lib/active_support/time_with_zone.rb#245
  def past?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#72
  def period; end

  # source://activesupport//lib/active_support/time_with_zone.rb#509
  def present?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#264
  def prev_day?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#529
  def respond_to?(sym, include_priv = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#194
  def rfc2822; end

  # source://activesupport//lib/active_support/time_with_zone.rb#148
  def rfc3339(fraction_digits = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#194
  def rfc822; end

  # source://activesupport//lib/active_support/time_with_zone.rb#434
  def sec; end

  # source://activesupport//lib/active_support/time_with_zone.rb#299
  def since(other); end

  # source://activesupport//lib/active_support/time_with_zone.rb#226
  def strftime(format); end

  # source://activesupport//lib/active_support/time_with_zone.rb#58
  def time; end

  # source://activesupport//lib/active_support/time_with_zone.rb#49
  def time_zone; end

  # source://activesupport//lib/active_support/time_with_zone.rb#445
  def to_a; end

  # source://activesupport//lib/active_support/time_with_zone.rb#434
  def to_date; end

  # source://activesupport//lib/active_support/time_with_zone.rb#478
  def to_datetime; end

  # source://activesupport//lib/active_support/time_with_zone.rb#453
  def to_f; end

  # source://activesupport//lib/active_support/time_with_zone.rb#212
  def to_formatted_s(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#212
  def to_fs(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#461
  def to_i; end

  # source://activesupport//lib/active_support/time_with_zone.rb#470
  def to_r; end

  # source://activesupport//lib/active_support/time_with_zone.rb#200
  def to_s; end

  # source://activesupport//lib/active_support/time_with_zone.rb#485
  def to_time; end

  # source://activesupport//lib/active_support/time_with_zone.rb#251
  def today?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#257
  def tomorrow?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#461
  def tv_sec; end

  # source://activesupport//lib/active_support/time_with_zone.rb#434
  def usec; end

  # source://activesupport//lib/active_support/time_with_zone.rb#63
  def utc; end

  # source://activesupport//lib/active_support/time_with_zone.rb#105
  def utc?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#111
  def utc_offset; end

  # source://activesupport//lib/active_support/time_with_zone.rb#434
  def wday; end

  # source://activesupport//lib/active_support/time_with_zone.rb#148
  def xmlschema(fraction_digits = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#434
  def yday; end

  # source://activesupport//lib/active_support/time_with_zone.rb#434
  def year; end

  # source://activesupport//lib/active_support/time_with_zone.rb#264
  def yesterday?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#133
  def zone; end

  private

  # source://activesupport//lib/active_support/time_with_zone.rb#580
  def duration_of_variable_length?(obj); end

  # source://activesupport//lib/active_support/time_with_zone.rb#561
  def get_period_and_ensure_valid_local_time(period); end

  # source://activesupport//lib/active_support/time_with_zone.rb#553
  def incorporate_utc_offset(time, offset); end

  # source://activesupport//lib/active_support/time_with_zone.rb#537
  def respond_to_missing?(sym, include_priv); end

  # source://activesupport//lib/active_support/time_with_zone.rb#574
  def transfer_time_values_to_utc_constructor(time); end

  # source://activesupport//lib/active_support/time_with_zone.rb#584
  def wrap_with_time_zone(time); end
end

# source://activesupport//lib/active_support/time_with_zone.rb#45
ActiveSupport::TimeWithZone::PRECISIONS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/time_with_zone.rb#551
ActiveSupport::TimeWithZone::SECONDS_PER_DAY = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/values/time_zone.rb#31
class ActiveSupport::TimeZone
  include ::Comparable

  # source://activesupport//lib/active_support/values/time_zone.rb#311
  def initialize(name, utc_offset = T.unsafe(nil), tzinfo = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/values/time_zone.rb#335
  def <=>(zone); end

  # source://activesupport//lib/active_support/values/time_zone.rb#344
  def =~(re); end

  # source://activesupport//lib/active_support/values/time_zone.rb#381
  def at(*args); end

  # source://activesupport//lib/active_support/values/time_zone.rb#577
  def encode_with(coder); end

  # source://activesupport//lib/active_support/values/time_zone.rb#329
  def formatted_offset(colon = T.unsafe(nil), alternate_utc_string = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/values/time_zone.rb#573
  def init_with(coder); end

  # source://activesupport//lib/active_support/values/time_zone.rb#398
  def iso8601(str); end

  # source://activesupport//lib/active_support/values/time_zone.rb#365
  def local(*args); end

  # source://activesupport//lib/active_support/values/time_zone.rb#553
  def local_to_utc(time, dst = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/values/time_zone.rb#350
  def match?(re); end

  # source://activesupport//lib/active_support/values/time_zone.rb#298
  def name; end

  # source://activesupport//lib/active_support/values/time_zone.rb#518
  def now; end

  # source://activesupport//lib/active_support/values/time_zone.rb#455
  def parse(str, now = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/values/time_zone.rb#565
  def period_for_local(time, dst = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/values/time_zone.rb#559
  def period_for_utc(time); end

  # source://activesupport//lib/active_support/values/time_zone.rb#569
  def periods_for_local(time); end

  # source://activesupport//lib/active_support/values/time_zone.rb#471
  def rfc3339(str); end

  # source://activesupport//lib/active_support/values/time_zone.rb#509
  def strptime(str, format, now = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/values/time_zone.rb#356
  def to_s; end

  # source://activesupport//lib/active_support/values/time_zone.rb#523
  def today; end

  # source://activesupport//lib/active_support/values/time_zone.rb#528
  def tomorrow; end

  # source://activesupport//lib/active_support/values/time_zone.rb#299
  def tzinfo; end

  # source://activesupport//lib/active_support/values/time_zone.rb#319
  def utc_offset; end

  # source://activesupport//lib/active_support/values/time_zone.rb#544
  def utc_to_local(time); end

  # source://activesupport//lib/active_support/values/time_zone.rb#533
  def yesterday; end

  private

  # source://activesupport//lib/active_support/values/time_zone.rb#583
  def parts_to_time(parts, now); end

  # source://activesupport//lib/active_support/values/time_zone.rb#608
  def time_now; end

  class << self
    # source://activesupport//lib/active_support/values/time_zone.rb#234
    def [](arg); end

    # source://activesupport//lib/active_support/values/time_zone.rb#225
    def all; end

    # source://activesupport//lib/active_support/values/time_zone.rb#267
    def clear; end

    # source://activesupport//lib/active_support/values/time_zone.rb#262
    def country_zones(country_code); end

    def create(*_arg0); end

    # source://activesupport//lib/active_support/values/time_zone.rb#207
    def find_tzinfo(name); end

    # source://activesupport//lib/active_support/values/time_zone.rb#218
    def new(name); end

    # source://activesupport//lib/active_support/values/time_zone.rb#199
    def seconds_to_utc_offset(seconds, colon = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/values/time_zone.rb#256
    def us_zones; end

    private

    # source://activesupport//lib/active_support/values/time_zone.rb#275
    def load_country_zones(code); end

    # source://activesupport//lib/active_support/values/time_zone.rb#289
    def zones_map; end
  end
end

# source://activesupport//lib/active_support/values/time_zone.rb#33
ActiveSupport::TimeZone::MAPPING = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/values/time_zone.rb#188
ActiveSupport::TimeZone::UTC_OFFSET_WITHOUT_COLON = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/values/time_zone.rb#187
ActiveSupport::TimeZone::UTC_OFFSET_WITH_COLON = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/core_ext/object/json.rb#35
module ActiveSupport::ToJsonWithActiveSupportEncoder
  # source://activesupport//lib/active_support/core_ext/object/json.rb#36
  def to_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/try.rb#6
module ActiveSupport::Tryable
  # source://activesupport//lib/active_support/core_ext/object/try.rb#7
  def try(*args, **_arg1, &block); end

  # source://activesupport//lib/active_support/core_ext/object/try.rb#20
  def try!(*args, **_arg1, &block); end
end

# source://activesupport//lib/active_support/gem_version.rb#9
module ActiveSupport::VERSION; end

# source://activesupport//lib/active_support/gem_version.rb#10
ActiveSupport::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/gem_version.rb#11
ActiveSupport::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/gem_version.rb#13
ActiveSupport::VERSION::PRE = T.let(T.unsafe(nil), T.untyped)

# source://activesupport//lib/active_support/gem_version.rb#15
ActiveSupport::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/gem_version.rb#12
ActiveSupport::VERSION::TINY = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/core_ext/hash/conversions.rb#140
class ActiveSupport::XMLConverter
  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#151
  def initialize(xml, disallowed_types = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#156
  def to_h; end

  private

  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#222
  def become_array?(value); end

  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#218
  def become_content?(value); end

  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#226
  def become_empty_string?(value); end

  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#232
  def become_hash?(value); end

  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#172
  def deep_to_h(value); end

  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#241
  def garbage?(value); end

  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#161
  def normalize_keys(params); end

  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#236
  def nothing?(value); end

  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#257
  def process_array(value); end

  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#248
  def process_content(value); end

  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#185
  def process_hash(value); end
end

# source://activesupport//lib/active_support/core_ext/hash/conversions.rb#149
ActiveSupport::XMLConverter::DISALLOWED_TYPES = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/core_ext/hash/conversions.rb#143
class ActiveSupport::XMLConverter::DisallowedType < ::StandardError
  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#144
  def initialize(type); end
end

# source://activesupport//lib/active_support/xml_mini.rb#17
module ActiveSupport::XmlMini
  extend ::ActiveSupport::XmlMini

  # source://activesupport//lib/active_support/xml_mini.rb#101
  def backend; end

  # source://activesupport//lib/active_support/xml_mini.rb#105
  def backend=(name); end

  # source://activesupport//lib/active_support/xml_mini.rb#96
  def depth; end

  # source://activesupport//lib/active_support/xml_mini.rb#96
  def depth=(_arg0); end

  # source://activesupport//lib/active_support/xml_mini.rb#99
  def parse(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/xml_mini.rb#152
  def rename_key(key, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/xml_mini.rb#119
  def to_tag(key, value, options); end

  # source://activesupport//lib/active_support/xml_mini.rb#111
  def with_backend(name); end

  private

  # source://activesupport//lib/active_support/xml_mini.rb#163
  def _dasherize(key); end

  # source://activesupport//lib/active_support/xml_mini.rb#169
  def _parse_binary(bin, entity); end

  # source://activesupport//lib/active_support/xml_mini.rb#180
  def _parse_file(file, entity); end

  # source://activesupport//lib/active_support/xml_mini.rb#188
  def _parse_hex_binary(bin); end

  # source://activesupport//lib/active_support/xml_mini.rb#200
  def cast_backend_name_to_module(name); end

  # source://activesupport//lib/active_support/xml_mini.rb#192
  def current_thread_backend; end

  # source://activesupport//lib/active_support/xml_mini.rb#196
  def current_thread_backend=(name); end
end

# source://activesupport//lib/active_support/xml_mini.rb#34
ActiveSupport::XmlMini::DEFAULT_ENCODINGS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/xml_mini.rb#56
ActiveSupport::XmlMini::FORMATTING = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/xml_mini.rb#22
module ActiveSupport::XmlMini::FileLike
  # source://activesupport//lib/active_support/xml_mini.rb#29
  def content_type; end

  # source://activesupport//lib/active_support/xml_mini.rb#23
  def content_type=(_arg0); end

  # source://activesupport//lib/active_support/xml_mini.rb#25
  def original_filename; end

  # source://activesupport//lib/active_support/xml_mini.rb#23
  def original_filename=(_arg0); end
end

# source://activesupport//lib/active_support/xml_mini.rb#67
ActiveSupport::XmlMini::PARSING = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/xml_mini.rb#39
ActiveSupport::XmlMini::TYPE_NAMES = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/xml_mini/rexml.rb#8
module ActiveSupport::XmlMini_REXML
  extend ::ActiveSupport::XmlMini_REXML

  # source://activesupport//lib/active_support/xml_mini/rexml.rb#20
  def parse(data); end

  private

  # source://activesupport//lib/active_support/xml_mini/rexml.rb#63
  def collapse(element, depth); end

  # source://activesupport//lib/active_support/xml_mini/rexml.rb#133
  def empty_content?(element); end

  # source://activesupport//lib/active_support/xml_mini/rexml.rb#123
  def get_attributes(element); end

  # source://activesupport//lib/active_support/xml_mini/rexml.rb#103
  def merge!(hash, key, value); end

  # source://activesupport//lib/active_support/xml_mini/rexml.rb#54
  def merge_element!(hash, element, depth); end

  # source://activesupport//lib/active_support/xml_mini/rexml.rb#81
  def merge_texts!(hash, element); end

  # source://activesupport//lib/active_support/xml_mini/rexml.rb#41
  def require_rexml; end
end

# source://activesupport//lib/active_support/xml_mini/rexml.rb#11
ActiveSupport::XmlMini_REXML::CONTENT_KEY = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/core_ext/array/extract_options.rb#14
class Array
  include ::Enumerable

  # source://activesupport//lib/active_support/core_ext/object/json.rb#166
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#258
  def compact_blank!; end

  # source://activesupport//lib/active_support/core_ext/object/deep_dup.rb#29
  def deep_dup; end

  # source://activesupport//lib/active_support/core_ext/array/access.rb#47
  def excluding(*elements); end

  # source://activesupport//lib/active_support/core_ext/array/extract.rb#10
  def extract!; end

  # source://activesupport//lib/active_support/core_ext/array/extract_options.rb#24
  def extract_options!; end

  # source://activesupport//lib/active_support/core_ext/array/access.rb#76
  def fifth; end

  # source://activesupport//lib/active_support/core_ext/array/access.rb#83
  def forty_two; end

  # source://activesupport//lib/active_support/core_ext/array/access.rb#69
  def fourth; end

  # source://activesupport//lib/active_support/core_ext/array/access.rb#12
  def from(position); end

  # source://activesupport//lib/active_support/core_ext/array/grouping.rb#62
  def in_groups(number, fill_with = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/core_ext/array/grouping.rb#22
  def in_groups_of(number, fill_with = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/core_ext/array/access.rb#36
  def including(*elements); end

  # source://activesupport//lib/active_support/core_ext/array/inquiry.rb#16
  def inquiry; end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#104
  def present?; end

  # source://activesupport//lib/active_support/core_ext/array/access.rb#55
  def second; end

  # source://activesupport//lib/active_support/core_ext/array/access.rb#97
  def second_to_last; end

  # source://activesupport//lib/active_support/core_ext/array/grouping.rb#93
  def split(value = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/core_ext/array/access.rb#62
  def third; end

  # source://activesupport//lib/active_support/core_ext/array/access.rb#90
  def third_to_last; end

  # source://activesupport//lib/active_support/core_ext/array/access.rb#24
  def to(position); end

  # source://activesupport//lib/active_support/core_ext/array/conversions.rb#94
  def to_formatted_s(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/array/conversions.rb#94
  def to_fs(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#42
  def to_param; end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#50
  def to_query(key); end

  # source://activesupport//lib/active_support/core_ext/array/conversions.rb#60
  def to_sentence(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/array/conversions.rb#183
  def to_xml(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/array/access.rb#47
  def without(*elements); end

  class << self
    # source://activesupport//lib/active_support/core_ext/array/wrap.rb#39
    def wrap(object); end
  end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#126
class BigDecimal < ::Numeric
  include ::ActiveSupport::BigDecimalWithDefaultFormat
  include ::ActiveSupport::NumericWithFormat

  # source://activesupport//lib/active_support/core_ext/object/json.rb#136
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/big_decimal/conversions.rb#8
  def to_s(format = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/class/attribute.rb#5
class Class < ::Module
  include ::ActiveSupport::DescendantsTracker::ReloadedClassesFiltering

  # source://activesupport//lib/active_support/core_ext/class/attribute.rb#85
  def class_attribute(*attrs, instance_accessor: T.unsafe(nil), instance_reader: T.unsafe(nil), instance_writer: T.unsafe(nil), instance_predicate: T.unsafe(nil), default: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/descendants_tracker.rb#63
  def descendants; end

  # source://activesupport//lib/active_support/descendants_tracker.rb#59
  def subclasses; end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#69
class Data
  # source://activesupport//lib/active_support/core_ext/object/json.rb#70
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/date/zones.rb#6
class Date
  include ::Comparable
  include ::DateAndTime::Zones
  include ::DateAndTime::Calculations

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#90
  def +(other); end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#100
  def -(other); end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#152
  def <=>(other); end

  # source://activesupport//lib/active_support/core_ext/date/acts_like.rb#7
  def acts_like_date?; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#127
  def advance(options); end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#55
  def ago(seconds); end

  # source://activesupport//lib/active_support/core_ext/object/json.rb#205
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#67
  def at_beginning_of_day; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#85
  def at_end_of_day; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#75
  def at_midday; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#75
  def at_middle_of_day; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#67
  def at_midnight; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#75
  def at_noon; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#67
  def beginning_of_day; end

  # source://activesupport//lib/active_support/core_ext/date/blank.rb#11
  def blank?; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#143
  def change(options); end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#152
  def compare_with_coercion(other); end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#85
  def end_of_day; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#61
  def in(seconds); end

  # source://activesupport//lib/active_support/core_ext/date/conversions.rb#61
  def inspect; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#75
  def midday; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#75
  def middle_of_day; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#67
  def midnight; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#100
  def minus_with_duration(other); end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#75
  def noon; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#90
  def plus_with_duration(other); end

  # source://activesupport//lib/active_support/core_ext/date/blank.rb#15
  def present?; end

  # source://activesupport//lib/active_support/core_ext/date/conversions.rb#61
  def readable_inspect; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#61
  def since(seconds); end

  # source://activesupport//lib/active_support/core_ext/date/conversions.rb#47
  def to_formatted_s(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date/conversions.rb#47
  def to_fs(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date/conversions.rb#81
  def to_time(form = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date/conversions.rb#93
  def xmlschema; end

  class << self
    # source://activesupport//lib/active_support/core_ext/date/calculations.rb#19
    def beginning_of_week; end

    # source://activesupport//lib/active_support/core_ext/date/calculations.rb#27
    def beginning_of_week=(week_start); end

    # source://activesupport//lib/active_support/core_ext/date/calculations.rb#14
    def beginning_of_week_default; end

    # source://activesupport//lib/active_support/core_ext/date/calculations.rb#14
    def beginning_of_week_default=(_arg0); end

    # source://activesupport//lib/active_support/core_ext/date/calculations.rb#48
    def current; end

    # source://activesupport//lib/active_support/core_ext/date/calculations.rb#32
    def find_beginning_of_week!(week_start); end

    # source://activesupport//lib/active_support/core_ext/date/calculations.rb#43
    def tomorrow; end

    # source://activesupport//lib/active_support/core_ext/date/calculations.rb#38
    def yesterday; end
  end
end

# source://activesupport//lib/active_support/core_ext/date/conversions.rb#9
Date::DATE_FORMATS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/core_ext/date_and_time/compatibility.rb#6
module DateAndTime; end

# source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#7
module DateAndTime::Calculations
  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#72
  def after?(date_or_time); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#310
  def all_day; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#321
  def all_month; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#326
  def all_quarter; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#316
  def all_week(start_day = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#331
  def all_year; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#125
  def at_beginning_of_month; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#139
  def at_beginning_of_quarter; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#267
  def at_beginning_of_week(start_day = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#179
  def at_beginning_of_year; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#296
  def at_end_of_month; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#154
  def at_end_of_quarter; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#283
  def at_end_of_week(start_day = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#304
  def at_end_of_year; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#67
  def before?(date_or_time); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#125
  def beginning_of_month; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#139
  def beginning_of_quarter; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#267
  def beginning_of_week(start_day = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#179
  def beginning_of_year; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#77
  def days_ago(days); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#82
  def days_since(days); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#258
  def days_to_week_start(start_day = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#296
  def end_of_month; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#154
  def end_of_quarter; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#283
  def end_of_week(start_day = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#304
  def end_of_year; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#52
  def future?; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#240
  def last_month; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#245
  def last_quarter; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#223
  def last_week(start_day = T.unsafe(nil), same_time: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#230
  def last_weekday; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#251
  def last_year; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#275
  def monday; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#97
  def months_ago(months); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#102
  def months_since(months); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#35
  def next_day?; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#340
  def next_occurring(day_of_week); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#215
  def next_quarter; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#200
  def next_week(given_day_in_next_week = T.unsafe(nil), same_time: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#206
  def next_weekday; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#62
  def on_weekday?; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#57
  def on_weekend?; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#47
  def past?; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#41
  def prev_day?; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#351
  def prev_occurring(day_of_week); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#245
  def prev_quarter; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#223
  def prev_week(start_day = T.unsafe(nil), same_time: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#230
  def prev_weekday; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#166
  def quarter; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#290
  def sunday; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#30
  def today?; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#25
  def tomorrow; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#35
  def tomorrow?; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#87
  def weeks_ago(weeks); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#92
  def weeks_since(weeks); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#107
  def years_ago(years); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#112
  def years_since(years); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#20
  def yesterday; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#41
  def yesterday?; end

  private

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#370
  def copy_time_to(other); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#366
  def days_span(day); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#358
  def first_hour(date_or_time); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#362
  def last_hour(date_or_time); end
end

# source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#8
DateAndTime::Calculations::DAYS_INTO_WEEK = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#17
DateAndTime::Calculations::WEEKEND_DAYS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/core_ext/date_and_time/compatibility.rb#7
module DateAndTime::Compatibility
  # source://activesupport//lib/active_support/core_ext/date_and_time/compatibility.rb#39
  def preserve_timezone; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/compatibility.rb#56
  def utc_to_local_returns_utc_offset_times; end

  class << self
    # source://activesupport//lib/active_support/core_ext/date_and_time/compatibility.rb#24
    def preserve_timezone; end

    # source://activesupport//lib/active_support/core_ext/date_and_time/compatibility.rb#15
    def preserve_timezone=(val); end

    # source://activesupport//lib/active_support/core_ext/date_and_time/compatibility.rb#56
    def utc_to_local_returns_utc_offset_times; end

    # source://activesupport//lib/active_support/core_ext/date_and_time/compatibility.rb#56
    def utc_to_local_returns_utc_offset_times=(val); end
  end
end

# source://activesupport//lib/active_support/core_ext/date_and_time/zones.rb#4
module DateAndTime::Zones
  # source://activesupport//lib/active_support/core_ext/date_and_time/zones.rb#20
  def in_time_zone(zone = T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/core_ext/date_and_time/zones.rb#32
  def time_with_zone(time, zone); end
end

# source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#5
class DateTime < ::Date
  include ::DateAndTime::Compatibility

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#208
  def <=>(other); end

  # source://activesupport//lib/active_support/core_ext/date_time/acts_like.rb#8
  def acts_like_date?; end

  # source://activesupport//lib/active_support/core_ext/date_time/acts_like.rb#13
  def acts_like_time?; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#82
  def advance(options); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#109
  def ago(seconds); end

  # source://activesupport//lib/active_support/core_ext/object/json.rb#215
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#122
  def at_beginning_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#146
  def at_beginning_of_hour; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#158
  def at_beginning_of_minute; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#140
  def at_end_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#152
  def at_end_of_hour; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#164
  def at_end_of_minute; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#130
  def at_midday; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#130
  def at_middle_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#122
  def at_midnight; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#130
  def at_noon; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#122
  def beginning_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#146
  def beginning_of_hour; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#158
  def beginning_of_minute; end

  # source://activesupport//lib/active_support/core_ext/date_time/blank.rb#11
  def blank?; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#51
  def change(options); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#140
  def end_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#152
  def end_of_hour; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#164
  def end_of_minute; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#51
  def formatted_offset(colon = T.unsafe(nil), alternate_utc_string = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#184
  def getgm; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#170
  def getlocal(utc_offset = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#184
  def getutc; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#184
  def gmtime; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#116
  def in(seconds); end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#56
  def inspect; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#170
  def localtime(utc_offset = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#130
  def midday; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#130
  def middle_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#122
  def midnight; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#130
  def noon; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#94
  def nsec; end

  # source://activesupport//lib/active_support/core_ext/date_time/blank.rb#15
  def present?; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#56
  def readable_inspect; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#20
  def seconds_since_midnight; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#29
  def seconds_until_end_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#116
  def since(seconds); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#36
  def subsec; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#79
  def to_f; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#35
  def to_formatted_s(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#35
  def to_fs(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#84
  def to_i; end

  # source://activesupport//lib/active_support/core_ext/date_time/compatibility.rb#15
  def to_time; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#89
  def usec; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#184
  def utc; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#197
  def utc?; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#202
  def utc_offset; end

  private

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#99
  def offset_in_seconds; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#103
  def seconds_since_unix_epoch; end

  class << self
    # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#69
    def civil_from_format(utc_or_local, year, month = T.unsafe(nil), day = T.unsafe(nil), hour = T.unsafe(nil), min = T.unsafe(nil), sec = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#10
    def current; end
  end
end

# source://activesupport//lib/active_support/core_ext/object/try.rb#117
class Delegator < ::BasicObject
  include ::ActiveSupport::Tryable
end

# source://activesupport//lib/active_support/core_ext/digest/uuid.rb#7
module Digest::UUID
  class << self
    # source://activesupport//lib/active_support/core_ext/digest/uuid.rb#58
    def nil_uuid; end

    # source://activesupport//lib/active_support/core_ext/digest/uuid.rb#19
    def uuid_from_hash(hash_class, namespace, name); end

    # source://activesupport//lib/active_support/core_ext/digest/uuid.rb#42
    def uuid_v3(uuid_namespace, name); end

    # source://activesupport//lib/active_support/core_ext/digest/uuid.rb#52
    def uuid_v4; end

    # source://activesupport//lib/active_support/core_ext/digest/uuid.rb#47
    def uuid_v5(uuid_namespace, name); end

    private

    # source://activesupport//lib/active_support/core_ext/digest/uuid.rb#62
    def pack_uuid_namespace(namespace); end
  end
end

# source://activesupport//lib/active_support/core_ext/digest/uuid.rb#8
Digest::UUID::DNS_NAMESPACE = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/core_ext/digest/uuid.rb#10
Digest::UUID::OID_NAMESPACE = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/core_ext/digest/uuid.rb#9
Digest::UUID::URL_NAMESPACE = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/core_ext/digest/uuid.rb#11
Digest::UUID::X500_NAMESPACE = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/core_ext/erb/util.rb#39
module ERB::Util
  include ::ActiveSupport::CoreExt::ERBUtil
  include ::ActiveSupport::CoreExt::ERBUtilPrivate
  extend ::ActiveSupport::CoreExt::ERBUtil

  private

  # source://activesupport//lib/active_support/core_ext/erb/util.rb#63
  def html_escape_once(s); end

  # source://activesupport//lib/active_support/core_ext/erb/util.rb#124
  def json_escape(s); end

  # source://activesupport//lib/active_support/core_ext/erb/util.rb#142
  def xml_name_escape(name); end

  class << self
    # source://activesupport//lib/active_support/core_ext/erb/util.rb#25
    def h(s); end

    # source://activesupport//lib/active_support/core_ext/erb/util.rb#25
    def html_escape(s); end

    # source://activesupport//lib/active_support/core_ext/erb/util.rb#63
    def html_escape_once(s); end

    # source://activesupport//lib/active_support/core_ext/erb/util.rb#124
    def json_escape(s); end

    # source://activesupport//lib/active_support/core_ext/erb/util.rb#161
    def tokenize(source); end

    # source://activesupport//lib/active_support/core_ext/erb/util.rb#10
    def unwrapped_html_escape(s); end

    # source://activesupport//lib/active_support/core_ext/erb/util.rb#142
    def xml_name_escape(name); end
  end
end

# source://activesupport//lib/active_support/core_ext/erb/util.rb#40
ERB::Util::HTML_ESCAPE = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/core_ext/erb/util.rb#41
ERB::Util::HTML_ESCAPE_ONCE_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/core_ext/erb/util.rb#49
ERB::Util::INVALID_TAG_NAME_FOLLOWING_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/core_ext/erb/util.rb#47
ERB::Util::INVALID_TAG_NAME_START_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/core_ext/erb/util.rb#50
ERB::Util::SAFE_XML_TAG_NAME_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/core_ext/erb/util.rb#48
ERB::Util::TAG_NAME_FOLLOWING_CODEPOINTS = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/core_ext/erb/util.rb#51
ERB::Util::TAG_NAME_REPLACEMENT_CHAR = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/core_ext/erb/util.rb#44
ERB::Util::TAG_NAME_START_CODEPOINTS = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/core_ext/object/json.rb#147
module Enumerable
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  extend ::ActiveSupport::EnumerableCoreExt::Constants

  # source://activesupport//lib/active_support/core_ext/object/json.rb#148
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#184
  def compact_blank; end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#118
  def exclude?(object); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#132
  def excluding(*elements); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#196
  def in_order_of(key, series); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#112
  def including(*elements); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#52
  def index_by; end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#75
  def index_with(default = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#93
  def many?; end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#40
  def maximum(key); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#32
  def minimum(key); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#161
  def pick(*keys); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#145
  def pluck(*keys); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#206
  def sole; end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#132
  def without(*elements); end
end

# source://activesupport//lib/active_support/core_ext/enumerable.rb#21
class Enumerable::SoleItemExpectedError < ::StandardError; end

# source://activesupport//lib/active_support/core_ext/object/json.rb#248
class Exception
  # source://activesupport//lib/active_support/core_ext/object/json.rb#249
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/blank.rb#65
class FalseClass
  # source://activesupport//lib/active_support/core_ext/object/json.rb#89
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#71
  def blank?; end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#75
  def present?; end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#34
  def to_param; end
end

# source://activesupport//lib/active_support/core_ext/file/atomic.rb#5
class File < ::IO
  class << self
    # source://activesupport//lib/active_support/core_ext/file/atomic.rb#21
    def atomic_write(file_name, temp_dir = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/core_ext/file/atomic.rb#56
    def probe_stat_in(dir); end
  end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#118
class Float < ::Numeric
  include ::ActiveSupport::NumericWithFormat

  # source://activesupport//lib/active_support/core_ext/object/json.rb#121
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/hash/deep_merge.rb#5
class Hash
  include ::Enumerable
  include ::ActiveSupport::DeepMergeable

  # source://activesupport//lib/active_support/core_ext/object/json.rb#172
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#48
  def assert_valid_keys(*valid_keys); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#217
  def compact_blank; end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#227
  def compact_blank!; end

  # source://activesupport//lib/active_support/core_ext/object/deep_dup.rb#43
  def deep_dup; end

  # source://activesupport//lib/active_support/core_ext/hash/deep_merge.rb#39
  def deep_merge?(other); end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#84
  def deep_stringify_keys; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#91
  def deep_stringify_keys!; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#103
  def deep_symbolize_keys; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#110
  def deep_symbolize_keys!; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#65
  def deep_transform_keys(&block); end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#72
  def deep_transform_keys!(&block); end

  # source://activesupport//lib/active_support/core_ext/hash/deep_transform_values.rb#12
  def deep_transform_values(&block); end

  # source://activesupport//lib/active_support/core_ext/hash/deep_transform_values.rb#19
  def deep_transform_values!(&block); end

  # source://activesupport//lib/active_support/core_ext/hash/except.rb#20
  def except!(*keys); end

  # source://activesupport//lib/active_support/core_ext/hash/slice.rb#24
  def extract!(*keys); end

  # source://activesupport//lib/active_support/core_ext/array/extract_options.rb#9
  def extractable_options?; end

  # source://activesupport//lib/active_support/core_ext/hash/indifferent_access.rb#9
  def nested_under_indifferent_access; end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#118
  def present?; end

  # source://activesupport//lib/active_support/core_ext/hash/reverse_merge.rb#14
  def reverse_merge(other_hash); end

  # source://activesupport//lib/active_support/core_ext/hash/reverse_merge.rb#20
  def reverse_merge!(other_hash); end

  # source://activesupport//lib/active_support/core_ext/hash/reverse_merge.rb#20
  def reverse_update(other_hash); end

  # source://activesupport//lib/active_support/core_ext/hash/slice.rb#10
  def slice!(*keys); end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#10
  def stringify_keys; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#16
  def stringify_keys!; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#27
  def symbolize_keys; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#34
  def symbolize_keys!; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#27
  def to_options; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#34
  def to_options!; end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#75
  def to_param(namespace = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#75
  def to_query(namespace = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#74
  def to_xml(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/hash/reverse_merge.rb#14
  def with_defaults(other_hash); end

  # source://activesupport//lib/active_support/core_ext/hash/reverse_merge.rb#20
  def with_defaults!(other_hash); end

  # source://activesupport//lib/active_support/core_ext/hash/indifferent_access.rb#9
  def with_indifferent_access; end

  private

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#116
  def _deep_transform_keys_in_object(object, &block); end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#129
  def _deep_transform_keys_in_object!(object, &block); end

  # source://activesupport//lib/active_support/core_ext/hash/deep_transform_values.rb#25
  def _deep_transform_values_in_object(object, &block); end

  # source://activesupport//lib/active_support/core_ext/hash/deep_transform_values.rb#36
  def _deep_transform_values_in_object!(object, &block); end

  class << self
    # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#133
    def from_trusted_xml(xml); end

    # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#128
    def from_xml(xml, disallowed_types = T.unsafe(nil)); end
  end
end

# source://activesupport//lib/active_support/hash_with_indifferent_access.rb#441
HashWithIndifferentAccess = ActiveSupport::HashWithIndifferentAccess

# source://activesupport//lib/active_support/i18n_railtie.rb#8
module I18n
  class << self
    # source://i18n/1.14.5/lib/i18n/backend/cache.rb#64
    def cache_key_digest; end

    # source://i18n/1.14.5/lib/i18n/backend/cache.rb#68
    def cache_key_digest=(key_digest); end

    # source://i18n/1.14.5/lib/i18n/backend/cache.rb#56
    def cache_namespace; end

    # source://i18n/1.14.5/lib/i18n/backend/cache.rb#60
    def cache_namespace=(namespace); end

    # source://i18n/1.14.5/lib/i18n/backend/cache.rb#48
    def cache_store; end

    # source://i18n/1.14.5/lib/i18n/backend/cache.rb#52
    def cache_store=(store); end

    # source://i18n/1.14.5/lib/i18n/backend/fallbacks.rb#17
    def fallbacks; end

    # source://i18n/1.14.5/lib/i18n/backend/fallbacks.rb#23
    def fallbacks=(fallbacks); end

    # source://i18n/1.14.5/lib/i18n/interpolate/ruby.rb#23
    def interpolate(string, values); end

    # source://i18n/1.14.5/lib/i18n/interpolate/ruby.rb#29
    def interpolate_hash(string, values); end

    # source://i18n/1.14.5/lib/i18n.rb#37
    def new_double_nested_cache; end

    # source://i18n/1.14.5/lib/i18n/backend/cache.rb#72
    def perform_caching?; end

    # source://i18n/1.14.5/lib/i18n.rb#45
    def reserve_key(key); end

    # source://i18n/1.14.5/lib/i18n.rb#50
    def reserved_keys_pattern; end
  end
end

# source://activesupport//lib/active_support/i18n_railtie.rb#9
class I18n::Railtie < ::Rails::Railtie
  class << self
    # source://activesupport//lib/active_support/i18n_railtie.rb#95
    def include_fallbacks_module; end

    # source://activesupport//lib/active_support/i18n_railtie.rb#99
    def init_fallbacks(fallbacks); end

    # source://activesupport//lib/active_support/i18n_railtie.rb#32
    def initialize_i18n(app); end

    # source://activesupport//lib/active_support/i18n_railtie.rb#80
    def setup_raise_on_missing_translations_config(app); end

    # source://activesupport//lib/active_support/i18n_railtie.rb#115
    def validate_fallbacks(fallbacks); end

    # source://activesupport//lib/active_support/i18n_railtie.rb#126
    def watched_dirs_with_extensions(paths); end
  end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#153
class IO
  include ::Enumerable
  include ::File::Constants

  # source://activesupport//lib/active_support/core_ext/object/json.rb#154
  def as_json(options = T.unsafe(nil)); end
end

class IO::Buffer
  include ::Comparable

  def initialize(*_arg0); end

  def &(_arg0); end
  def <=>(_arg0); end
  def ^(_arg0); end
  def and!(_arg0); end
  def clear(*_arg0); end
  def copy(*_arg0); end
  def each(*_arg0); end
  def each_byte(*_arg0); end
  def empty?; end
  def external?; end
  def free; end
  def get_string(*_arg0); end
  def get_value(_arg0, _arg1); end
  def get_values(_arg0, _arg1); end
  def hexdump(*_arg0); end
  def inspect; end
  def internal?; end
  def locked; end
  def locked?; end
  def mapped?; end
  def not!; end
  def null?; end
  def or!(_arg0); end
  def pread(*_arg0); end
  def private?; end
  def pwrite(*_arg0); end
  def read(*_arg0); end
  def readonly?; end
  def resize(_arg0); end
  def set_string(*_arg0); end
  def set_value(_arg0, _arg1, _arg2); end
  def set_values(_arg0, _arg1, _arg2); end
  def shared?; end
  def size; end
  def slice(*_arg0); end
  def to_s; end
  def transfer; end
  def valid?; end
  def values(*_arg0); end
  def write(*_arg0); end
  def xor!(_arg0); end
  def |(_arg0); end
  def ~; end

  private

  def initialize_copy(_arg0); end

  class << self
    def for(_arg0); end
    def map(*_arg0); end
    def size_of(_arg0); end
    def string(_arg0); end
  end
end

class IO::Buffer::AccessError < ::RuntimeError; end
class IO::Buffer::AllocationError < ::RuntimeError; end
IO::Buffer::BIG_ENDIAN = T.let(T.unsafe(nil), Integer)
IO::Buffer::DEFAULT_SIZE = T.let(T.unsafe(nil), Integer)
IO::Buffer::EXTERNAL = T.let(T.unsafe(nil), Integer)
IO::Buffer::HOST_ENDIAN = T.let(T.unsafe(nil), Integer)
IO::Buffer::INTERNAL = T.let(T.unsafe(nil), Integer)
class IO::Buffer::InvalidatedError < ::RuntimeError; end
IO::Buffer::LITTLE_ENDIAN = T.let(T.unsafe(nil), Integer)
IO::Buffer::LOCKED = T.let(T.unsafe(nil), Integer)
class IO::Buffer::LockedError < ::RuntimeError; end
IO::Buffer::MAPPED = T.let(T.unsafe(nil), Integer)
class IO::Buffer::MaskError < ::ArgumentError; end
IO::Buffer::NETWORK_ENDIAN = T.let(T.unsafe(nil), Integer)
IO::Buffer::PAGE_SIZE = T.let(T.unsafe(nil), Integer)
IO::Buffer::PRIVATE = T.let(T.unsafe(nil), Integer)
IO::Buffer::READONLY = T.let(T.unsafe(nil), Integer)
IO::Buffer::SHARED = T.let(T.unsafe(nil), Integer)

class IO::ConsoleMode
  def echo=(_arg0); end
  def raw(*_arg0); end
  def raw!(*_arg0); end

  private

  def initialize_copy(_arg0); end
end

class IO::EAGAINWaitReadable < ::Errno::EAGAIN
  include ::IO::WaitReadable
end

class IO::EAGAINWaitWritable < ::Errno::EAGAIN
  include ::IO::WaitWritable
end

class IO::EINPROGRESSWaitReadable < ::Errno::EINPROGRESS
  include ::IO::WaitReadable
end

class IO::EINPROGRESSWaitWritable < ::Errno::EINPROGRESS
  include ::IO::WaitWritable
end

IO::EWOULDBLOCKWaitReadable = IO::EAGAINWaitReadable
IO::EWOULDBLOCKWaitWritable = IO::EAGAINWaitWritable
IO::PRIORITY = T.let(T.unsafe(nil), Integer)
IO::READABLE = T.let(T.unsafe(nil), Integer)
class IO::TimeoutError < ::IOError; end
IO::WRITABLE = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/core_ext/object/json.rb#236
class IPAddr
  # source://activesupport//lib/active_support/core_ext/object/json.rb#237
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/integer/time.rb#6
class Integer < ::Numeric
  include ::ActiveSupport::NumericWithFormat

  # source://activesupport//lib/active_support/core_ext/integer/time.rb#10
  def month; end

  # source://activesupport//lib/active_support/core_ext/integer/time.rb#10
  def months; end

  # source://activesupport//lib/active_support/core_ext/integer/time.rb#18
  def year; end

  # source://activesupport//lib/active_support/core_ext/integer/time.rb#18
  def years; end
end

# source://activesupport//lib/active_support/core_ext/kernel/reporting.rb#3
module Kernel
  private

  # source://activesupport//lib/active_support/core_ext/kernel/reporting.rb#20
  def enable_warnings(&block); end

  # source://activesupport//lib/active_support/core_ext/kernel/reporting.rb#14
  def silence_warnings(&block); end

  # source://activesupport//lib/active_support/core_ext/kernel/reporting.rb#41
  def suppress(*exception_classes); end

  # source://activesupport//lib/active_support/core_ext/kernel/reporting.rb#26
  def with_warnings(flag); end

  class << self
    # source://activesupport//lib/active_support/core_ext/kernel/reporting.rb#20
    def enable_warnings(&block); end

    # source://activesupport//lib/active_support/core_ext/kernel/reporting.rb#14
    def silence_warnings(&block); end

    # source://activesupport//lib/active_support/core_ext/kernel/reporting.rb#41
    def suppress(*exception_classes); end

    # source://activesupport//lib/active_support/core_ext/kernel/reporting.rb#26
    def with_warnings(flag); end
  end
end

# source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#8
class Module
  include ::Module::Concerning

  # source://activesupport//lib/active_support/core_ext/module/aliasing.rb#21
  def alias_attribute(new_name, old_name); end

  # source://activesupport//lib/active_support/core_ext/module/anonymous.rb#27
  def anonymous?; end

  # source://activesupport//lib/active_support/core_ext/object/json.rb#53
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/attr_internal.rb#16
  def attr_internal(*attrs); end

  # source://activesupport//lib/active_support/core_ext/module/attr_internal.rb#16
  def attr_internal_accessor(*attrs); end

  # source://activesupport//lib/active_support/core_ext/module/attr_internal.rb#5
  def attr_internal_reader(*attrs); end

  # source://activesupport//lib/active_support/core_ext/module/attr_internal.rb#10
  def attr_internal_writer(*attrs); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#208
  def cattr_accessor(*syms, instance_reader: T.unsafe(nil), instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), &blk); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#55
  def cattr_reader(*syms, instance_reader: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#121
  def cattr_writer(*syms, instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/object/deep_dup.rb#64
  def deep_dup; end

  # source://activesupport//lib/active_support/core_ext/module/delegation.rb#160
  def delegate(*methods, to: T.unsafe(nil), prefix: T.unsafe(nil), allow_nil: T.unsafe(nil), private: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/delegation.rb#218
  def delegate_missing_to(target, allow_nil: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/deprecation.rb#17
  def deprecate(*method_names, deprecator:, **options); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#208
  def mattr_accessor(*syms, instance_reader: T.unsafe(nil), instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), &blk); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#55
  def mattr_reader(*syms, instance_reader: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#121
  def mattr_writer(*syms, instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/redefine_method.rb#30
  def method_visibility(method); end

  # source://activesupport//lib/active_support/core_ext/module/introspection.rb#34
  def module_parent; end

  # source://activesupport//lib/active_support/core_ext/module/introspection.rb#9
  def module_parent_name; end

  # source://activesupport//lib/active_support/core_ext/module/introspection.rb#50
  def module_parents; end

  # source://activesupport//lib/active_support/core_ext/module/redefine_method.rb#17
  def redefine_method(method, &block); end

  # source://activesupport//lib/active_support/core_ext/module/redefine_method.rb#26
  def redefine_singleton_method(method, &block); end

  # source://activesupport//lib/active_support/core_ext/module/remove_method.rb#7
  def remove_possible_method(method); end

  # source://activesupport//lib/active_support/core_ext/module/remove_method.rb#14
  def remove_possible_singleton_method(method); end

  # source://activesupport//lib/active_support/core_ext/module/redefine_method.rb#7
  def silence_redefinition_of_method(method); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#170
  def thread_cattr_accessor(*syms, instance_reader: T.unsafe(nil), instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#41
  def thread_cattr_reader(*syms, instance_reader: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#101
  def thread_cattr_writer(*syms, instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#170
  def thread_mattr_accessor(*syms, instance_reader: T.unsafe(nil), instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#41
  def thread_mattr_reader(*syms, instance_reader: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#101
  def thread_mattr_writer(*syms, instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/core_ext/module/attr_internal.rb#41
  def attr_internal_define(attr_name, type); end

  class << self
    # source://activesupport//lib/active_support/core_ext/module/attr_internal.rb#23
    def attr_internal_naming_format; end

    # source://activesupport//lib/active_support/core_ext/module/attr_internal.rb#25
    def attr_internal_naming_format=(format); end
  end
end

# source://activesupport//lib/active_support/core_ext/module/concerning.rb#112
module Module::Concerning
  # source://activesupport//lib/active_support/core_ext/module/concerning.rb#132
  def concern(topic, &module_definition); end

  # source://activesupport//lib/active_support/core_ext/module/concerning.rb#114
  def concerning(topic, prepend: T.unsafe(nil), &block); end
end

# source://activesupport//lib/active_support/core_ext/module/delegation.rb#5
Module::DelegationError = ActiveSupport::DelegationError

# source://activesupport//lib/active_support/core_ext/name_error.rb#3
class NameError < ::StandardError
  include ::ErrorHighlight::CoreExt
  include ::DidYouMean::Correctable

  # source://activesupport//lib/active_support/core_ext/name_error.rb#12
  def missing_name; end

  # source://activesupport//lib/active_support/core_ext/name_error.rb#44
  def missing_name?(name); end

  private

  # source://activesupport//lib/active_support/core_ext/name_error.rb#56
  def real_mod_name(mod); end
end

# source://activesupport//lib/active_support/core_ext/name_error.rb#53
NameError::UNBOUND_METHOD_MODULE_NAME = T.let(T.unsafe(nil), UnboundMethod)

# source://activesupport//lib/active_support/core_ext/object/blank.rb#50
class NilClass
  # source://activesupport//lib/active_support/core_ext/object/json.rb#95
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#56
  def blank?; end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#60
  def present?; end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#20
  def to_param; end

  # source://activesupport//lib/active_support/core_ext/object/try.rb#148
  def try(*_arg0); end

  # source://activesupport//lib/active_support/core_ext/object/try.rb#155
  def try!(*_arg0); end
end

# source://activesupport//lib/active_support/core_ext/object/blank.rb#170
class Numeric
  include ::Comparable

  # source://activesupport//lib/active_support/core_ext/object/json.rb#113
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#177
  def blank?; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#15
  def byte; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#15
  def bytes; end

  # source://activesupport//lib/active_support/core_ext/numeric/time.rb#37
  def day; end

  # source://activesupport//lib/active_support/core_ext/numeric/time.rb#37
  def days; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#63
  def exabyte; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#63
  def exabytes; end

  # source://activesupport//lib/active_support/core_ext/numeric/time.rb#53
  def fortnight; end

  # source://activesupport//lib/active_support/core_ext/numeric/time.rb#53
  def fortnights; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#39
  def gigabyte; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#39
  def gigabytes; end

  # source://activesupport//lib/active_support/core_ext/numeric/time.rb#29
  def hour; end

  # source://activesupport//lib/active_support/core_ext/numeric/time.rb#29
  def hours; end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#13
  def html_safe?; end

  # source://activesupport//lib/active_support/core_ext/numeric/time.rb#63
  def in_milliseconds; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#23
  def kilobyte; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#23
  def kilobytes; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#31
  def megabyte; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#31
  def megabytes; end

  # source://activesupport//lib/active_support/core_ext/numeric/time.rb#21
  def minute; end

  # source://activesupport//lib/active_support/core_ext/numeric/time.rb#21
  def minutes; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#55
  def petabyte; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#55
  def petabytes; end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#181
  def present?; end

  # source://activesupport//lib/active_support/core_ext/numeric/time.rb#13
  def second; end

  # source://activesupport//lib/active_support/core_ext/numeric/time.rb#13
  def seconds; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#47
  def terabyte; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#47
  def terabytes; end

  # source://activesupport//lib/active_support/core_ext/numeric/time.rb#45
  def week; end

  # source://activesupport//lib/active_support/core_ext/numeric/time.rb#45
  def weeks; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#71
  def zettabyte; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#71
  def zettabytes; end
end

# source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#9
Numeric::EXABYTE = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#6
Numeric::GIGABYTE = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#4
Numeric::KILOBYTE = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#5
Numeric::MEGABYTE = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#8
Numeric::PETABYTE = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#7
Numeric::TERABYTE = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#10
Numeric::ZETTABYTE = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/core_ext/object/blank.rb#5
class Object < ::BasicObject
  include ::ActiveSupport::Dependencies::RequireDependency
  include ::Kernel
  include ::PP::ObjectMixin
  include ::ActiveSupport::Tryable
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder

  # source://activesupport//lib/active_support/core_ext/object/acts_like.rb#33
  def acts_like?(duck); end

  # source://activesupport//lib/active_support/core_ext/object/json.rb#59
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#18
  def blank?; end

  # source://activesupport//lib/active_support/core_ext/object/deep_dup.rb#15
  def deep_dup; end

  # source://activesupport//lib/active_support/core_ext/object/duplicable.rb#26
  def duplicable?; end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#7
  def html_safe?; end

  # source://activesupport//lib/active_support/core_ext/object/inclusion.rb#15
  def in?(another_object); end

  # source://activesupport//lib/active_support/core_ext/object/instance_variables.rb#14
  def instance_values; end

  # source://activesupport//lib/active_support/core_ext/object/instance_variables.rb#29
  def instance_variable_names; end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#45
  def presence; end

  # source://activesupport//lib/active_support/core_ext/object/inclusion.rb#34
  def presence_in(another_object); end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#25
  def present?; end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#7
  def to_param; end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#13
  def to_query(key); end

  # source://activesupport//lib/active_support/core_ext/object/with.rb#26
  def with(**attributes); end

  # source://activesupport//lib/active_support/core_ext/object/with_options.rb#92
  def with_options(options, &block); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#230
class Pathname
  # source://activesupport//lib/active_support/core_ext/object/json.rb#231
  def as_json(options = T.unsafe(nil)); end
end

module Process
  extend ::ActiveSupport::ForkTracker::CoreExt

  class << self
    # source://activesupport//lib/active_support/fork_tracker.rb#6
    def _fork; end
  end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#242
class Process::Status
  # source://activesupport//lib/active_support/core_ext/object/json.rb#243
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#159
class Range
  include ::ActiveSupport::RangeWithFormat
  include ::ActiveSupport::CompareWithRange
  include ::ActiveSupport::EachTimeWithZone
  include ::Enumerable

  # source://activesupport//lib/active_support/core_ext/range/compare_range.rb#16
  def ===(value); end

  # source://activesupport//lib/active_support/core_ext/object/json.rb#160
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/range/each.rb#7
  def each(&block); end

  # source://activesupport//lib/active_support/core_ext/range/compare_range.rb#41
  def include?(value); end

  # source://activesupport//lib/active_support/core_ext/range/each.rb#12
  def step(n = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#236
  def sum(initial_value = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#141
class Regexp
  # source://activesupport//lib/active_support/core_ext/object/json.rb#142
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/regexp.rb#11
  def multiline?; end
end

# source://activesupport//lib/active_support/core_ext/securerandom.rb#5
module SecureRandom
  class << self
    # source://activesupport//lib/active_support/core_ext/securerandom.rb#34
    def base36(n = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/core_ext/securerandom.rb#19
    def base58(n = T.unsafe(nil)); end
  end
end

# source://activesupport//lib/active_support/core_ext/securerandom.rb#7
SecureRandom::BASE36_ALPHABET = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/core_ext/securerandom.rb#6
SecureRandom::BASE58_ALPHABET = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/core_ext/object/duplicable.rb#62
module Singleton
  mixes_in_class_methods ::Singleton::SingletonClassMethods

  # source://activesupport//lib/active_support/core_ext/object/duplicable.rb#66
  def duplicable?; end
end

# source://activesupport//lib/active_support/core_ext/object/blank.rb#135
class String
  include ::Comparable

  # source://activesupport//lib/active_support/core_ext/string/behavior.rb#5
  def acts_like_string?; end

  # source://activesupport//lib/active_support/core_ext/object/json.rb#101
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/access.rb#29
  def at(position); end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#153
  def blank?; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#101
  def camelcase(first_letter = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#101
  def camelize(first_letter = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#239
  def classify; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#73
  def constantize; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#148
  def dasherize; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#177
  def deconstantize; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#162
  def demodulize; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#284
  def downcase_first; end

  # source://activesupport//lib/active_support/core_ext/string/access.rb#78
  def first(limit = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#297
  def foreign_key(separate_class_name_and_id_with_underscore = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/access.rb#46
  def from(position); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#225
  def html_safe; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#262
  def humanize(capitalize: T.unsafe(nil), keep_id_suffix: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/zones.rb#9
  def in_time_zone(zone = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/indent.rb#42
  def indent(amount, indent_string = T.unsafe(nil), indent_empty_lines = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/indent.rb#7
  def indent!(amount, indent_string = T.unsafe(nil), indent_empty_lines = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/inquiry.rb#13
  def inquiry; end

  # source://activesupport//lib/active_support/core_ext/string/multibyte.rb#48
  def is_utf8?; end

  # source://activesupport//lib/active_support/core_ext/string/access.rb#92
  def last(limit = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/multibyte.rb#37
  def mb_chars; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#215
  def parameterize(separator: T.unsafe(nil), preserve_case: T.unsafe(nil), locale: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#35
  def pluralize(count = T.unsafe(nil), locale = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#165
  def present?; end

  # source://activesupport//lib/active_support/core_ext/string/filters.rb#32
  def remove(*patterns); end

  # source://activesupport//lib/active_support/core_ext/string/filters.rb#40
  def remove!(*patterns); end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#86
  def safe_constantize; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#60
  def singularize(locale = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/filters.rb#13
  def squish; end

  # source://activesupport//lib/active_support/core_ext/string/filters.rb#21
  def squish!; end

  # source://activesupport//lib/active_support/core_ext/string/strip.rb#22
  def strip_heredoc; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#227
  def tableize; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#126
  def titlecase(keep_id_suffix: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#126
  def titleize(keep_id_suffix: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/access.rb#63
  def to(position); end

  # source://activesupport//lib/active_support/core_ext/string/conversions.rb#47
  def to_date; end

  # source://activesupport//lib/active_support/core_ext/string/conversions.rb#57
  def to_datetime; end

  # source://activesupport//lib/active_support/core_ext/string/conversions.rb#22
  def to_time(form = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/filters.rb#70
  def truncate(truncate_to, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/filters.rb#101
  def truncate_bytes(truncate_to, omission: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/filters.rb#142
  def truncate_words(words_count, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#139
  def underscore; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#273
  def upcase_first; end
end

# source://activesupport//lib/active_support/core_ext/object/blank.rb#136
String::BLANK_RE = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/core_ext/object/blank.rb#137
String::ENCODED_BLANKS = T.let(T.unsafe(nil), Concurrent::Map)

# source://activesupport//lib/active_support/core_ext/object/json.rb#76
class Struct
  include ::Enumerable

  # source://activesupport//lib/active_support/core_ext/object/json.rb#77
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/blank.rb#123
class Symbol
  include ::Comparable

  # source://activesupport//lib/active_support/core_ext/object/json.rb#107
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#130
  def present?; end
end

class Thread
  # source://activesupport//lib/active_support/isolated_execution_state.rb#9
  def active_support_execution_state; end

  # source://activesupport//lib/active_support/isolated_execution_state.rb#9
  def active_support_execution_state=(_arg0); end
end

# source://activesupport//lib/active_support/core_ext/thread/backtrace/location.rb#3
class Thread::Backtrace::Location
  # source://activesupport//lib/active_support/core_ext/thread/backtrace/location.rb#5
  def spot(ex); end
end

# source://activesupport//lib/active_support/core_ext/object/blank.rb#186
class Time
  include ::Comparable
  include ::DateAndTime::Zones
  include ::DateAndTime::Calculations
  include ::DateAndTime::Compatibility

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#285
  def +(other); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#308
  def -(other); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#317
  def <=>(other); end

  # source://activesupport//lib/active_support/core_ext/time/acts_like.rb#7
  def acts_like_time?; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#187
  def advance(options); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#213
  def ago(seconds); end

  # source://activesupport//lib/active_support/core_ext/object/json.rb#195
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#226
  def at_beginning_of_day; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#255
  def at_beginning_of_hour; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#271
  def at_beginning_of_minute; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#244
  def at_end_of_day; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#261
  def at_end_of_hour; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#277
  def at_end_of_minute; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#234
  def at_midday; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#234
  def at_middle_of_day; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#226
  def at_midnight; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#234
  def at_noon; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#226
  def beginning_of_day; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#255
  def beginning_of_hour; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#271
  def beginning_of_minute; end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#192
  def blank?; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#123
  def change(options); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#317
  def compare_with_coercion(other); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#244
  def end_of_day; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#261
  def end_of_hour; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#277
  def end_of_minute; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#337
  def eql?(other); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#337
  def eql_with_coercion(other); end

  # source://activesupport//lib/active_support/core_ext/time/conversions.rb#67
  def formatted_offset(colon = T.unsafe(nil), alternate_utc_string = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#218
  def in(seconds); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#234
  def midday; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#234
  def middle_of_day; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#226
  def midnight; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#308
  def minus_with_coercion(other); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#295
  def minus_with_duration(other); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#295
  def minus_without_coercion(other); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#351
  def next_day(days = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#361
  def next_month(months = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#371
  def next_year(years = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#234
  def noon; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#285
  def plus_with_duration(other); end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#196
  def present?; end

  # source://activesupport//lib/active_support/core_ext/time/compatibility.rb#17
  def preserve_timezone; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#346
  def prev_day(days = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#356
  def prev_month(months = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#366
  def prev_year(years = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#107
  def sec_fraction; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#91
  def seconds_since_midnight; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#100
  def seconds_until_end_of_day; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#218
  def since(seconds); end

  # source://activesupport//lib/active_support/core_ext/time/conversions.rb#53
  def to_formatted_s(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/conversions.rb#53
  def to_fs(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/compatibility.rb#13
  def to_time; end

  private

  # source://activesupport//lib/active_support/core_ext/time/compatibility.rb#24
  def active_support_local_zone; end

  class << self
    # source://activesupport//lib/active_support/core_ext/time/calculations.rb#18
    def ===(other); end

    # source://activesupport//lib/active_support/core_ext/time/calculations.rb#45
    def at(time_or_number, *args, **_arg2); end

    # source://activesupport//lib/active_support/core_ext/time/calculations.rb#45
    def at_with_coercion(time_or_number, *args, **_arg2); end

    # source://activesupport//lib/active_support/core_ext/time/calculations.rb#39
    def current; end

    # source://activesupport//lib/active_support/core_ext/time/calculations.rb#24
    def days_in_month(month, year = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/core_ext/time/calculations.rb#34
    def days_in_year(year = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/core_ext/time/zones.rb#93
    def find_zone(time_zone); end

    # source://activesupport//lib/active_support/core_ext/time/zones.rb#81
    def find_zone!(time_zone); end

    # source://activesupport//lib/active_support/core_ext/time/calculations.rb#69
    def rfc3339(str); end

    # source://activesupport//lib/active_support/core_ext/time/zones.rb#61
    def use_zone(time_zone); end

    # source://activesupport//lib/active_support/core_ext/time/zones.rb#14
    def zone; end

    # source://activesupport//lib/active_support/core_ext/time/zones.rb#41
    def zone=(time_zone); end

    # source://activesupport//lib/active_support/core_ext/time/zones.rb#10
    def zone_default; end

    # source://activesupport//lib/active_support/core_ext/time/zones.rb#10
    def zone_default=(_arg0); end
  end
end

# source://activesupport//lib/active_support/core_ext/time/calculations.rb#14
Time::COMMON_YEAR_DAYS_IN_MONTH = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/core_ext/time/conversions.rb#8
Time::DATE_FORMATS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/core_ext/object/blank.rb#80
class TrueClass
  # source://activesupport//lib/active_support/core_ext/object/json.rb#83
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#86
  def blank?; end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#90
  def present?; end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#27
  def to_param; end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#224
class URI::Generic
  include ::URI::RFC2396_REGEXP

  # source://activesupport//lib/active_support/core_ext/object/json.rb#225
  def as_json(options = T.unsafe(nil)); end
end
