# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rackup` gem.
# Please instead update this file by running `bin/tapioca gem rackup`.


# source://rackup//lib/rack/handler.rb#8
module Rack
  class << self
    # source://rack/3.0.11/lib/rack/version.rb#31
    def release; end

    # source://rack/3.0.11/lib/rack/version.rb#23
    def version; end
  end
end

# source://rackup//lib/rack/handler.rb#9
Rack::Handler = Rackup::Handler

# source://rackup//lib/rack/server.rb#9
Rack::Server = Rackup::Server

# source://rackup//lib/rackup/handler.rb#6
module Rackup; end

# source://rackup//lib/rackup/handler.rb#14
module Rackup::Handler
  class << self
    # source://rackup//lib/rackup/handler.rb#30
    def [](name); end

    # source://rackup//lib/rackup/handler.rb#84
    def default; end

    # source://rackup//lib/rackup/handler.rb#40
    def get(name); end

    # source://rackup//lib/rackup/handler.rb#69
    def pick(server_names); end

    # source://rackup//lib/rackup/handler.rb#18
    def register(name, klass); end

    # source://rackup//lib/rackup/handler.rb#106
    def require_handler(prefix, const_name); end
  end
end

# source://rackup//lib/rackup/handler/cgi.rb#8
class Rackup::Handler::CGI
  include ::Rack

  class << self
    # source://rackup//lib/rackup/handler/cgi.rb#11
    def run(app, **options); end

    # source://rackup//lib/rackup/handler/cgi.rb#51
    def send_body(body); end

    # source://rackup//lib/rackup/handler/cgi.rb#40
    def send_headers(status, headers); end

    # source://rackup//lib/rackup/handler/cgi.rb#16
    def serve(app); end
  end
end

# source://rackup//lib/rackup/handler.rb#59
Rackup::Handler::RACKUP_HANDLER = T.let(T.unsafe(nil), String)

# source://rackup//lib/rackup/handler.rb#58
Rackup::Handler::RACK_HANDLER = T.let(T.unsafe(nil), String)

# source://rackup//lib/rackup/handler.rb#61
Rackup::Handler::SERVER_NAMES = T.let(T.unsafe(nil), Array)

# source://rackup//lib/rackup/handler/webrick.rb#18
class Rackup::Handler::WEBrick < ::WEBrick::HTTPServlet::AbstractServlet
  # source://rackup//lib/rackup/handler/webrick.rb#54
  def initialize(server, app); end

  # source://rackup//lib/rackup/handler/webrick.rb#91
  def service(req, res); end

  class << self
    # source://rackup//lib/rackup/handler/webrick.rb#19
    def run(app, **options); end

    # source://rackup//lib/rackup/handler/webrick.rb#47
    def shutdown; end

    # source://rackup//lib/rackup/handler/webrick.rb#37
    def valid_options; end
  end
end

# source://rackup//lib/rackup/handler/webrick.rb#60
class Rackup::Handler::WEBrick::Input
  include ::Rackup::Stream::Reader

  # source://rackup//lib/rackup/handler/webrick.rb#63
  def initialize(request); end

  # source://rackup//lib/rackup/handler/webrick.rb#78
  def close; end

  private

  # source://rackup//lib/rackup/handler/webrick.rb#86
  def read_next; end
end

# source://rackup//lib/rackup/server.rb#22
class Rackup::Server
  # source://rackup//lib/rackup/server.rb#230
  def initialize(options = T.unsafe(nil)); end

  # source://rackup//lib/rackup/server.rb#262
  def app; end

  # source://rackup//lib/rackup/server.rb#248
  def default_options; end

  # source://rackup//lib/rackup/server.rb#296
  def middleware; end

  # source://rackup//lib/rackup/server.rb#243
  def options; end

  # source://rackup//lib/rackup/server.rb#185
  def options=(_arg0); end

  # source://rackup//lib/rackup/server.rb#344
  def server; end

  # source://rackup//lib/rackup/server.rb#300
  def start(&block); end

  private

  # source://rackup//lib/rackup/server.rb#413
  def build_app(app); end

  # source://rackup//lib/rackup/server.rb#349
  def build_app_and_options_from_config; end

  # source://rackup//lib/rackup/server.rb#395
  def build_app_from_string; end

  # source://rackup//lib/rackup/server.rb#442
  def check_pid!; end

  # source://rackup//lib/rackup/server.rb#427
  def daemonize_app; end

  # source://rackup//lib/rackup/server.rb#456
  def exit_with_pid(pid); end

  # source://rackup//lib/rackup/server.rb#357
  def handle_profiling(heapfile, profile_mode, filename); end

  # source://rackup//lib/rackup/server.rb#385
  def make_profile_name(filename); end

  # source://rackup//lib/rackup/server.rb#409
  def opt_parser; end

  # source://rackup//lib/rackup/server.rb#399
  def parse_options(args); end

  # source://rackup//lib/rackup/server.rb#423
  def wrapped_app; end

  # source://rackup//lib/rackup/server.rb#434
  def write_pid; end

  class << self
    # source://rackup//lib/rackup/server.rb#273
    def default_middleware_by_environment; end

    # source://rackup//lib/rackup/server.rb#267
    def logging_middleware; end

    # source://rackup//lib/rackup/server.rb#291
    def middleware; end

    # source://rackup//lib/rackup/server.rb#181
    def start(options = T.unsafe(nil)); end
  end
end

# source://rackup//lib/rackup/server.rb#23
class Rackup::Server::Options
  # source://rackup//lib/rackup/server.rb#143
  def handler_opts(options); end

  # source://rackup//lib/rackup/server.rb#24
  def parse!(args); end
end

# source://rackup//lib/rackup/stream.rb#8
class Rackup::Stream
  include ::Rackup::Stream::Reader

  # source://rackup//lib/rackup/stream.rb#9
  def initialize(input = T.unsafe(nil), output = T.unsafe(nil)); end

  # source://rackup//lib/rackup/stream.rb#147
  def <<(buffer); end

  # source://rackup//lib/rackup/stream.rb#169
  def close(error = T.unsafe(nil)); end

  # source://rackup//lib/rackup/stream.rb#154
  def close_read; end

  # source://rackup//lib/rackup/stream.rb#160
  def close_write; end

  # source://rackup//lib/rackup/stream.rb#179
  def closed?; end

  # source://rackup//lib/rackup/stream.rb#184
  def empty?; end

  # source://rackup//lib/rackup/stream.rb#151
  def flush; end

  # source://rackup//lib/rackup/stream.rb#20
  def input; end

  # source://rackup//lib/rackup/stream.rb#21
  def output; end

  # source://rackup//lib/rackup/stream.rb#134
  def write(buffer); end

  # source://rackup//lib/rackup/stream.rb#143
  def write_nonblock(buffer); end

  private

  # source://rackup//lib/rackup/stream.rb#190
  def read_next; end
end

# source://rackup//lib/rackup/stream.rb#24
module Rackup::Stream::Reader
  # source://rackup//lib/rackup/stream.rb#99
  def each; end

  # source://rackup//lib/rackup/stream.rb#95
  def gets; end

  # source://rackup//lib/rackup/stream.rb#32
  def read(length = T.unsafe(nil), buffer = T.unsafe(nil)); end

  # source://rackup//lib/rackup/stream.rb#105
  def read_nonblock(length, buffer = T.unsafe(nil)); end

  # source://rackup//lib/rackup/stream.rb#74
  def read_partial(length = T.unsafe(nil)); end
end

# source://rackup//lib/rackup/version.rb#7
Rackup::VERSION = T.let(T.unsafe(nil), String)
