# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `prism` gem.
# Please instead update this file by running `bin/tapioca gem prism`.

# =begin
# This file is generated by the templates/template.rb script and should not be
# modified manually. See templates/rbi/prism.rbi.erb
# if you are looking to modify the template
# =end

# source://prism//lib/prism.rb#8
module Prism
  class << self
    def dump(*_arg0); end
    def dump_file(*_arg0); end
    def lex(*_arg0); end

    # source://prism//lib/prism.rb#46
    def lex_compat(source, **options); end

    def lex_file(*_arg0); end

    # source://prism//lib/prism.rb#56
    def lex_ripper(source); end

    # source://prism//lib/prism.rb#64
    def load(source, serialized); end

    def parse(*_arg0); end
    def parse_comments(*_arg0); end

    # source://prism//lib/prism.rb#72
    def parse_failure?(source, **options); end

    def parse_file(*_arg0); end
    def parse_file_comments(*_arg0); end

    # source://prism//lib/prism.rb#80
    def parse_file_failure?(filepath, **options); end

    def parse_file_success?(*_arg0); end
    def parse_lex(*_arg0); end
    def parse_lex_file(*_arg0); end
    def parse_success?(*_arg0); end
  end
end

# source://prism//lib/prism/node.rb#52
class Prism::AliasGlobalVariableNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#63
  sig do
    params(
      new_name: Prism::Node,
      old_name: Prism::Node,
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(new_name, old_name, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#71
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#76
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#86
  def comment_targets; end

  # source://prism//lib/prism/node.rb#81
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#91
  sig { params(params: T.untyped).returns(Prism::AliasGlobalVariableNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#76
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#104
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#114
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#109
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#60
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#54
  sig { returns(Prism::Node) }
  def new_name; end

  # source://prism//lib/prism/node.rb#57
  sig { returns(Prism::Node) }
  def old_name; end

  # source://prism//lib/prism/node.rb#138
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#148
    def type; end
  end
end

# source://prism//lib/prism/node.rb#157
class Prism::AliasMethodNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#168
  sig do
    params(
      new_name: Prism::Node,
      old_name: Prism::Node,
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(new_name, old_name, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#176
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#181
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#191
  def comment_targets; end

  # source://prism//lib/prism/node.rb#186
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#196
  sig { params(params: T.untyped).returns(Prism::AliasMethodNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#181
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#209
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#219
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#214
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#165
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#159
  sig { returns(Prism::Node) }
  def new_name; end

  # source://prism//lib/prism/node.rb#162
  sig { returns(Prism::Node) }
  def old_name; end

  # source://prism//lib/prism/node.rb#243
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#253
    def type; end
  end
end

# source://prism//lib/prism/node.rb#262
class Prism::AlternationPatternNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#273
  sig { params(left: Prism::Node, right: Prism::Node, operator_loc: Prism::Location, location: Prism::Location).void }
  def initialize(left, right, operator_loc, location); end

  # source://prism//lib/prism/node.rb#281
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#286
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#296
  def comment_targets; end

  # source://prism//lib/prism/node.rb#291
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#301
  sig { params(params: T.untyped).returns(Prism::AlternationPatternNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#286
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#314
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#324
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#264
  sig { returns(Prism::Node) }
  def left; end

  # source://prism//lib/prism/node.rb#319
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#270
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#267
  sig { returns(Prism::Node) }
  def right; end

  # source://prism//lib/prism/node.rb#348
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#358
    def type; end
  end
end

# source://prism//lib/prism/node.rb#367
class Prism::AndNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#378
  sig { params(left: Prism::Node, right: Prism::Node, operator_loc: Prism::Location, location: Prism::Location).void }
  def initialize(left, right, operator_loc, location); end

  # source://prism//lib/prism/node.rb#386
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#391
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#401
  def comment_targets; end

  # source://prism//lib/prism/node.rb#396
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#406
  sig { params(params: T.untyped).returns(Prism::AndNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#391
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#419
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#429
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#369
  sig { returns(Prism::Node) }
  def left; end

  # source://prism//lib/prism/node.rb#424
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#375
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#372
  sig { returns(Prism::Node) }
  def right; end

  # source://prism//lib/prism/node.rb#453
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#463
    def type; end
  end
end

# source://prism//lib/prism/node.rb#472
class Prism::ArgumentsNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#480
  sig { params(flags: Integer, arguments: T::Array[Prism::Node], location: Prism::Location).void }
  def initialize(flags, arguments, location); end

  # source://prism//lib/prism/node.rb#487
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#477
  sig { returns(T::Array[Prism::Node]) }
  def arguments; end

  # source://prism//lib/prism/node.rb#492
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#502
  def comment_targets; end

  # source://prism//lib/prism/node.rb#497
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#524
  sig { returns(T::Boolean) }
  def contains_keyword_splat?; end

  # source://prism//lib/prism/node.rb#507
  sig { params(params: T.untyped).returns(Prism::ArgumentsNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#492
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#519
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#529
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#551
  def type; end

  private

  # source://prism//lib/prism/node.rb#474
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#561
    def type; end
  end
end

# source://prism//lib/prism/node.rb#17277
# Flags for arguments nodes.
module Prism::ArgumentsNodeFlags; end

# source://prism//lib/prism/node.rb#17279
Prism::ArgumentsNodeFlags::CONTAINS_KEYWORD_SPLAT = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#571
class Prism::ArrayNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#585
  sig do
    params(
      flags: Integer,
      elements: T::Array[Prism::Node],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(flags, elements, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#594
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#599
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#643
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#582
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#609
  def comment_targets; end

  # source://prism//lib/prism/node.rb#604
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#633
  sig { returns(T::Boolean) }
  def contains_splat?; end

  # source://prism//lib/prism/node.rb#614
  sig { params(params: T.untyped).returns(Prism::ArrayNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#599
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#628
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#576
  sig { returns(T::Array[Prism::Node]) }
  def elements; end

  # source://prism//lib/prism/node.rb#648
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#638
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#579
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#672
  def type; end

  private

  # source://prism//lib/prism/node.rb#573
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#682
    def type; end
  end
end

# source://prism//lib/prism/node.rb#17283
# Flags for array nodes.
module Prism::ArrayNodeFlags; end

# source://prism//lib/prism/node.rb#17285
Prism::ArrayNodeFlags::CONTAINS_SPLAT = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#703
class Prism::ArrayPatternNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#723
  sig do
    params(
      constant: T.nilable(Prism::Node),
      requireds: T::Array[Prism::Node],
      rest: T.nilable(Prism::Node),
      posts: T::Array[Prism::Node],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(constant, requireds, rest, posts, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#734
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#739
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#785
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#720
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#754
  def comment_targets; end

  # source://prism//lib/prism/node.rb#744
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#705
  sig { returns(T.nilable(Prism::Node)) }
  def constant; end

  # source://prism//lib/prism/node.rb#759
  sig { params(params: T.untyped).returns(Prism::ArrayPatternNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#739
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#775
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#790
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#780
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#717
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#714
  sig { returns(T::Array[Prism::Node]) }
  def posts; end

  # source://prism//lib/prism/node.rb#708
  sig { returns(T::Array[Prism::Node]) }
  def requireds; end

  # source://prism//lib/prism/node.rb#711
  sig { returns(T.nilable(Prism::Node)) }
  def rest; end

  # source://prism//lib/prism/node.rb#825
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#835
    def type; end
  end
end

# source://prism//lib/prism/node.rb#844
class Prism::AssocNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#855
  sig do
    params(
      key: Prism::Node,
      value: T.nilable(Prism::Node),
      operator_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(key, value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#863
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#868
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#881
  def comment_targets; end

  # source://prism//lib/prism/node.rb#873
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#886
  sig { params(params: T.untyped).returns(Prism::AssocNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#868
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#899
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#909
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#846
  sig { returns(Prism::Node) }
  def key; end

  # source://prism//lib/prism/node.rb#904
  sig { returns(T.nilable(String)) }
  def operator; end

  # source://prism//lib/prism/node.rb#852
  sig { returns(T.nilable(Prism::Location)) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#937
  def type; end

  # source://prism//lib/prism/node.rb#849
  sig { returns(T.nilable(Prism::Node)) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#947
    def type; end
  end
end

# source://prism//lib/prism/node.rb#956
class Prism::AssocSplatNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#964
  sig { params(value: T.nilable(Prism::Node), operator_loc: Prism::Location, location: Prism::Location).void }
  def initialize(value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#971
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#976
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#988
  def comment_targets; end

  # source://prism//lib/prism/node.rb#981
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#993
  sig { params(params: T.untyped).returns(Prism::AssocSplatNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#976
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1005
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1015
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1010
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#961
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#1041
  def type; end

  # source://prism//lib/prism/node.rb#958
  sig { returns(T.nilable(Prism::Node)) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#1051
    def type; end
  end
end

Prism::BACKEND = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/node.rb#1060
class Prism::BackReferenceReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1065
  sig { params(name: Symbol, location: Prism::Location).void }
  def initialize(name, location); end

  # source://prism//lib/prism/node.rb#1071
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1076
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1086
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1081
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1091
  sig { params(params: T.untyped).returns(Prism::BackReferenceReadNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#1076
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1102
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1107
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1062
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#1127
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1137
    def type; end
  end
end

# source://prism//lib/prism/visitor.rb#13
class Prism::BasicVisitor
  # source://prism//lib/prism/visitor.rb#16
  sig { params(node: T.nilable(Prism::Node)).void }
  def visit(node); end

  # source://prism//lib/prism/visitor.rb#21
  sig { params(nodes: T::Array[T.nilable(Prism::Node)]).void }
  def visit_all(nodes); end

  # source://prism//lib/prism/visitor.rb#26
  sig { params(node: Prism::Node).void }
  def visit_child_nodes(node); end
end

# source://prism//lib/prism/node.rb#1148
class Prism::BeginNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1168
  sig do
    params(
      begin_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      rescue_clause: T.nilable(Prism::RescueNode),
      else_clause: T.nilable(Prism::ElseNode),
      ensure_clause: T.nilable(Prism::EnsureNode),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(begin_keyword_loc, statements, rescue_clause, else_clause, ensure_clause, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#1179
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1229
  sig { returns(T.nilable(String)) }
  def begin_keyword; end

  # source://prism//lib/prism/node.rb#1150
  sig { returns(T.nilable(Prism::Location)) }
  def begin_keyword_loc; end

  # source://prism//lib/prism/node.rb#1188
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1203
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1193
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1208
  sig { params(params: T.untyped).returns(Prism::BeginNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#1188
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1224
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1159
  sig { returns(T.nilable(Prism::ElseNode)) }
  def else_clause; end

  # source://prism//lib/prism/node.rb#1234
  sig { returns(T.nilable(String)) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#1165
  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#1162
  sig { returns(T.nilable(Prism::EnsureNode)) }
  def ensure_clause; end

  # source://prism//lib/prism/node.rb#1239
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1156
  sig { returns(T.nilable(Prism::RescueNode)) }
  def rescue_clause; end

  # source://prism//lib/prism/node.rb#1183
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#1153
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#1284
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1294
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1303
class Prism::BlockArgumentNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1311
  sig { params(expression: T.nilable(Prism::Node), operator_loc: Prism::Location, location: Prism::Location).void }
  def initialize(expression, operator_loc, location); end

  # source://prism//lib/prism/node.rb#1318
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1323
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1335
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1328
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1340
  sig { params(params: T.untyped).returns(Prism::BlockArgumentNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#1323
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1352
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1305
  sig { returns(T.nilable(Prism::Node)) }
  def expression; end

  # source://prism//lib/prism/node.rb#1362
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1357
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#1308
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#1388
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1398
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1407
class Prism::BlockLocalVariableNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1412
  sig { params(name: Symbol, location: Prism::Location).void }
  def initialize(name, location); end

  # source://prism//lib/prism/node.rb#1418
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1423
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1433
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1428
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1438
  sig { params(params: T.untyped).returns(Prism::BlockLocalVariableNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#1423
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1449
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1454
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1409
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#1474
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1484
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1493
class Prism::BlockNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1513
  sig do
    params(
      locals: T::Array[Symbol],
      locals_body_index: Integer,
      parameters: T.nilable(Prism::Node),
      body: T.nilable(Prism::Node),
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(locals, locals_body_index, parameters, body, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#1524
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1504
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#1529
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1573
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#1510
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#1542
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1534
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1547
  sig { params(params: T.untyped).returns(Prism::BlockNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#1529
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1563
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1578
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1495
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#1498
  sig { returns(Integer) }
  def locals_body_index; end

  # source://prism//lib/prism/node.rb#1568
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#1507
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#1501
  sig { returns(T.nilable(Prism::Node)) }
  def parameters; end

  # source://prism//lib/prism/node.rb#1613
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1623
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1633
class Prism::BlockParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1644
  sig do
    params(
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, location); end

  # source://prism//lib/prism/node.rb#1652
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1657
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1667
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1662
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1672
  sig { params(params: T.untyped).returns(Prism::BlockParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#1657
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1685
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1695
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1635
  sig { returns(T.nilable(Symbol)) }
  def name; end

  # source://prism//lib/prism/node.rb#1638
  sig { returns(T.nilable(Prism::Location)) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#1690
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#1641
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#1721
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1731
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1744
class Prism::BlockParametersNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1758
  sig do
    params(
      parameters: T.nilable(Prism::ParametersNode),
      locals: T::Array[Prism::Node],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(parameters, locals, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#1767
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1772
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1814
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#1755
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#1785
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1777
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1790
  sig { params(params: T.untyped).returns(Prism::BlockParametersNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#1772
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1804
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1819
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1749
  sig { returns(T::Array[Prism::Node]) }
  def locals; end

  # source://prism//lib/prism/node.rb#1809
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#1752
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#1746
  sig { returns(T.nilable(Prism::ParametersNode)) }
  def parameters; end

  # source://prism//lib/prism/node.rb#1847
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1857
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1866
class Prism::BreakNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1874
  sig do
    params(
      arguments: T.nilable(Prism::ArgumentsNode),
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(arguments, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#1881
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1868
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#1886
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1898
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1891
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1903
  sig { params(params: T.untyped).returns(Prism::BreakNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#1886
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1915
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1925
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1920
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#1871
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#1951
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1961
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1970
class Prism::CallAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1996
  sig do
    params(
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      read_name: Symbol,
      write_name: Symbol,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#2009
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2065
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#2070
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#1978
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#2014
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2027
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2019
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2032
  sig { params(params: T.untyped).returns(Prism::CallAndWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#2014
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2050
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#2085
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2075
  sig { returns(T.nilable(String)) }
  def message; end

  # source://prism//lib/prism/node.rb#1981
  sig { returns(T.nilable(Prism::Location)) }
  def message_loc; end

  # source://prism//lib/prism/node.rb#2080
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#1990
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#1984
  sig { returns(Symbol) }
  def read_name; end

  # source://prism//lib/prism/node.rb#1975
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#2055
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#2119
  def type; end

  # source://prism//lib/prism/node.rb#1993
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#2060
  sig { returns(T::Boolean) }
  def variable_call?; end

  # source://prism//lib/prism/node.rb#1987
  sig { returns(Symbol) }
  def write_name; end

  private

  # source://prism//lib/prism/node.rb#1972
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#2129
    def type; end
  end
end

# source://prism//lib/prism/node.rb#2153
class Prism::CallNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2182
  sig do
    params(
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      name: Symbol,
      message_loc: T.nilable(Prism::Location),
      opening_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: T.nilable(Prism::Location),
      block: T.nilable(Prism::Node),
      location: Prism::Location
    ).void
  end
  def initialize(flags, receiver, call_operator_loc, name, message_loc, opening_loc, arguments, closing_loc, block, location); end

  # source://prism//lib/prism/node.rb#2196
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2173
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#2254
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#2179
  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  # source://prism//lib/prism/node.rb#2259
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#2161
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#2201
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2274
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#2176
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#2215
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2206
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2220
  sig { params(params: T.untyped).returns(Prism::CallNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#2201
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2239
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#2279
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2264
  sig { returns(T.nilable(String)) }
  def message; end

  # source://prism//lib/prism/node.rb#2167
  sig { returns(T.nilable(Prism::Location)) }
  def message_loc; end

  # source://prism//lib/prism/node.rb#2164
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#2269
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#2170
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#2158
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#2244
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#2323
  def type; end

  # source://prism//lib/prism/node.rb#2249
  sig { returns(T::Boolean) }
  def variable_call?; end

  private

  # source://prism//lib/prism/node.rb#2155
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#2333
    def type; end
  end
end

# source://prism//lib/prism/node.rb#17289
# Flags for call nodes.
module Prism::CallNodeFlags; end

# source://prism//lib/prism/node.rb#17297
Prism::CallNodeFlags::ATTRIBUTE_WRITE = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#17291
Prism::CallNodeFlags::SAFE_NAVIGATION = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#17294
Prism::CallNodeFlags::VARIABLE_CALL = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#2342
class Prism::CallOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2371
  sig do
    params(
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      read_name: Symbol,
      write_name: Symbol,
      operator: Symbol,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#2385
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2442
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#2447
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#2350
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#2390
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2403
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2395
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2408
  sig { params(params: T.untyped).returns(Prism::CallOperatorWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#2390
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2427
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#2457
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2452
  sig { returns(T.nilable(String)) }
  def message; end

  # source://prism//lib/prism/node.rb#2353
  sig { returns(T.nilable(Prism::Location)) }
  def message_loc; end

  # source://prism//lib/prism/node.rb#2362
  sig { returns(Symbol) }
  def operator; end

  # source://prism//lib/prism/node.rb#2365
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#2356
  sig { returns(Symbol) }
  def read_name; end

  # source://prism//lib/prism/node.rb#2347
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#2432
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#2492
  def type; end

  # source://prism//lib/prism/node.rb#2368
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#2437
  sig { returns(T::Boolean) }
  def variable_call?; end

  # source://prism//lib/prism/node.rb#2359
  sig { returns(Symbol) }
  def write_name; end

  private

  # source://prism//lib/prism/node.rb#2344
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#2502
    def type; end
  end
end

# source://prism//lib/prism/node.rb#2511
class Prism::CallOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2537
  sig do
    params(
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      read_name: Symbol,
      write_name: Symbol,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#2550
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2606
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#2611
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#2519
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#2555
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2568
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2560
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2573
  sig { params(params: T.untyped).returns(Prism::CallOrWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#2555
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2591
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#2626
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2616
  sig { returns(T.nilable(String)) }
  def message; end

  # source://prism//lib/prism/node.rb#2522
  sig { returns(T.nilable(Prism::Location)) }
  def message_loc; end

  # source://prism//lib/prism/node.rb#2621
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#2531
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#2525
  sig { returns(Symbol) }
  def read_name; end

  # source://prism//lib/prism/node.rb#2516
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#2596
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#2660
  def type; end

  # source://prism//lib/prism/node.rb#2534
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#2601
  sig { returns(T::Boolean) }
  def variable_call?; end

  # source://prism//lib/prism/node.rb#2528
  sig { returns(Symbol) }
  def write_name; end

  private

  # source://prism//lib/prism/node.rb#2513
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#2670
    def type; end
  end
end

# source://prism//lib/prism/node.rb#2687
class Prism::CallTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2704
  sig do
    params(
      flags: Integer,
      receiver: Prism::Node,
      call_operator_loc: Prism::Location,
      name: Symbol,
      message_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(flags, receiver, call_operator_loc, name, message_loc, location); end

  # source://prism//lib/prism/node.rb#2714
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2764
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#2769
  sig { returns(String) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#2695
  sig { returns(Prism::Location) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#2719
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2729
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2724
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2734
  sig { params(params: T.untyped).returns(Prism::CallTargetNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#2719
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2749
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#2779
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2774
  sig { returns(String) }
  def message; end

  # source://prism//lib/prism/node.rb#2701
  sig { returns(Prism::Location) }
  def message_loc; end

  # source://prism//lib/prism/node.rb#2698
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#2692
  sig { returns(Prism::Node) }
  def receiver; end

  # source://prism//lib/prism/node.rb#2754
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#2805
  def type; end

  # source://prism//lib/prism/node.rb#2759
  sig { returns(T::Boolean) }
  def variable_call?; end

  private

  # source://prism//lib/prism/node.rb#2689
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#2815
    def type; end
  end
end

# source://prism//lib/prism/node.rb#2824
class Prism::CapturePatternNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2835
  sig do
    params(
      value: Prism::Node,
      target: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(value, target, operator_loc, location); end

  # source://prism//lib/prism/node.rb#2843
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2848
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2858
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2853
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2863
  sig { params(params: T.untyped).returns(Prism::CapturePatternNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#2848
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2876
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#2886
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2881
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#2832
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#2829
  sig { returns(Prism::Node) }
  def target; end

  # source://prism//lib/prism/node.rb#2910
  def type; end

  # source://prism//lib/prism/node.rb#2826
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#2920
    def type; end
  end
end

# source://prism//lib/prism/node.rb#2931
class Prism::CaseMatchNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2948
  sig do
    params(
      predicate: T.nilable(Prism::Node),
      conditions: T::Array[Prism::Node],
      consequent: T.nilable(Prism::ElseNode),
      case_keyword_loc: Prism::Location,
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(predicate, conditions, consequent, case_keyword_loc, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#2958
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3002
  sig { returns(String) }
  def case_keyword; end

  # source://prism//lib/prism/node.rb#2942
  sig { returns(Prism::Location) }
  def case_keyword_loc; end

  # source://prism//lib/prism/node.rb#2963
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2977
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2968
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2936
  sig { returns(T::Array[Prism::Node]) }
  def conditions; end

  # source://prism//lib/prism/node.rb#2939
  sig { returns(T.nilable(Prism::ElseNode)) }
  def consequent; end

  # source://prism//lib/prism/node.rb#2982
  sig { params(params: T.untyped).returns(Prism::CaseMatchNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#2963
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2997
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3007
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#2945
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#3012
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2933
  sig { returns(T.nilable(Prism::Node)) }
  def predicate; end

  # source://prism//lib/prism/node.rb#3046
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#3056
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3067
class Prism::CaseNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3084
  sig do
    params(
      predicate: T.nilable(Prism::Node),
      conditions: T::Array[Prism::Node],
      consequent: T.nilable(Prism::ElseNode),
      case_keyword_loc: Prism::Location,
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(predicate, conditions, consequent, case_keyword_loc, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#3094
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3138
  sig { returns(String) }
  def case_keyword; end

  # source://prism//lib/prism/node.rb#3078
  sig { returns(Prism::Location) }
  def case_keyword_loc; end

  # source://prism//lib/prism/node.rb#3099
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3113
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3104
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3072
  sig { returns(T::Array[Prism::Node]) }
  def conditions; end

  # source://prism//lib/prism/node.rb#3075
  sig { returns(T.nilable(Prism::ElseNode)) }
  def consequent; end

  # source://prism//lib/prism/node.rb#3118
  sig { params(params: T.untyped).returns(Prism::CaseNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#3099
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3133
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3143
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#3081
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#3148
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3069
  sig { returns(T.nilable(Prism::Node)) }
  def predicate; end

  # source://prism//lib/prism/node.rb#3182
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#3192
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3201
class Prism::ClassNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3227
  sig do
    params(
      locals: T::Array[Symbol],
      class_keyword_loc: Prism::Location,
      constant_path: Prism::Node,
      inheritance_operator_loc: T.nilable(Prism::Location),
      superclass: T.nilable(Prism::Node),
      body: T.nilable(Prism::Node),
      end_keyword_loc: Prism::Location,
      name: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(locals, class_keyword_loc, constant_path, inheritance_operator_loc, superclass, body, end_keyword_loc, name, location); end

  # source://prism//lib/prism/node.rb#3240
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3218
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#3245
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3287
  sig { returns(String) }
  def class_keyword; end

  # source://prism//lib/prism/node.rb#3206
  sig { returns(Prism::Location) }
  def class_keyword_loc; end

  # source://prism//lib/prism/node.rb#3259
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3250
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3209
  sig { returns(Prism::Node) }
  def constant_path; end

  # source://prism//lib/prism/node.rb#3264
  sig { params(params: T.untyped).returns(Prism::ClassNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#3245
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3282
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3297
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#3221
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#3292
  sig { returns(T.nilable(String)) }
  def inheritance_operator; end

  # source://prism//lib/prism/node.rb#3212
  sig { returns(T.nilable(Prism::Location)) }
  def inheritance_operator_loc; end

  # source://prism//lib/prism/node.rb#3302
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3203
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#3224
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#3215
  sig { returns(T.nilable(Prism::Node)) }
  def superclass; end

  # source://prism//lib/prism/node.rb#3340
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#3350
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3359
class Prism::ClassVariableAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3373
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#3382
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3387
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3397
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3392
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3402
  sig { params(params: T.untyped).returns(Prism::ClassVariableAndWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#3387
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3416
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3426
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3361
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#3364
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#3421
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#3367
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#3450
  def type; end

  # source://prism//lib/prism/node.rb#3370
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#3460
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3469
class Prism::ClassVariableOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3486
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      operator: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, value, operator, location); end

  # source://prism//lib/prism/node.rb#3496
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3501
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3511
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3506
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3516
  sig { params(params: T.untyped).returns(Prism::ClassVariableOperatorWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#3501
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3531
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3536
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3471
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#3474
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#3483
  sig { returns(Symbol) }
  def operator; end

  # source://prism//lib/prism/node.rb#3477
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#3561
  def type; end

  # source://prism//lib/prism/node.rb#3480
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#3571
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3580
class Prism::ClassVariableOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3594
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#3603
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3608
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3618
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3613
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3623
  sig { params(params: T.untyped).returns(Prism::ClassVariableOrWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#3608
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3637
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3647
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3582
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#3585
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#3642
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#3588
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#3671
  def type; end

  # source://prism//lib/prism/node.rb#3591
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#3681
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3690
class Prism::ClassVariableReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3695
  sig { params(name: Symbol, location: Prism::Location).void }
  def initialize(name, location); end

  # source://prism//lib/prism/node.rb#3701
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3706
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3716
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3711
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3721
  sig { params(params: T.untyped).returns(Prism::ClassVariableReadNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#3706
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3732
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3737
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3692
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#3757
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#3767
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3776
class Prism::ClassVariableTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3781
  sig { params(name: Symbol, location: Prism::Location).void }
  def initialize(name, location); end

  # source://prism//lib/prism/node.rb#3787
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3792
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3802
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3797
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3807
  sig { params(params: T.untyped).returns(Prism::ClassVariableTargetNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#3792
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3818
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3823
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3778
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#3843
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#3853
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3862
class Prism::ClassVariableWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3876
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#3885
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3890
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3900
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3895
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3905
  sig { params(params: T.untyped).returns(Prism::ClassVariableWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#3890
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3919
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3929
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3864
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#3867
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#3924
  sig { returns(T.nilable(String)) }
  def operator; end

  # source://prism//lib/prism/node.rb#3873
  sig { returns(T.nilable(Prism::Location)) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#3953
  def type; end

  # source://prism//lib/prism/node.rb#3870
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#3963
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#228
class Prism::Comment
  # source://prism//lib/prism/parse_result.rb#233
  def initialize(location); end

  # source://prism//lib/prism/parse_result.rb#238
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#230
  sig { returns(Prism::Location) }
  def location; end

  sig { returns(T::Boolean) }
  def trailing?; end
end

# source://prism//lib/prism/compiler.rb#26
class Prism::Compiler
  # source://prism//lib/prism/compiler.rb#28
  def visit(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/compiler.rb#33
  def visit_all(nodes); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_and_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_arguments_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_array_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_assoc_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_begin_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_block_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_break_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_call_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_call_target_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_case_match_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_case_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_child_nodes(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_class_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_def_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_defined_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_else_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_ensure_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_false_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_float_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_for_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_hash_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_if_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_implicit_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_in_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_index_target_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_integer_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_lambda_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_match_required_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_match_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_missing_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_module_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_next_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_nil_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_or_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_parameters_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_program_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_range_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_rational_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_redo_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_rescue_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_retry_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_return_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_self_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_source_file_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_source_line_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_splat_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_statements_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_string_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_super_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_symbol_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_true_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_undef_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_unless_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_until_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_when_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_while_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_x_string_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_yield_node(node); end
end

# source://prism//lib/prism/node.rb#3972
class Prism::ConstantAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3986
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#3995
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4000
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4010
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4005
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4015
  sig { params(params: T.untyped).returns(Prism::ConstantAndWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4000
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4029
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#4039
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3974
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#3977
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#4034
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#3980
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4063
  def type; end

  # source://prism//lib/prism/node.rb#3983
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4073
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4082
class Prism::ConstantOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4099
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      operator: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, value, operator, location); end

  # source://prism//lib/prism/node.rb#4109
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4114
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4124
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4119
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4129
  sig { params(params: T.untyped).returns(Prism::ConstantOperatorWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4114
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4144
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#4149
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4084
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4087
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#4096
  sig { returns(Symbol) }
  def operator; end

  # source://prism//lib/prism/node.rb#4090
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4174
  def type; end

  # source://prism//lib/prism/node.rb#4093
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4184
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4193
class Prism::ConstantOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4207
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#4216
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4221
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4231
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4226
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4236
  sig { params(params: T.untyped).returns(Prism::ConstantOrWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4221
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4250
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#4260
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4195
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4198
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#4255
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#4201
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4284
  def type; end

  # source://prism//lib/prism/node.rb#4204
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4294
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4303
class Prism::ConstantPathAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4314
  sig do
    params(
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(target, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#4322
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4327
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4337
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4332
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4342
  sig { params(params: T.untyped).returns(Prism::ConstantPathAndWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4327
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4355
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#4365
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4360
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#4308
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4305
  sig { returns(Prism::ConstantPathNode) }
  def target; end

  # source://prism//lib/prism/node.rb#4389
  def type; end

  # source://prism//lib/prism/node.rb#4311
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4399
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4408
class Prism::ConstantPathNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4419
  sig do
    params(
      parent: T.nilable(Prism::Node),
      child: Prism::Node,
      delimiter_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(parent, child, delimiter_loc, location); end

  # source://prism//lib/prism/node.rb#4427
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4413
  sig { returns(Prism::Node) }
  def child; end

  # source://prism//lib/prism/node.rb#4432
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4445
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4437
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4450
  sig { params(params: T.untyped).returns(Prism::ConstantPathNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4432
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4463
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#4468
  sig { returns(String) }
  def delimiter; end

  # source://prism//lib/prism/node.rb#4416
  sig { returns(Prism::Location) }
  def delimiter_loc; end

  # source://prism//lib/prism/node_ext.rb#129
  def full_name; end

  # source://prism//lib/prism/node_ext.rb#112
  def full_name_parts; end

  # source://prism//lib/prism/node.rb#4473
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4410
  sig { returns(T.nilable(Prism::Node)) }
  def parent; end

  # source://prism//lib/prism/node.rb#4501
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#4511
    def type; end
  end
end

# source://prism//lib/prism/node_ext.rb#108
class Prism::ConstantPathNode::DynamicPartsInConstantPathError < ::StandardError; end

# source://prism//lib/prism/node.rb#4520
class Prism::ConstantPathOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4534
  sig do
    params(
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node,
      operator: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(target, operator_loc, value, operator, location); end

  # source://prism//lib/prism/node.rb#4543
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4548
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4558
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4553
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4563
  sig { params(params: T.untyped).returns(Prism::ConstantPathOperatorWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4548
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4577
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#4582
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4531
  sig { returns(Symbol) }
  def operator; end

  # source://prism//lib/prism/node.rb#4525
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4522
  sig { returns(Prism::ConstantPathNode) }
  def target; end

  # source://prism//lib/prism/node.rb#4607
  def type; end

  # source://prism//lib/prism/node.rb#4528
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4617
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4626
class Prism::ConstantPathOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4637
  sig do
    params(
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(target, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#4645
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4650
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4660
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4655
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4665
  sig { params(params: T.untyped).returns(Prism::ConstantPathOrWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4650
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4678
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#4688
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4683
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#4631
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4628
  sig { returns(Prism::ConstantPathNode) }
  def target; end

  # source://prism//lib/prism/node.rb#4712
  def type; end

  # source://prism//lib/prism/node.rb#4634
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4722
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4731
class Prism::ConstantPathTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4742
  sig do
    params(
      parent: T.nilable(Prism::Node),
      child: Prism::Node,
      delimiter_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(parent, child, delimiter_loc, location); end

  # source://prism//lib/prism/node.rb#4750
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4736
  sig { returns(Prism::Node) }
  def child; end

  # source://prism//lib/prism/node.rb#4755
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4768
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4760
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4773
  sig { params(params: T.untyped).returns(Prism::ConstantPathTargetNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4755
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4786
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#4791
  sig { returns(String) }
  def delimiter; end

  # source://prism//lib/prism/node.rb#4739
  sig { returns(Prism::Location) }
  def delimiter_loc; end

  # source://prism//lib/prism/node_ext.rb#142
  def full_name; end

  # source://prism//lib/prism/node_ext.rb#137
  def full_name_parts; end

  # source://prism//lib/prism/node.rb#4796
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4733
  sig { returns(T.nilable(Prism::Node)) }
  def parent; end

  # source://prism//lib/prism/node.rb#4824
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#4834
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4849
class Prism::ConstantPathWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4860
  sig do
    params(
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(target, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#4868
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4873
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4883
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4878
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4888
  sig { params(params: T.untyped).returns(Prism::ConstantPathWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4873
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4901
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#4911
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4906
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#4854
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4851
  sig { returns(Prism::ConstantPathNode) }
  def target; end

  # source://prism//lib/prism/node.rb#4935
  def type; end

  # source://prism//lib/prism/node.rb#4857
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4945
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4954
class Prism::ConstantReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4959
  sig { params(name: Symbol, location: Prism::Location).void }
  def initialize(name, location); end

  # source://prism//lib/prism/node.rb#4965
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4970
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4980
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4975
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4985
  sig { params(params: T.untyped).returns(Prism::ConstantReadNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4970
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4996
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node_ext.rb#96
  def full_name; end

  # source://prism//lib/prism/node_ext.rb#91
  def full_name_parts; end

  # source://prism//lib/prism/node.rb#5001
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4956
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#5021
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#5031
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5040
class Prism::ConstantTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5045
  sig { params(name: Symbol, location: Prism::Location).void }
  def initialize(name, location); end

  # source://prism//lib/prism/node.rb#5051
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5056
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5066
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5061
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5071
  sig { params(params: T.untyped).returns(Prism::ConstantTargetNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#5056
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5082
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5087
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5042
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#5107
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#5117
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5126
class Prism::ConstantWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5140
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#5149
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5154
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5164
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5159
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5169
  sig { params(params: T.untyped).returns(Prism::ConstantWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#5154
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5183
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5193
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5128
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#5131
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#5188
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#5137
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#5217
  def type; end

  # source://prism//lib/prism/node.rb#5134
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#5227
    def type; end
  end
end

class Prism::DATAComment < Prism::Comment; end

# source://prism//lib/prism/dsl.rb#37
module Prism::DSL
  private

  # source://prism//lib/prism/dsl.rb#46
  def AliasGlobalVariableNode(new_name, old_name, keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#51
  def AliasMethodNode(new_name, old_name, keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#56
  def AlternationPatternNode(left, right, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#61
  def AndNode(left, right, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#66
  def ArgumentsNode(flags, arguments, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#71
  def ArrayNode(flags, elements, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#76
  def ArrayPatternNode(constant, requireds, rest, posts, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#81
  def AssocNode(key, value, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#86
  def AssocSplatNode(value, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#91
  def BackReferenceReadNode(name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#96
  def BeginNode(begin_keyword_loc, statements, rescue_clause, else_clause, ensure_clause, end_keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#101
  def BlockArgumentNode(expression, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#106
  def BlockLocalVariableNode(name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#111
  def BlockNode(locals, locals_body_index, parameters, body, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#116
  def BlockParameterNode(name, name_loc, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#121
  def BlockParametersNode(parameters, locals, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#126
  def BreakNode(arguments, keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#131
  def CallAndWriteNode(flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#136
  def CallNode(flags, receiver, call_operator_loc, name, message_loc, opening_loc, arguments, closing_loc, block, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#141
  def CallOperatorWriteNode(flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#146
  def CallOrWriteNode(flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#151
  def CallTargetNode(flags, receiver, call_operator_loc, name, message_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#156
  def CapturePatternNode(value, target, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#161
  def CaseMatchNode(predicate, conditions, consequent, case_keyword_loc, end_keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#166
  def CaseNode(predicate, conditions, consequent, case_keyword_loc, end_keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#171
  def ClassNode(locals, class_keyword_loc, constant_path, inheritance_operator_loc, superclass, body, end_keyword_loc, name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#176
  def ClassVariableAndWriteNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#181
  def ClassVariableOperatorWriteNode(name, name_loc, operator_loc, value, operator, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#186
  def ClassVariableOrWriteNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#191
  def ClassVariableReadNode(name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#196
  def ClassVariableTargetNode(name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#201
  def ClassVariableWriteNode(name, name_loc, value, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#206
  def ConstantAndWriteNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#211
  def ConstantOperatorWriteNode(name, name_loc, operator_loc, value, operator, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#216
  def ConstantOrWriteNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#221
  def ConstantPathAndWriteNode(target, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#226
  def ConstantPathNode(parent, child, delimiter_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#231
  def ConstantPathOperatorWriteNode(target, operator_loc, value, operator, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#236
  def ConstantPathOrWriteNode(target, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#241
  def ConstantPathTargetNode(parent, child, delimiter_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#246
  def ConstantPathWriteNode(target, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#251
  def ConstantReadNode(name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#256
  def ConstantTargetNode(name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#261
  def ConstantWriteNode(name, name_loc, value, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#266
  def DefNode(name, name_loc, receiver, parameters, body, locals, locals_body_index, def_keyword_loc, operator_loc, lparen_loc, rparen_loc, equal_loc, end_keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#271
  def DefinedNode(lparen_loc, value, rparen_loc, keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#276
  def ElseNode(else_keyword_loc, statements, end_keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#281
  def EmbeddedStatementsNode(opening_loc, statements, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#286
  def EmbeddedVariableNode(operator_loc, variable, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#291
  def EnsureNode(ensure_keyword_loc, statements, end_keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#296
  def FalseNode(location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#301
  def FindPatternNode(constant, left, requireds, right, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#306
  def FlipFlopNode(flags, left, right, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#311
  def FloatNode(location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#316
  def ForNode(index, collection, statements, for_keyword_loc, in_keyword_loc, do_keyword_loc, end_keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#321
  def ForwardingArgumentsNode(location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#326
  def ForwardingParameterNode(location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#331
  def ForwardingSuperNode(block, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#336
  def GlobalVariableAndWriteNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#341
  def GlobalVariableOperatorWriteNode(name, name_loc, operator_loc, value, operator, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#346
  def GlobalVariableOrWriteNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#351
  def GlobalVariableReadNode(name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#356
  def GlobalVariableTargetNode(name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#361
  def GlobalVariableWriteNode(name, name_loc, value, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#366
  def HashNode(opening_loc, elements, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#371
  def HashPatternNode(constant, elements, rest, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#376
  def IfNode(if_keyword_loc, predicate, then_keyword_loc, statements, consequent, end_keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#381
  def ImaginaryNode(numeric, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#386
  def ImplicitNode(value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#391
  def ImplicitRestNode(location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#396
  def InNode(pattern, statements, in_loc, then_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#401
  def IndexAndWriteNode(flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#406
  def IndexOperatorWriteNode(flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#411
  def IndexOrWriteNode(flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#416
  def IndexTargetNode(flags, receiver, opening_loc, arguments, closing_loc, block, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#421
  def InstanceVariableAndWriteNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#426
  def InstanceVariableOperatorWriteNode(name, name_loc, operator_loc, value, operator, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#431
  def InstanceVariableOrWriteNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#436
  def InstanceVariableReadNode(name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#441
  def InstanceVariableTargetNode(name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#446
  def InstanceVariableWriteNode(name, name_loc, value, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#451
  def IntegerNode(flags, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#456
  def InterpolatedMatchLastLineNode(flags, opening_loc, parts, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#461
  def InterpolatedRegularExpressionNode(flags, opening_loc, parts, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#466
  def InterpolatedStringNode(opening_loc, parts, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#471
  def InterpolatedSymbolNode(opening_loc, parts, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#476
  def InterpolatedXStringNode(opening_loc, parts, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#481
  def KeywordHashNode(flags, elements, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#486
  def KeywordRestParameterNode(name, name_loc, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#491
  def LambdaNode(locals, locals_body_index, operator_loc, opening_loc, closing_loc, parameters, body, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#496
  def LocalVariableAndWriteNode(name_loc, operator_loc, value, name, depth, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#501
  def LocalVariableOperatorWriteNode(name_loc, operator_loc, value, name, operator, depth, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#506
  def LocalVariableOrWriteNode(name_loc, operator_loc, value, name, depth, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#511
  def LocalVariableReadNode(name, depth, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#516
  def LocalVariableTargetNode(name, depth, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#521
  def LocalVariableWriteNode(name, depth, name_loc, value, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#41
  def Location(source = T.unsafe(nil), start_offset = T.unsafe(nil), length = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#526
  def MatchLastLineNode(flags, opening_loc, content_loc, closing_loc, unescaped, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#531
  def MatchPredicateNode(value, pattern, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#536
  def MatchRequiredNode(value, pattern, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#541
  def MatchWriteNode(call, targets, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#546
  def MissingNode(location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#551
  def ModuleNode(locals, module_keyword_loc, constant_path, body, end_keyword_loc, name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#556
  def MultiTargetNode(lefts, rest, rights, lparen_loc, rparen_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#561
  def MultiWriteNode(lefts, rest, rights, lparen_loc, rparen_loc, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#566
  def NextNode(arguments, keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#571
  def NilNode(location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#576
  def NoKeywordsParameterNode(operator_loc, keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#581
  def NumberedParametersNode(maximum, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#586
  def NumberedReferenceReadNode(number, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#591
  def OptionalKeywordParameterNode(name, name_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#596
  def OptionalParameterNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#601
  def OrNode(left, right, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#606
  def ParametersNode(requireds, optionals, rest, posts, keywords, keyword_rest, block, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#611
  def ParenthesesNode(body, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#616
  def PinnedExpressionNode(expression, operator_loc, lparen_loc, rparen_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#621
  def PinnedVariableNode(variable, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#626
  def PostExecutionNode(statements, keyword_loc, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#631
  def PreExecutionNode(statements, keyword_loc, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#636
  def ProgramNode(locals, statements, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#641
  def RangeNode(flags, left, right, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#646
  def RationalNode(numeric, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#651
  def RedoNode(location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#656
  def RegularExpressionNode(flags, opening_loc, content_loc, closing_loc, unescaped, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#661
  def RequiredKeywordParameterNode(name, name_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#666
  def RequiredParameterNode(name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#671
  def RescueModifierNode(expression, keyword_loc, rescue_expression, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#676
  def RescueNode(keyword_loc, exceptions, operator_loc, reference, statements, consequent, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#681
  def RestParameterNode(name, name_loc, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#686
  def RetryNode(location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#691
  def ReturnNode(keyword_loc, arguments, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#696
  def SelfNode(location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#701
  def SingletonClassNode(locals, class_keyword_loc, operator_loc, expression, body, end_keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#706
  def SourceEncodingNode(location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#711
  def SourceFileNode(filepath, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#716
  def SourceLineNode(location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#721
  def SplatNode(operator_loc, expression, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#726
  def StatementsNode(body, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#731
  def StringNode(flags, opening_loc, content_loc, closing_loc, unescaped, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#736
  def SuperNode(keyword_loc, lparen_loc, arguments, rparen_loc, block, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#741
  def SymbolNode(flags, opening_loc, value_loc, closing_loc, unescaped, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#746
  def TrueNode(location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#751
  def UndefNode(names, keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#756
  def UnlessNode(keyword_loc, predicate, then_keyword_loc, statements, consequent, end_keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#761
  def UntilNode(flags, keyword_loc, closing_loc, predicate, statements, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#766
  def WhenNode(keyword_loc, conditions, statements, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#771
  def WhileNode(flags, keyword_loc, closing_loc, predicate, statements, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#776
  def XStringNode(flags, opening_loc, content_loc, closing_loc, unescaped, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#781
  def YieldNode(keyword_loc, lparen_loc, arguments, rparen_loc, location = T.unsafe(nil)); end
end

# source://prism//lib/prism/debug.rb#6
module Prism::Debug
  class << self
    # source://prism//lib/prism/debug.rb#54
    def cruby_locals(source); end

    def inspect_node(_arg0); end
    def memsize(_arg0); end
    def named_captures(_arg0); end

    # source://prism//lib/prism/debug.rb#196
    def newlines(source); end

    # source://prism//lib/prism/debug.rb#98
    def prism_locals(source); end

    def profile_file(_arg0); end
  end
end

# source://prism//lib/prism/debug.rb#90
Prism::Debug::AnonymousLocal = T.let(T.unsafe(nil), Object)

# source://prism//lib/prism/debug.rb#9
class Prism::Debug::ISeq
  # source://prism//lib/prism/debug.rb#12
  def initialize(parts); end

  # source://prism//lib/prism/debug.rb#28
  def each_child; end

  # source://prism//lib/prism/debug.rb#24
  def instructions; end

  # source://prism//lib/prism/debug.rb#20
  def local_table; end

  # source://prism//lib/prism/debug.rb#10
  def parts; end

  # source://prism//lib/prism/debug.rb#16
  def type; end
end

# source://prism//lib/prism/node.rb#5237
class Prism::DefNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5278
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      receiver: T.nilable(Prism::Node),
      parameters: T.nilable(Prism::ParametersNode),
      body: T.nilable(Prism::Node),
      locals: T::Array[Symbol],
      locals_body_index: Integer,
      def_keyword_loc: Prism::Location,
      operator_loc: T.nilable(Prism::Location),
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location),
      equal_loc: T.nilable(Prism::Location),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, receiver, parameters, body, locals, locals_body_index, def_keyword_loc, operator_loc, lparen_loc, rparen_loc, equal_loc, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#5296
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5251
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#5301
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5315
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5306
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5320
  sig { params(params: T.untyped).returns(Prism::DefNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#5301
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5343
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5348
  sig { returns(String) }
  def def_keyword; end

  # source://prism//lib/prism/node.rb#5260
  sig { returns(Prism::Location) }
  def def_keyword_loc; end

  # source://prism//lib/prism/node.rb#5373
  sig { returns(T.nilable(String)) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#5275
  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#5368
  sig { returns(T.nilable(String)) }
  def equal; end

  # source://prism//lib/prism/node.rb#5272
  sig { returns(T.nilable(Prism::Location)) }
  def equal_loc; end

  # source://prism//lib/prism/node.rb#5378
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5254
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#5257
  sig { returns(Integer) }
  def locals_body_index; end

  # source://prism//lib/prism/node.rb#5358
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#5266
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#5239
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#5242
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#5353
  sig { returns(T.nilable(String)) }
  def operator; end

  # source://prism//lib/prism/node.rb#5263
  sig { returns(T.nilable(Prism::Location)) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#5248
  sig { returns(T.nilable(Prism::ParametersNode)) }
  def parameters; end

  # source://prism//lib/prism/node.rb#5245
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#5363
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#5269
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#5425
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#5435
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5444
class Prism::DefinedNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5458
  sig do
    params(
      lparen_loc: T.nilable(Prism::Location),
      value: Prism::Node,
      rparen_loc: T.nilable(Prism::Location),
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(lparen_loc, value, rparen_loc, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#5467
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5472
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5482
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5477
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5487
  sig { params(params: T.untyped).returns(Prism::DefinedNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#5472
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5501
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5521
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5516
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#5455
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#5506
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#5446
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#5511
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#5452
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#5545
  def type; end

  # source://prism//lib/prism/node.rb#5449
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#5555
    def type; end
  end
end

# source://prism//lib/prism/desugar_compiler.rb#6
class Prism::DesugarCompiler < ::Prism::MutationCompiler
  # source://prism//lib/prism/desugar_compiler.rb#12
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#30
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#21
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#39
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#57
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#48
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#66
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#84
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#75
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#93
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#111
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#102
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#120
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#138
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#129
  def visit_local_variable_or_write_node(node); end

  private

  # source://prism//lib/prism/desugar_compiler.rb#145
  def desugar_and_write_node(node, read_class, write_class, *arguments); end

  # source://prism//lib/prism/desugar_compiler.rb#155
  def desugar_operator_write_node(node, read_class, write_class, *arguments); end

  # source://prism//lib/prism/desugar_compiler.rb#187
  def desugar_or_write_defined_node(node, read_class, write_class, *arguments); end

  # source://prism//lib/prism/desugar_compiler.rb#177
  def desugar_or_write_node(node, read_class, write_class, *arguments); end
end

# source://prism//lib/prism/dispatcher.rb#40
class Prism::Dispatcher < ::Prism::Visitor
  # source://prism//lib/prism/dispatcher.rb#45
  def initialize; end

  # source://prism//lib/prism/visitor.rb#16
  def dispatch(node); end

  # source://prism//lib/prism/dispatcher.rb#64
  def dispatch_once(node); end

  # source://prism//lib/prism/dispatcher.rb#42
  def listeners; end

  # source://prism//lib/prism/dispatcher.rb#52
  def register(listener, *events); end

  # source://prism//lib/prism/dispatcher.rb#70
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#78
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/dispatcher.rb#86
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#94
  def visit_and_node(node); end

  # source://prism//lib/prism/dispatcher.rb#102
  def visit_arguments_node(node); end

  # source://prism//lib/prism/dispatcher.rb#110
  def visit_array_node(node); end

  # source://prism//lib/prism/dispatcher.rb#118
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#126
  def visit_assoc_node(node); end

  # source://prism//lib/prism/dispatcher.rb#134
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/dispatcher.rb#142
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#150
  def visit_begin_node(node); end

  # source://prism//lib/prism/dispatcher.rb#158
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/dispatcher.rb#166
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#174
  def visit_block_node(node); end

  # source://prism//lib/prism/dispatcher.rb#182
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#190
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#198
  def visit_break_node(node); end

  # source://prism//lib/prism/dispatcher.rb#206
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#214
  def visit_call_node(node); end

  # source://prism//lib/prism/dispatcher.rb#222
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#230
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#238
  def visit_call_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#246
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#254
  def visit_case_match_node(node); end

  # source://prism//lib/prism/dispatcher.rb#262
  def visit_case_node(node); end

  # source://prism//lib/prism/dispatcher.rb#270
  def visit_class_node(node); end

  # source://prism//lib/prism/dispatcher.rb#278
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#286
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#294
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#302
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#310
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#318
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#326
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#334
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#342
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#350
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#358
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/dispatcher.rb#366
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#374
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#382
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#390
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#398
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#406
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#414
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#422
  def visit_def_node(node); end

  # source://prism//lib/prism/dispatcher.rb#430
  def visit_defined_node(node); end

  # source://prism//lib/prism/dispatcher.rb#438
  def visit_else_node(node); end

  # source://prism//lib/prism/dispatcher.rb#446
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/dispatcher.rb#454
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#462
  def visit_ensure_node(node); end

  # source://prism//lib/prism/dispatcher.rb#470
  def visit_false_node(node); end

  # source://prism//lib/prism/dispatcher.rb#478
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#486
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/dispatcher.rb#494
  def visit_float_node(node); end

  # source://prism//lib/prism/dispatcher.rb#502
  def visit_for_node(node); end

  # source://prism//lib/prism/dispatcher.rb#510
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/dispatcher.rb#518
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#526
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/dispatcher.rb#534
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#542
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#550
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#558
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#566
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#574
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#582
  def visit_hash_node(node); end

  # source://prism//lib/prism/dispatcher.rb#590
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#598
  def visit_if_node(node); end

  # source://prism//lib/prism/dispatcher.rb#606
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/dispatcher.rb#614
  def visit_implicit_node(node); end

  # source://prism//lib/prism/dispatcher.rb#622
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/dispatcher.rb#630
  def visit_in_node(node); end

  # source://prism//lib/prism/dispatcher.rb#638
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#646
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#654
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#662
  def visit_index_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#670
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#678
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#686
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#694
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#702
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#710
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#718
  def visit_integer_node(node); end

  # source://prism//lib/prism/dispatcher.rb#726
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#734
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#742
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#750
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/dispatcher.rb#758
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#766
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/dispatcher.rb#774
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#782
  def visit_lambda_node(node); end

  # source://prism//lib/prism/dispatcher.rb#790
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#798
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#806
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#814
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#822
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#830
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#838
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#846
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/dispatcher.rb#854
  def visit_match_required_node(node); end

  # source://prism//lib/prism/dispatcher.rb#862
  def visit_match_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#870
  def visit_missing_node(node); end

  # source://prism//lib/prism/dispatcher.rb#878
  def visit_module_node(node); end

  # source://prism//lib/prism/dispatcher.rb#886
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#894
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#902
  def visit_next_node(node); end

  # source://prism//lib/prism/dispatcher.rb#910
  def visit_nil_node(node); end

  # source://prism//lib/prism/dispatcher.rb#918
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#926
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#934
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#942
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#950
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#958
  def visit_or_node(node); end

  # source://prism//lib/prism/dispatcher.rb#966
  def visit_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#974
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/dispatcher.rb#982
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#990
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#998
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1006
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1014
  def visit_program_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1022
  def visit_range_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1030
  def visit_rational_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1038
  def visit_redo_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1046
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1054
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1062
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1070
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1078
  def visit_rescue_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1086
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1094
  def visit_retry_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1102
  def visit_return_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1110
  def visit_self_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1118
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1126
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1134
  def visit_source_file_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1142
  def visit_source_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1150
  def visit_splat_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1158
  def visit_statements_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1166
  def visit_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1174
  def visit_super_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1182
  def visit_symbol_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1190
  def visit_true_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1198
  def visit_undef_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1206
  def visit_unless_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1214
  def visit_until_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1222
  def visit_when_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1230
  def visit_while_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1238
  def visit_x_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1246
  def visit_yield_node(node); end
end

# source://prism//lib/prism/dispatcher.rb#1252
class Prism::Dispatcher::DispatchOnce < ::Prism::Visitor
  # source://prism//lib/prism/dispatcher.rb#1255
  def initialize(listeners); end

  # source://prism//lib/prism/dispatcher.rb#1253
  def listeners; end

  # source://prism//lib/prism/dispatcher.rb#1260
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1266
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1272
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1278
  def visit_and_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1284
  def visit_arguments_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1290
  def visit_array_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1296
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1302
  def visit_assoc_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1308
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1314
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1320
  def visit_begin_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1326
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1332
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1338
  def visit_block_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1344
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1350
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1356
  def visit_break_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1362
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1368
  def visit_call_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1374
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1380
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1386
  def visit_call_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1392
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1398
  def visit_case_match_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1404
  def visit_case_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1410
  def visit_class_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1416
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1422
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1428
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1434
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1440
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1446
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1452
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1458
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1464
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1470
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1476
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1482
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1488
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1494
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1500
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1506
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1512
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1518
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1524
  def visit_def_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1530
  def visit_defined_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1536
  def visit_else_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1542
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1548
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1554
  def visit_ensure_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1560
  def visit_false_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1566
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1572
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1578
  def visit_float_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1584
  def visit_for_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1590
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1596
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1602
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1608
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1614
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1620
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1626
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1632
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1638
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1644
  def visit_hash_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1650
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1656
  def visit_if_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1662
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1668
  def visit_implicit_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1674
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1680
  def visit_in_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1686
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1692
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1698
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1704
  def visit_index_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1710
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1716
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1722
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1728
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1734
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1740
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1746
  def visit_integer_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1752
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1758
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1764
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1770
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1776
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1782
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1788
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1794
  def visit_lambda_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1800
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1806
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1812
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1818
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1824
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1830
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1836
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1842
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1848
  def visit_match_required_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1854
  def visit_match_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1860
  def visit_missing_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1866
  def visit_module_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1872
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1878
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1884
  def visit_next_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1890
  def visit_nil_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1896
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1902
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1908
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1914
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1920
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1926
  def visit_or_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1932
  def visit_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1938
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1944
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1950
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1956
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1962
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1968
  def visit_program_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1974
  def visit_range_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1980
  def visit_rational_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1986
  def visit_redo_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1992
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1998
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2004
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2010
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2016
  def visit_rescue_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2022
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2028
  def visit_retry_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2034
  def visit_return_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2040
  def visit_self_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2046
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2052
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2058
  def visit_source_file_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2064
  def visit_source_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2070
  def visit_splat_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2076
  def visit_statements_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2082
  def visit_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2088
  def visit_super_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2094
  def visit_symbol_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2100
  def visit_true_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2106
  def visit_undef_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2112
  def visit_unless_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2118
  def visit_until_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2124
  def visit_when_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2130
  def visit_while_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2136
  def visit_x_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2142
  def visit_yield_node(node); end
end

# source://prism//lib/prism/dot_visitor.rb#13
class Prism::DotVisitor < ::Prism::Visitor
  # source://prism//lib/prism/dot_visitor.rb#105
  def initialize; end

  # source://prism//lib/prism/dot_visitor.rb#102
  def digraph; end

  # source://prism//lib/prism/dot_visitor.rb#110
  def to_dot; end

  # source://prism//lib/prism/dot_visitor.rb#115
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#140
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#165
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#190
  def visit_and_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#215
  def visit_arguments_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#245
  def visit_array_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#285
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#347
  def visit_assoc_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#376
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#399
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#416
  def visit_begin_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#464
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#487
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#504
  def visit_block_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#542
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#567
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#610
  def visit_break_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#633
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#679
  def visit_call_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#737
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#786
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#832
  def visit_call_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#862
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#887
  def visit_case_match_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#932
  def visit_case_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#977
  def visit_class_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1024
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1051
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1081
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1108
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1125
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1142
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1171
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1198
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1228
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1255
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1280
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1307
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1335
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1360
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1387
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1412
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1429
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1446
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1473
  def visit_def_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1545
  def visit_defined_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1576
  def visit_else_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1604
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1630
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1651
  def visit_ensure_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1677
  def visit_false_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1691
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1742
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1774
  def visit_float_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1788
  def visit_for_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1830
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1844
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1858
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1878
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1905
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1935
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1962
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1979
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1996
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2023
  def visit_hash_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2056
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2105
  def visit_if_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2150
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2168
  def visit_implicit_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2186
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2200
  def visit_in_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2232
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2285
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2341
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2394
  def visit_index_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2433
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2460
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2490
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2517
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2534
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2551
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2578
  def visit_integer_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2595
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2631
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2667
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2704
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2741
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2774
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2804
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2829
  def visit_lambda_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2870
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2900
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2933
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2963
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2983
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3003
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3033
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3062
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3087
  def visit_match_required_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3112
  def visit_match_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3143
  def visit_missing_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3157
  def visit_module_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3193
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3249
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3312
  def visit_next_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3335
  def visit_nil_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3349
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3369
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3386
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3403
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3427
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3454
  def visit_or_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3479
  def visit_parameters_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3563
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3589
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3616
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3637
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3666
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3695
  def visit_program_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3716
  def visit_range_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3748
  def visit_rational_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3766
  def visit_redo_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3780
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3809
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3829
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3846
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3871
  def visit_rescue_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3924
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3949
  def visit_retry_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3963
  def visit_return_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3986
  def visit_self_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4000
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4036
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4050
  def visit_source_file_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4067
  def visit_source_line_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4081
  def visit_splat_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4104
  def visit_statements_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4131
  def visit_string_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4164
  def visit_super_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4203
  def visit_symbol_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4238
  def visit_true_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4252
  def visit_undef_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4282
  def visit_unless_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4325
  def visit_until_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4360
  def visit_when_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4396
  def visit_while_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4431
  def visit_x_string_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4460
  def visit_yield_node(node); end

  private

  # source://prism//lib/prism/dot_visitor.rb#4506
  def arguments_node_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4514
  def array_node_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4522
  def call_node_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4532
  def encoding_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4541
  def integer_base_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4552
  def keyword_hash_node_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4500
  def location_inspect(location); end

  # source://prism//lib/prism/dot_visitor.rb#4560
  def loop_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4495
  def node_id(node); end

  # source://prism//lib/prism/dot_visitor.rb#4568
  def range_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4576
  def regular_expression_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4594
  def string_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4604
  def symbol_flags_inspect(node); end
end

# source://prism//lib/prism/dot_visitor.rb#58
class Prism::DotVisitor::Digraph
  # source://prism//lib/prism/dot_visitor.rb#61
  def initialize; end

  # source://prism//lib/prism/dot_visitor.rb#75
  def edge(value); end

  # source://prism//lib/prism/dot_visitor.rb#59
  def edges; end

  # source://prism//lib/prism/dot_visitor.rb#67
  def node(value); end

  # source://prism//lib/prism/dot_visitor.rb#59
  def nodes; end

  # source://prism//lib/prism/dot_visitor.rb#79
  def to_dot; end

  # source://prism//lib/prism/dot_visitor.rb#71
  def waypoint(value); end

  # source://prism//lib/prism/dot_visitor.rb#59
  def waypoints; end
end

# source://prism//lib/prism/dot_visitor.rb#14
class Prism::DotVisitor::Field
  # source://prism//lib/prism/dot_visitor.rb#17
  def initialize(name, value, port); end

  # source://prism//lib/prism/dot_visitor.rb#15
  def name; end

  # source://prism//lib/prism/dot_visitor.rb#15
  def port; end

  # source://prism//lib/prism/dot_visitor.rb#23
  def to_dot; end

  # source://prism//lib/prism/dot_visitor.rb#15
  def value; end
end

# source://prism//lib/prism/dot_visitor.rb#32
class Prism::DotVisitor::Table
  # source://prism//lib/prism/dot_visitor.rb#35
  def initialize(name); end

  # source://prism//lib/prism/dot_visitor.rb#40
  def field(name, value = T.unsafe(nil), port: T.unsafe(nil)); end

  # source://prism//lib/prism/dot_visitor.rb#33
  def fields; end

  # source://prism//lib/prism/dot_visitor.rb#33
  def name; end

  # source://prism//lib/prism/dot_visitor.rb#44
  def to_dot; end
end

# source://prism//lib/prism/node.rb#5564
class Prism::ElseNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5575
  sig do
    params(
      else_keyword_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(else_keyword_loc, statements, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#5583
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5588
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5600
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5593
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5605
  sig { params(params: T.untyped).returns(Prism::ElseNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#5588
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5618
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5623
  sig { returns(String) }
  def else_keyword; end

  # source://prism//lib/prism/node.rb#5566
  sig { returns(Prism::Location) }
  def else_keyword_loc; end

  # source://prism//lib/prism/node.rb#5628
  sig { returns(T.nilable(String)) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#5572
  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#5633
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5569
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#5660
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#5670
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#260
class Prism::EmbDocComment < ::Prism::Comment
  # source://prism//lib/prism/parse_result.rb#267
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#262
  def trailing?; end
end

# source://prism//lib/prism/node.rb#5679
class Prism::EmbeddedStatementsNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5690
  sig do
    params(
      opening_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(opening_loc, statements, closing_loc, location); end

  # source://prism//lib/prism/node.rb#5698
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5703
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5743
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#5687
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#5715
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5708
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5720
  sig { params(params: T.untyped).returns(Prism::EmbeddedStatementsNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#5703
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5733
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5748
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5738
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#5681
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#5684
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#5775
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#5785
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5794
class Prism::EmbeddedVariableNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5802
  sig { params(operator_loc: Prism::Location, variable: Prism::Node, location: Prism::Location).void }
  def initialize(operator_loc, variable, location); end

  # source://prism//lib/prism/node.rb#5809
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5814
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5824
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5819
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5829
  sig { params(params: T.untyped).returns(Prism::EmbeddedVariableNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#5814
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5841
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5851
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5846
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#5796
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#5873
  def type; end

  # source://prism//lib/prism/node.rb#5799
  sig { returns(Prism::Node) }
  def variable; end

  class << self
    # source://prism//lib/prism/node.rb#5883
    def type; end
  end
end

# source://prism//lib/prism/node.rb#17301
# Flags for nodes that have unescaped content.
module Prism::EncodingFlags; end

# source://prism//lib/prism/node.rb#17306
Prism::EncodingFlags::FORCED_BINARY_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#17303
Prism::EncodingFlags::FORCED_UTF8_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#5896
class Prism::EnsureNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5907
  sig do
    params(
      ensure_keyword_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(ensure_keyword_loc, statements, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#5915
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5920
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5932
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5925
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5937
  sig { params(params: T.untyped).returns(Prism::EnsureNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#5920
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5950
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5960
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#5904
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#5955
  sig { returns(String) }
  def ensure_keyword; end

  # source://prism//lib/prism/node.rb#5898
  sig { returns(Prism::Location) }
  def ensure_keyword_loc; end

  # source://prism//lib/prism/node.rb#5965
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5901
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#5992
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6002
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6011
class Prism::FalseNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6013
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/node.rb#6018
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6023
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6033
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6028
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6038
  sig { params(params: T.untyped).returns(Prism::FalseNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6023
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6048
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6053
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6072
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6082
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6097
class Prism::FindPatternNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6117
  sig do
    params(
      constant: T.nilable(Prism::Node),
      left: Prism::Node,
      requireds: T::Array[Prism::Node],
      right: Prism::Node,
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(constant, left, requireds, right, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#6128
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6133
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6179
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#6114
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#6148
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6138
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6099
  sig { returns(T.nilable(Prism::Node)) }
  def constant; end

  # source://prism//lib/prism/node.rb#6153
  sig { params(params: T.untyped).returns(Prism::FindPatternNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6133
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6169
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6184
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6102
  sig { returns(Prism::Node) }
  def left; end

  # source://prism//lib/prism/node.rb#6174
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#6111
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#6105
  sig { returns(T::Array[Prism::Node]) }
  def requireds; end

  # source://prism//lib/prism/node.rb#6108
  sig { returns(Prism::Node) }
  def right; end

  # source://prism//lib/prism/node.rb#6216
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6226
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6235
class Prism::FlipFlopNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6249
  sig do
    params(
      flags: Integer,
      left: T.nilable(Prism::Node),
      right: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(flags, left, right, operator_loc, location); end

  # source://prism//lib/prism/node.rb#6258
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6263
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6276
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6268
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6281
  sig { params(params: T.untyped).returns(Prism::FlipFlopNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6263
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6295
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6300
  sig { returns(T::Boolean) }
  def exclude_end?; end

  # source://prism//lib/prism/node.rb#6310
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6240
  sig { returns(T.nilable(Prism::Node)) }
  def left; end

  # source://prism//lib/prism/node.rb#6305
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#6246
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#6243
  sig { returns(T.nilable(Prism::Node)) }
  def right; end

  # source://prism//lib/prism/node.rb#6344
  def type; end

  private

  # source://prism//lib/prism/node.rb#6237
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#6354
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6363
class Prism::FloatNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6365
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/node.rb#6370
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6375
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6385
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6380
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6390
  sig { params(params: T.untyped).returns(Prism::FloatNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6375
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6400
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6405
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6424
  def type; end

  # source://prism//lib/prism/node_ext.rb#62
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#6434
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6443
class Prism::ForNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6466
  sig do
    params(
      index: Prism::Node,
      collection: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      for_keyword_loc: Prism::Location,
      in_keyword_loc: Prism::Location,
      do_keyword_loc: T.nilable(Prism::Location),
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(index, collection, statements, for_keyword_loc, in_keyword_loc, do_keyword_loc, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#6478
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6483
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6448
  sig { returns(Prism::Node) }
  def collection; end

  # source://prism//lib/prism/node.rb#6497
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6488
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6502
  sig { params(params: T.untyped).returns(Prism::ForNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6483
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6519
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6534
  sig { returns(T.nilable(String)) }
  def do_keyword; end

  # source://prism//lib/prism/node.rb#6460
  sig { returns(T.nilable(Prism::Location)) }
  def do_keyword_loc; end

  # source://prism//lib/prism/node.rb#6539
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#6463
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#6524
  sig { returns(String) }
  def for_keyword; end

  # source://prism//lib/prism/node.rb#6454
  sig { returns(Prism::Location) }
  def for_keyword_loc; end

  # source://prism//lib/prism/node.rb#6529
  sig { returns(String) }
  def in_keyword; end

  # source://prism//lib/prism/node.rb#6457
  sig { returns(Prism::Location) }
  def in_keyword_loc; end

  # source://prism//lib/prism/node.rb#6445
  sig { returns(Prism::Node) }
  def index; end

  # source://prism//lib/prism/node.rb#6544
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6451
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#6577
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6587
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6598
class Prism::ForwardingArgumentsNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6600
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/node.rb#6605
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6610
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6620
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6615
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6625
  sig { params(params: T.untyped).returns(Prism::ForwardingArgumentsNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6610
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6635
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6640
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6659
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6669
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6679
class Prism::ForwardingParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6681
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/node.rb#6686
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6691
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6701
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6696
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6706
  sig { params(params: T.untyped).returns(Prism::ForwardingParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6691
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6716
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6721
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6740
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6750
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6759
class Prism::ForwardingSuperNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6764
  sig { params(block: T.nilable(Prism::BlockNode), location: Prism::Location).void }
  def initialize(block, location); end

  # source://prism//lib/prism/node.rb#6770
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6761
  sig { returns(T.nilable(Prism::BlockNode)) }
  def block; end

  # source://prism//lib/prism/node.rb#6775
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6787
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6780
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6792
  sig { params(params: T.untyped).returns(Prism::ForwardingSuperNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6775
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6803
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6808
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6833
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6843
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6852
class Prism::GlobalVariableAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6866
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#6875
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6880
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6890
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6885
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6895
  sig { params(params: T.untyped).returns(Prism::GlobalVariableAndWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6880
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6909
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6919
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6854
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#6857
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#6914
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#6860
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#6943
  def type; end

  # source://prism//lib/prism/node.rb#6863
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#6953
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6962
class Prism::GlobalVariableOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6979
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      operator: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, value, operator, location); end

  # source://prism//lib/prism/node.rb#6989
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6994
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7004
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6999
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7009
  sig { params(params: T.untyped).returns(Prism::GlobalVariableOperatorWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6994
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7024
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7029
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6964
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#6967
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#6976
  sig { returns(Symbol) }
  def operator; end

  # source://prism//lib/prism/node.rb#6970
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#7054
  def type; end

  # source://prism//lib/prism/node.rb#6973
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#7064
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7073
class Prism::GlobalVariableOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7087
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#7096
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7101
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7111
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7106
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7116
  sig { params(params: T.untyped).returns(Prism::GlobalVariableOrWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#7101
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7130
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7140
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7075
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#7078
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#7135
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#7081
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#7164
  def type; end

  # source://prism//lib/prism/node.rb#7084
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#7174
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7183
class Prism::GlobalVariableReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7188
  sig { params(name: Symbol, location: Prism::Location).void }
  def initialize(name, location); end

  # source://prism//lib/prism/node.rb#7194
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7199
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7209
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7204
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7214
  sig { params(params: T.untyped).returns(Prism::GlobalVariableReadNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#7199
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7225
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7230
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7185
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#7250
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#7260
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7269
class Prism::GlobalVariableTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7274
  sig { params(name: Symbol, location: Prism::Location).void }
  def initialize(name, location); end

  # source://prism//lib/prism/node.rb#7280
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7285
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7295
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7290
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7300
  sig { params(params: T.untyped).returns(Prism::GlobalVariableTargetNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#7285
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7311
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7316
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7271
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#7336
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#7346
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7355
class Prism::GlobalVariableWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7369
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#7378
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7383
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7393
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7388
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7398
  sig { params(params: T.untyped).returns(Prism::GlobalVariableWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#7383
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7412
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7422
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7357
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#7360
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#7417
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#7366
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#7446
  def type; end

  # source://prism//lib/prism/node.rb#7363
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#7456
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7465
class Prism::HashNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7476
  sig do
    params(
      opening_loc: Prism::Location,
      elements: T::Array[Prism::Node],
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(opening_loc, elements, closing_loc, location); end

  # source://prism//lib/prism/node.rb#7484
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7489
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7527
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#7473
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#7499
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7494
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7504
  sig { params(params: T.untyped).returns(Prism::HashNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#7489
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7517
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7470
  sig { returns(T::Array[Prism::Node]) }
  def elements; end

  # source://prism//lib/prism/node.rb#7532
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7522
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#7467
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#7554
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#7564
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7576
class Prism::HashPatternNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7593
  sig do
    params(
      constant: T.nilable(Prism::Node),
      elements: T::Array[Prism::Node],
      rest: T.nilable(Prism::Node),
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(constant, elements, rest, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#7603
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7608
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7652
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#7590
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#7622
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7613
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7578
  sig { returns(T.nilable(Prism::Node)) }
  def constant; end

  # source://prism//lib/prism/node.rb#7627
  sig { params(params: T.untyped).returns(Prism::HashPatternNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#7608
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7642
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7581
  sig { returns(T::Array[Prism::Node]) }
  def elements; end

  # source://prism//lib/prism/node.rb#7657
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7647
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#7587
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#7584
  sig { returns(T.nilable(Prism::Node)) }
  def rest; end

  # source://prism//lib/prism/node.rb#7691
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#7701
    def type; end
  end
end

# source://prism//lib/prism/node_ext.rb#35
module Prism::HeredocQuery
  # source://prism//lib/prism/node_ext.rb#37
  def heredoc?; end
end

# source://prism//lib/prism/node.rb#7713
class Prism::IfNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7733
  sig do
    params(
      if_keyword_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      then_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      consequent: T.nilable(Prism::Node),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(if_keyword_loc, predicate, then_keyword_loc, statements, consequent, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#7744
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7753
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7767
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7758
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7727
  sig { returns(T.nilable(Prism::Node)) }
  def consequent; end

  # source://prism//lib/prism/node.rb#7772
  sig { params(params: T.untyped).returns(Prism::IfNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#7753
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7788
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7803
  sig { returns(T.nilable(String)) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#7730
  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#7793
  sig { returns(T.nilable(String)) }
  def if_keyword; end

  # source://prism//lib/prism/node.rb#7715
  sig { returns(T.nilable(Prism::Location)) }
  def if_keyword_loc; end

  # source://prism//lib/prism/node.rb#7808
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7718
  sig { returns(Prism::Node) }
  def predicate; end

  # source://prism//lib/prism/node.rb#7748
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#7724
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#7798
  sig { returns(T.nilable(String)) }
  def then_keyword; end

  # source://prism//lib/prism/node.rb#7721
  sig { returns(T.nilable(Prism::Location)) }
  def then_keyword_loc; end

  # source://prism//lib/prism/node.rb#7844
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#7854
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7863
class Prism::ImaginaryNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7868
  sig { params(numeric: Prism::Node, location: Prism::Location).void }
  def initialize(numeric, location); end

  # source://prism//lib/prism/node.rb#7874
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7879
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7889
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7884
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7894
  sig { params(params: T.untyped).returns(Prism::ImaginaryNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#7879
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7905
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7910
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7865
  sig { returns(Prism::Node) }
  def numeric; end

  # source://prism//lib/prism/node.rb#7931
  def type; end

  # source://prism//lib/prism/node_ext.rb#69
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#7941
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7954
class Prism::ImplicitNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7959
  sig { params(value: Prism::Node, location: Prism::Location).void }
  def initialize(value, location); end

  # source://prism//lib/prism/node.rb#7965
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7970
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7980
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7975
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7985
  sig { params(params: T.untyped).returns(Prism::ImplicitNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#7970
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7996
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8001
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8022
  def type; end

  # source://prism//lib/prism/node.rb#7956
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#8032
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8050
class Prism::ImplicitRestNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8052
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/node.rb#8057
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8062
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8072
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8067
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8077
  sig { params(params: T.untyped).returns(Prism::ImplicitRestNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#8062
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8087
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8092
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8111
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#8121
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8130
class Prism::InNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8144
  sig do
    params(
      pattern: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      in_loc: Prism::Location,
      then_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(pattern, statements, in_loc, then_loc, location); end

  # source://prism//lib/prism/node.rb#8153
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8158
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8171
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8163
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8176
  sig { params(params: T.untyped).returns(Prism::InNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#8158
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8190
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8195
  sig { returns(String) }
  def in; end

  # source://prism//lib/prism/node.rb#8138
  sig { returns(Prism::Location) }
  def in_loc; end

  # source://prism//lib/prism/node.rb#8205
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8132
  sig { returns(Prism::Node) }
  def pattern; end

  # source://prism//lib/prism/node.rb#8135
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#8200
  sig { returns(T.nilable(String)) }
  def then; end

  # source://prism//lib/prism/node.rb#8141
  sig { returns(T.nilable(Prism::Location)) }
  def then_loc; end

  # source://prism//lib/prism/node.rb#8234
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#8244
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8253
class Prism::IndexAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8282
  sig do
    params(
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#8296
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8267
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#8355
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#8273
  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  # source://prism//lib/prism/node.rb#8360
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#8261
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#8301
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8370
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#8270
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#8316
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8306
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8321
  sig { params(params: T.untyped).returns(Prism::IndexAndWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#8301
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8340
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8380
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8365
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#8264
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#8375
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#8276
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#8258
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#8345
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#8425
  def type; end

  # source://prism//lib/prism/node.rb#8279
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#8350
  sig { returns(T::Boolean) }
  def variable_call?; end

  private

  # source://prism//lib/prism/node.rb#8255
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#8435
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8444
class Prism::IndexOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8476
  sig do
    params(
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::Node),
      operator: Symbol,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#8491
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8458
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#8551
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#8464
  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  # source://prism//lib/prism/node.rb#8556
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#8452
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#8496
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8566
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#8461
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#8511
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8501
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8516
  sig { params(params: T.untyped).returns(Prism::IndexOperatorWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#8496
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8536
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8571
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8561
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#8455
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#8467
  sig { returns(Symbol) }
  def operator; end

  # source://prism//lib/prism/node.rb#8470
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#8449
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#8541
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#8617
  def type; end

  # source://prism//lib/prism/node.rb#8473
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#8546
  sig { returns(T::Boolean) }
  def variable_call?; end

  private

  # source://prism//lib/prism/node.rb#8446
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#8627
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8636
class Prism::IndexOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8665
  sig do
    params(
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#8679
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8650
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#8738
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#8656
  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  # source://prism//lib/prism/node.rb#8743
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#8644
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#8684
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8753
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#8653
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#8699
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8689
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8704
  sig { params(params: T.untyped).returns(Prism::IndexOrWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#8684
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8723
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8763
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8748
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#8647
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#8758
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#8659
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#8641
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#8728
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#8808
  def type; end

  # source://prism//lib/prism/node.rb#8662
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#8733
  sig { returns(T::Boolean) }
  def variable_call?; end

  private

  # source://prism//lib/prism/node.rb#8638
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#8818
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8835
class Prism::IndexTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8855
  sig do
    params(
      flags: Integer,
      receiver: Prism::Node,
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::Node),
      location: Prism::Location
    ).void
  end
  def initialize(flags, receiver, opening_loc, arguments, closing_loc, block, location); end

  # source://prism//lib/prism/node.rb#8866
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8846
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#8921
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#8852
  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  # source://prism//lib/prism/node.rb#8871
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8931
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#8849
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#8885
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8876
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8890
  sig { params(params: T.untyped).returns(Prism::IndexTargetNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#8871
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8906
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8936
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8926
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#8843
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#8840
  sig { returns(Prism::Node) }
  def receiver; end

  # source://prism//lib/prism/node.rb#8911
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#8973
  def type; end

  # source://prism//lib/prism/node.rb#8916
  sig { returns(T::Boolean) }
  def variable_call?; end

  private

  # source://prism//lib/prism/node.rb#8837
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#8983
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#245
class Prism::InlineComment < ::Prism::Comment
  # source://prism//lib/prism/parse_result.rb#253
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#248
  sig { override.returns(T::Boolean) }
  def trailing?; end
end

# source://prism//lib/prism/node.rb#8992
class Prism::InstanceVariableAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9006
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#9015
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9020
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9030
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9025
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9035
  sig { params(params: T.untyped).returns(Prism::InstanceVariableAndWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#9020
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9049
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#9059
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8994
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#8997
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#9054
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#9000
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#9083
  def type; end

  # source://prism//lib/prism/node.rb#9003
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#9093
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9102
class Prism::InstanceVariableOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9119
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      operator: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, value, operator, location); end

  # source://prism//lib/prism/node.rb#9129
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9134
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9144
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9139
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9149
  sig { params(params: T.untyped).returns(Prism::InstanceVariableOperatorWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#9134
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9164
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#9169
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9104
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#9107
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#9116
  sig { returns(Symbol) }
  def operator; end

  # source://prism//lib/prism/node.rb#9110
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#9194
  def type; end

  # source://prism//lib/prism/node.rb#9113
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#9204
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9213
class Prism::InstanceVariableOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9227
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#9236
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9241
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9251
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9246
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9256
  sig { params(params: T.untyped).returns(Prism::InstanceVariableOrWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#9241
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9270
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#9280
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9215
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#9218
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#9275
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#9221
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#9304
  def type; end

  # source://prism//lib/prism/node.rb#9224
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#9314
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9323
class Prism::InstanceVariableReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9328
  sig { params(name: Symbol, location: Prism::Location).void }
  def initialize(name, location); end

  # source://prism//lib/prism/node.rb#9334
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9339
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9349
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9344
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9354
  sig { params(params: T.untyped).returns(Prism::InstanceVariableReadNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#9339
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9365
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#9370
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9325
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#9390
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#9400
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9409
class Prism::InstanceVariableTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9414
  sig { params(name: Symbol, location: Prism::Location).void }
  def initialize(name, location); end

  # source://prism//lib/prism/node.rb#9420
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9425
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9435
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9430
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9440
  sig { params(params: T.untyped).returns(Prism::InstanceVariableTargetNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#9425
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9451
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#9456
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9411
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#9476
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#9486
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9495
class Prism::InstanceVariableWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9509
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#9518
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9523
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9533
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9528
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9538
  sig { params(params: T.untyped).returns(Prism::InstanceVariableWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#9523
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9552
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#9562
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9497
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#9500
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#9557
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#9506
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#9586
  def type; end

  # source://prism//lib/prism/node.rb#9503
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#9596
    def type; end
  end
end

# source://prism//lib/prism/node.rb#17310
# Flags for integer nodes that correspond to the base of the integer.
module Prism::IntegerBaseFlags; end

# source://prism//lib/prism/node.rb#17312
Prism::IntegerBaseFlags::BINARY = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#17315
Prism::IntegerBaseFlags::DECIMAL = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#17321
Prism::IntegerBaseFlags::HEXADECIMAL = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#17318
Prism::IntegerBaseFlags::OCTAL = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#9605
class Prism::IntegerNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9610
  sig { params(flags: Integer, location: Prism::Location).void }
  def initialize(flags, location); end

  # source://prism//lib/prism/node.rb#9616
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9652
  sig { returns(T::Boolean) }
  def binary?; end

  # source://prism//lib/prism/node.rb#9621
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9631
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9626
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9636
  sig { params(params: T.untyped).returns(Prism::IntegerNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#9657
  sig { returns(T::Boolean) }
  def decimal?; end

  # source://prism//lib/prism/node.rb#9621
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9647
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#9667
  sig { returns(T::Boolean) }
  def hexadecimal?; end

  # source://prism//lib/prism/node.rb#9672
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9662
  sig { returns(T::Boolean) }
  def octal?; end

  # source://prism//lib/prism/node.rb#9693
  def type; end

  # source://prism//lib/prism/node_ext.rb#76
  def value; end

  private

  # source://prism//lib/prism/node.rb#9607
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#9703
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9714
class Prism::InterpolatedMatchLastLineNode < ::Prism::Node
  include ::Prism::RegularExpressionOptions

  # source://prism//lib/prism/node.rb#9728
  sig do
    params(
      flags: Integer,
      opening_loc: Prism::Location,
      parts: T::Array[Prism::Node],
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(flags, opening_loc, parts, closing_loc, location); end

  # source://prism//lib/prism/node.rb#9737
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9806
  sig { returns(T::Boolean) }
  def ascii_8bit?; end

  # source://prism//lib/prism/node.rb#9747
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9841
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#9725
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#9757
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9752
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9762
  sig { params(params: T.untyped).returns(Prism::InterpolatedMatchLastLineNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#9747
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9776
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#9801
  sig { returns(T::Boolean) }
  def euc_jp?; end

  # source://prism//lib/prism/node.rb#9786
  sig { returns(T::Boolean) }
  def extended?; end

  # source://prism//lib/prism/node.rb#9826
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#9831
  sig { returns(T::Boolean) }
  def forced_us_ascii_encoding?; end

  # source://prism//lib/prism/node.rb#9821
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#9781
  sig { returns(T::Boolean) }
  def ignore_case?; end

  # source://prism//lib/prism/node.rb#9846
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9791
  sig { returns(T::Boolean) }
  def multi_line?; end

  # source://prism//lib/prism/node.rb#9796
  sig { returns(T::Boolean) }
  def once?; end

  # source://prism//lib/prism/node.rb#9836
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#9719
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#9722
  sig { returns(T::Array[Prism::Node]) }
  def parts; end

  # source://prism//lib/prism/node.rb#9741
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#9870
  def type; end

  # source://prism//lib/prism/node.rb#9816
  sig { returns(T::Boolean) }
  def utf_8?; end

  # source://prism//lib/prism/node.rb#9811
  sig { returns(T::Boolean) }
  def windows_31j?; end

  private

  # source://prism//lib/prism/node.rb#9716
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#9880
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9889
class Prism::InterpolatedRegularExpressionNode < ::Prism::Node
  include ::Prism::RegularExpressionOptions

  # source://prism//lib/prism/node.rb#9903
  sig do
    params(
      flags: Integer,
      opening_loc: Prism::Location,
      parts: T::Array[Prism::Node],
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(flags, opening_loc, parts, closing_loc, location); end

  # source://prism//lib/prism/node.rb#9912
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9981
  sig { returns(T::Boolean) }
  def ascii_8bit?; end

  # source://prism//lib/prism/node.rb#9922
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10016
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#9900
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#9932
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9927
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9937
  sig { params(params: T.untyped).returns(Prism::InterpolatedRegularExpressionNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#9922
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9951
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#9976
  sig { returns(T::Boolean) }
  def euc_jp?; end

  # source://prism//lib/prism/node.rb#9961
  sig { returns(T::Boolean) }
  def extended?; end

  # source://prism//lib/prism/node.rb#10001
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#10006
  sig { returns(T::Boolean) }
  def forced_us_ascii_encoding?; end

  # source://prism//lib/prism/node.rb#9996
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#9956
  sig { returns(T::Boolean) }
  def ignore_case?; end

  # source://prism//lib/prism/node.rb#10021
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9966
  sig { returns(T::Boolean) }
  def multi_line?; end

  # source://prism//lib/prism/node.rb#9971
  sig { returns(T::Boolean) }
  def once?; end

  # source://prism//lib/prism/node.rb#10011
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#9894
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#9897
  sig { returns(T::Array[Prism::Node]) }
  def parts; end

  # source://prism//lib/prism/node.rb#9916
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#10045
  def type; end

  # source://prism//lib/prism/node.rb#9991
  sig { returns(T::Boolean) }
  def utf_8?; end

  # source://prism//lib/prism/node.rb#9986
  sig { returns(T::Boolean) }
  def windows_31j?; end

  private

  # source://prism//lib/prism/node.rb#9891
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#10055
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10064
class Prism::InterpolatedStringNode < ::Prism::Node
  include ::Prism::HeredocQuery

  # source://prism//lib/prism/node.rb#10075
  sig do
    params(
      opening_loc: T.nilable(Prism::Location),
      parts: T::Array[Prism::Node],
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(opening_loc, parts, closing_loc, location); end

  # source://prism//lib/prism/node.rb#10083
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10093
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10131
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#10072
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#10103
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10098
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10108
  sig { params(params: T.untyped).returns(Prism::InterpolatedStringNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#10093
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10121
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#10136
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10126
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#10066
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#10069
  sig { returns(T::Array[Prism::Node]) }
  def parts; end

  # source://prism//lib/prism/node.rb#10087
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#10158
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#10168
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10177
class Prism::InterpolatedSymbolNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10188
  sig do
    params(
      opening_loc: T.nilable(Prism::Location),
      parts: T::Array[Prism::Node],
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(opening_loc, parts, closing_loc, location); end

  # source://prism//lib/prism/node.rb#10196
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10206
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10244
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#10185
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#10216
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10211
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10221
  sig { params(params: T.untyped).returns(Prism::InterpolatedSymbolNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#10206
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10234
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#10249
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10239
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#10179
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#10182
  sig { returns(T::Array[Prism::Node]) }
  def parts; end

  # source://prism//lib/prism/node.rb#10200
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#10271
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#10281
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10290
class Prism::InterpolatedXStringNode < ::Prism::Node
  include ::Prism::HeredocQuery

  # source://prism//lib/prism/node.rb#10301
  sig do
    params(
      opening_loc: Prism::Location,
      parts: T::Array[Prism::Node],
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(opening_loc, parts, closing_loc, location); end

  # source://prism//lib/prism/node.rb#10309
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10319
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10357
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#10298
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#10329
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10324
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10334
  sig { params(params: T.untyped).returns(Prism::InterpolatedXStringNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#10319
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10347
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#10362
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10352
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#10292
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#10295
  sig { returns(T::Array[Prism::Node]) }
  def parts; end

  # source://prism//lib/prism/node.rb#10313
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#10384
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#10394
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10403
class Prism::KeywordHashNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10411
  sig { params(flags: Integer, elements: T::Array[Prism::Node], location: Prism::Location).void }
  def initialize(flags, elements, location); end

  # source://prism//lib/prism/node.rb#10418
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10423
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10433
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10428
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10438
  sig { params(params: T.untyped).returns(Prism::KeywordHashNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#10423
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10450
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#10408
  sig { returns(T::Array[Prism::Node]) }
  def elements; end

  # source://prism//lib/prism/node.rb#10460
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10455
  sig { returns(T::Boolean) }
  def static_keys?; end

  # source://prism//lib/prism/node.rb#10482
  def type; end

  private

  # source://prism//lib/prism/node.rb#10405
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#10492
    def type; end
  end
end

# source://prism//lib/prism/node.rb#17325
# Flags for keyword hash nodes.
module Prism::KeywordHashNodeFlags; end

# source://prism//lib/prism/node.rb#17327
Prism::KeywordHashNodeFlags::STATIC_KEYS = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#10502
class Prism::KeywordRestParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10513
  sig do
    params(
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, location); end

  # source://prism//lib/prism/node.rb#10521
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10526
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10536
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10531
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10541
  sig { params(params: T.untyped).returns(Prism::KeywordRestParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#10526
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10554
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#10564
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10504
  sig { returns(T.nilable(Symbol)) }
  def name; end

  # source://prism//lib/prism/node.rb#10507
  sig { returns(T.nilable(Prism::Location)) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#10559
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#10510
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#10590
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#10600
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10609
class Prism::LambdaNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10632
  sig do
    params(
      locals: T::Array[Symbol],
      locals_body_index: Integer,
      operator_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      parameters: T.nilable(Prism::Node),
      body: T.nilable(Prism::Node),
      location: Prism::Location
    ).void
  end
  def initialize(locals, locals_body_index, operator_loc, opening_loc, closing_loc, parameters, body, location); end

  # source://prism//lib/prism/node.rb#10644
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10629
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#10649
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10699
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#10623
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#10662
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10654
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10667
  sig { params(params: T.untyped).returns(Prism::LambdaNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#10649
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10684
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#10704
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10611
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#10614
  sig { returns(Integer) }
  def locals_body_index; end

  # source://prism//lib/prism/node.rb#10694
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#10620
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#10689
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#10617
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#10626
  sig { returns(T.nilable(Prism::Node)) }
  def parameters; end

  # source://prism//lib/prism/node.rb#10740
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#10750
    def type; end
  end
end

# source://prism//lib/prism/lex_compat.rb#11
class Prism::LexCompat
  # source://prism//lib/prism/lex_compat.rb#599
  def initialize(source, **options); end

  # source://prism//lib/prism/lex_compat.rb#597
  def options; end

  # source://prism//lib/prism/lex_compat.rb#604
  def result; end

  # source://prism//lib/prism/lex_compat.rb#597
  def source; end
end

# source://prism//lib/prism/lex_compat.rb#210
class Prism::LexCompat::EndContentToken < ::Prism::LexCompat::Token
  # source://prism//lib/prism/lex_compat.rb#211
  def ==(other); end
end

# source://prism//lib/prism/lex_compat.rb#271
module Prism::LexCompat::Heredoc
  class << self
    # source://prism//lib/prism/lex_compat.rb#583
    def build(opening); end
  end
end

# source://prism//lib/prism/lex_compat.rb#295
class Prism::LexCompat::Heredoc::DashHeredoc
  # source://prism//lib/prism/lex_compat.rb#298
  def initialize(split); end

  # source://prism//lib/prism/lex_compat.rb#303
  def <<(token); end

  # source://prism//lib/prism/lex_compat.rb#296
  def split; end

  # source://prism//lib/prism/lex_compat.rb#307
  def to_a; end

  # source://prism//lib/prism/lex_compat.rb#296
  def tokens; end
end

# source://prism//lib/prism/lex_compat.rb#354
class Prism::LexCompat::Heredoc::DedentingHeredoc
  # source://prism//lib/prism/lex_compat.rb#359
  def initialize; end

  # source://prism//lib/prism/lex_compat.rb#370
  def <<(token); end

  # source://prism//lib/prism/lex_compat.rb#357
  def dedent; end

  # source://prism//lib/prism/lex_compat.rb#357
  def dedent_next; end

  # source://prism//lib/prism/lex_compat.rb#357
  def embexpr_balance; end

  # source://prism//lib/prism/lex_compat.rb#407
  def to_a; end

  # source://prism//lib/prism/lex_compat.rb#357
  def tokens; end
end

# source://prism//lib/prism/lex_compat.rb#355
Prism::LexCompat::Heredoc::DedentingHeredoc::TAB_WIDTH = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/lex_compat.rb#276
class Prism::LexCompat::Heredoc::PlainHeredoc
  # source://prism//lib/prism/lex_compat.rb#279
  def initialize; end

  # source://prism//lib/prism/lex_compat.rb#283
  def <<(token); end

  # source://prism//lib/prism/lex_compat.rb#287
  def to_a; end

  # source://prism//lib/prism/lex_compat.rb#277
  def tokens; end
end

# source://prism//lib/prism/lex_compat.rb#228
class Prism::LexCompat::IdentToken < ::Prism::LexCompat::Token
  # source://prism//lib/prism/lex_compat.rb#229
  def ==(other); end
end

# source://prism//lib/prism/lex_compat.rb#218
class Prism::LexCompat::IgnoreStateToken < ::Prism::LexCompat::Token
  # source://prism//lib/prism/lex_compat.rb#219
  def ==(other); end
end

# source://prism//lib/prism/lex_compat.rb#239
class Prism::LexCompat::IgnoredNewlineToken < ::Prism::LexCompat::Token
  # source://prism//lib/prism/lex_compat.rb#240
  def ==(other); end
end

# source://prism//lib/prism/lex_compat.rb#259
class Prism::LexCompat::ParamToken < ::Prism::LexCompat::Token
  # source://prism//lib/prism/lex_compat.rb#260
  def ==(other); end
end

# source://prism//lib/prism/lex_compat.rb#15
Prism::LexCompat::RIPPER = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/lex_compat.rb#186
class Prism::LexCompat::Token < ::SimpleDelegator
  # source://prism//lib/prism/lex_compat.rb#193
  def event; end

  # source://prism//lib/prism/lex_compat.rb#188
  def location; end

  # source://prism//lib/prism/lex_compat.rb#203
  def state; end

  # source://prism//lib/prism/lex_compat.rb#198
  def value; end
end

# source://prism//lib/prism/lex_compat.rb#852
class Prism::LexRipper
  # source://prism//lib/prism/lex_compat.rb#855
  def initialize(source); end

  # source://prism//lib/prism/lex_compat.rb#859
  def result; end

  # source://prism//lib/prism/lex_compat.rb#853
  def source; end
end

# source://prism//lib/prism/node.rb#10759
class Prism::LocalVariableAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10776
  sig do
    params(
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      depth: Integer,
      location: Prism::Location
    ).void
  end
  def initialize(name_loc, operator_loc, value, name, depth, location); end

  # source://prism//lib/prism/node.rb#10786
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10791
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10801
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10796
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10806
  sig { params(params: T.untyped).returns(Prism::LocalVariableAndWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#10791
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10821
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#10773
  sig { returns(Integer) }
  def depth; end

  # source://prism//lib/prism/node.rb#10831
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10770
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#10761
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#10826
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#10764
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#10856
  def type; end

  # source://prism//lib/prism/node.rb#10767
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#10866
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10875
class Prism::LocalVariableOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10895
  sig do
    params(
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      operator: Symbol,
      depth: Integer,
      location: Prism::Location
    ).void
  end
  def initialize(name_loc, operator_loc, value, name, operator, depth, location); end

  # source://prism//lib/prism/node.rb#10906
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10911
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10921
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10916
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10926
  sig { params(params: T.untyped).returns(Prism::LocalVariableOperatorWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#10911
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10942
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#10892
  sig { returns(Integer) }
  def depth; end

  # source://prism//lib/prism/node.rb#10947
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10886
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#10877
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#10889
  sig { returns(Symbol) }
  def operator; end

  # source://prism//lib/prism/node.rb#10880
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#10973
  def type; end

  # source://prism//lib/prism/node.rb#10883
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#10983
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10992
class Prism::LocalVariableOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11009
  sig do
    params(
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      depth: Integer,
      location: Prism::Location
    ).void
  end
  def initialize(name_loc, operator_loc, value, name, depth, location); end

  # source://prism//lib/prism/node.rb#11019
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11024
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11034
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11029
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11039
  sig { params(params: T.untyped).returns(Prism::LocalVariableOrWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#11024
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11054
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11006
  sig { returns(Integer) }
  def depth; end

  # source://prism//lib/prism/node.rb#11064
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11003
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#10994
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#11059
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#10997
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#11089
  def type; end

  # source://prism//lib/prism/node.rb#11000
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#11099
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11110
class Prism::LocalVariableReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11118
  sig { params(name: Symbol, depth: Integer, location: Prism::Location).void }
  def initialize(name, depth, location); end

  # source://prism//lib/prism/node.rb#11125
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11130
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11140
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11135
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11145
  sig { params(params: T.untyped).returns(Prism::LocalVariableReadNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#11130
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11157
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11115
  sig { returns(Integer) }
  def depth; end

  # source://prism//lib/prism/node.rb#11162
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11112
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#11183
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#11193
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11202
class Prism::LocalVariableTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11210
  sig { params(name: Symbol, depth: Integer, location: Prism::Location).void }
  def initialize(name, depth, location); end

  # source://prism//lib/prism/node.rb#11217
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11222
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11232
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11227
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11237
  sig { params(params: T.untyped).returns(Prism::LocalVariableTargetNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#11222
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11249
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11207
  sig { returns(Integer) }
  def depth; end

  # source://prism//lib/prism/node.rb#11254
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11204
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#11275
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#11285
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11294
class Prism::LocalVariableWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11311
  sig do
    params(
      name: Symbol,
      depth: Integer,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(name, depth, name_loc, value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#11321
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11326
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11336
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11331
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11341
  sig { params(params: T.untyped).returns(Prism::LocalVariableWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#11326
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11356
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11299
  sig { returns(Integer) }
  def depth; end

  # source://prism//lib/prism/node.rb#11366
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11296
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#11302
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#11361
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#11308
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#11391
  def type; end

  # source://prism//lib/prism/node.rb#11305
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#11401
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#91
class Prism::Location
  # source://prism//lib/prism/parse_result.rb#108
  sig { params(source: Prism::Source, start_offset: Integer, length: Integer).void }
  def initialize(source, start_offset, length); end

  # source://prism//lib/prism/parse_result.rb#202
  def ==(other); end

  # source://prism//lib/prism/parse_result.rb#104
  sig { returns(T::Array[Prism::Comment]) }
  def comments; end

  # source://prism//lib/prism/parse_result.rb#116
  sig { params(options: T.untyped).returns(Prism::Location) }
  def copy(**options); end

  # source://prism//lib/prism/parse_result.rb#192
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#187
  def end_character_column; end

  # source://prism//lib/prism/parse_result.rb#147
  def end_character_offset; end

  # source://prism//lib/prism/parse_result.rb#181
  sig { returns(Integer) }
  def end_column; end

  # source://prism//lib/prism/parse_result.rb#163
  sig { returns(Integer) }
  def end_line; end

  # source://prism//lib/prism/parse_result.rb#141
  sig { returns(Integer) }
  def end_offset; end

  # source://prism//lib/prism/parse_result.rb#125
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#211
  def join(other); end

  # source://prism//lib/prism/parse_result.rb#101
  def length; end

  # source://prism//lib/prism/parse_result.rb#197
  def pretty_print(q); end

  # source://prism//lib/prism/parse_result.rb#130
  sig { returns(String) }
  def slice; end

  # source://prism//lib/prism/parse_result.rb#175
  def start_character_column; end

  # source://prism//lib/prism/parse_result.rb#136
  def start_character_offset; end

  # source://prism//lib/prism/parse_result.rb#169
  sig { returns(Integer) }
  def start_column; end

  # source://prism//lib/prism/parse_result.rb#152
  sig { returns(Integer) }
  def start_line; end

  # source://prism//lib/prism/parse_result.rb#157
  def start_line_slice; end

  # source://prism//lib/prism/parse_result.rb#98
  sig { returns(Integer) }
  def start_offset; end

  protected

  # source://prism//lib/prism/parse_result.rb#94
  def source; end

  class << self
    # source://prism//lib/prism/parse_result.rb#221
    def null; end
  end
end

# source://prism//lib/prism/node.rb#17331
# Flags for while and until loop nodes.
module Prism::LoopFlags; end

# source://prism//lib/prism/node.rb#17333
Prism::LoopFlags::BEGIN_MODIFIER = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/parse_result.rb#273
class Prism::MagicComment
  # source://prism//lib/prism/parse_result.rb#281
  def initialize(key_loc, value_loc); end

  # source://prism//lib/prism/parse_result.rb#297
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#302
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#287
  def key; end

  # source://prism//lib/prism/parse_result.rb#275
  def key_loc; end

  # source://prism//lib/prism/parse_result.rb#292
  def value; end

  # source://prism//lib/prism/parse_result.rb#278
  def value_loc; end
end

# source://prism//lib/prism/node.rb#11412
class Prism::MatchLastLineNode < ::Prism::Node
  include ::Prism::RegularExpressionOptions

  # source://prism//lib/prism/node.rb#11429
  sig do
    params(
      flags: Integer,
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String,
      location: Prism::Location
    ).void
  end
  def initialize(flags, opening_loc, content_loc, closing_loc, unescaped, location); end

  # source://prism//lib/prism/node.rb#11439
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11504
  sig { returns(T::Boolean) }
  def ascii_8bit?; end

  # source://prism//lib/prism/node.rb#11444
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11544
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#11423
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#11454
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11449
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11539
  sig { returns(String) }
  def content; end

  # source://prism//lib/prism/node.rb#11420
  sig { returns(Prism::Location) }
  def content_loc; end

  # source://prism//lib/prism/node.rb#11459
  sig { params(params: T.untyped).returns(Prism::MatchLastLineNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#11444
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11474
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11499
  sig { returns(T::Boolean) }
  def euc_jp?; end

  # source://prism//lib/prism/node.rb#11484
  sig { returns(T::Boolean) }
  def extended?; end

  # source://prism//lib/prism/node.rb#11524
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#11529
  sig { returns(T::Boolean) }
  def forced_us_ascii_encoding?; end

  # source://prism//lib/prism/node.rb#11519
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#11479
  sig { returns(T::Boolean) }
  def ignore_case?; end

  # source://prism//lib/prism/node.rb#11549
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11489
  sig { returns(T::Boolean) }
  def multi_line?; end

  # source://prism//lib/prism/node.rb#11494
  sig { returns(T::Boolean) }
  def once?; end

  # source://prism//lib/prism/node.rb#11534
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#11417
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#11574
  def type; end

  # source://prism//lib/prism/node.rb#11426
  sig { returns(String) }
  def unescaped; end

  # source://prism//lib/prism/node.rb#11514
  sig { returns(T::Boolean) }
  def utf_8?; end

  # source://prism//lib/prism/node.rb#11509
  sig { returns(T::Boolean) }
  def windows_31j?; end

  private

  # source://prism//lib/prism/node.rb#11414
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#11584
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11593
class Prism::MatchPredicateNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11604
  sig do
    params(
      value: Prism::Node,
      pattern: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(value, pattern, operator_loc, location); end

  # source://prism//lib/prism/node.rb#11612
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11617
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11627
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11622
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11632
  sig { params(params: T.untyped).returns(Prism::MatchPredicateNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#11617
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11645
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11655
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11650
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#11601
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#11598
  sig { returns(Prism::Node) }
  def pattern; end

  # source://prism//lib/prism/node.rb#11679
  def type; end

  # source://prism//lib/prism/node.rb#11595
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#11689
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11698
class Prism::MatchRequiredNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11709
  sig do
    params(
      value: Prism::Node,
      pattern: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(value, pattern, operator_loc, location); end

  # source://prism//lib/prism/node.rb#11717
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11722
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11732
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11727
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11737
  sig { params(params: T.untyped).returns(Prism::MatchRequiredNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#11722
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11750
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11760
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11755
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#11706
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#11703
  sig { returns(Prism::Node) }
  def pattern; end

  # source://prism//lib/prism/node.rb#11784
  def type; end

  # source://prism//lib/prism/node.rb#11700
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#11794
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11804
class Prism::MatchWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11812
  sig { params(call: Prism::CallNode, targets: T::Array[Prism::Node], location: Prism::Location).void }
  def initialize(call, targets, location); end

  # source://prism//lib/prism/node.rb#11819
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11806
  sig { returns(Prism::CallNode) }
  def call; end

  # source://prism//lib/prism/node.rb#11824
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11834
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11829
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11839
  sig { params(params: T.untyped).returns(Prism::MatchWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#11824
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11851
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11856
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11809
  sig { returns(T::Array[Prism::Node]) }
  def targets; end

  # source://prism//lib/prism/node.rb#11878
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#11888
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11895
class Prism::MissingNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11897
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/node.rb#11902
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11907
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11917
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11912
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11922
  sig { params(params: T.untyped).returns(Prism::MissingNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#11907
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11932
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11937
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11956
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#11966
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11975
class Prism::ModuleNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11995
  sig do
    params(
      locals: T::Array[Symbol],
      module_keyword_loc: Prism::Location,
      constant_path: Prism::Node,
      body: T.nilable(Prism::Node),
      end_keyword_loc: Prism::Location,
      name: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(locals, module_keyword_loc, constant_path, body, end_keyword_loc, name, location); end

  # source://prism//lib/prism/node.rb#12006
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11986
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#12011
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12024
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12016
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11983
  sig { returns(Prism::Node) }
  def constant_path; end

  # source://prism//lib/prism/node.rb#12029
  sig { params(params: T.untyped).returns(Prism::ModuleNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12011
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12045
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12055
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#11989
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#12060
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11977
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#12050
  sig { returns(String) }
  def module_keyword; end

  # source://prism//lib/prism/node.rb#11980
  sig { returns(Prism::Location) }
  def module_keyword_loc; end

  # source://prism//lib/prism/node.rb#11992
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#12091
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#12101
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12110
class Prism::MultiTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12127
  sig do
    params(
      lefts: T::Array[Prism::Node],
      rest: T.nilable(Prism::Node),
      rights: T::Array[Prism::Node],
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(lefts, rest, rights, lparen_loc, rparen_loc, location); end

  # source://prism//lib/prism/node.rb#12137
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12142
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12156
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12147
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12161
  sig { params(params: T.untyped).returns(Prism::MultiTargetNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12142
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12176
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12191
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12112
  sig { returns(T::Array[Prism::Node]) }
  def lefts; end

  # source://prism//lib/prism/node.rb#12181
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#12121
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#12115
  sig { returns(T.nilable(Prism::Node)) }
  def rest; end

  # source://prism//lib/prism/node.rb#12118
  sig { returns(T::Array[Prism::Node]) }
  def rights; end

  # source://prism//lib/prism/node.rb#12186
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#12124
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#12220
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#12230
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12239
class Prism::MultiWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12262
  sig do
    params(
      lefts: T::Array[Prism::Node],
      rest: T.nilable(Prism::Node),
      rights: T::Array[Prism::Node],
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(lefts, rest, rights, lparen_loc, rparen_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#12274
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12279
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12294
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12284
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12299
  sig { params(params: T.untyped).returns(Prism::MultiWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12279
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12316
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12336
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12241
  sig { returns(T::Array[Prism::Node]) }
  def lefts; end

  # source://prism//lib/prism/node.rb#12321
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#12250
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#12331
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#12256
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#12244
  sig { returns(T.nilable(Prism::Node)) }
  def rest; end

  # source://prism//lib/prism/node.rb#12247
  sig { returns(T::Array[Prism::Node]) }
  def rights; end

  # source://prism//lib/prism/node.rb#12326
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#12253
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#12368
  def type; end

  # source://prism//lib/prism/node.rb#12259
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#12378
    def type; end
  end
end

# source://prism//lib/prism/mutation_compiler.rb#12
class Prism::MutationCompiler < ::Prism::Compiler
  # source://prism//lib/prism/mutation_compiler.rb#14
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#19
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#24
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#29
  def visit_and_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#34
  def visit_arguments_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#39
  def visit_array_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#44
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#49
  def visit_assoc_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#54
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#59
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#64
  def visit_begin_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#69
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#74
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#79
  def visit_block_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#84
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#89
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#94
  def visit_break_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#99
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#104
  def visit_call_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#109
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#114
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#119
  def visit_call_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#124
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#129
  def visit_case_match_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#134
  def visit_case_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#139
  def visit_class_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#144
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#149
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#154
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#159
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#164
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#169
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#174
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#179
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#184
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#189
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#194
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#199
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#204
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#209
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#214
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#219
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#224
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#229
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#234
  def visit_def_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#239
  def visit_defined_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#244
  def visit_else_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#249
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#254
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#259
  def visit_ensure_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#264
  def visit_false_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#269
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#274
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#279
  def visit_float_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#284
  def visit_for_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#289
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#294
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#299
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#304
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#309
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#314
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#319
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#324
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#329
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#334
  def visit_hash_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#339
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#344
  def visit_if_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#349
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#354
  def visit_implicit_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#359
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#364
  def visit_in_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#369
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#374
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#379
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#384
  def visit_index_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#389
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#394
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#399
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#404
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#409
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#414
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#419
  def visit_integer_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#424
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#429
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#434
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#439
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#444
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#449
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#454
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#459
  def visit_lambda_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#464
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#469
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#474
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#479
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#484
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#489
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#494
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#499
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#504
  def visit_match_required_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#509
  def visit_match_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#514
  def visit_missing_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#519
  def visit_module_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#524
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#529
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#534
  def visit_next_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#539
  def visit_nil_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#544
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#549
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#554
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#559
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#564
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#569
  def visit_or_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#574
  def visit_parameters_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#579
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#584
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#589
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#594
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#599
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#604
  def visit_program_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#609
  def visit_range_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#614
  def visit_rational_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#619
  def visit_redo_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#624
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#629
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#634
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#639
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#644
  def visit_rescue_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#649
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#654
  def visit_retry_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#659
  def visit_return_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#664
  def visit_self_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#669
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#674
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#679
  def visit_source_file_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#684
  def visit_source_line_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#689
  def visit_splat_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#694
  def visit_statements_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#699
  def visit_string_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#704
  def visit_super_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#709
  def visit_symbol_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#714
  def visit_true_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#719
  def visit_undef_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#724
  def visit_unless_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#729
  def visit_until_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#734
  def visit_when_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#739
  def visit_while_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#744
  def visit_x_string_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#749
  def visit_yield_node(node); end
end

# source://prism//lib/prism/node.rb#12387
class Prism::NextNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12395
  sig do
    params(
      arguments: T.nilable(Prism::ArgumentsNode),
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(arguments, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#12402
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12389
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#12407
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12419
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12412
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12424
  sig { params(params: T.untyped).returns(Prism::NextNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12407
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12436
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12446
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12441
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#12392
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#12472
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#12482
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12491
class Prism::NilNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12493
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/node.rb#12498
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12503
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12513
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12508
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12518
  sig { params(params: T.untyped).returns(Prism::NilNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12503
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12528
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12533
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12552
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#12562
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12572
class Prism::NoKeywordsParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12580
  sig { params(operator_loc: Prism::Location, keyword_loc: Prism::Location, location: Prism::Location).void }
  def initialize(operator_loc, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#12587
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12592
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12602
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12597
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12607
  sig { params(params: T.untyped).returns(Prism::NoKeywordsParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12592
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12619
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12634
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12629
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#12577
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#12624
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#12574
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#12655
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#12665
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11
class Prism::Node
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14
  sig { returns(Prism::Location) }
  def location; end

  # source://prism//lib/prism/node.rb#16
  def newline?; end

  # source://prism//lib/prism/node.rb#35
  def pretty_print(q); end

  # source://prism//lib/prism/node.rb#20
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#29
  sig { returns(String) }
  def slice; end

  # source://prism//lib/prism/node.rb#43
  sig { returns(String) }
  def to_dot; end
end

# source://prism//lib/prism/node_inspector.rb#6
class Prism::NodeInspector
  # source://prism//lib/prism/node_inspector.rb#9
  def initialize(prefix = T.unsafe(nil)); end

  # source://prism//lib/prism/node_inspector.rb#15
  # Appends a line to the output with the current prefix.
  sig { params(line: String).void }
  def <<(line); end

  # source://prism//lib/prism/node_inspector.rb#59
  # Returns a new inspector that can be used to inspect a child node.
  sig { params(append: String).returns(Prism::NodeInspector) }
  def child_inspector(append); end

  # source://prism//lib/prism/node_inspector.rb#54
  # Generates a string that represents a child node.
  sig { params(node: Prism::Node, append: String).returns(String) }
  def child_node(node, append); end

  # source://prism//lib/prism/node_inspector.rb#21
  # This generates a string that is used as the header of the inspect output
  # for any given node.
  sig { params(node: Prism::Node).returns(String) }
  def header(node); end

  # source://prism//lib/prism/node_inspector.rb#31
  # Generates a string that represents a list of nodes. It handles properly
  # using the box drawing characters to make the output look nice.
  sig { params(prefix: String, nodes: T::Array[Prism::Node]).returns(String) }
  def list(prefix, nodes); end

  # source://prism//lib/prism/node_inspector.rb#45
  # Generates a string that represents a location field on a node.
  sig { params(value: Prism::Location).returns(String) }
  def location(value); end

  # source://prism//lib/prism/node_inspector.rb#7
  sig { returns(String) }
  def output; end

  # source://prism//lib/prism/node_inspector.rb#7
  sig { returns(String) }
  def prefix; end

  # source://prism//lib/prism/node_inspector.rb#64
  # Returns the output as a string.
  sig { returns(String) }
  def to_str; end
end

# source://prism//lib/prism/node.rb#12675
class Prism::NumberedParametersNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12680
  sig { params(maximum: Integer, location: Prism::Location).void }
  def initialize(maximum, location); end

  # source://prism//lib/prism/node.rb#12686
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12691
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12701
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12696
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12706
  sig { params(params: T.untyped).returns(Prism::NumberedParametersNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12691
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12717
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12722
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12677
  sig { returns(Integer) }
  def maximum; end

  # source://prism//lib/prism/node.rb#12742
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#12752
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12761
class Prism::NumberedReferenceReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12766
  sig { params(number: Integer, location: Prism::Location).void }
  def initialize(number, location); end

  # source://prism//lib/prism/node.rb#12772
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12777
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12787
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12782
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12792
  sig { params(params: T.untyped).returns(Prism::NumberedReferenceReadNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12777
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12803
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12808
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12763
  sig { returns(Integer) }
  def number; end

  # source://prism//lib/prism/node.rb#12828
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#12838
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12848
class Prism::OptionalKeywordParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12859
  sig { params(name: Symbol, name_loc: Prism::Location, value: Prism::Node, location: Prism::Location).void }
  def initialize(name, name_loc, value, location); end

  # source://prism//lib/prism/node.rb#12867
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12872
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12882
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12877
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12887
  sig { params(params: T.untyped).returns(Prism::OptionalKeywordParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12872
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12900
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12905
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12850
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#12853
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#12928
  def type; end

  # source://prism//lib/prism/node.rb#12856
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#12938
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12948
class Prism::OptionalParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12962
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#12971
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12976
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12986
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12981
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12991
  sig { params(params: T.untyped).returns(Prism::OptionalParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12976
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13005
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13015
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12950
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#12953
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#13010
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#12956
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#13039
  def type; end

  # source://prism//lib/prism/node.rb#12959
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#13049
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13058
class Prism::OrNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13069
  sig { params(left: Prism::Node, right: Prism::Node, operator_loc: Prism::Location, location: Prism::Location).void }
  def initialize(left, right, operator_loc, location); end

  # source://prism//lib/prism/node.rb#13077
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13082
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13092
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13087
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13097
  sig { params(params: T.untyped).returns(Prism::OrNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#13082
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13110
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13120
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13060
  sig { returns(Prism::Node) }
  def left; end

  # source://prism//lib/prism/node.rb#13115
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#13066
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#13063
  sig { returns(Prism::Node) }
  def right; end

  # source://prism//lib/prism/node.rb#13144
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13154
    def type; end
  end
end

# source://prism//lib/prism/pack.rb#5
module Prism::Pack
  class << self
    def parse(_arg0, _arg1, _arg2); end
  end
end

# source://prism//lib/prism/pack.rb#55
Prism::Pack::AGNOSTIC_ENDIAN = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::BACK = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::BER = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::BIG_ENDIAN = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::COMMENT = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#59
class Prism::Pack::Directive
  # source://prism//lib/prism/pack.rb#88
  def initialize(version, variant, source, type, signed, endian, size, length_type, length); end

  # source://prism//lib/prism/pack.rb#130
  def describe; end

  # source://prism//lib/prism/pack.rb#76
  def endian; end

  # source://prism//lib/prism/pack.rb#85
  def length; end

  # source://prism//lib/prism/pack.rb#82
  def length_type; end

  # source://prism//lib/prism/pack.rb#73
  def signed; end

  # source://prism//lib/prism/pack.rb#79
  def size; end

  # source://prism//lib/prism/pack.rb#67
  def source; end

  # source://prism//lib/prism/pack.rb#70
  def type; end

  # source://prism//lib/prism/pack.rb#64
  def variant; end

  # source://prism//lib/prism/pack.rb#61
  def version; end
end

# source://prism//lib/prism/pack.rb#101
Prism::Pack::Directive::ENDIAN_DESCRIPTIONS = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/pack.rb#110
Prism::Pack::Directive::SIGNED_DESCRIPTIONS = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/pack.rb#117
Prism::Pack::Directive::SIZE_DESCRIPTIONS = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::ENDIAN_NA = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::FLOAT = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#195
class Prism::Pack::Format
  # source://prism//lib/prism/pack.rb#203
  def initialize(directives, encoding); end

  # source://prism//lib/prism/pack.rb#209
  def describe; end

  # source://prism//lib/prism/pack.rb#197
  def directives; end

  # source://prism//lib/prism/pack.rb#200
  def encoding; end
end

# source://prism//lib/prism/pack.rb#55
Prism::Pack::INTEGER = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::LENGTH_FIXED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::LENGTH_MAX = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::LENGTH_NA = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::LENGTH_RELATIVE = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::LITTLE_ENDIAN = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::MOVE = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::NATIVE_ENDIAN = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::NULL = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIGNED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIGNED_NA = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_16 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_32 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_64 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_8 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_INT = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_LONG = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_LONG_LONG = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_NA = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_P = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_SHORT = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SPACE = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_BASE64 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_FIXED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_HEX_HIGH = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_HEX_LOW = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_LSB = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_MIME = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_MSB = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_NULL_PADDED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_NULL_TERMINATED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_POINTER = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_SPACE_PADDED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_UU = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::UNSIGNED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::UTF8 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/node.rb#13164
class Prism::ParametersNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13187
  sig do
    params(
      requireds: T::Array[Prism::Node],
      optionals: T::Array[Prism::Node],
      rest: T.nilable(Prism::Node),
      posts: T::Array[Prism::Node],
      keywords: T::Array[Prism::Node],
      keyword_rest: T.nilable(Prism::Node),
      block: T.nilable(Prism::BlockParameterNode),
      location: Prism::Location
    ).void
  end
  def initialize(requireds, optionals, rest, posts, keywords, keyword_rest, block, location); end

  # source://prism//lib/prism/node.rb#13199
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13184
  sig { returns(T.nilable(Prism::BlockParameterNode)) }
  def block; end

  # source://prism//lib/prism/node.rb#13204
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13222
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13209
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13227
  sig { params(params: T.untyped).returns(Prism::ParametersNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#13204
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13244
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13249
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13181
  sig { returns(T.nilable(Prism::Node)) }
  def keyword_rest; end

  # source://prism//lib/prism/node.rb#13178
  sig { returns(T::Array[Prism::Node]) }
  def keywords; end

  # source://prism//lib/prism/node.rb#13169
  sig { returns(T::Array[Prism::Node]) }
  def optionals; end

  # source://prism//lib/prism/node.rb#13175
  sig { returns(T::Array[Prism::Node]) }
  def posts; end

  # source://prism//lib/prism/node.rb#13166
  sig { returns(T::Array[Prism::Node]) }
  def requireds; end

  # source://prism//lib/prism/node.rb#13172
  sig { returns(T.nilable(Prism::Node)) }
  def rest; end

  # source://prism//lib/prism/node_ext.rb#149
  def signature; end

  # source://prism//lib/prism/node.rb#13290
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13300
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13309
class Prism::ParenthesesNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13320
  sig do
    params(
      body: T.nilable(Prism::Node),
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(body, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#13328
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13311
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#13337
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13377
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#13317
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#13349
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13342
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13354
  sig { params(params: T.untyped).returns(Prism::ParenthesesNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#13337
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13367
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13382
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13372
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#13314
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#13332
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#13409
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13419
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#308
class Prism::ParseError
  # source://prism//lib/prism/parse_result.rb#316
  def initialize(message, location); end

  # source://prism//lib/prism/parse_result.rb#322
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#327
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#313
  sig { returns(Prism::Location) }
  def location; end

  # source://prism//lib/prism/parse_result.rb#310
  sig { returns(String) }
  def message; end
end

# source://prism//lib/prism/parse_result.rb#360
class Prism::ParseResult
  # source://prism//lib/prism/parse_result.rb#387
  def initialize(value, comments, magic_comments, data_loc, errors, warnings, source); end

  # source://prism//lib/prism/parse_result/comments.rb#173
  def attach_comments!; end

  # source://prism//lib/prism/parse_result.rb#367
  sig { returns(T::Array[Prism::Comment]) }
  def comments; end

  # source://prism//lib/prism/parse_result.rb#375
  def data_loc; end

  # source://prism//lib/prism/parse_result.rb#398
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#378
  sig { returns(T::Array[Prism::ParseError]) }
  def errors; end

  # source://prism//lib/prism/parse_result.rb#410
  def failure?; end

  # source://prism//lib/prism/parse_result.rb#370
  def magic_comments; end

  # source://prism//lib/prism/parse_result/newlines.rb#60
  def mark_newlines!; end

  # source://prism//lib/prism/parse_result.rb#384
  sig { returns(Prism::Source) }
  def source; end

  # source://prism//lib/prism/parse_result.rb#404
  def success?; end

  # source://prism//lib/prism/parse_result.rb#364
  sig { returns(Prism::ProgramNode) }
  def value; end

  # source://prism//lib/prism/parse_result.rb#381
  sig { returns(T::Array[Prism::ParseWarning]) }
  def warnings; end
end

# source://prism//lib/prism/parse_result/comments.rb#19
class Prism::ParseResult::Comments
  # source://prism//lib/prism/parse_result/comments.rb#78
  def initialize(parse_result); end

  # source://prism//lib/prism/parse_result/comments.rb#84
  def attach!; end

  # source://prism//lib/prism/parse_result/comments.rb#74
  def parse_result; end

  private

  # source://prism//lib/prism/parse_result/comments.rb#103
  def nearest_targets(node, comment); end
end

# source://prism//lib/prism/parse_result/comments.rb#49
class Prism::ParseResult::Comments::LocationTarget
  # source://prism//lib/prism/parse_result/comments.rb#52
  def initialize(location); end

  # source://prism//lib/prism/parse_result/comments.rb#68
  def <<(comment); end

  # source://prism//lib/prism/parse_result/comments.rb#64
  def encloses?(comment); end

  # source://prism//lib/prism/parse_result/comments.rb#60
  def end_offset; end

  # source://prism//lib/prism/parse_result/comments.rb#50
  def location; end

  # source://prism//lib/prism/parse_result/comments.rb#56
  def start_offset; end
end

# source://prism//lib/prism/parse_result/comments.rb#22
class Prism::ParseResult::Comments::NodeTarget
  # source://prism//lib/prism/parse_result/comments.rb#25
  def initialize(node); end

  # source://prism//lib/prism/parse_result/comments.rb#42
  def <<(comment); end

  # source://prism//lib/prism/parse_result/comments.rb#37
  def encloses?(comment); end

  # source://prism//lib/prism/parse_result/comments.rb#33
  def end_offset; end

  # source://prism//lib/prism/parse_result/comments.rb#23
  def node; end

  # source://prism//lib/prism/parse_result/comments.rb#29
  def start_offset; end
end

# source://prism//lib/prism/parse_result/newlines.rb#20
class Prism::ParseResult::Newlines < ::Prism::Visitor
  # source://prism//lib/prism/parse_result/newlines.rb#22
  def initialize(newline_marked); end

  # source://prism//lib/prism/parse_result/newlines.rb#27
  def visit_block_node(node); end

  # source://prism//lib/prism/parse_result/newlines.rb#41
  def visit_if_node(node); end

  # source://prism//lib/prism/parse_result/newlines.rb#27
  def visit_lambda_node(node); end

  # source://prism//lib/prism/parse_result/newlines.rb#49
  def visit_statements_node(node); end

  # source://prism//lib/prism/parse_result/newlines.rb#41
  def visit_unless_node(node); end
end

# source://prism//lib/prism/parse_result.rb#333
class Prism::ParseWarning
  # source://prism//lib/prism/parse_result.rb#341
  def initialize(message, location); end

  # source://prism//lib/prism/parse_result.rb#347
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#352
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#338
  sig { returns(Prism::Location) }
  def location; end

  # source://prism//lib/prism/parse_result.rb#335
  sig { returns(String) }
  def message; end
end

# source://prism//lib/prism/pattern.rb#37
class Prism::Pattern
  # source://prism//lib/prism/pattern.rb#63
  def initialize(query); end

  # source://prism//lib/prism/pattern.rb#70
  def compile; end

  # source://prism//lib/prism/pattern.rb#59
  def query; end

  # source://prism//lib/prism/pattern.rb#79
  def scan(root); end

  private

  # source://prism//lib/prism/pattern.rb#95
  def combine_and(left, right); end

  # source://prism//lib/prism/pattern.rb#101
  def combine_or(left, right); end

  # source://prism//lib/prism/pattern.rb#136
  def compile_alternation_pattern_node(node); end

  # source://prism//lib/prism/pattern.rb#111
  def compile_array_pattern_node(node); end

  # source://prism//lib/prism/pattern.rb#141
  def compile_constant_path_node(node); end

  # source://prism//lib/prism/pattern.rb#153
  def compile_constant_read_node(node); end

  # source://prism//lib/prism/pattern.rb#106
  def compile_error(node); end

  # source://prism//lib/prism/pattern.rb#171
  def compile_hash_pattern_node(node); end

  # source://prism//lib/prism/pattern.rb#196
  def compile_nil_node(node); end

  # source://prism//lib/prism/pattern.rb#225
  def compile_node(node); end

  # source://prism//lib/prism/pattern.rb#201
  def compile_regular_expression_node(node); end

  # source://prism//lib/prism/pattern.rb#209
  def compile_string_node(node); end

  # source://prism//lib/prism/pattern.rb#217
  def compile_symbol_node(node); end
end

# source://prism//lib/prism/pattern.rb#40
class Prism::Pattern::CompilationError < ::StandardError
  # source://prism//lib/prism/pattern.rb#43
  def initialize(repr); end
end

# source://prism//lib/prism/node.rb#13429
class Prism::PinnedExpressionNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13443
  sig do
    params(
      expression: Prism::Node,
      operator_loc: Prism::Location,
      lparen_loc: Prism::Location,
      rparen_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(expression, operator_loc, lparen_loc, rparen_loc, location); end

  # source://prism//lib/prism/node.rb#13452
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13457
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13467
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13462
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13472
  sig { params(params: T.untyped).returns(Prism::PinnedExpressionNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#13457
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13486
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13431
  sig { returns(Prism::Node) }
  def expression; end

  # source://prism//lib/prism/node.rb#13506
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13496
  sig { returns(String) }
  def lparen; end

  # source://prism//lib/prism/node.rb#13437
  sig { returns(Prism::Location) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#13491
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#13434
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#13501
  sig { returns(String) }
  def rparen; end

  # source://prism//lib/prism/node.rb#13440
  sig { returns(Prism::Location) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#13530
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13540
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13550
class Prism::PinnedVariableNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13558
  sig { params(variable: Prism::Node, operator_loc: Prism::Location, location: Prism::Location).void }
  def initialize(variable, operator_loc, location); end

  # source://prism//lib/prism/node.rb#13565
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13570
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13580
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13575
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13585
  sig { params(params: T.untyped).returns(Prism::PinnedVariableNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#13570
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13597
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13607
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13602
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#13555
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#13629
  def type; end

  # source://prism//lib/prism/node.rb#13552
  sig { returns(Prism::Node) }
  def variable; end

  class << self
    # source://prism//lib/prism/node.rb#13639
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13648
class Prism::PostExecutionNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13662
  sig do
    params(
      statements: T.nilable(Prism::StatementsNode),
      keyword_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(statements, keyword_loc, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#13671
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13676
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13722
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#13659
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#13688
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13681
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13693
  sig { params(params: T.untyped).returns(Prism::PostExecutionNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#13676
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13707
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13727
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13712
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#13653
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#13717
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#13656
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#13650
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#13755
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13765
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13774
class Prism::PreExecutionNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13788
  sig do
    params(
      statements: T.nilable(Prism::StatementsNode),
      keyword_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(statements, keyword_loc, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#13797
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13802
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13848
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#13785
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#13814
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13807
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13819
  sig { params(params: T.untyped).returns(Prism::PreExecutionNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#13802
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13833
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13853
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13838
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#13779
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#13843
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#13782
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#13776
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#13881
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13891
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13897
class Prism::ProgramNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13905
  sig { params(locals: T::Array[Symbol], statements: Prism::StatementsNode, location: Prism::Location).void }
  def initialize(locals, statements, location); end

  # source://prism//lib/prism/node.rb#13912
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13917
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13927
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13922
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13932
  sig { params(params: T.untyped).returns(Prism::ProgramNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#13917
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13944
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13949
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13899
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#13902
  sig { returns(Prism::StatementsNode) }
  def statements; end

  # source://prism//lib/prism/node.rb#13971
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13981
    def type; end
  end
end

# source://prism//lib/prism/node.rb#17337
# Flags for range and flip-flop nodes.
module Prism::RangeFlags; end

# source://prism//lib/prism/node.rb#17339
Prism::RangeFlags::EXCLUDE_END = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#13993
class Prism::RangeNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14007
  sig do
    params(
      flags: Integer,
      left: T.nilable(Prism::Node),
      right: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(flags, left, right, operator_loc, location); end

  # source://prism//lib/prism/node.rb#14016
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14021
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14034
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14026
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14039
  sig { params(params: T.untyped).returns(Prism::RangeNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14021
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14053
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14058
  sig { returns(T::Boolean) }
  def exclude_end?; end

  # source://prism//lib/prism/node.rb#14068
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13998
  sig { returns(T.nilable(Prism::Node)) }
  def left; end

  # source://prism//lib/prism/node.rb#14063
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#14004
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#14001
  sig { returns(T.nilable(Prism::Node)) }
  def right; end

  # source://prism//lib/prism/node.rb#14102
  def type; end

  private

  # source://prism//lib/prism/node.rb#13995
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#14112
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14121
class Prism::RationalNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14126
  sig { params(numeric: Prism::Node, location: Prism::Location).void }
  def initialize(numeric, location); end

  # source://prism//lib/prism/node.rb#14132
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14137
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14147
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14142
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14152
  sig { params(params: T.untyped).returns(Prism::RationalNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14137
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14163
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14168
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14123
  sig { returns(Prism::Node) }
  def numeric; end

  # source://prism//lib/prism/node.rb#14189
  def type; end

  # source://prism//lib/prism/node_ext.rb#83
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#14199
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14208
class Prism::RedoNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14210
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/node.rb#14215
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14220
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14230
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14225
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14235
  sig { params(params: T.untyped).returns(Prism::RedoNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14220
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14245
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14250
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14269
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14279
    def type; end
  end
end

# source://prism//lib/prism/node.rb#17343
# Flags for regular expression and match last line nodes.
module Prism::RegularExpressionFlags; end

# source://prism//lib/prism/node.rb#17360
Prism::RegularExpressionFlags::ASCII_8BIT = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#17357
Prism::RegularExpressionFlags::EUC_JP = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#17348
Prism::RegularExpressionFlags::EXTENDED = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#17372
Prism::RegularExpressionFlags::FORCED_BINARY_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#17375
Prism::RegularExpressionFlags::FORCED_US_ASCII_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#17369
Prism::RegularExpressionFlags::FORCED_UTF8_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#17345
Prism::RegularExpressionFlags::IGNORE_CASE = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#17351
Prism::RegularExpressionFlags::MULTI_LINE = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#17354
Prism::RegularExpressionFlags::ONCE = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#17366
Prism::RegularExpressionFlags::UTF_8 = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#17363
Prism::RegularExpressionFlags::WINDOWS_31J = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#14288
class Prism::RegularExpressionNode < ::Prism::Node
  include ::Prism::RegularExpressionOptions

  # source://prism//lib/prism/node.rb#14305
  sig do
    params(
      flags: Integer,
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String,
      location: Prism::Location
    ).void
  end
  def initialize(flags, opening_loc, content_loc, closing_loc, unescaped, location); end

  # source://prism//lib/prism/node.rb#14315
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14380
  sig { returns(T::Boolean) }
  def ascii_8bit?; end

  # source://prism//lib/prism/node.rb#14320
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14420
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#14299
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#14330
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14325
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14415
  sig { returns(String) }
  def content; end

  # source://prism//lib/prism/node.rb#14296
  sig { returns(Prism::Location) }
  def content_loc; end

  # source://prism//lib/prism/node.rb#14335
  sig { params(params: T.untyped).returns(Prism::RegularExpressionNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14320
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14350
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14375
  sig { returns(T::Boolean) }
  def euc_jp?; end

  # source://prism//lib/prism/node.rb#14360
  sig { returns(T::Boolean) }
  def extended?; end

  # source://prism//lib/prism/node.rb#14400
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#14405
  sig { returns(T::Boolean) }
  def forced_us_ascii_encoding?; end

  # source://prism//lib/prism/node.rb#14395
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#14355
  sig { returns(T::Boolean) }
  def ignore_case?; end

  # source://prism//lib/prism/node.rb#14425
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14365
  sig { returns(T::Boolean) }
  def multi_line?; end

  # source://prism//lib/prism/node.rb#14370
  sig { returns(T::Boolean) }
  def once?; end

  # source://prism//lib/prism/node.rb#14410
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#14293
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#14450
  def type; end

  # source://prism//lib/prism/node.rb#14302
  sig { returns(String) }
  def unescaped; end

  # source://prism//lib/prism/node.rb#14390
  sig { returns(T::Boolean) }
  def utf_8?; end

  # source://prism//lib/prism/node.rb#14385
  sig { returns(T::Boolean) }
  def windows_31j?; end

  private

  # source://prism//lib/prism/node.rb#14290
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#14460
    def type; end
  end
end

# source://prism//lib/prism/node_ext.rb#6
module Prism::RegularExpressionOptions
  # source://prism//lib/prism/node_ext.rb#9
  def options; end
end

# source://prism//lib/prism/node.rb#14470
class Prism::RequiredKeywordParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14478
  sig { params(name: Symbol, name_loc: Prism::Location, location: Prism::Location).void }
  def initialize(name, name_loc, location); end

  # source://prism//lib/prism/node.rb#14485
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14490
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14500
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14495
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14505
  sig { params(params: T.untyped).returns(Prism::RequiredKeywordParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14490
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14517
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14522
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14472
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#14475
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#14543
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14553
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14563
class Prism::RequiredParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14568
  sig { params(name: Symbol, location: Prism::Location).void }
  def initialize(name, location); end

  # source://prism//lib/prism/node.rb#14574
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14579
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14589
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14584
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14594
  sig { params(params: T.untyped).returns(Prism::RequiredParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14579
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14605
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14610
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14565
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#14630
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14640
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14649
class Prism::RescueModifierNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14660
  sig do
    params(
      expression: Prism::Node,
      keyword_loc: Prism::Location,
      rescue_expression: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(expression, keyword_loc, rescue_expression, location); end

  # source://prism//lib/prism/node.rb#14668
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14677
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14687
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14682
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14692
  sig { params(params: T.untyped).returns(Prism::RescueModifierNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14677
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14705
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14651
  sig { returns(Prism::Node) }
  def expression; end

  # source://prism//lib/prism/node.rb#14715
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14710
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#14654
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#14657
  sig { returns(Prism::Node) }
  def rescue_expression; end

  # source://prism//lib/prism/node.rb#14672
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#14739
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14749
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14764
class Prism::RescueNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14784
  sig do
    params(
      keyword_loc: Prism::Location,
      exceptions: T::Array[Prism::Node],
      operator_loc: T.nilable(Prism::Location),
      reference: T.nilable(Prism::Node),
      statements: T.nilable(Prism::StatementsNode),
      consequent: T.nilable(Prism::RescueNode),
      location: Prism::Location
    ).void
  end
  def initialize(keyword_loc, exceptions, operator_loc, reference, statements, consequent, location); end

  # source://prism//lib/prism/node.rb#14795
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14800
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14815
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14805
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14781
  sig { returns(T.nilable(Prism::RescueNode)) }
  def consequent; end

  # source://prism//lib/prism/node.rb#14820
  sig { params(params: T.untyped).returns(Prism::RescueNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14800
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14836
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14769
  sig { returns(T::Array[Prism::Node]) }
  def exceptions; end

  # source://prism//lib/prism/node.rb#14851
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14841
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#14766
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#14846
  sig { returns(T.nilable(String)) }
  def operator; end

  # source://prism//lib/prism/node.rb#14772
  sig { returns(T.nilable(Prism::Location)) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#14775
  sig { returns(T.nilable(Prism::Node)) }
  def reference; end

  # source://prism//lib/prism/node.rb#14778
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#14891
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14901
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14911
class Prism::RestParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14922
  sig do
    params(
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, location); end

  # source://prism//lib/prism/node.rb#14930
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14935
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14945
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14940
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14950
  sig { params(params: T.untyped).returns(Prism::RestParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14935
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14963
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14973
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14913
  sig { returns(T.nilable(Symbol)) }
  def name; end

  # source://prism//lib/prism/node.rb#14916
  sig { returns(T.nilable(Prism::Location)) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#14968
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#14919
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#14999
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15009
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15018
class Prism::RetryNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15020
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/node.rb#15025
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15030
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15040
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15035
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15045
  sig { params(params: T.untyped).returns(Prism::RetryNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15030
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15055
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15060
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15079
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15089
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15098
class Prism::ReturnNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15106
  sig do
    params(
      keyword_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      location: Prism::Location
    ).void
  end
  def initialize(keyword_loc, arguments, location); end

  # source://prism//lib/prism/node.rb#15113
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15103
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#15118
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15130
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15123
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15135
  sig { params(params: T.untyped).returns(Prism::ReturnNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15118
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15147
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15157
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15152
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#15100
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#15183
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15193
    def type; end
  end
end

# source://prism//lib/prism/ripper_compat.rb#20
class Prism::RipperCompat < ::Prism::Visitor
  # source://prism//lib/prism/ripper_compat.rb#74
  def initialize(source); end

  # source://prism//lib/prism/ripper_compat.rb#71
  def column; end

  # source://prism//lib/prism/ripper_compat.rb#86
  def error?; end

  # source://prism//lib/prism/ripper_compat.rb#68
  def lineno; end

  # source://prism//lib/prism/ripper_compat.rb#91
  def parse; end

  # source://prism//lib/prism/ripper_compat.rb#65
  def source; end

  # source://prism//lib/prism/ripper_compat.rb#110
  def visit_call_node(node); end

  # source://prism//lib/prism/ripper_compat.rb#123
  def visit_float_node(node); end

  # source://prism//lib/prism/ripper_compat.rb#129
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/ripper_compat.rb#135
  def visit_integer_node(node); end

  # source://prism//lib/prism/ripper_compat.rb#155
  def visit_program_node(node); end

  # source://prism//lib/prism/ripper_compat.rb#141
  def visit_rational_node(node); end

  # source://prism//lib/prism/ripper_compat.rb#147
  def visit_statements_node(node); end

  private

  # source://prism//lib/prism/ripper_compat.rb#192
  def _dispatch0; end

  # source://prism//lib/prism/ripper_compat.rb#193
  def _dispatch1(_); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def _dispatch2(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#195
  def _dispatch3(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#196
  def _dispatch4(_, _, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#197
  def _dispatch5(_, _, _, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#198
  def _dispatch7(_, _, _, _, _, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def bounds(location); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_BEGIN(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_CHAR(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_END(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on___end__(_); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_alias(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_alias_error(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_aref(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_aref_field(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_arg_ambiguous(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_arg_paren(_); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_args_add(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_args_add_block(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_args_add_star(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#192
  def on_args_forward; end

  # source://prism//lib/prism/ripper_compat.rb#192
  def on_args_new; end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_array(_); end

  # source://prism//lib/prism/ripper_compat.rb#196
  def on_aryptn(_, _, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_assign(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_assign_error(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_assoc_new(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_assoc_splat(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_assoclist_from_args(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_backref(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_backtick(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_bare_assoc_hash(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_begin(_); end

  # source://prism//lib/prism/ripper_compat.rb#195
  def on_binary(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_block_var(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_blockarg(_); end

  # source://prism//lib/prism/ripper_compat.rb#196
  def on_bodystmt(_, _, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_brace_block(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_break(_); end

  # source://prism//lib/prism/ripper_compat.rb#195
  def on_call(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_case(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#195
  def on_class(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_class_name_error(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_comma(_); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_command(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#196
  def on_command_call(_, _, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_comment(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_const(_); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_const_path_field(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_const_path_ref(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_const_ref(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_cvar(_); end

  # source://prism//lib/prism/ripper_compat.rb#195
  def on_def(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_defined(_); end

  # source://prism//lib/prism/ripper_compat.rb#197
  def on_defs(_, _, _, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_do_block(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_dot2(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_dot3(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_dyna_symbol(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_else(_); end

  # source://prism//lib/prism/ripper_compat.rb#195
  def on_elsif(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_embdoc(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_embdoc_beg(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_embdoc_end(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_embexpr_beg(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_embexpr_end(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_embvar(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_ensure(_); end

  # source://prism//lib/prism/ripper_compat.rb#192
  def on_excessed_comma; end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_fcall(_); end

  # source://prism//lib/prism/ripper_compat.rb#195
  def on_field(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_float(_); end

  # source://prism//lib/prism/ripper_compat.rb#196
  def on_fndptn(_, _, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#195
  def on_for(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_gvar(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_hash(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_heredoc_beg(_); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_heredoc_dedent(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_heredoc_end(_); end

  # source://prism//lib/prism/ripper_compat.rb#195
  def on_hshptn(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_ident(_); end

  # source://prism//lib/prism/ripper_compat.rb#195
  def on_if(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_if_mod(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#195
  def on_ifop(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_ignored_nl(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_ignored_sp(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_imaginary(_); end

  # source://prism//lib/prism/ripper_compat.rb#195
  def on_in(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_int(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_ivar(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_kw(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_kwrest_param(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_label(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_label_end(_); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_lambda(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_lbrace(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_lbracket(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_lparen(_); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_magic_comment(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_massign(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_method_add_arg(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_method_add_block(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_mlhs_add(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_mlhs_add_post(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_mlhs_add_star(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#192
  def on_mlhs_new; end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_mlhs_paren(_); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_module(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_mrhs_add(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_mrhs_add_star(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#192
  def on_mrhs_new; end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_mrhs_new_from_args(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_next(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_nl(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_nokw_param(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_op(_); end

  # source://prism//lib/prism/ripper_compat.rb#195
  def on_opassign(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_operator_ambiguous(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_param_error(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#198
  def on_params(_, _, _, _, _, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_paren(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_parse_error(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_period(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_program(_); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_qsymbols_add(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_qsymbols_beg(_); end

  # source://prism//lib/prism/ripper_compat.rb#192
  def on_qsymbols_new; end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_qwords_add(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_qwords_beg(_); end

  # source://prism//lib/prism/ripper_compat.rb#192
  def on_qwords_new; end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_rational(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_rbrace(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_rbracket(_); end

  # source://prism//lib/prism/ripper_compat.rb#192
  def on_redo; end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_regexp_add(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_regexp_beg(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_regexp_end(_); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_regexp_literal(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#192
  def on_regexp_new; end

  # source://prism//lib/prism/ripper_compat.rb#196
  def on_rescue(_, _, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_rescue_mod(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_rest_param(_); end

  # source://prism//lib/prism/ripper_compat.rb#192
  def on_retry; end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_return(_); end

  # source://prism//lib/prism/ripper_compat.rb#192
  def on_return0; end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_rparen(_); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_sclass(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_semicolon(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_sp(_); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_stmts_add(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#192
  def on_stmts_new; end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_string_add(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_string_concat(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#192
  def on_string_content; end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_string_dvar(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_string_embexpr(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_string_literal(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_super(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_symbeg(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_symbol(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_symbol_literal(_); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_symbols_add(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_symbols_beg(_); end

  # source://prism//lib/prism/ripper_compat.rb#192
  def on_symbols_new; end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_tlambda(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_tlambeg(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_top_const_field(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_top_const_ref(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_tstring_beg(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_tstring_content(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_tstring_end(_); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_unary(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_undef(_); end

  # source://prism//lib/prism/ripper_compat.rb#195
  def on_unless(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_unless_mod(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_until(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_until_mod(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_var_alias(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_var_field(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_var_ref(_); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_vcall(_); end

  # source://prism//lib/prism/ripper_compat.rb#192
  def on_void_stmt; end

  # source://prism//lib/prism/ripper_compat.rb#195
  def on_when(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_while(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_while_mod(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_word_add(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#192
  def on_word_new; end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_words_add(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_words_beg(_); end

  # source://prism//lib/prism/ripper_compat.rb#192
  def on_words_new; end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_words_sep(_); end

  # source://prism//lib/prism/ripper_compat.rb#194
  def on_xstring_add(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_xstring_literal(_); end

  # source://prism//lib/prism/ripper_compat.rb#192
  def on_xstring_new; end

  # source://prism//lib/prism/ripper_compat.rb#193
  def on_yield(_); end

  # source://prism//lib/prism/ripper_compat.rb#192
  def on_yield0; end

  # source://prism//lib/prism/ripper_compat.rb#192
  def on_zsuper; end

  # source://prism//lib/prism/ripper_compat.rb#188
  def result; end

  class << self
    # source://prism//lib/prism/ripper_compat.rb#171
    def sexp(source); end

    # source://prism//lib/prism/ripper_compat.rb#166
    def sexp_raw(source); end
  end
end

# source://prism//lib/prism/ripper_compat.rb#23
class Prism::RipperCompat::SexpBuilder < ::Prism::RipperCompat
  private

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_BEGIN(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_CHAR(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_END(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on___end__(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_alias(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_alias_error(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_aref(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_aref_field(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_arg_ambiguous(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_arg_paren(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_args_add(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_args_add_block(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_args_add_star(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_args_forward(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_args_new(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_array(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_aryptn(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_assign(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_assign_error(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_assoc_new(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_assoc_splat(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_assoclist_from_args(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_backref(value); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_backtick(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_bare_assoc_hash(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_begin(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_binary(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_block_var(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_blockarg(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_bodystmt(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_brace_block(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_break(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_call(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_case(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_class(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_class_name_error(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_comma(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_command(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_command_call(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_comment(value); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_const(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_const_path_field(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_const_path_ref(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_const_ref(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_cvar(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_def(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_defined(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_defs(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_do_block(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_dot2(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_dot3(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_dyna_symbol(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_else(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_elsif(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_embdoc(value); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_embdoc_beg(value); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_embdoc_end(value); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_embexpr_beg(value); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_embexpr_end(value); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_embvar(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_ensure(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_excessed_comma(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_fcall(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_field(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_float(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_fndptn(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_for(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_gvar(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_hash(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_heredoc_beg(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_heredoc_dedent(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_heredoc_end(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_hshptn(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_ident(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_if(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_if_mod(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_ifop(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_ignored_nl(value); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_ignored_sp(value); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_imaginary(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_in(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_int(value); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_ivar(value); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_kw(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_kwrest_param(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_label(value); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_label_end(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_lambda(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_lbrace(value); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_lbracket(value); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_lparen(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_magic_comment(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_massign(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_method_add_arg(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_method_add_block(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_mlhs_add(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_mlhs_add_post(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_mlhs_add_star(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_mlhs_new(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_mlhs_paren(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_module(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_mrhs_add(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_mrhs_add_star(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_mrhs_new(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_mrhs_new_from_args(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_next(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_nl(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_nokw_param(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_op(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_opassign(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_operator_ambiguous(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_param_error(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_params(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_paren(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_parse_error(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_period(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_program(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_qsymbols_add(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_qsymbols_beg(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_qsymbols_new(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_qwords_add(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_qwords_beg(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_qwords_new(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_rational(value); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_rbrace(value); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_rbracket(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_redo(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_regexp_add(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_regexp_beg(value); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_regexp_end(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_regexp_literal(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_regexp_new(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_rescue(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_rescue_mod(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_rest_param(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_retry(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_return(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_return0(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_rparen(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_sclass(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_semicolon(value); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_sp(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_stmts_add(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_stmts_new(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_string_add(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_string_concat(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_string_content(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_string_dvar(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_string_embexpr(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_string_literal(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_super(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_symbeg(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_symbol(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_symbol_literal(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_symbols_add(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_symbols_beg(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_symbols_new(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_tlambda(value); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_tlambeg(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_top_const_field(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_top_const_ref(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_tstring_beg(value); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_tstring_content(value); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_tstring_end(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_unary(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_undef(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_unless(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_unless_mod(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_until(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_until_mod(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_var_alias(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_var_field(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_var_ref(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_vcall(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_void_stmt(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_when(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_while(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_while_mod(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_word_add(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_word_new(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_words_add(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_words_beg(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_words_new(*args); end

  # source://prism//lib/prism/ripper_compat.rb#33
  def on_words_sep(value); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_xstring_add(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_xstring_literal(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_xstring_new(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_yield(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_yield0(*args); end

  # source://prism//lib/prism/ripper_compat.rb#27
  def on_zsuper(*args); end
end

# source://prism//lib/prism/ripper_compat.rb#42
class Prism::RipperCompat::SexpBuilderPP < ::Prism::RipperCompat::SexpBuilder
  private

  # source://prism//lib/prism/ripper_compat.rb#45
  def _dispatch_event_new; end

  # source://prism//lib/prism/ripper_compat.rb#49
  def _dispatch_event_push(list, item); end

  # source://prism//lib/prism/ripper_compat.rb#49
  def on_args_add(list, item); end

  # source://prism//lib/prism/ripper_compat.rb#45
  def on_args_new; end

  # source://prism//lib/prism/ripper_compat.rb#49
  def on_mlhs_add(list, item); end

  # source://prism//lib/prism/ripper_compat.rb#45
  def on_mlhs_new; end

  # source://prism//lib/prism/ripper_compat.rb#49
  def on_mrhs_add(list, item); end

  # source://prism//lib/prism/ripper_compat.rb#45
  def on_mrhs_new; end

  # source://prism//lib/prism/ripper_compat.rb#49
  def on_qsymbols_add(list, item); end

  # source://prism//lib/prism/ripper_compat.rb#45
  def on_qsymbols_new; end

  # source://prism//lib/prism/ripper_compat.rb#49
  def on_qwords_add(list, item); end

  # source://prism//lib/prism/ripper_compat.rb#45
  def on_qwords_new; end

  # source://prism//lib/prism/ripper_compat.rb#49
  def on_regexp_add(list, item); end

  # source://prism//lib/prism/ripper_compat.rb#45
  def on_regexp_new; end

  # source://prism//lib/prism/ripper_compat.rb#49
  def on_stmts_add(list, item); end

  # source://prism//lib/prism/ripper_compat.rb#45
  def on_stmts_new; end

  # source://prism//lib/prism/ripper_compat.rb#49
  def on_string_add(list, item); end

  # source://prism//lib/prism/ripper_compat.rb#49
  def on_symbols_add(list, item); end

  # source://prism//lib/prism/ripper_compat.rb#45
  def on_symbols_new; end

  # source://prism//lib/prism/ripper_compat.rb#49
  def on_word_add(list, item); end

  # source://prism//lib/prism/ripper_compat.rb#45
  def on_word_new; end

  # source://prism//lib/prism/ripper_compat.rb#49
  def on_words_add(list, item); end

  # source://prism//lib/prism/ripper_compat.rb#45
  def on_words_new; end

  # source://prism//lib/prism/ripper_compat.rb#49
  def on_xstring_add(list, item); end

  # source://prism//lib/prism/ripper_compat.rb#45
  def on_xstring_new; end
end

# source://prism//lib/prism/node.rb#15202
class Prism::SelfNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15204
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/node.rb#15209
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15214
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15224
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15219
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15229
  sig { params(params: T.untyped).returns(Prism::SelfNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15214
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15239
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15244
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15263
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15273
    def type; end
  end
end

# source://prism//lib/prism/serialize.rb#23
module Prism::Serialize
  class << self
    # source://prism//lib/prism/serialize.rb#37
    def load(input, serialized); end

    # source://prism//lib/prism/serialize.rb#49
    def load_tokens(source, serialized); end
  end
end

# source://prism//lib/prism/serialize.rb#53
class Prism::Serialize::Loader
  # source://prism//lib/prism/serialize.rb#58
  def initialize(source, serialized); end

  # source://prism//lib/prism/serialize.rb#55
  def constant_pool; end

  # source://prism//lib/prism/serialize.rb#55
  def constant_pool_offset; end

  # source://prism//lib/prism/serialize.rb#54
  def encoding; end

  # source://prism//lib/prism/serialize.rb#54
  def input; end

  # source://prism//lib/prism/serialize.rb#54
  def io; end

  # source://prism//lib/prism/serialize.rb#92
  def load_comments; end

  # source://prism//lib/prism/serialize.rb#82
  def load_encoding; end

  # source://prism//lib/prism/serialize.rb#73
  def load_header; end

  # source://prism//lib/prism/serialize.rb#102
  def load_metadata; end

  # source://prism//lib/prism/serialize.rb#135
  def load_nodes; end

  # source://prism//lib/prism/serialize.rb#148
  def load_result; end

  # source://prism//lib/prism/serialize.rb#88
  def load_start_line; end

  # source://prism//lib/prism/serialize.rb#111
  def load_tokens; end

  # source://prism//lib/prism/serialize.rb#124
  def load_tokens_result; end

  # source://prism//lib/prism/serialize.rb#54
  def serialized; end

  # source://prism//lib/prism/serialize.rb#55
  def source; end

  # source://prism//lib/prism/serialize.rb#56
  def start_line; end

  private

  # source://prism//lib/prism/serialize.rb#211
  def load_constant(index); end

  # source://prism//lib/prism/serialize.rb#187
  def load_embedded_string; end

  # source://prism//lib/prism/serialize.rb#203
  def load_location; end

  # source://prism//lib/prism/serialize.rb#242
  def load_node; end

  # source://prism//lib/prism/serialize.rb#236
  def load_optional_constant; end

  # source://prism//lib/prism/serialize.rb#207
  def load_optional_location; end

  # source://prism//lib/prism/serialize.rb#180
  def load_optional_node; end

  # source://prism//lib/prism/serialize.rb#232
  def load_required_constant; end

  # source://prism//lib/prism/serialize.rb#176
  def load_serialized_length; end

  # source://prism//lib/prism/serialize.rb#191
  def load_string; end

  # source://prism//lib/prism/serialize.rb#171
  def load_varsint; end

  # source://prism//lib/prism/serialize.rb#157
  def load_varuint; end
end

# source://prism//lib/prism/serialize.rb#26
Prism::Serialize::MAJOR_VERSION = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/serialize.rb#30
Prism::Serialize::MINOR_VERSION = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/serialize.rb#34
Prism::Serialize::PATCH_VERSION = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/serialize.rb#1154
Prism::Serialize::TOKEN_TYPES = T.let(T.unsafe(nil), Array)

# source://prism//lib/prism/node.rb#15282
class Prism::SingletonClassNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15302
  sig do
    params(
      locals: T::Array[Symbol],
      class_keyword_loc: Prism::Location,
      operator_loc: Prism::Location,
      expression: Prism::Node,
      body: T.nilable(Prism::Node),
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(locals, class_keyword_loc, operator_loc, expression, body, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#15313
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15296
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#15318
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15357
  sig { returns(String) }
  def class_keyword; end

  # source://prism//lib/prism/node.rb#15287
  sig { returns(Prism::Location) }
  def class_keyword_loc; end

  # source://prism//lib/prism/node.rb#15331
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15323
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15336
  sig { params(params: T.untyped).returns(Prism::SingletonClassNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15318
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15352
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15367
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#15299
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#15293
  sig { returns(Prism::Node) }
  def expression; end

  # source://prism//lib/prism/node.rb#15372
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15284
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#15362
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#15290
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#15403
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15413
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#7
class Prism::Source
  # source://prism//lib/prism/parse_result.rb#20
  def initialize(source, start_line = T.unsafe(nil), offsets = T.unsafe(nil)); end

  # source://prism//lib/prism/parse_result.rb#55
  def character_column(byte_offset); end

  # source://prism//lib/prism/parse_result.rb#50
  def character_offset(byte_offset); end

  # source://prism//lib/prism/parse_result.rb#45
  def column(byte_offset); end

  # source://prism//lib/prism/parse_result.rb#34
  def line(byte_offset); end

  sig { params(value: Integer).returns(Integer) }
  def line_offset(value); end

  # source://prism//lib/prism/parse_result.rb#40
  def line_start(byte_offset); end

  # source://prism//lib/prism/parse_result.rb#15
  sig { returns(T::Array[Integer]) }
  def offsets; end

  # source://prism//lib/prism/parse_result.rb#28
  def slice(byte_offset, length); end

  # source://prism//lib/prism/parse_result.rb#9
  sig { returns(String) }
  def source; end

  # source://prism//lib/prism/parse_result.rb#12
  def start_line; end

  # source://prism//lib/prism/parse_result.rb#12
  def start_line=(_arg0); end

  private

  # source://prism//lib/prism/parse_result.rb#83
  def compute_offsets(code); end

  # source://prism//lib/prism/parse_result.rb#63
  def find_line(byte_offset); end
end

# source://prism//lib/prism/node.rb#15422
class Prism::SourceEncodingNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15424
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/node.rb#15429
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15434
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15444
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15439
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15449
  sig { params(params: T.untyped).returns(Prism::SourceEncodingNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15434
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15459
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15464
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15483
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15493
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15502
class Prism::SourceFileNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15507
  sig { params(filepath: String, location: Prism::Location).void }
  def initialize(filepath, location); end

  # source://prism//lib/prism/node.rb#15513
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15518
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15528
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15523
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15533
  sig { params(params: T.untyped).returns(Prism::SourceFileNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15518
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15544
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15504
  sig { returns(String) }
  def filepath; end

  # source://prism//lib/prism/node.rb#15549
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15569
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15579
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15588
class Prism::SourceLineNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15590
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/node.rb#15595
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15600
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15610
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15605
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15615
  sig { params(params: T.untyped).returns(Prism::SourceLineNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15600
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15625
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15630
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15649
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15659
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15668
class Prism::SplatNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15676
  sig { params(operator_loc: Prism::Location, expression: T.nilable(Prism::Node), location: Prism::Location).void }
  def initialize(operator_loc, expression, location); end

  # source://prism//lib/prism/node.rb#15683
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15688
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15700
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15693
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15705
  sig { params(params: T.untyped).returns(Prism::SplatNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15688
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15717
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15673
  sig { returns(T.nilable(Prism::Node)) }
  def expression; end

  # source://prism//lib/prism/node.rb#15727
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15722
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#15670
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#15753
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15763
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15772
class Prism::StatementsNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15777
  sig { params(body: T::Array[Prism::Node], location: Prism::Location).void }
  def initialize(body, location); end

  # source://prism//lib/prism/node.rb#15783
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15774
  sig { returns(T::Array[Prism::Node]) }
  def body; end

  # source://prism//lib/prism/node.rb#15788
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15798
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15793
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15803
  sig { params(params: T.untyped).returns(Prism::StatementsNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15788
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15814
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15819
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15839
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15849
    def type; end
  end
end

# source://prism//lib/prism/node.rb#17379
# Flags for string nodes.
module Prism::StringFlags; end

# source://prism//lib/prism/node.rb#17384
Prism::StringFlags::FORCED_BINARY_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#17381
Prism::StringFlags::FORCED_UTF8_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#17387
Prism::StringFlags::FROZEN = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#15865
class Prism::StringNode < ::Prism::Node
  include ::Prism::HeredocQuery

  # source://prism//lib/prism/node.rb#15882
  sig do
    params(
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      content_loc: Prism::Location,
      closing_loc: T.nilable(Prism::Location),
      unescaped: String,
      location: Prism::Location
    ).void
  end
  def initialize(flags, opening_loc, content_loc, closing_loc, unescaped, location); end

  # source://prism//lib/prism/node.rb#15892
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15897
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15957
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#15876
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#15907
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15902
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15952
  sig { returns(String) }
  def content; end

  # source://prism//lib/prism/node.rb#15873
  sig { returns(Prism::Location) }
  def content_loc; end

  # source://prism//lib/prism/node.rb#15912
  sig { params(params: T.untyped).returns(Prism::StringNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15897
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15927
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15937
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#15932
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#15942
  sig { returns(T::Boolean) }
  def frozen?; end

  # source://prism//lib/prism/node.rb#15962
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15947
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#15870
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#15987
  def type; end

  # source://prism//lib/prism/node.rb#15879
  sig { returns(String) }
  def unescaped; end

  private

  # source://prism//lib/prism/node.rb#15867
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#15997
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16009
class Prism::SuperNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16026
  sig do
    params(
      keyword_loc: Prism::Location,
      lparen_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      rparen_loc: T.nilable(Prism::Location),
      block: T.nilable(Prism::Node),
      location: Prism::Location
    ).void
  end
  def initialize(keyword_loc, lparen_loc, arguments, rparen_loc, block, location); end

  # source://prism//lib/prism/node.rb#16036
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16017
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#16023
  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  # source://prism//lib/prism/node.rb#16041
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16054
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16046
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16059
  sig { params(params: T.untyped).returns(Prism::SuperNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#16041
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16074
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16094
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16079
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#16011
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#16084
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#16014
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#16089
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#16020
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#16128
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#16138
    def type; end
  end
end

# source://prism//lib/prism/node.rb#17391
# Flags for symbol nodes.
module Prism::SymbolFlags; end

# source://prism//lib/prism/node.rb#17396
Prism::SymbolFlags::FORCED_BINARY_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#17399
Prism::SymbolFlags::FORCED_US_ASCII_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#17393
Prism::SymbolFlags::FORCED_UTF8_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#16150
class Prism::SymbolNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16167
  sig do
    params(
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      value_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      unescaped: String,
      location: Prism::Location
    ).void
  end
  def initialize(flags, opening_loc, value_loc, closing_loc, unescaped, location); end

  # source://prism//lib/prism/node.rb#16177
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16182
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16242
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#16161
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#16192
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16187
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16197
  sig { params(params: T.untyped).returns(Prism::SymbolNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#16182
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16212
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16222
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#16227
  sig { returns(T::Boolean) }
  def forced_us_ascii_encoding?; end

  # source://prism//lib/prism/node.rb#16217
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#16247
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16232
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#16155
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#16272
  def type; end

  # source://prism//lib/prism/node.rb#16164
  sig { returns(String) }
  def unescaped; end

  # source://prism//lib/prism/node.rb#16237
  sig { returns(T.nilable(String)) }
  def value; end

  # source://prism//lib/prism/node.rb#16158
  sig { returns(T.nilable(Prism::Location)) }
  def value_loc; end

  private

  # source://prism//lib/prism/node.rb#16152
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#16282
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#416
class Prism::Token
  # source://prism//lib/prism/parse_result.rb#427
  sig { params(type: T.untyped, value: String, location: Prism::Location).void }
  def initialize(type, value, location); end

  # source://prism//lib/prism/parse_result.rb#454
  sig { params(other: T.untyped).returns(T::Boolean) }
  def ==(other); end

  # source://prism//lib/prism/parse_result.rb#434
  sig { params(keys: T.untyped).returns(T.untyped) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#424
  sig { returns(Prism::Location) }
  def location; end

  # source://prism//lib/prism/parse_result.rb#439
  sig { params(q: T.untyped).returns(T.untyped) }
  def pretty_print(q); end

  # source://prism//lib/prism/parse_result.rb#418
  sig { returns(T.untyped) }
  def type; end

  # source://prism//lib/prism/parse_result.rb#421
  sig { returns(String) }
  def value; end
end

# source://prism//lib/prism/node.rb#16291
class Prism::TrueNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16293
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/node.rb#16298
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16303
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16313
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16308
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16318
  sig { params(params: T.untyped).returns(Prism::TrueNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#16303
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16328
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16333
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16352
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#16362
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16371
class Prism::UndefNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16379
  sig { params(names: T::Array[Prism::Node], keyword_loc: Prism::Location, location: Prism::Location).void }
  def initialize(names, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#16386
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16391
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16401
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16396
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16406
  sig { params(params: T.untyped).returns(Prism::UndefNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#16391
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16418
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16428
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16423
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#16376
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#16373
  sig { returns(T::Array[Prism::Node]) }
  def names; end

  # source://prism//lib/prism/node.rb#16449
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#16459
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16471
class Prism::UnlessNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16491
  sig do
    params(
      keyword_loc: Prism::Location,
      predicate: Prism::Node,
      then_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      consequent: T.nilable(Prism::ElseNode),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(keyword_loc, predicate, then_keyword_loc, statements, consequent, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#16502
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16511
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16525
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16516
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16485
  sig { returns(T.nilable(Prism::ElseNode)) }
  def consequent; end

  # source://prism//lib/prism/node.rb#16530
  sig { params(params: T.untyped).returns(Prism::UnlessNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#16511
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16546
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16561
  sig { returns(T.nilable(String)) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#16488
  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#16566
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16551
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#16473
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#16476
  sig { returns(Prism::Node) }
  def predicate; end

  # source://prism//lib/prism/node.rb#16506
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#16482
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#16556
  sig { returns(T.nilable(String)) }
  def then_keyword; end

  # source://prism//lib/prism/node.rb#16479
  sig { returns(T.nilable(Prism::Location)) }
  def then_keyword_loc; end

  # source://prism//lib/prism/node.rb#16602
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#16612
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16624
class Prism::UntilNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16641
  sig do
    params(
      flags: Integer,
      keyword_loc: Prism::Location,
      closing_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      location: Prism::Location
    ).void
  end
  def initialize(flags, keyword_loc, closing_loc, predicate, statements, location); end

  # source://prism//lib/prism/node.rb#16651
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16698
  sig { returns(T::Boolean) }
  def begin_modifier?; end

  # source://prism//lib/prism/node.rb#16660
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16708
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#16632
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#16673
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16665
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16678
  sig { params(params: T.untyped).returns(Prism::UntilNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#16660
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16693
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16713
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16703
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#16629
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#16635
  sig { returns(Prism::Node) }
  def predicate; end

  # source://prism//lib/prism/node.rb#16655
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#16638
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#16744
  def type; end

  private

  # source://prism//lib/prism/node.rb#16626
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#16754
    def type; end
  end
end

Prism::VERSION = T.let(T.unsafe(nil), String)

# source://prism//lib/prism/visitor.rb#50
class Prism::Visitor < ::Prism::BasicVisitor
  # source://prism//lib/prism/visitor.rb#26
  # Visit a AliasGlobalVariableNode node
  sig { params(node: Prism::AliasGlobalVariableNode).void }
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a AliasMethodNode node
  sig { params(node: Prism::AliasMethodNode).void }
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a AlternationPatternNode node
  sig { params(node: Prism::AlternationPatternNode).void }
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a AndNode node
  sig { params(node: Prism::AndNode).void }
  def visit_and_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ArgumentsNode node
  sig { params(node: Prism::ArgumentsNode).void }
  def visit_arguments_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ArrayNode node
  sig { params(node: Prism::ArrayNode).void }
  def visit_array_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ArrayPatternNode node
  sig { params(node: Prism::ArrayPatternNode).void }
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a AssocNode node
  sig { params(node: Prism::AssocNode).void }
  def visit_assoc_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a AssocSplatNode node
  sig { params(node: Prism::AssocSplatNode).void }
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a BackReferenceReadNode node
  sig { params(node: Prism::BackReferenceReadNode).void }
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a BeginNode node
  sig { params(node: Prism::BeginNode).void }
  def visit_begin_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a BlockArgumentNode node
  sig { params(node: Prism::BlockArgumentNode).void }
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a BlockLocalVariableNode node
  sig { params(node: Prism::BlockLocalVariableNode).void }
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a BlockNode node
  sig { params(node: Prism::BlockNode).void }
  def visit_block_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a BlockParameterNode node
  sig { params(node: Prism::BlockParameterNode).void }
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a BlockParametersNode node
  sig { params(node: Prism::BlockParametersNode).void }
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a BreakNode node
  sig { params(node: Prism::BreakNode).void }
  def visit_break_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a CallAndWriteNode node
  sig { params(node: Prism::CallAndWriteNode).void }
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a CallNode node
  sig { params(node: Prism::CallNode).void }
  def visit_call_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a CallOperatorWriteNode node
  sig { params(node: Prism::CallOperatorWriteNode).void }
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a CallOrWriteNode node
  sig { params(node: Prism::CallOrWriteNode).void }
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a CallTargetNode node
  sig { params(node: Prism::CallTargetNode).void }
  def visit_call_target_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a CapturePatternNode node
  sig { params(node: Prism::CapturePatternNode).void }
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a CaseMatchNode node
  sig { params(node: Prism::CaseMatchNode).void }
  def visit_case_match_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a CaseNode node
  sig { params(node: Prism::CaseNode).void }
  def visit_case_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ClassNode node
  sig { params(node: Prism::ClassNode).void }
  def visit_class_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ClassVariableAndWriteNode node
  sig { params(node: Prism::ClassVariableAndWriteNode).void }
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ClassVariableOperatorWriteNode node
  sig { params(node: Prism::ClassVariableOperatorWriteNode).void }
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ClassVariableOrWriteNode node
  sig { params(node: Prism::ClassVariableOrWriteNode).void }
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ClassVariableReadNode node
  sig { params(node: Prism::ClassVariableReadNode).void }
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ClassVariableTargetNode node
  sig { params(node: Prism::ClassVariableTargetNode).void }
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ClassVariableWriteNode node
  sig { params(node: Prism::ClassVariableWriteNode).void }
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantAndWriteNode node
  sig { params(node: Prism::ConstantAndWriteNode).void }
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantOperatorWriteNode node
  sig { params(node: Prism::ConstantOperatorWriteNode).void }
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantOrWriteNode node
  sig { params(node: Prism::ConstantOrWriteNode).void }
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantPathAndWriteNode node
  sig { params(node: Prism::ConstantPathAndWriteNode).void }
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantPathNode node
  sig { params(node: Prism::ConstantPathNode).void }
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantPathOperatorWriteNode node
  sig { params(node: Prism::ConstantPathOperatorWriteNode).void }
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantPathOrWriteNode node
  sig { params(node: Prism::ConstantPathOrWriteNode).void }
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantPathTargetNode node
  sig { params(node: Prism::ConstantPathTargetNode).void }
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantPathWriteNode node
  sig { params(node: Prism::ConstantPathWriteNode).void }
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantReadNode node
  sig { params(node: Prism::ConstantReadNode).void }
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantTargetNode node
  sig { params(node: Prism::ConstantTargetNode).void }
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantWriteNode node
  sig { params(node: Prism::ConstantWriteNode).void }
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a DefNode node
  sig { params(node: Prism::DefNode).void }
  def visit_def_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a DefinedNode node
  sig { params(node: Prism::DefinedNode).void }
  def visit_defined_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ElseNode node
  sig { params(node: Prism::ElseNode).void }
  def visit_else_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a EmbeddedStatementsNode node
  sig { params(node: Prism::EmbeddedStatementsNode).void }
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a EmbeddedVariableNode node
  sig { params(node: Prism::EmbeddedVariableNode).void }
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a EnsureNode node
  sig { params(node: Prism::EnsureNode).void }
  def visit_ensure_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a FalseNode node
  sig { params(node: Prism::FalseNode).void }
  def visit_false_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a FindPatternNode node
  sig { params(node: Prism::FindPatternNode).void }
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a FlipFlopNode node
  sig { params(node: Prism::FlipFlopNode).void }
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a FloatNode node
  sig { params(node: Prism::FloatNode).void }
  def visit_float_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ForNode node
  sig { params(node: Prism::ForNode).void }
  def visit_for_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ForwardingArgumentsNode node
  sig { params(node: Prism::ForwardingArgumentsNode).void }
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ForwardingParameterNode node
  sig { params(node: Prism::ForwardingParameterNode).void }
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ForwardingSuperNode node
  sig { params(node: Prism::ForwardingSuperNode).void }
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a GlobalVariableAndWriteNode node
  sig { params(node: Prism::GlobalVariableAndWriteNode).void }
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a GlobalVariableOperatorWriteNode node
  sig { params(node: Prism::GlobalVariableOperatorWriteNode).void }
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a GlobalVariableOrWriteNode node
  sig { params(node: Prism::GlobalVariableOrWriteNode).void }
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a GlobalVariableReadNode node
  sig { params(node: Prism::GlobalVariableReadNode).void }
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a GlobalVariableTargetNode node
  sig { params(node: Prism::GlobalVariableTargetNode).void }
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a GlobalVariableWriteNode node
  sig { params(node: Prism::GlobalVariableWriteNode).void }
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a HashNode node
  sig { params(node: Prism::HashNode).void }
  def visit_hash_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a HashPatternNode node
  sig { params(node: Prism::HashPatternNode).void }
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a IfNode node
  sig { params(node: Prism::IfNode).void }
  def visit_if_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ImaginaryNode node
  sig { params(node: Prism::ImaginaryNode).void }
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ImplicitNode node
  sig { params(node: Prism::ImplicitNode).void }
  def visit_implicit_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ImplicitRestNode node
  sig { params(node: Prism::ImplicitRestNode).void }
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InNode node
  sig { params(node: Prism::InNode).void }
  def visit_in_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a IndexAndWriteNode node
  sig { params(node: Prism::IndexAndWriteNode).void }
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a IndexOperatorWriteNode node
  sig { params(node: Prism::IndexOperatorWriteNode).void }
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a IndexOrWriteNode node
  sig { params(node: Prism::IndexOrWriteNode).void }
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a IndexTargetNode node
  sig { params(node: Prism::IndexTargetNode).void }
  def visit_index_target_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InstanceVariableAndWriteNode node
  sig { params(node: Prism::InstanceVariableAndWriteNode).void }
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InstanceVariableOperatorWriteNode node
  sig { params(node: Prism::InstanceVariableOperatorWriteNode).void }
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InstanceVariableOrWriteNode node
  sig { params(node: Prism::InstanceVariableOrWriteNode).void }
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InstanceVariableReadNode node
  sig { params(node: Prism::InstanceVariableReadNode).void }
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InstanceVariableTargetNode node
  sig { params(node: Prism::InstanceVariableTargetNode).void }
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InstanceVariableWriteNode node
  sig { params(node: Prism::InstanceVariableWriteNode).void }
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a IntegerNode node
  sig { params(node: Prism::IntegerNode).void }
  def visit_integer_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InterpolatedMatchLastLineNode node
  sig { params(node: Prism::InterpolatedMatchLastLineNode).void }
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InterpolatedRegularExpressionNode node
  sig { params(node: Prism::InterpolatedRegularExpressionNode).void }
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InterpolatedStringNode node
  sig { params(node: Prism::InterpolatedStringNode).void }
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InterpolatedSymbolNode node
  sig { params(node: Prism::InterpolatedSymbolNode).void }
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InterpolatedXStringNode node
  sig { params(node: Prism::InterpolatedXStringNode).void }
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a KeywordHashNode node
  sig { params(node: Prism::KeywordHashNode).void }
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a KeywordRestParameterNode node
  sig { params(node: Prism::KeywordRestParameterNode).void }
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a LambdaNode node
  sig { params(node: Prism::LambdaNode).void }
  def visit_lambda_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a LocalVariableAndWriteNode node
  sig { params(node: Prism::LocalVariableAndWriteNode).void }
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a LocalVariableOperatorWriteNode node
  sig { params(node: Prism::LocalVariableOperatorWriteNode).void }
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a LocalVariableOrWriteNode node
  sig { params(node: Prism::LocalVariableOrWriteNode).void }
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a LocalVariableReadNode node
  sig { params(node: Prism::LocalVariableReadNode).void }
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a LocalVariableTargetNode node
  sig { params(node: Prism::LocalVariableTargetNode).void }
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a LocalVariableWriteNode node
  sig { params(node: Prism::LocalVariableWriteNode).void }
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a MatchLastLineNode node
  sig { params(node: Prism::MatchLastLineNode).void }
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a MatchPredicateNode node
  sig { params(node: Prism::MatchPredicateNode).void }
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a MatchRequiredNode node
  sig { params(node: Prism::MatchRequiredNode).void }
  def visit_match_required_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a MatchWriteNode node
  sig { params(node: Prism::MatchWriteNode).void }
  def visit_match_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a MissingNode node
  sig { params(node: Prism::MissingNode).void }
  def visit_missing_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ModuleNode node
  sig { params(node: Prism::ModuleNode).void }
  def visit_module_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a MultiTargetNode node
  sig { params(node: Prism::MultiTargetNode).void }
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a MultiWriteNode node
  sig { params(node: Prism::MultiWriteNode).void }
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a NextNode node
  sig { params(node: Prism::NextNode).void }
  def visit_next_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a NilNode node
  sig { params(node: Prism::NilNode).void }
  def visit_nil_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a NoKeywordsParameterNode node
  sig { params(node: Prism::NoKeywordsParameterNode).void }
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a NumberedParametersNode node
  sig { params(node: Prism::NumberedParametersNode).void }
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a NumberedReferenceReadNode node
  sig { params(node: Prism::NumberedReferenceReadNode).void }
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a OptionalKeywordParameterNode node
  sig { params(node: Prism::OptionalKeywordParameterNode).void }
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a OptionalParameterNode node
  sig { params(node: Prism::OptionalParameterNode).void }
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a OrNode node
  sig { params(node: Prism::OrNode).void }
  def visit_or_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ParametersNode node
  sig { params(node: Prism::ParametersNode).void }
  def visit_parameters_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ParenthesesNode node
  sig { params(node: Prism::ParenthesesNode).void }
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a PinnedExpressionNode node
  sig { params(node: Prism::PinnedExpressionNode).void }
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a PinnedVariableNode node
  sig { params(node: Prism::PinnedVariableNode).void }
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a PostExecutionNode node
  sig { params(node: Prism::PostExecutionNode).void }
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a PreExecutionNode node
  sig { params(node: Prism::PreExecutionNode).void }
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ProgramNode node
  sig { params(node: Prism::ProgramNode).void }
  def visit_program_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RangeNode node
  sig { params(node: Prism::RangeNode).void }
  def visit_range_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RationalNode node
  sig { params(node: Prism::RationalNode).void }
  def visit_rational_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RedoNode node
  sig { params(node: Prism::RedoNode).void }
  def visit_redo_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RegularExpressionNode node
  sig { params(node: Prism::RegularExpressionNode).void }
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RequiredKeywordParameterNode node
  sig { params(node: Prism::RequiredKeywordParameterNode).void }
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RequiredParameterNode node
  sig { params(node: Prism::RequiredParameterNode).void }
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RescueModifierNode node
  sig { params(node: Prism::RescueModifierNode).void }
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RescueNode node
  sig { params(node: Prism::RescueNode).void }
  def visit_rescue_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RestParameterNode node
  sig { params(node: Prism::RestParameterNode).void }
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RetryNode node
  sig { params(node: Prism::RetryNode).void }
  def visit_retry_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ReturnNode node
  sig { params(node: Prism::ReturnNode).void }
  def visit_return_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a SelfNode node
  sig { params(node: Prism::SelfNode).void }
  def visit_self_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a SingletonClassNode node
  sig { params(node: Prism::SingletonClassNode).void }
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a SourceEncodingNode node
  sig { params(node: Prism::SourceEncodingNode).void }
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a SourceFileNode node
  sig { params(node: Prism::SourceFileNode).void }
  def visit_source_file_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a SourceLineNode node
  sig { params(node: Prism::SourceLineNode).void }
  def visit_source_line_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a SplatNode node
  sig { params(node: Prism::SplatNode).void }
  def visit_splat_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a StatementsNode node
  sig { params(node: Prism::StatementsNode).void }
  def visit_statements_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a StringNode node
  sig { params(node: Prism::StringNode).void }
  def visit_string_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a SuperNode node
  sig { params(node: Prism::SuperNode).void }
  def visit_super_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a SymbolNode node
  sig { params(node: Prism::SymbolNode).void }
  def visit_symbol_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a TrueNode node
  sig { params(node: Prism::TrueNode).void }
  def visit_true_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a UndefNode node
  sig { params(node: Prism::UndefNode).void }
  def visit_undef_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a UnlessNode node
  sig { params(node: Prism::UnlessNode).void }
  def visit_unless_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a UntilNode node
  sig { params(node: Prism::UntilNode).void }
  def visit_until_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a WhenNode node
  sig { params(node: Prism::WhenNode).void }
  def visit_when_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a WhileNode node
  sig { params(node: Prism::WhileNode).void }
  def visit_while_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a XStringNode node
  sig { params(node: Prism::XStringNode).void }
  def visit_x_string_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a YieldNode node
  sig { params(node: Prism::YieldNode).void }
  def visit_yield_node(node); end
end

# source://prism//lib/prism/node.rb#16765
class Prism::WhenNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16776
  sig do
    params(
      keyword_loc: Prism::Location,
      conditions: T::Array[Prism::Node],
      statements: T.nilable(Prism::StatementsNode),
      location: Prism::Location
    ).void
  end
  def initialize(keyword_loc, conditions, statements, location); end

  # source://prism//lib/prism/node.rb#16784
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16789
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16802
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16794
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16770
  sig { returns(T::Array[Prism::Node]) }
  def conditions; end

  # source://prism//lib/prism/node.rb#16807
  sig { params(params: T.untyped).returns(Prism::WhenNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#16789
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16820
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16830
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16825
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#16767
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#16773
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#16857
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#16867
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16879
class Prism::WhileNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16896
  sig do
    params(
      flags: Integer,
      keyword_loc: Prism::Location,
      closing_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      location: Prism::Location
    ).void
  end
  def initialize(flags, keyword_loc, closing_loc, predicate, statements, location); end

  # source://prism//lib/prism/node.rb#16906
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16953
  sig { returns(T::Boolean) }
  def begin_modifier?; end

  # source://prism//lib/prism/node.rb#16915
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16963
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#16887
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#16928
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16920
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16933
  sig { params(params: T.untyped).returns(Prism::WhileNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#16915
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16948
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16968
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16958
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#16884
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#16890
  sig { returns(Prism::Node) }
  def predicate; end

  # source://prism//lib/prism/node.rb#16910
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#16893
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#16999
  def type; end

  private

  # source://prism//lib/prism/node.rb#16881
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#17009
    def type; end
  end
end

# source://prism//lib/prism/node.rb#17018
class Prism::XStringNode < ::Prism::Node
  include ::Prism::HeredocQuery

  # source://prism//lib/prism/node.rb#17035
  sig do
    params(
      flags: Integer,
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String,
      location: Prism::Location
    ).void
  end
  def initialize(flags, opening_loc, content_loc, closing_loc, unescaped, location); end

  # source://prism//lib/prism/node.rb#17045
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17050
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#17105
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#17029
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#17060
  def comment_targets; end

  # source://prism//lib/prism/node.rb#17055
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#17100
  sig { returns(String) }
  def content; end

  # source://prism//lib/prism/node.rb#17026
  sig { returns(Prism::Location) }
  def content_loc; end

  # source://prism//lib/prism/node.rb#17065
  sig { params(params: T.untyped).returns(Prism::XStringNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#17050
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17080
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#17090
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#17085
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#17110
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#17095
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#17023
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#17135
  def type; end

  # source://prism//lib/prism/node.rb#17032
  sig { returns(String) }
  def unescaped; end

  private

  # source://prism//lib/prism/node.rb#17020
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#17145
    def type; end
  end
end

# source://prism//lib/prism/node.rb#17154
class Prism::YieldNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#17168
  sig do
    params(
      keyword_loc: Prism::Location,
      lparen_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      rparen_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(keyword_loc, lparen_loc, arguments, rparen_loc, location); end

  # source://prism//lib/prism/node.rb#17177
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17162
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#17182
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#17194
  def comment_targets; end

  # source://prism//lib/prism/node.rb#17187
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#17199
  sig { params(params: T.untyped).returns(Prism::YieldNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#17182
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17213
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#17233
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#17218
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#17156
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#17223
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#17159
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#17228
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#17165
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#17261
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#17271
    def type; end
  end
end
