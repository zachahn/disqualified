# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `racc` gem.
# Please instead update this file by running `bin/tapioca gem racc`.


# source://racc//lib/racc/parser.rb#19
ParseError = Racc::ParseError

# source://racc//lib/racc/info.rb#17
Racc::Copyright = T.let(T.unsafe(nil), String)

# source://racc//lib/racc/parser.rb#184
class Racc::Parser
  # source://racc//lib/racc/parser.rb#279
  def _racc_do_parse_rb(arg, in_debug); end

  # source://racc//lib/racc/parser.rb#479
  def _racc_do_reduce(arg, act); end

  # source://racc//lib/racc/parser.rb#382
  def _racc_evalact(act, arg); end

  # source://racc//lib/racc/parser.rb#232
  def _racc_init_sysvars; end

  # source://racc//lib/racc/parser.rb#220
  def _racc_setup; end

  # source://racc//lib/racc/parser.rb#329
  def _racc_yyparse_rb(recv, mid, arg, c_debug); end

  # source://racc//lib/racc/parser.rb#262
  def do_parse; end

  # source://racc//lib/racc/parser.rb#275
  def next_token; end

  # source://racc//lib/racc/parser.rb#535
  def on_error(t, val, vstack); end

  # source://racc//lib/racc/parser.rb#584
  def racc_accept; end

  # source://racc//lib/racc/parser.rb#589
  def racc_e_pop(state, tstack, vstack); end

  # source://racc//lib/racc/parser.rb#596
  def racc_next_state(curstate, state); end

  # source://racc//lib/racc/parser.rb#602
  def racc_print_stacks(t, v); end

  # source://racc//lib/racc/parser.rb#611
  def racc_print_states(s); end

  # source://racc//lib/racc/parser.rb#558
  def racc_read_token(t, tok, val); end

  # source://racc//lib/racc/parser.rb#571
  def racc_reduce(toks, sim, tstack, vstack); end

  # source://racc//lib/racc/parser.rb#565
  def racc_shift(tok, tstack, vstack); end

  # source://racc//lib/racc/parser.rb#618
  def racc_token2str(tok); end

  # source://racc//lib/racc/parser.rb#624
  def token_to_str(t); end

  # source://racc//lib/racc/parser.rb#548
  def yyaccept; end

  # source://racc//lib/racc/parser.rb#553
  def yyerrok; end

  # source://racc//lib/racc/parser.rb#542
  def yyerror; end

  # source://racc//lib/racc/parser.rb#324
  def yyparse(recv, mid); end

  class << self
    # source://racc//lib/racc/parser.rb#216
    def racc_runtime_type; end
  end
end

# source://racc//lib/racc/parser.rb#205
Racc::Parser::Racc_Main_Parsing_Routine = T.let(T.unsafe(nil), Symbol)

Racc::Parser::Racc_Runtime_Core_Id_C = T.let(T.unsafe(nil), String)

# source://racc//lib/racc/parser.rb#207
Racc::Parser::Racc_Runtime_Core_Version = T.let(T.unsafe(nil), String)

Racc::Parser::Racc_Runtime_Core_Version_C = T.let(T.unsafe(nil), String)

# source://racc//lib/racc/parser.rb#187
Racc::Parser::Racc_Runtime_Core_Version_R = T.let(T.unsafe(nil), String)

# source://racc//lib/racc/parser.rb#208
Racc::Parser::Racc_Runtime_Type = T.let(T.unsafe(nil), String)

# source://racc//lib/racc/parser.rb#186
Racc::Parser::Racc_Runtime_Version = T.let(T.unsafe(nil), String)

# source://racc//lib/racc/parser.rb#206
Racc::Parser::Racc_YY_Parse_Method = T.let(T.unsafe(nil), Symbol)

# source://racc//lib/racc/parser.rb#181
Racc::Racc_No_Extensions = T.let(T.unsafe(nil), FalseClass)

# source://racc//lib/racc/info.rb#15
Racc::VERSION = T.let(T.unsafe(nil), String)

# source://racc//lib/racc/info.rb#16
Racc::Version = T.let(T.unsafe(nil), String)
