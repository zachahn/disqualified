# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rails-html-sanitizer` gem.
# Please instead update this file by running `bin/tapioca gem rails-html-sanitizer`.


# source://rails-html-sanitizer//lib/rails-html-sanitizer.rb#14
module ActionView
  class << self
    # source://actionview/7.2.2/lib/action_view/deprecator.rb#4
    def deprecator; end

    # source://actionview/7.2.2/lib/action_view.rb#93
    def eager_load!; end

    # source://actionview/7.2.2/lib/action_view/gem_version.rb#5
    def gem_version; end

    # source://actionview/7.2.2/lib/action_view/version.rb#7
    def version; end
  end
end

# source://rails-html-sanitizer//lib/rails-html-sanitizer.rb#15
module ActionView::Helpers
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::UrlHelper
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::FormTagHelper
  include ::ActionView::Helpers::FormHelper
  include ::ActionView::Helpers::TranslationHelper

  mixes_in_class_methods ::ActionView::Helpers::UrlHelper::ClassMethods
  mixes_in_class_methods ::ActionView::Helpers::SanitizeHelper::ClassMethods

  class << self
    # source://actionview/7.2.2/lib/action_view/helpers.rb#35
    def eager_load!; end
  end
end

# source://rails-html-sanitizer//lib/rails-html-sanitizer.rb#16
module ActionView::Helpers::SanitizeHelper
  mixes_in_class_methods ::ActionView::Helpers::SanitizeHelper::ClassMethods

  # source://actionview/7.2.2/lib/action_view/helpers/sanitize_helper.rb#111
  def sanitize(html, options = T.unsafe(nil)); end

  # source://actionview/7.2.2/lib/action_view/helpers/sanitize_helper.rb#116
  def sanitize_css(style); end

  # source://actionview/7.2.2/lib/action_view/helpers/sanitize_helper.rb#12
  def sanitizer_vendor; end

  # source://actionview/7.2.2/lib/action_view/helpers/sanitize_helper.rb#12
  def sanitizer_vendor=(val); end

  # source://actionview/7.2.2/lib/action_view/helpers/sanitize_helper.rb#150
  def strip_links(html); end

  # source://actionview/7.2.2/lib/action_view/helpers/sanitize_helper.rb#133
  def strip_tags(html); end

  class << self
    # source://actionview/7.2.2/lib/action_view/helpers/sanitize_helper.rb#12
    def sanitizer_vendor; end

    # source://actionview/7.2.2/lib/action_view/helpers/sanitize_helper.rb#12
    def sanitizer_vendor=(val); end
  end
end

# source://rails-html-sanitizer//lib/rails-html-sanitizer.rb#17
module ActionView::Helpers::SanitizeHelper::ClassMethods
  # source://actionview/7.2.2/lib/action_view/helpers/sanitize_helper.rb#175
  def full_sanitizer; end

  # source://actionview/7.2.2/lib/action_view/helpers/sanitize_helper.rb#155
  def full_sanitizer=(_arg0); end

  # source://actionview/7.2.2/lib/action_view/helpers/sanitize_helper.rb#185
  def link_sanitizer; end

  # source://actionview/7.2.2/lib/action_view/helpers/sanitize_helper.rb#155
  def link_sanitizer=(_arg0); end

  # source://actionview/7.2.2/lib/action_view/helpers/sanitize_helper.rb#195
  def safe_list_sanitizer; end

  # source://actionview/7.2.2/lib/action_view/helpers/sanitize_helper.rb#155
  def safe_list_sanitizer=(_arg0); end

  # source://actionview/7.2.2/lib/action_view/helpers/sanitize_helper.rb#165
  def sanitized_allowed_attributes; end

  # source://rails-html-sanitizer//lib/rails-html-sanitizer.rb#34
  def sanitized_allowed_attributes=(attributes); end

  # source://rails-html-sanitizer//lib/rails-html-sanitizer.rb#47
  def sanitized_allowed_css_keywords; end

  # source://rails-html-sanitizer//lib/rails-html-sanitizer.rb#48
  def sanitized_allowed_css_keywords=(_); end

  # source://rails-html-sanitizer//lib/rails-html-sanitizer.rb#47
  def sanitized_allowed_css_properties; end

  # source://rails-html-sanitizer//lib/rails-html-sanitizer.rb#48
  def sanitized_allowed_css_properties=(_); end

  # source://rails-html-sanitizer//lib/rails-html-sanitizer.rb#47
  def sanitized_allowed_protocols; end

  # source://rails-html-sanitizer//lib/rails-html-sanitizer.rb#48
  def sanitized_allowed_protocols=(_); end

  # source://actionview/7.2.2/lib/action_view/helpers/sanitize_helper.rb#161
  def sanitized_allowed_tags; end

  # source://rails-html-sanitizer//lib/rails-html-sanitizer.rb#24
  def sanitized_allowed_tags=(tags); end

  # source://rails-html-sanitizer//lib/rails-html-sanitizer.rb#47
  def sanitized_bad_tags; end

  # source://rails-html-sanitizer//lib/rails-html-sanitizer.rb#48
  def sanitized_bad_tags=(_); end

  # source://rails-html-sanitizer//lib/rails-html-sanitizer.rb#47
  def sanitized_protocol_separator; end

  # source://rails-html-sanitizer//lib/rails-html-sanitizer.rb#48
  def sanitized_protocol_separator=(_); end

  # source://rails-html-sanitizer//lib/rails-html-sanitizer.rb#47
  def sanitized_shorthand_css_properties; end

  # source://rails-html-sanitizer//lib/rails-html-sanitizer.rb#48
  def sanitized_shorthand_css_properties=(_); end

  # source://rails-html-sanitizer//lib/rails-html-sanitizer.rb#47
  def sanitized_uri_attributes; end

  # source://rails-html-sanitizer//lib/rails-html-sanitizer.rb#48
  def sanitized_uri_attributes=(_); end

  # source://actionview/7.2.2/lib/action_view/helpers/sanitize_helper.rb#157
  def sanitizer_vendor; end

  private

  # source://rails-html-sanitizer//lib/rails-html-sanitizer.rb#52
  def deprecate_option(name); end
end

# source://rails-html-sanitizer//lib/rails/html/sanitizer/version.rb#3
module Rails
  class << self
    # source://railties/7.2.2/lib/rails.rb#44
    def app_class; end

    # source://railties/7.2.2/lib/rails.rb#44
    def app_class=(_arg0); end

    # source://railties/7.2.2/lib/rails.rb#45
    def application; end

    # source://railties/7.2.2/lib/rails.rb#43
    def application=(_arg0); end

    # source://railties/7.2.2/lib/rails.rb#126
    def autoloaders; end

    # source://railties/7.2.2/lib/rails.rb#56
    def backtrace_cleaner; end

    # source://railties/7.2.2/lib/rails.rb#44
    def cache; end

    # source://railties/7.2.2/lib/rails.rb#44
    def cache=(_arg0); end

    # source://railties/7.2.2/lib/rails.rb#52
    def configuration; end

    # source://railties/7.2.2/lib/rails/deprecator.rb#4
    def deprecator; end

    # source://railties/7.2.2/lib/rails.rb#75
    def env; end

    # source://railties/7.2.2/lib/rails.rb#82
    def env=(environment); end

    # source://railties/7.2.2/lib/rails.rb#93
    def error; end

    # source://railties/7.2.2/lib/rails/gem_version.rb#5
    def gem_version; end

    # source://railties/7.2.2/lib/rails.rb#106
    def groups(*groups); end

    # source://railties/7.2.2/lib/rails.rb#49
    def initialize!(*_arg0, **_arg1, &_arg2); end

    # source://railties/7.2.2/lib/rails.rb#49
    def initialized?(*_arg0, **_arg1, &_arg2); end

    # source://railties/7.2.2/lib/rails.rb#44
    def logger; end

    # source://railties/7.2.2/lib/rails.rb#44
    def logger=(_arg0); end

    # source://railties/7.2.2/lib/rails.rb#122
    def public_path; end

    # source://railties/7.2.2/lib/rails.rb#65
    def root; end

    # source://railties/7.2.2/lib/rails/version.rb#7
    def version; end
  end
end

# source://rails-html-sanitizer//lib/rails/html/sanitizer/version.rb#4
module Rails::HTML; end

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#194
module Rails::HTML4; end

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#225
class Rails::HTML4::FullSanitizer < ::Rails::HTML::Sanitizer
  include ::Rails::HTML::Concern::ComposedSanitize
  include ::Rails::HTML::Concern::Parser::HTML4
  include ::Rails::HTML::Concern::Scrubber::Full
  include ::Rails::HTML::Concern::Serializer::UTF8Encode
end

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#240
class Rails::HTML4::LinkSanitizer < ::Rails::HTML::Sanitizer
  include ::Rails::HTML::Concern::ComposedSanitize
  include ::Rails::HTML::Concern::Parser::HTML4
  include ::Rails::HTML::Concern::Scrubber::Link
  include ::Rails::HTML::Concern::Serializer::UTF8Encode
end

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#298
class Rails::HTML4::SafeListSanitizer < ::Rails::HTML::Sanitizer
  include ::Rails::HTML::Concern::ComposedSanitize
  include ::Rails::HTML::Concern::Parser::HTML4
  include ::Rails::HTML::Concern::Scrubber::SafeList
  include ::Rails::HTML::Concern::Serializer::UTF8Encode

  class << self
    # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#145
    def allowed_attributes; end

    # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#145
    def allowed_attributes=(_arg0); end

    # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#144
    def allowed_tags; end

    # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#144
    def allowed_tags=(_arg0); end
  end
end

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#195
module Rails::HTML4::Sanitizer
  extend ::Rails::HTML4::Sanitizer::VendorMethods
end

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#196
module Rails::HTML4::Sanitizer::VendorMethods
  # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#197
  def full_sanitizer; end

  # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#201
  def link_sanitizer; end

  # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#205
  def safe_list_sanitizer; end

  # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#209
  def white_list_sanitizer; end
end

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#306
module Rails::HTML5; end

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#335
class Rails::HTML5::FullSanitizer < ::Rails::HTML::Sanitizer
  include ::Rails::HTML::Concern::ComposedSanitize
  include ::Rails::HTML::Concern::Parser::HTML5
  include ::Rails::HTML::Concern::Scrubber::Full
  include ::Rails::HTML::Concern::Serializer::UTF8Encode
end

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#350
class Rails::HTML5::LinkSanitizer < ::Rails::HTML::Sanitizer
  include ::Rails::HTML::Concern::ComposedSanitize
  include ::Rails::HTML::Concern::Parser::HTML5
  include ::Rails::HTML::Concern::Scrubber::Link
  include ::Rails::HTML::Concern::Serializer::UTF8Encode
end

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#408
class Rails::HTML5::SafeListSanitizer < ::Rails::HTML::Sanitizer
  include ::Rails::HTML::Concern::ComposedSanitize
  include ::Rails::HTML::Concern::Parser::HTML5
  include ::Rails::HTML::Concern::Scrubber::SafeList
  include ::Rails::HTML::Concern::Serializer::UTF8Encode

  class << self
    # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#145
    def allowed_attributes; end

    # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#145
    def allowed_attributes=(_arg0); end

    # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#144
    def allowed_tags; end

    # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#144
    def allowed_tags=(_arg0); end
  end
end

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#307
class Rails::HTML5::Sanitizer
  class << self
    # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#309
    def full_sanitizer; end

    # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#313
    def link_sanitizer; end

    # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#317
    def safe_list_sanitizer; end

    # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#321
    def white_list_sanitizer; end
  end
end

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#33
module Rails::HTML::Concern; end

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#34
module Rails::HTML::Concern::ComposedSanitize
  # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#35
  def sanitize(html, options = T.unsafe(nil)); end
end

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#43
module Rails::HTML::Concern::Parser; end

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#44
module Rails::HTML::Concern::Parser::HTML4
  # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#45
  def parse_fragment(html); end
end

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#50
module Rails::HTML::Concern::Parser::HTML5
  # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#51
  def parse_fragment(html); end
end

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#57
module Rails::HTML::Concern::Scrubber; end

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#58
module Rails::HTML::Concern::Scrubber::Full
  # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#59
  def scrub(fragment, options = T.unsafe(nil)); end
end

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#64
module Rails::HTML::Concern::Scrubber::Link
  # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#65
  def initialize; end

  # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#72
  def scrub(fragment, options = T.unsafe(nil)); end
end

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#77
module Rails::HTML::Concern::Scrubber::SafeList
  # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#152
  def initialize(prune: T.unsafe(nil)); end

  # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#169
  def sanitize_css(style_string); end

  # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#156
  def scrub(fragment, options = T.unsafe(nil)); end

  private

  # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#178
  def allowed_attributes(options); end

  # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#174
  def allowed_tags(options); end

  class << self
    # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#142
    def included(klass); end
  end
end

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#126
Rails::HTML::Concern::Scrubber::SafeList::DEFAULT_ALLOWED_ATTRIBUTES = T.let(T.unsafe(nil), Set)

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#79
Rails::HTML::Concern::Scrubber::SafeList::DEFAULT_ALLOWED_TAGS = T.let(T.unsafe(nil), Set)

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#184
module Rails::HTML::Concern::Serializer; end

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#185
module Rails::HTML::Concern::Serializer::UTF8Encode
  # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#186
  def serialize(fragment); end
end

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#418
Rails::HTML::FullSanitizer = Rails::HTML4::FullSanitizer

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#419
Rails::HTML::LinkSanitizer = Rails::HTML4::LinkSanitizer

# source://rails-html-sanitizer//lib/rails/html/scrubbers.rb#49
class Rails::HTML::PermitScrubber < ::Loofah::Scrubber
  # source://rails-html-sanitizer//lib/rails/html/scrubbers.rb#52
  def initialize(prune: T.unsafe(nil)); end

  # source://rails-html-sanitizer//lib/rails/html/scrubbers.rb#50
  def attributes; end

  # source://rails-html-sanitizer//lib/rails/html/scrubbers.rb#62
  def attributes=(attributes); end

  # source://rails-html-sanitizer//lib/rails/html/scrubbers.rb#50
  def prune; end

  # source://rails-html-sanitizer//lib/rails/html/scrubbers.rb#66
  def scrub(node); end

  # source://rails-html-sanitizer//lib/rails/html/scrubbers.rb#50
  def tags; end

  # source://rails-html-sanitizer//lib/rails/html/scrubbers.rb#58
  def tags=(tags); end

  protected

  # source://rails-html-sanitizer//lib/rails/html/scrubbers.rb#83
  def allowed_node?(node); end

  # source://rails-html-sanitizer//lib/rails/html/scrubbers.rb#95
  def keep_node?(node); end

  # source://rails-html-sanitizer//lib/rails/html/scrubbers.rb#162
  def scrub_attribute(node, attr_node); end

  # source://rails-html-sanitizer//lib/rails/html/scrubbers.rb#91
  def scrub_attribute?(name); end

  # source://rails-html-sanitizer//lib/rails/html/scrubbers.rb#112
  def scrub_attributes(node); end

  # source://rails-html-sanitizer//lib/rails/html/scrubbers.rb#128
  def scrub_css_attribute(node); end

  # source://rails-html-sanitizer//lib/rails/html/scrubbers.rb#103
  def scrub_node(node); end

  # source://rails-html-sanitizer//lib/rails/html/scrubbers.rb#87
  def skip_node?(node); end

  # source://rails-html-sanitizer//lib/rails/html/scrubbers.rb#137
  def validate!(var, name); end
end

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#420
Rails::HTML::SafeListSanitizer = Rails::HTML4::SafeListSanitizer

# source://rails-html-sanitizer//lib/rails/html/sanitizer/version.rb#5
class Rails::HTML::Sanitizer
  extend ::Rails::HTML4::Sanitizer::VendorMethods

  # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#18
  def sanitize(html, options = T.unsafe(nil)); end

  private

  # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#28
  def properly_encode(fragment, options); end

  # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#23
  def remove_xpaths(node, xpaths); end

  class << self
    # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#13
    def best_supported_vendor; end

    # source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#7
    def html5_support?; end
  end
end

# source://rails-html-sanitizer//lib/rails/html/sanitizer/version.rb#6
Rails::HTML::Sanitizer::VERSION = T.let(T.unsafe(nil), String)

# source://rails-html-sanitizer//lib/rails/html/scrubbers.rb#195
class Rails::HTML::TargetScrubber < ::Rails::HTML::PermitScrubber
  # source://rails-html-sanitizer//lib/rails/html/scrubbers.rb#196
  def allowed_node?(node); end

  # source://rails-html-sanitizer//lib/rails/html/scrubbers.rb#200
  def scrub_attribute?(name); end
end

# source://rails-html-sanitizer//lib/rails/html/scrubbers.rb#210
class Rails::HTML::TextOnlyScrubber < ::Loofah::Scrubber
  # source://rails-html-sanitizer//lib/rails/html/scrubbers.rb#211
  def initialize; end

  # source://rails-html-sanitizer//lib/rails/html/scrubbers.rb#215
  def scrub(node); end
end

# source://rails-html-sanitizer//lib/rails/html/sanitizer.rb#421
Rails::HTML::WhiteListSanitizer = Rails::HTML4::SafeListSanitizer

# source://rails-html-sanitizer//lib/rails-html-sanitizer.rb#11
Rails::Html = Rails::HTML
