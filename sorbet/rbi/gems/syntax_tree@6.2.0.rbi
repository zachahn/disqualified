# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `syntax_tree` gem.
# Please instead update this file by running `bin/tapioca gem syntax_tree`.

# source://syntax_tree//lib/syntax_tree/node.rb#3
module SyntaxTree
  class << self
    # source://syntax_tree//lib/syntax_tree.rb#60
    def format(source, maxwidth = T.unsafe(nil), base_indentation = T.unsafe(nil), options: T.unsafe(nil)); end

    # source://syntax_tree//lib/syntax_tree.rb#76
    def format_file(filepath, maxwidth = T.unsafe(nil), base_indentation = T.unsafe(nil), options: T.unsafe(nil)); end

    # source://syntax_tree//lib/syntax_tree.rb#86
    def format_node(source, node, maxwidth = T.unsafe(nil), base_indentation = T.unsafe(nil), options: T.unsafe(nil)); end

    # source://syntax_tree//lib/syntax_tree.rb#103
    def index(source); end

    # source://syntax_tree//lib/syntax_tree.rb#110
    def index_file(filepath); end

    # source://syntax_tree//lib/syntax_tree.rb#115
    def mutation; end

    # source://syntax_tree//lib/syntax_tree.rb#122
    def parse(source); end

    # source://syntax_tree//lib/syntax_tree.rb#129
    def parse_file(filepath); end

    # source://syntax_tree//lib/syntax_tree.rb#135
    def read(filepath); end

    # source://syntax_tree//lib/syntax_tree.rb#150
    def register_handler(extension, handler); end

    # source://syntax_tree//lib/syntax_tree.rb#156
    def search(source, query, &block); end

    # source://syntax_tree//lib/syntax_tree.rb#165
    def search_file(filepath, query, &block); end
  end
end

# source://syntax_tree//lib/syntax_tree/node.rb#567
class SyntaxTree::ARef < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#577
  def initialize(collection:, index:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#632
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#584
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#588
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#569
  def collection; end

  # source://syntax_tree//lib/syntax_tree/node.rb#575
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#592
  def copy(collection: T.unsafe(nil), index: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#588
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#606
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#615
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#572
  def index; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#645
class SyntaxTree::ARefField < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#655
  def initialize(collection:, index:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#710
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#662
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#666
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#647
  def collection; end

  # source://syntax_tree//lib/syntax_tree/node.rb#653
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#670
  def copy(collection: T.unsafe(nil), index: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#666
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#684
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#693
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#650
  def index; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#458
class SyntaxTree::AliasNode < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#496
  def initialize(left:, right:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#545
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#503
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#507
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#494
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#511
  def copy(left: T.unsafe(nil), right: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#507
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#525
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#529
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#488
  def left; end

  # source://syntax_tree//lib/syntax_tree/node.rb#491
  def right; end

  # source://syntax_tree//lib/syntax_tree/node.rb#549
  def var_alias?; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#461
class SyntaxTree::AliasNode::AliasArgumentFormatter
  # source://syntax_tree//lib/syntax_tree/node.rb#466
  def initialize(argument); end

  # source://syntax_tree//lib/syntax_tree/node.rb#464
  def argument; end

  # source://syntax_tree//lib/syntax_tree/node.rb#470
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#478
  def format(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#887
class SyntaxTree::ArgBlock < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#894
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#930
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#900
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#904
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#892
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#908
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#904
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#921
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#925
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#889
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#727
class SyntaxTree::ArgParen < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#735
  def initialize(arguments:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#784
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#741
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#730
  def arguments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#788
  def arity; end

  # source://syntax_tree//lib/syntax_tree/node.rb#745
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#733
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#749
  def copy(arguments: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#745
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#762
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#766
  def format(q); end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#794
  def trailing_comma?; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#939
class SyntaxTree::ArgStar < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#946
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#982
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#952
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#956
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#944
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#960
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#956
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#973
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#977
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#941
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#821
class SyntaxTree::Args < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#828
  def initialize(parts:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#863
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#834
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#867
  def arity; end

  # source://syntax_tree//lib/syntax_tree/node.rb#838
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#826
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#842
  def copy(parts: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#838
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#855
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#859
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#823
  def parts; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#1004
class SyntaxTree::ArgsForward < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#1008
  def initialize(location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1038
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1013
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1042
  def arity; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1017
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1006
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1021
  def copy(location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1017
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1030
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1034
  def format(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#1053
class SyntaxTree::ArrayLiteral < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#1153
  def initialize(lbracket:, contents:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1229
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1160
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1164
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1151
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1148
  def contents; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1168
  def copy(lbracket: T.unsafe(nil), contents: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1164
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1182
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1191
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1145
  def lbracket; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#1259
  def empty_with_comments?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1251
  def qsymbols?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1236
  def qwords?; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#1063
SyntaxTree::ArrayLiteral::BREAKABLE_SPACE_SEPARATOR = T.let(T.unsafe(nil), SyntaxTree::ArrayLiteral::BreakableSpaceSeparator)

# source://syntax_tree//lib/syntax_tree/node.rb#1057
class SyntaxTree::ArrayLiteral::BreakableSpaceSeparator
  # source://syntax_tree//lib/syntax_tree/node.rb#1058
  def call(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#1120
class SyntaxTree::ArrayLiteral::EmptyWithCommentsFormatter
  # source://syntax_tree//lib/syntax_tree/node.rb#1124
  def initialize(lbracket); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1128
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1122
  def lbracket; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#1094
class SyntaxTree::ArrayLiteral::QSymbolsFormatter
  # source://syntax_tree//lib/syntax_tree/node.rb#1098
  def initialize(contents); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1096
  def contents; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1102
  def format(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#1066
class SyntaxTree::ArrayLiteral::QWordsFormatter
  # source://syntax_tree//lib/syntax_tree/node.rb#1070
  def initialize(contents); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1068
  def contents; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1074
  def format(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#157
module SyntaxTree::ArrayMatch
  class << self
    # source://syntax_tree//lib/syntax_tree/node.rb#158
    def call(left, right); end
  end
end

# source://syntax_tree//lib/syntax_tree/node.rb#1282
class SyntaxTree::AryPtn < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#1320
  def initialize(constant:, requireds:, rest:, posts:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1388
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1329
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1333
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1318
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1303
  def constant; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1337
  def copy(constant: T.unsafe(nil), requireds: T.unsafe(nil), rest: T.unsafe(nil), posts: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1333
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1359
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1370
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1315
  def posts; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1307
  def requireds; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1311
  def rest; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#1284
class SyntaxTree::AryPtn::RestFormatter
  # source://syntax_tree//lib/syntax_tree/node.rb#1288
  def initialize(value); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1292
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1296
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1286
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#1418
class SyntaxTree::Assign < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#1429
  def initialize(target:, value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1479
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1436
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1440
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1427
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1444
  def copy(target: T.unsafe(nil), value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1440
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1458
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1462
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1421
  def target; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1424
  def value; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#1485
  def skip_indent?; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#1396
module SyntaxTree::AssignFormatting
  class << self
    # source://syntax_tree//lib/syntax_tree/node.rb#1397
    def skip_indent?(value); end
  end
end

# source://syntax_tree//lib/syntax_tree/node.rb#1497
class SyntaxTree::Assoc < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#1507
  def initialize(key:, value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1548
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1514
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1518
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1505
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1522
  def copy(key: T.unsafe(nil), value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1518
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1536
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1540
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1499
  def key; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1502
  def value; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#1554
  def format_contents(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#1575
class SyntaxTree::AssocSplat < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#1582
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1618
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1588
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1592
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1580
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1596
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1592
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1609
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1613
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1577
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#175
class SyntaxTree::BEGINBlock < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#185
  def initialize(lbrace:, statements:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#236
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#192
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#196
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#183
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#200
  def copy(lbrace: T.unsafe(nil), statements: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#196
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#214
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#223
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#177
  def lbrace; end

  # source://syntax_tree//lib/syntax_tree/node.rb#180
  def statements; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#1628
class SyntaxTree::Backref < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#1635
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1670
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1641
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1645
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1633
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1649
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1645
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1662
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1666
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1630
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#1678
class SyntaxTree::Backtick < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#1685
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1720
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1691
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1695
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1683
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1699
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1695
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1712
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1716
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1680
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#1834
class SyntaxTree::BareAssocHash < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#1841
  def initialize(assocs:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1876
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1847
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1836
  def assocs; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1851
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1839
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1855
  def copy(assocs: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1851
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1868
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1872
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1880
  def format_key(q, key); end
end

# source://syntax_tree//lib/syntax_tree/basic_visitor.rb#8
class SyntaxTree::BasicVisitor
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#105
  def visit(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#109
  def visit_all(nodes); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_child_nodes(node); end

  class << self
    # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#72
    def valid_visit_methods; end

    # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#86
    def visit_method(method_name); end

    # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#97
    def visit_methods; end
  end
end

# source://syntax_tree//lib/syntax_tree/basic_visitor.rb#22
class SyntaxTree::BasicVisitor::VisitMethodChecker
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#25
  def initialize(error); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#29
  def corrections; end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#23
  def visit_method; end
end

# source://syntax_tree//lib/syntax_tree/basic_visitor.rb#11
class SyntaxTree::BasicVisitor::VisitMethodError < ::StandardError
  include ::DidYouMean::Correctable

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#14
  def initialize(visit_method); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#12
  def visit_method; end
end

# source://syntax_tree//lib/syntax_tree/basic_visitor.rb#45
class SyntaxTree::BasicVisitor::VisitMethodsChecker < ::Module
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#53
  def initialize; end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#65
  def disable!; end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#51
  def status; end
end

# source://syntax_tree//lib/syntax_tree/basic_visitor.rb#46
class SyntaxTree::BasicVisitor::VisitMethodsChecker::Status < ::Struct
  def checking; end
  def checking=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://syntax_tree//lib/syntax_tree/node.rb#1899
class SyntaxTree::Begin < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#1906
  def initialize(bodystmt:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1951
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1912
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1901
  def bodystmt; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1916
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1904
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1920
  def copy(bodystmt: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1916
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1933
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1937
  def format(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#2029
class SyntaxTree::Binary < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#2056
  def initialize(left:, operator:, right:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2128
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2064
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2068
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2054
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2072
  def copy(left: T.unsafe(nil), operator: T.unsafe(nil), right: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2068
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2087
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2097
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2045
  def left; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2048
  def operator; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2051
  def right; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#2227
class SyntaxTree::BlockArg < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#2234
  def initialize(name:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2270
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2240
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2244
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2232
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2248
  def copy(name: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2244
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2261
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2265
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2229
  def name; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#4312
class SyntaxTree::BlockNode < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#4347
  def initialize(opening:, block_var:, bodystmt:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4420
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4355
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4429
  def arity; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4339
  def block_var; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4342
  def bodystmt; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4359
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4345
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4363
  def copy(opening: T.unsafe(nil), block_var: T.unsafe(nil), bodystmt: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4359
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4378
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4388
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4425
  def keywords?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4336
  def opening; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#4471
  def forced_brace_bounds?(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4460
  def forced_do_end_bounds?(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4487
  def format_break(q, break_opening, break_closing); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4507
  def format_flat(q, flat_opening, flat_closing); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4442
  def unchangeable_bounds?(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#4314
class SyntaxTree::BlockNode::BlockOpenFormatter
  # source://syntax_tree//lib/syntax_tree/node.rb#4321
  def initialize(text, node); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4326
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4330
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4319
  def node; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4316
  def text; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#2141
class SyntaxTree::BlockVar < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#2151
  def initialize(params:, locals:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2209
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2158
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2216
  def arg0?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2162
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2149
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2166
  def copy(params: T.unsafe(nil), locals: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2162
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2180
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2196
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2146
  def locals; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2143
  def params; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#2194
SyntaxTree::BlockVar::SEPARATOR = T.let(T.unsafe(nil), SyntaxTree::BlockVar::Separator)

# source://syntax_tree//lib/syntax_tree/node.rb#2186
class SyntaxTree::BlockVar::Separator
  # source://syntax_tree//lib/syntax_tree/node.rb#2187
  def call(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#2278
class SyntaxTree::BodyStmt < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#2297
  def initialize(statements:, rescue_clause:, else_keyword:, else_clause:, ensure_clause:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2428
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2352
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2314
  def bind(parser, start_char, start_column, end_char, end_column); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2356
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2295
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2360
  def copy(statements: T.unsafe(nil), rescue_clause: T.unsafe(nil), else_keyword: T.unsafe(nil), else_clause: T.unsafe(nil), ensure_clause: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2356
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2384
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2289
  def else_clause; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2286
  def else_keyword; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2348
  def empty?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2292
  def ensure_clause; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2396
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2283
  def rescue_clause; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2280
  def statements; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#2634
class SyntaxTree::Break < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#2641
  def initialize(arguments:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2676
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2647
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2636
  def arguments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2651
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2639
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2655
  def copy(arguments: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2651
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2668
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2672
  def format(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#248
class SyntaxTree::CHAR < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#255
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#296
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#261
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#265
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#253
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#269
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#265
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#282
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#286
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#250
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#4046
class SyntaxTree::CVar < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#4053
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4088
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4059
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4063
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4051
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4067
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4063
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4080
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4084
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4048
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#2721
class SyntaxTree::CallChainFormatter
  # source://syntax_tree//lib/syntax_tree/node.rb#2725
  def initialize(node); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2729
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2795
  def format_chain(q, children); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2723
  def node; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#2898
  def attach_directly?(node); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2908
  def format_child(q, child, skip_comments: T.unsafe(nil), skip_operator: T.unsafe(nil), skip_attached: T.unsafe(nil)); end

  class << self
    # source://syntax_tree//lib/syntax_tree/node.rb#2879
    def chained?(node); end
  end
end

# source://syntax_tree//lib/syntax_tree/node.rb#2946
class SyntaxTree::CallNode < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#2962
  def initialize(receiver:, operator:, message:, arguments:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3057
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2971
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2957
  def arguments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3103
  def arity; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2975
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2960
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2984
  def copy(receiver: T.unsafe(nil), operator: T.unsafe(nil), message: T.unsafe(nil), arguments: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2975
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3006
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3017
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3065
  def format_arguments(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3075
  def format_contents(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2954
  def message; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2951
  def operator; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2948
  def receiver; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#2683
class SyntaxTree::CallOperatorFormatter
  # source://syntax_tree//lib/syntax_tree/node.rb#2687
  def initialize(operator); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2691
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2695
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2685
  def operator; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#3119
class SyntaxTree::Case < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#3132
  def initialize(keyword:, value:, consequent:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3190
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3140
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3144
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3130
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3127
  def consequent; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3148
  def copy(keyword: T.unsafe(nil), value: T.unsafe(nil), consequent: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3144
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3163
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3173
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3121
  def keyword; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3124
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#3315
class SyntaxTree::ClassDeclaration < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#3329
  def initialize(constant:, superclass:, bodystmt:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3392
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3337
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3324
  def bodystmt; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3341
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3327
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3318
  def constant; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3345
  def copy(constant: T.unsafe(nil), superclass: T.unsafe(nil), bodystmt: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3341
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3360
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3370
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3321
  def superclass; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#3399
  def format_declaration(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#3413
class SyntaxTree::Comma < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#3417
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3440
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3422
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3426
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3430
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3426
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3436
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3415
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#3451
class SyntaxTree::Command < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#3464
  def initialize(message:, arguments:, block:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3514
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3472
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3456
  def arguments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3519
  def arity; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3459
  def block; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3476
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3462
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3480
  def copy(message: T.unsafe(nil), arguments: T.unsafe(nil), block: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3476
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3495
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3505
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3453
  def message; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#3525
  def align(q, node, &block); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#3563
class SyntaxTree::CommandCall < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#3582
  def initialize(receiver:, operator:, message:, arguments:, block:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3686
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3599
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3574
  def arguments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3692
  def arity; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3577
  def block; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3603
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3580
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3607
  def copy(receiver: T.unsafe(nil), operator: T.unsafe(nil), message: T.unsafe(nil), arguments: T.unsafe(nil), block: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3603
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3631
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3643
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3571
  def message; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3568
  def operator; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3565
  def receiver; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#3698
  def argument_alignment(q, doc); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#3725
class SyntaxTree::Comment < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#3734
  def initialize(value:, inline:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3793
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3767
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3771
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3763
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3775
  def copy(value: T.unsafe(nil), inline: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3771
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3785
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3789
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3759
  def ignore?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3731
  def inline; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3731
  def inline?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3743
  def leading!; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3747
  def leading?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3751
  def trailing!; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3755
  def trailing?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3727
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#6317
class SyntaxTree::ConditionalFormatter
  # source://syntax_tree//lib/syntax_tree/node.rb#6324
  def initialize(keyword, node); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6329
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6319
  def keyword; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6322
  def node; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#6453
  def contains_conditional?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6388
  def format_break(q, force:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6380
  def format_flat(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6408
  def format_ternary(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#3812
class SyntaxTree::Const < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#3819
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3854
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3825
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3829
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3817
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3833
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3829
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3846
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3850
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3814
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#3865
class SyntaxTree::ConstPathField < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#3875
  def initialize(parent:, constant:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3919
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3882
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3886
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3873
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3870
  def constant; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3890
  def copy(parent: T.unsafe(nil), constant: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3886
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3904
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3913
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3867
  def parent; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#3929
class SyntaxTree::ConstPathRef < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#3939
  def initialize(parent:, constant:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3983
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3946
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3950
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3937
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3934
  def constant; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3954
  def copy(parent: T.unsafe(nil), constant: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3950
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3968
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3977
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3931
  def parent; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#3995
class SyntaxTree::ConstRef < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#4002
  def initialize(constant:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4037
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4008
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4012
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4000
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3997
  def constant; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4016
  def copy(constant: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4012
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4029
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4033
  def format(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#6232
module SyntaxTree::ContainsAssignment
  class << self
    # source://syntax_tree//lib/syntax_tree/node.rb#6233
    def call(parent); end
  end
end

# source://syntax_tree//lib/syntax_tree.rb#57
SyntaxTree::DEFAULT_INDENTATION = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree.rb#49
SyntaxTree::DEFAULT_PRINT_WIDTH = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree.rb#53
SyntaxTree::DEFAULT_RUBY_VERSION = T.let(T.unsafe(nil), SyntaxTree::Formatter::SemanticVersion)

# source://syntax_tree//lib/syntax_tree/dsl.rb#5
module SyntaxTree::DSL
  # source://syntax_tree//lib/syntax_tree/dsl.rb#40
  def ARef(collection, index); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#45
  def ARefField(collection, index); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#35
  def AliasNode(left, right); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#64
  def ArgBlock(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#54
  def ArgParen(arguments); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#69
  def ArgStar(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#59
  def Args(parts); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#74
  def ArgsForward; end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#79
  def ArrayLiteral(lbracket, contents); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#88
  def AryPtn(constant, requireds, rest, posts); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#99
  def Assign(target, value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#104
  def Assoc(key, value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#109
  def AssocSplat(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#7
  def BEGINBlock(lbrace, statements); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#114
  def Backref(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#119
  def Backtick(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#124
  def BareAssocHash(assocs); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#129
  def Begin(bodystmt); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#139
  def Binary(left, operator, right); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#154
  def BlockArg(name); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#317
  def BlockNode(opening, block_var, bodystmt); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#149
  def BlockVar(params, locals); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#159
  def BodyStmt(statements, rescue_clause, else_keyword, else_clause, ensure_clause); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#177
  def Break(arguments); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#16
  def CHAR(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#288
  def CVar(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#182
  def CallNode(receiver, operator, message, arguments); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#193
  def Case(keyword, value, consequent); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#213
  def ClassDeclaration(constant, superclass, bodystmt, location = T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#228
  def Comma(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#233
  def Command(message, arguments, block, location = T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#243
  def CommandCall(receiver, operator, message, arguments, block); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#255
  def Comment(value, inline, location = T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#260
  def Const(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#265
  def ConstPathField(parent, constant); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#274
  def ConstPathRef(parent, constant); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#283
  def ConstRef(constant); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#293
  def DefNode(target, operator, name, params, bodystmt, location = T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#312
  def Defined(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#337
  def DynaSymbol(parts, quote); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#21
  def ENDBlock(lbrace, statements); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#342
  def Else(keyword, statements); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#351
  def Elsif(predicate, statements, consequent); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#361
  def EmbDoc(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#366
  def EmbExprBeg(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#371
  def EmbExprEnd(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#376
  def EmbVar(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#30
  def EndContent(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#381
  def Ensure(keyword, statements); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#390
  def ExcessedComma(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#395
  def Field(parent, operator, name); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#405
  def FloatLiteral(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#410
  def FndPtn(constant, left, values, right); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#421
  def For(index, collection, statements); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#431
  def GVar(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#436
  def HashLiteral(lbrace, assocs); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#445
  def Heredoc(beginning, ending, dedent, parts); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#456
  def HeredocBeg(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#461
  def HeredocEnd(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#466
  def HshPtn(constant, keywords, keyword_rest); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#521
  def IVar(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#476
  def Ident(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#481
  def IfNode(predicate, statements, consequent); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#491
  def IfOp(predicate, truthy, falsy); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#501
  def Imaginary(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#506
  def In(pattern, statements, consequent); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#516
  def Int(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#526
  def Kw(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#531
  def KwRestParam(name); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#560
  def LBrace(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#565
  def LBracket(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#570
  def LParen(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#536
  def Label(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#541
  def LabelEnd(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#546
  def Lambda(params, statements); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#555
  def LambdaVar(params, locals); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#575
  def MAssign(target, value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#585
  def MLHS(parts, comma); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#590
  def MLHSParen(contents, comma); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#608
  def MRHS(parts); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#580
  def MethodAddBlock(call, block, location = T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#599
  def ModuleDeclaration(constant, bodystmt); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#613
  def Next(arguments); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#892
  def Not(statement, parentheses); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#618
  def Op(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#623
  def OpAssign(target, operator, value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#633
  def Params(requireds, optionals, rest, posts, keywords, keyword_rest, block); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#647
  def Paren(lparen, contents); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#652
  def Period(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#134
  def PinnedBegin(statement); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#944
  def PinnedVarRef(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#657
  def Program(statements); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#662
  def QSymbols(beginning, elements); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#671
  def QSymbolsBeg(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#676
  def QWords(beginning, elements); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#685
  def QWordsBeg(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#203
  def RAssign(value, operator, pattern); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#695
  def RBrace(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#700
  def RBracket(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#783
  def RParen(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#327
  def RangeNode(left, operator, right); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#690
  def RationalLiteral(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#705
  def Redo; end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#719
  def RegexpBeg(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#710
  def RegexpContent(beginning, parts); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#724
  def RegexpEnd(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#729
  def RegexpLiteral(beginning, ending, parts); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#748
  def Rescue(keyword, exception, statements, consequent); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#739
  def RescueEx(exceptions, variable); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#759
  def RescueMod(statement, value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#768
  def RestParam(name); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#773
  def Retry; end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#778
  def ReturnNode(arguments); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#788
  def SClass(target, bodystmt); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#793
  def Statements(body); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#803
  def StringConcat(left, right); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#798
  def StringContent(parts); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#808
  def StringDVar(variable); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#813
  def StringEmbExpr(statements); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#818
  def StringLiteral(parts, quote); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#823
  def Super(arguments); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#828
  def SymBeg(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#833
  def SymbolContent(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#838
  def SymbolLiteral(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#843
  def Symbols(beginning, elements); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#852
  def SymbolsBeg(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#862
  def TLamBeg(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#857
  def TLambda(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#877
  def TStringBeg(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#882
  def TStringContent(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#887
  def TStringEnd(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#867
  def TopConstField(constant); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#872
  def TopConstRef(constant); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#901
  def Unary(operator, statement); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#910
  def Undef(symbols); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#915
  def UnlessNode(predicate, statements, consequent); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#925
  def UntilNode(predicate, statements); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#949
  def VCall(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#934
  def VarField(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#939
  def VarRef(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#954
  def VoidStmt; end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#959
  def When(arguments, statements, consequent); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#969
  def WhileNode(predicate, statements); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#978
  def Word(parts); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#983
  def Words(beginning, elements); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#992
  def WordsBeg(value); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#997
  def XString(parts); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#1002
  def XStringLiteral(parts); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#1007
  def YieldNode(arguments); end

  # source://syntax_tree//lib/syntax_tree/dsl.rb#1012
  def ZSuper; end
end

# source://syntax_tree//lib/syntax_tree/database.rb#6
module SyntaxTree::Database; end

# source://syntax_tree//lib/syntax_tree/database.rb#99
class SyntaxTree::Database::AttrQuery
  # source://syntax_tree//lib/syntax_tree/database.rb#102
  def initialize(type, attrs); end

  # source://syntax_tree//lib/syntax_tree/database.rb#100
  def attrs; end

  # source://syntax_tree//lib/syntax_tree/database.rb#107
  def each(database, &block); end

  # source://syntax_tree//lib/syntax_tree/database.rb#100
  def type; end
end

# source://syntax_tree//lib/syntax_tree/database.rb#276
class SyntaxTree::Database::Connection
  # source://syntax_tree//lib/syntax_tree/database.rb#279
  def initialize(raw_connection); end

  # source://syntax_tree//lib/syntax_tree/database.rb#283
  def execute(query, binds = T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/database.rb#287
  def index_file(filepath); end

  # source://syntax_tree//lib/syntax_tree/database.rb#292
  def last_insert_row_id; end

  # source://syntax_tree//lib/syntax_tree/database.rb#296
  def prepare; end

  # source://syntax_tree//lib/syntax_tree/database.rb#277
  def raw_connection; end

  # source://syntax_tree//lib/syntax_tree/database.rb#326
  def search(query); end
end

# source://syntax_tree//lib/syntax_tree/database.rb#7
class SyntaxTree::Database::IndexingVisitor < ::SyntaxTree::FieldVisitor
  # source://syntax_tree//lib/syntax_tree/database.rb#10
  def initialize(database, filepath); end

  # source://syntax_tree//lib/syntax_tree/database.rb#8
  def database; end

  # source://syntax_tree//lib/syntax_tree/database.rb#8
  def filepath; end

  # source://syntax_tree//lib/syntax_tree/database.rb#8
  def node_id; end

  private

  # source://syntax_tree//lib/syntax_tree/database.rb#18
  def comments(node); end

  # source://syntax_tree//lib/syntax_tree/database.rb#21
  def field(name, value); end

  # source://syntax_tree//lib/syntax_tree/database.rb#31
  def list(name, values); end

  # source://syntax_tree//lib/syntax_tree/database.rb#41
  def node(node, _name); end

  # source://syntax_tree//lib/syntax_tree/database.rb#67
  def pairs(name, values); end

  # source://syntax_tree//lib/syntax_tree/database.rb#64
  def text(name, value); end
end

# source://syntax_tree//lib/syntax_tree/database.rb#136
class SyntaxTree::Database::OrQuery
  # source://syntax_tree//lib/syntax_tree/database.rb#139
  def initialize(left, right); end

  # source://syntax_tree//lib/syntax_tree/database.rb#144
  def each(database, &block); end

  # source://syntax_tree//lib/syntax_tree/database.rb#137
  def left; end

  # source://syntax_tree//lib/syntax_tree/database.rb#137
  def right; end
end

# source://syntax_tree//lib/syntax_tree/database.rb#166
class SyntaxTree::Database::Pattern
  # source://syntax_tree//lib/syntax_tree/database.rb#172
  def initialize(query); end

  # source://syntax_tree//lib/syntax_tree/database.rb#176
  def compile; end

  # source://syntax_tree//lib/syntax_tree/database.rb#170
  def query; end

  private

  # source://syntax_tree//lib/syntax_tree/database.rb#195
  def combine_or(left, right); end

  # source://syntax_tree//lib/syntax_tree/database.rb#200
  def compile_binary(node); end

  # source://syntax_tree//lib/syntax_tree/database.rb#207
  def compile_const(node); end

  # source://syntax_tree//lib/syntax_tree/database.rb#219
  def compile_const_path_ref(node); end

  # source://syntax_tree//lib/syntax_tree/database.rb#189
  def compile_error(node); end

  # source://syntax_tree//lib/syntax_tree/database.rb#234
  def compile_hshptn(node); end

  # source://syntax_tree//lib/syntax_tree/database.rb#258
  def compile_node(node); end

  # source://syntax_tree//lib/syntax_tree/database.rb#248
  def compile_var_ref(node); end
end

# source://syntax_tree//lib/syntax_tree/database.rb#167
class SyntaxTree::Database::Pattern::CompilationError < ::StandardError; end

# source://syntax_tree//lib/syntax_tree/database.rb#151
class SyntaxTree::Database::QueryResult
  # source://syntax_tree//lib/syntax_tree/database.rb#154
  def initialize(database, query); end

  # source://syntax_tree//lib/syntax_tree/database.rb#152
  def database; end

  # source://syntax_tree//lib/syntax_tree/database.rb#159
  def each(&block); end

  # source://syntax_tree//lib/syntax_tree/database.rb#152
  def query; end
end

# source://syntax_tree//lib/syntax_tree/database.rb#85
class SyntaxTree::Database::TypeQuery
  # source://syntax_tree//lib/syntax_tree/database.rb#88
  def initialize(type); end

  # source://syntax_tree//lib/syntax_tree/database.rb#92
  def each(database, &block); end

  # source://syntax_tree//lib/syntax_tree/database.rb#86
  def type; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#4098
class SyntaxTree::DefNode < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#4117
  def initialize(target:, operator:, name:, params:, bodystmt:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4217
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4127
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4230
  def arity; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4112
  def bodystmt; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4131
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4115
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4135
  def copy(target: T.unsafe(nil), operator: T.unsafe(nil), name: T.unsafe(nil), params: T.unsafe(nil), bodystmt: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4131
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4159
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4226
  def endless?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4171
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4106
  def name; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4103
  def operator; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4109
  def params; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4100
  def target; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#4249
class SyntaxTree::Defined < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#4256
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4299
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4262
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4266
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4254
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4270
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4266
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4283
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4287
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4251
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#4663
class SyntaxTree::DynaSymbol < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#4674
  def initialize(parts:, quote:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4736
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4681
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4685
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4672
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4689
  def copy(parts: T.unsafe(nil), quote: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4685
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4703
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4707
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4666
  def parts; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4669
  def quote; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#4746
  def quotes(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#310
class SyntaxTree::ENDBlock < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#320
  def initialize(lbrace:, statements:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#371
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#327
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#331
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#318
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#335
  def copy(lbrace: T.unsafe(nil), statements: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#331
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#349
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#358
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#312
  def lbrace; end

  # source://syntax_tree//lib/syntax_tree/node.rb#315
  def statements; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#4792
class SyntaxTree::Else < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#4802
  def initialize(keyword:, statements:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4853
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4809
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4813
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4800
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4817
  def copy(keyword: T.unsafe(nil), statements: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4813
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4831
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4840
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4794
  def keyword; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4797
  def statements; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#4865
class SyntaxTree::Elsif < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#4878
  def initialize(predicate:, statements:, consequent:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4942
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4886
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4890
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4876
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4873
  def consequent; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4894
  def copy(predicate: T.unsafe(nil), statements: T.unsafe(nil), consequent: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4890
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4909
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4919
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4867
  def predicate; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4870
  def statements; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#4955
class SyntaxTree::EmbDoc < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#4959
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5027
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4995
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4999
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4991
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5003
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4999
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5012
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5016
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4987
  def ignore?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4983
  def inline?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4967
  def leading!; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4971
  def leading?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4975
  def trailing!; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4979
  def trailing?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4957
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#5038
class SyntaxTree::EmbExprBeg < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#5042
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5068
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5047
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5051
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5055
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5051
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5064
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5040
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#5079
class SyntaxTree::EmbExprEnd < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#5083
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5109
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5088
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5092
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5096
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5092
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5105
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5081
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#5122
class SyntaxTree::EmbVar < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#5126
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5152
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5131
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5135
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5139
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5135
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5148
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5124
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#386
class SyntaxTree::EndContent < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#393
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#442
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#399
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#403
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#391
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#407
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#403
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#420
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#424
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#388
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#5164
class SyntaxTree::Ensure < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#5174
  def initialize(keyword:, statements:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5223
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5181
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5185
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5172
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5189
  def copy(keyword: T.unsafe(nil), statements: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5185
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5203
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5212
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5166
  def keyword; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5169
  def statements; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#5239
class SyntaxTree::ExcessedComma < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#5246
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5281
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5252
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5256
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5244
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5260
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5256
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5273
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5277
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5241
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#5291
class SyntaxTree::Field < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#5304
  def initialize(parent:, operator:, name:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5354
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5312
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5316
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5302
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5321
  def copy(parent: T.unsafe(nil), operator: T.unsafe(nil), name: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5316
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5336
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5346
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5299
  def name; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5296
  def operator; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5293
  def parent; end
end

# source://syntax_tree//lib/syntax_tree/field_visitor.rb#50
class SyntaxTree::FieldVisitor < ::SyntaxTree::BasicVisitor
  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#163
  def visit_BEGIN(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#245
  def visit_CHAR(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#342
  def visit_END(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#1018
  def visit___end__(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#68
  def visit_alias(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#52
  def visit_aref(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#60
  def visit_aref_field(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#76
  def visit_arg_block(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#83
  def visit_arg_paren(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#90
  def visit_arg_star(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#97
  def visit_args(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#104
  def visit_args_forward(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#108
  def visit_array(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#115
  def visit_aryptn(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#125
  def visit_assign(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#133
  def visit_assoc(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#141
  def visit_assoc_splat(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#148
  def visit_backref(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#152
  def visit_backtick(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#156
  def visit_bare_assoc_hash(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#170
  def visit_begin(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#177
  def visit_binary(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#186
  def visit_block(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#201
  def visit_block_var(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#194
  def visit_blockarg(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#209
  def visit_bodystmt(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#219
  def visit_break(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#226
  def visit_call(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#236
  def visit_case(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#249
  def visit_class(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#258
  def visit_comma(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#262
  def visit_command(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#271
  def visit_command_call(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#282
  def visit_comment(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#286
  def visit_const(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#290
  def visit_const_path_field(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#298
  def visit_const_path_ref(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#306
  def visit_const_ref(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#313
  def visit_cvar(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#317
  def visit_def(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#328
  def visit_defined(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#335
  def visit_dyna_symbol(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#349
  def visit_else(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#356
  def visit_elsif(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#365
  def visit_embdoc(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#369
  def visit_embexpr_beg(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#373
  def visit_embexpr_end(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#377
  def visit_embvar(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#381
  def visit_ensure(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#388
  def visit_excessed_comma(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#392
  def visit_field(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#401
  def visit_float(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#405
  def visit_fndptn(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#415
  def visit_for(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#424
  def visit_gvar(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#428
  def visit_hash(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#435
  def visit_heredoc(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#442
  def visit_heredoc_beg(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#446
  def visit_heredoc_end(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#450
  def visit_hshptn(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#459
  def visit_ident(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#463
  def visit_if(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#472
  def visit_if_op(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#481
  def visit_imaginary(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#485
  def visit_in(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#494
  def visit_int(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#498
  def visit_ivar(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#502
  def visit_kw(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#506
  def visit_kwrest_param(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#513
  def visit_label(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#517
  def visit_label_end(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#521
  def visit_lambda(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#529
  def visit_lambda_var(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#537
  def visit_lbrace(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#541
  def visit_lbracket(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#545
  def visit_lparen(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#549
  def visit_massign(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#557
  def visit_method_add_block(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#565
  def visit_mlhs(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#572
  def visit_mlhs_paren(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#579
  def visit_module(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#587
  def visit_mrhs(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#594
  def visit_next(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#601
  def visit_not(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#608
  def visit_op(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#612
  def visit_opassign(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#621
  def visit_params(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#634
  def visit_paren(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#641
  def visit_period(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#645
  def visit_pinned_begin(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#652
  def visit_pinned_var_ref(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#659
  def visit_program(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#666
  def visit_qsymbols(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#673
  def visit_qsymbols_beg(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#677
  def visit_qwords(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#684
  def visit_qwords_beg(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#688
  def visit_range(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#697
  def visit_rassign(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#706
  def visit_rational(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#710
  def visit_rbrace(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#714
  def visit_rbracket(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#718
  def visit_redo(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#722
  def visit_regexp_beg(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#726
  def visit_regexp_content(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#730
  def visit_regexp_end(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#734
  def visit_regexp_literal(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#742
  def visit_rescue(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#751
  def visit_rescue_ex(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#759
  def visit_rescue_mod(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#767
  def visit_rest_param(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#774
  def visit_retry(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#778
  def visit_return(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#785
  def visit_rparen(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#789
  def visit_sclass(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#797
  def visit_statements(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#804
  def visit_string_concat(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#812
  def visit_string_content(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#816
  def visit_string_dvar(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#823
  def visit_string_embexpr(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#830
  def visit_string_literal(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#837
  def visit_super(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#844
  def visit_symbeg(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#848
  def visit_symbol_content(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#852
  def visit_symbol_literal(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#859
  def visit_symbols(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#866
  def visit_symbols_beg(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#870
  def visit_tlambda(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#874
  def visit_tlambeg(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#878
  def visit_top_const_field(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#885
  def visit_top_const_ref(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#892
  def visit_tstring_beg(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#896
  def visit_tstring_content(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#900
  def visit_tstring_end(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#904
  def visit_unary(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#912
  def visit_undef(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#919
  def visit_unless(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#928
  def visit_until(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#936
  def visit_var_field(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#943
  def visit_var_ref(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#950
  def visit_vcall(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#957
  def visit_void_stmt(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#961
  def visit_when(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#970
  def visit_while(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#978
  def visit_word(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#985
  def visit_words(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#992
  def visit_words_beg(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#996
  def visit_xstring(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#1000
  def visit_xstring_literal(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#1007
  def visit_yield(node); end

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#1014
  def visit_zsuper(node); end

  private

  # source://syntax_tree//lib/syntax_tree/field_visitor.rb#1025
  def visit_token(node, type); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#5364
class SyntaxTree::FloatLiteral < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#5371
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5406
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5377
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5381
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5369
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5385
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5381
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5398
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5402
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5366
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#2438
class SyntaxTree::FlowControlFormatter
  # source://syntax_tree//lib/syntax_tree/node.rb#2445
  def initialize(keyword, node); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2450
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2440
  def keyword; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2443
  def node; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#2599
  def format_arguments(q, opening, closing); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2589
  def format_array_contents(q, array); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2609
  def skip_parens?(node); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#5418
class SyntaxTree::FndPtn < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#5435
  def initialize(constant:, left:, values:, right:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5504
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5444
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5448
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5433
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5420
  def constant; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5452
  def copy(constant: T.unsafe(nil), left: T.unsafe(nil), values: T.unsafe(nil), right: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5448
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5468
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5479
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5423
  def left; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5430
  def right; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5427
  def values; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#5516
class SyntaxTree::For < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#5530
  def initialize(index:, collection:, statements:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5590
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5538
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5542
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5522
  def collection; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5528
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5546
  def copy(index: T.unsafe(nil), collection: T.unsafe(nil), statements: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5542
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5561
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5571
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5519
  def index; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5525
  def statements; end
end

# source://syntax_tree//lib/syntax_tree/formatter.rb#6
class SyntaxTree::Formatter < ::PrettierPrint
  # source://syntax_tree//lib/syntax_tree/formatter.rb#95
  def initialize(source, *args, options: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/formatter.rb#87
  def disable_auto_ternary; end

  # source://syntax_tree//lib/syntax_tree/formatter.rb#87
  def disable_auto_ternary?; end

  # source://syntax_tree//lib/syntax_tree/formatter.rb#115
  def format(node, stackable: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/formatter.rb#175
  def format_each(nodes); end

  # source://syntax_tree//lib/syntax_tree/formatter.rb#179
  def grandparent; end

  # source://syntax_tree//lib/syntax_tree/formatter.rb#194
  def group; end

  # source://syntax_tree//lib/syntax_tree/formatter.rb#183
  def parent; end

  # source://syntax_tree//lib/syntax_tree/formatter.rb#187
  def parents; end

  # source://syntax_tree//lib/syntax_tree/formatter.rb#87
  def quote; end

  # source://syntax_tree//lib/syntax_tree/formatter.rb#208
  def seplist(list, sep = T.unsafe(nil), iter_method = T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/formatter.rb#83
  def source; end

  # source://syntax_tree//lib/syntax_tree/formatter.rb#83
  def stack; end

  # source://syntax_tree//lib/syntax_tree/formatter.rb#87
  def target_ruby_version; end

  # source://syntax_tree//lib/syntax_tree/formatter.rb#224
  def text(string); end

  # source://syntax_tree//lib/syntax_tree/formatter.rb#87
  def trailing_comma; end

  # source://syntax_tree//lib/syntax_tree/formatter.rb#87
  def trailing_comma?; end

  class << self
    # source://syntax_tree//lib/syntax_tree/formatter.rb#108
    def format(source, node, base_indentation = T.unsafe(nil)); end
  end
end

# source://syntax_tree//lib/syntax_tree/formatter.rb#80
SyntaxTree::Formatter::COMMENT_PRIORITY = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/formatter.rb#81
SyntaxTree::Formatter::HEREDOC_PRIORITY = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/formatter.rb#23
class SyntaxTree::Formatter::Options
  # source://syntax_tree//lib/syntax_tree/formatter.rb#29
  def initialize(quote: T.unsafe(nil), trailing_comma: T.unsafe(nil), disable_auto_ternary: T.unsafe(nil), target_ruby_version: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/formatter.rb#24
  def disable_auto_ternary; end

  # source://syntax_tree//lib/syntax_tree/formatter.rb#24
  def quote; end

  # source://syntax_tree//lib/syntax_tree/formatter.rb#24
  def target_ruby_version; end

  # source://syntax_tree//lib/syntax_tree/formatter.rb#24
  def trailing_comma; end
end

# source://syntax_tree//lib/syntax_tree/formatter.rb#10
class SyntaxTree::Formatter::SemanticVersion < ::Gem::Version
  # source://syntax_tree//lib/syntax_tree/formatter.rb#11
  def initialize(version); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#5600
class SyntaxTree::GVar < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#5607
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5642
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5613
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5617
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5605
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5621
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5617
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5634
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5638
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5602
  def value; end
end

# source://syntax_tree//lib/syntax_tree.rb#43
SyntaxTree::HANDLERS = T.let(T.unsafe(nil), Hash)

# source://syntax_tree//lib/syntax_tree/node.rb#1728
module SyntaxTree::HashKeyFormatter
  class << self
    # source://syntax_tree//lib/syntax_tree/node.rb#1786
    def for(container); end
  end
end

# source://syntax_tree//lib/syntax_tree/node.rb#1775
class SyntaxTree::HashKeyFormatter::Identity
  # source://syntax_tree//lib/syntax_tree/node.rb#1776
  def format_key(q, key); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#1730
class SyntaxTree::HashKeyFormatter::Labels
  # source://syntax_tree//lib/syntax_tree/node.rb#1733
  def format_key(q, key); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#1731
SyntaxTree::HashKeyFormatter::Labels::LABEL = T.let(T.unsafe(nil), Regexp)

# source://syntax_tree//lib/syntax_tree/node.rb#1756
class SyntaxTree::HashKeyFormatter::Rockets
  # source://syntax_tree//lib/syntax_tree/node.rb#1757
  def format_key(q, key); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#5651
class SyntaxTree::HashLiteral < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#5687
  def initialize(lbrace:, assocs:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5728
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5694
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5682
  def assocs; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5698
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5685
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5702
  def copy(lbrace: T.unsafe(nil), assocs: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5698
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5716
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5720
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5733
  def format_key(q, key); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5679
  def lbrace; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#5741
  def empty_with_comments?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5745
  def format_contents(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#5655
class SyntaxTree::HashLiteral::EmptyWithCommentsFormatter
  # source://syntax_tree//lib/syntax_tree/node.rb#5659
  def initialize(lbrace); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5663
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5657
  def lbrace; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#5774
class SyntaxTree::Heredoc < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#5791
  def initialize(beginning:, location:, ending: T.unsafe(nil), dedent: T.unsafe(nil), parts: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5873
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5800
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5776
  def beginning; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5804
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5789
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5808
  def copy(beginning: T.unsafe(nil), location: T.unsafe(nil), ending: T.unsafe(nil), parts: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5804
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5823
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5782
  def dedent; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5779
  def ending; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5838
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5786
  def parts; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#5835
SyntaxTree::Heredoc::SEPARATOR = T.let(T.unsafe(nil), PrettierPrint::Breakable)

# source://syntax_tree//lib/syntax_tree/node.rb#5886
class SyntaxTree::HeredocBeg < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#5893
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5928
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5899
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5903
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5891
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5907
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5903
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5920
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5924
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5888
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#5940
class SyntaxTree::HeredocEnd < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#5947
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5982
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5953
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5957
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5945
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5961
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5957
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5974
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5978
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5942
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#5994
class SyntaxTree::HshPtn < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#6054
  def initialize(constant:, keywords:, keyword_rest:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6147
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6062
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6066
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6052
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6042
  def constant; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6070
  def copy(constant: T.unsafe(nil), keywords: T.unsafe(nil), keyword_rest: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6066
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6085
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6095
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6049
  def keyword_rest; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6046
  def keywords; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#6158
  def format_contents(q, parts, nested); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#5996
class SyntaxTree::HshPtn::KeywordFormatter
  # source://syntax_tree//lib/syntax_tree/node.rb#6003
  def initialize(key, value); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6008
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6012
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5998
  def key; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6001
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#6023
class SyntaxTree::HshPtn::KeywordRestFormatter
  # source://syntax_tree//lib/syntax_tree/node.rb#6027
  def initialize(keyword_rest); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6031
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6035
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6025
  def keyword_rest; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#6878
class SyntaxTree::IVar < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#6885
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6920
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6891
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6895
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6883
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6899
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6895
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6912
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6916
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6880
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#6181
class SyntaxTree::Ident < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#6188
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6223
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6194
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6198
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6186
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6202
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6198
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6215
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6219
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6183
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#6471
class SyntaxTree::IfNode < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#6484
  def initialize(predicate:, statements:, consequent:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6529
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6492
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6496
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6482
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6479
  def consequent; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6500
  def copy(predicate: T.unsafe(nil), statements: T.unsafe(nil), consequent: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6496
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6515
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6525
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6535
  def modifier?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6473
  def predicate; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6476
  def statements; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#6544
class SyntaxTree::IfOp < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#6557
  def initialize(predicate:, truthy:, falsy:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6631
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6565
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6569
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6555
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6573
  def copy(predicate: T.unsafe(nil), truthy: T.unsafe(nil), falsy: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6569
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6588
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6552
  def falsy; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6598
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6546
  def predicate; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6549
  def truthy; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#6638
  def format_break(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6661
  def format_flat(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#6680
class SyntaxTree::Imaginary < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#6687
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6722
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6693
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6697
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6685
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6701
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6697
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6714
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6718
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6682
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#6734
class SyntaxTree::In < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#6747
  def initialize(pattern:, statements:, consequent:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6812
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6755
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6759
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6745
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6742
  def consequent; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6763
  def copy(pattern: T.unsafe(nil), statements: T.unsafe(nil), consequent: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6759
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6778
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6788
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6736
  def pattern; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6739
  def statements; end
end

# source://syntax_tree//lib/syntax_tree/index.rb#10
module SyntaxTree::Index
  class << self
    # source://syntax_tree//lib/syntax_tree/index.rb#674
    def index(source, backend: T.unsafe(nil)); end

    # source://syntax_tree//lib/syntax_tree/index.rb#679
    def index_file(filepath, backend: T.unsafe(nil)); end
  end
end

# source://syntax_tree//lib/syntax_tree/index.rb#85
class SyntaxTree::Index::AliasMethodDefinition
  # source://syntax_tree//lib/syntax_tree/index.rb#88
  def initialize(nesting, name, location, comments); end

  # source://syntax_tree//lib/syntax_tree/index.rb#86
  def comments; end

  # source://syntax_tree//lib/syntax_tree/index.rb#86
  def location; end

  # source://syntax_tree//lib/syntax_tree/index.rb#86
  def name; end

  # source://syntax_tree//lib/syntax_tree/index.rb#86
  def nesting; end
end

# source://syntax_tree//lib/syntax_tree/index.rb#22
class SyntaxTree::Index::ClassDefinition
  # source://syntax_tree//lib/syntax_tree/index.rb#25
  def initialize(nesting, name, superclass, location, comments); end

  # source://syntax_tree//lib/syntax_tree/index.rb#23
  def comments; end

  # source://syntax_tree//lib/syntax_tree/index.rb#23
  def location; end

  # source://syntax_tree//lib/syntax_tree/index.rb#23
  def name; end

  # source://syntax_tree//lib/syntax_tree/index.rb#23
  def nesting; end

  # source://syntax_tree//lib/syntax_tree/index.rb#23
  def superclass; end
end

# source://syntax_tree//lib/syntax_tree/index.rb#35
class SyntaxTree::Index::ConstantDefinition
  # source://syntax_tree//lib/syntax_tree/index.rb#38
  def initialize(nesting, name, location, comments); end

  # source://syntax_tree//lib/syntax_tree/index.rb#36
  def comments; end

  # source://syntax_tree//lib/syntax_tree/index.rb#36
  def location; end

  # source://syntax_tree//lib/syntax_tree/index.rb#36
  def name; end

  # source://syntax_tree//lib/syntax_tree/index.rb#36
  def nesting; end
end

# source://syntax_tree//lib/syntax_tree/index.rb#152
class SyntaxTree::Index::EntryComments
  include ::Enumerable

  # source://syntax_tree//lib/syntax_tree/index.rb#156
  def initialize(file_comments, location); end

  # source://syntax_tree//lib/syntax_tree/index.rb#161
  def each(&block); end

  # source://syntax_tree//lib/syntax_tree/index.rb#154
  def file_comments; end

  # source://syntax_tree//lib/syntax_tree/index.rb#154
  def location; end
end

# source://syntax_tree//lib/syntax_tree/index.rb#98
class SyntaxTree::Index::FileComments
  # source://syntax_tree//lib/syntax_tree/index.rb#139
  def initialize(source); end

  # source://syntax_tree//lib/syntax_tree/index.rb#143
  def comments; end

  # source://syntax_tree//lib/syntax_tree/index.rb#137
  def source; end
end

# source://syntax_tree//lib/syntax_tree/index.rb#115
class SyntaxTree::Index::FileComments::FileSource
  # source://syntax_tree//lib/syntax_tree/index.rb#118
  def initialize(filepath); end

  # source://syntax_tree//lib/syntax_tree/index.rb#116
  def filepath; end

  # source://syntax_tree//lib/syntax_tree/index.rb#122
  def source; end
end

# source://syntax_tree//lib/syntax_tree/index.rb#100
class SyntaxTree::Index::FileComments::Parser < ::Ripper
  # source://syntax_tree//lib/syntax_tree/index.rb#103
  def initialize(*_arg0); end

  # source://syntax_tree//lib/syntax_tree/index.rb#101
  def comments; end

  # source://syntax_tree//lib/syntax_tree/index.rb#108
  def on_comment(value); end
end

# source://syntax_tree//lib/syntax_tree/index.rb#129
class SyntaxTree::Index::FileComments::StringSource
  # source://syntax_tree//lib/syntax_tree/index.rb#132
  def initialize(source); end

  # source://syntax_tree//lib/syntax_tree/index.rb#130
  def source; end
end

# source://syntax_tree//lib/syntax_tree/index.rb#670
SyntaxTree::Index::INDEX_BACKEND = SyntaxTree::Index::ISeqBackend

# source://syntax_tree//lib/syntax_tree/index.rb#177
class SyntaxTree::Index::ISeqBackend
  # source://syntax_tree//lib/syntax_tree/index.rb#184
  def index(source); end

  # source://syntax_tree//lib/syntax_tree/index.rb#191
  def index_file(filepath); end

  private

  # source://syntax_tree//lib/syntax_tree/index.rb#242
  def find_attr_arguments(insns, index); end

  # source://syntax_tree//lib/syntax_tree/index.rb#205
  def find_constant_path(insns, index); end

  # source://syntax_tree//lib/syntax_tree/index.rb#273
  def index_iseq(iseq, file_comments); end

  # source://syntax_tree//lib/syntax_tree/index.rb#200
  def location_for(iseq); end

  # source://syntax_tree//lib/syntax_tree/index.rb#258
  def method_definition(nesting, name, location, file_comments); end
end

# source://syntax_tree//lib/syntax_tree/index.rb#182
SyntaxTree::Index::ISeqBackend::VM_DEFINECLASS_FLAG_HAS_SUPERCLASS = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/index.rb#181
SyntaxTree::Index::ISeqBackend::VM_DEFINECLASS_FLAG_SCOPED = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/index.rb#178
SyntaxTree::Index::ISeqBackend::VM_DEFINECLASS_TYPE_CLASS = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/index.rb#180
SyntaxTree::Index::ISeqBackend::VM_DEFINECLASS_TYPE_MODULE = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/index.rb#179
SyntaxTree::Index::ISeqBackend::VM_DEFINECLASS_TYPE_SINGLETON_CLASS = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/index.rb#12
class SyntaxTree::Index::Location
  # source://syntax_tree//lib/syntax_tree/index.rb#15
  def initialize(line, column); end

  # source://syntax_tree//lib/syntax_tree/index.rb#13
  def column; end

  # source://syntax_tree//lib/syntax_tree/index.rb#13
  def line; end
end

# source://syntax_tree//lib/syntax_tree/index.rb#59
class SyntaxTree::Index::MethodDefinition
  # source://syntax_tree//lib/syntax_tree/index.rb#62
  def initialize(nesting, name, location, comments); end

  # source://syntax_tree//lib/syntax_tree/index.rb#60
  def comments; end

  # source://syntax_tree//lib/syntax_tree/index.rb#60
  def location; end

  # source://syntax_tree//lib/syntax_tree/index.rb#60
  def name; end

  # source://syntax_tree//lib/syntax_tree/index.rb#60
  def nesting; end
end

# source://syntax_tree//lib/syntax_tree/index.rb#47
class SyntaxTree::Index::ModuleDefinition
  # source://syntax_tree//lib/syntax_tree/index.rb#50
  def initialize(nesting, name, location, comments); end

  # source://syntax_tree//lib/syntax_tree/index.rb#48
  def comments; end

  # source://syntax_tree//lib/syntax_tree/index.rb#48
  def location; end

  # source://syntax_tree//lib/syntax_tree/index.rb#48
  def name; end

  # source://syntax_tree//lib/syntax_tree/index.rb#48
  def nesting; end
end

# source://syntax_tree//lib/syntax_tree/index.rb#452
class SyntaxTree::Index::ParserBackend
  # source://syntax_tree//lib/syntax_tree/index.rb#659
  def index(source); end

  # source://syntax_tree//lib/syntax_tree/index.rb#663
  def index_file(filepath); end
end

# source://syntax_tree//lib/syntax_tree/index.rb#453
class SyntaxTree::Index::ParserBackend::ConstantNameVisitor < ::SyntaxTree::Visitor
  # source://syntax_tree//lib/syntax_tree/index.rb#458
  def visit_const_path_ref(node); end

  # source://syntax_tree//lib/syntax_tree/index.rb#454
  def visit_const_ref(node); end

  # source://syntax_tree//lib/syntax_tree/index.rb#462
  def visit_var_ref(node); end
end

# source://syntax_tree//lib/syntax_tree/index.rb#467
class SyntaxTree::Index::ParserBackend::IndexVisitor < ::SyntaxTree::Visitor
  # source://syntax_tree//lib/syntax_tree/index.rb#470
  def initialize; end

  # source://syntax_tree//lib/syntax_tree/index.rb#468
  def nesting; end

  # source://syntax_tree//lib/syntax_tree/index.rb#468
  def results; end

  # source://syntax_tree//lib/syntax_tree/index.rb#468
  def statements; end

  # source://syntax_tree//lib/syntax_tree/index.rb#477
  def visit_alias(node); end

  # source://syntax_tree//lib/syntax_tree/index.rb#496
  def visit_assign(node); end

  # source://syntax_tree//lib/syntax_tree/index.rb#515
  def visit_class(node); end

  # source://syntax_tree//lib/syntax_tree/index.rb#547
  def visit_command(node); end

  # source://syntax_tree//lib/syntax_tree/index.rb#584
  def visit_def(node); end

  # source://syntax_tree//lib/syntax_tree/index.rb#608
  def visit_module(node); end

  # source://syntax_tree//lib/syntax_tree/index.rb#626
  def visit_program(node); end

  # source://syntax_tree//lib/syntax_tree/index.rb#631
  def visit_statements(node); end

  private

  # source://syntax_tree//lib/syntax_tree/index.rb#639
  def comments_for(node); end
end

# source://syntax_tree//lib/syntax_tree/index.rb#72
class SyntaxTree::Index::SingletonMethodDefinition
  # source://syntax_tree//lib/syntax_tree/index.rb#75
  def initialize(nesting, name, location, comments); end

  # source://syntax_tree//lib/syntax_tree/index.rb#73
  def comments; end

  # source://syntax_tree//lib/syntax_tree/index.rb#73
  def location; end

  # source://syntax_tree//lib/syntax_tree/index.rb#73
  def name; end

  # source://syntax_tree//lib/syntax_tree/index.rb#73
  def nesting; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#6822
class SyntaxTree::Int < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#6829
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6869
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6835
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6839
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6827
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6843
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6839
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6853
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6857
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6824
  def value; end
end

# source://syntax_tree//lib/syntax_tree/json_visitor.rb#8
class SyntaxTree::JSONVisitor < ::SyntaxTree::FieldVisitor
  # source://syntax_tree//lib/syntax_tree/json_visitor.rb#11
  def initialize; end

  # source://syntax_tree//lib/syntax_tree/json_visitor.rb#9
  def target; end

  private

  # source://syntax_tree//lib/syntax_tree/json_visitor.rb#17
  def comments(node); end

  # source://syntax_tree//lib/syntax_tree/json_visitor.rb#21
  def field(name, value); end

  # source://syntax_tree//lib/syntax_tree/json_visitor.rb#25
  def list(name, values); end

  # source://syntax_tree//lib/syntax_tree/json_visitor.rb#29
  def node(node, type); end

  # source://syntax_tree//lib/syntax_tree/json_visitor.rb#38
  def pairs(name, values); end

  # source://syntax_tree//lib/syntax_tree/json_visitor.rb#42
  def text(name, value); end

  # source://syntax_tree//lib/syntax_tree/json_visitor.rb#46
  def visit_location(location); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#6938
class SyntaxTree::Kw < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#6948
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6981
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6955
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6959
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6946
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6963
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6959
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6973
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6977
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6943
  def name; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6940
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#6991
class SyntaxTree::KwRestParam < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#6998
  def initialize(name:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7034
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7004
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7008
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6996
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7012
  def copy(name: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7008
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7025
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7029
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6993
  def name; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#7316
class SyntaxTree::LBrace < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#7323
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7358
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7329
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7333
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7321
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7337
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7333
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7350
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7354
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7318
  def value; end

  class << self
    # source://syntax_tree//lib/syntax_tree/node.rb#7367
    def default; end
  end
end

# source://syntax_tree//lib/syntax_tree/node.rb#7373
class SyntaxTree::LBracket < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#7380
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7415
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7386
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7390
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7378
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7394
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7390
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7407
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7411
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7375
  def value; end

  class << self
    # source://syntax_tree//lib/syntax_tree/node.rb#7424
    def default; end
  end
end

# source://syntax_tree//lib/syntax_tree/node.rb#7430
class SyntaxTree::LParen < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#7437
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7472
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7443
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7447
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7435
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7451
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7447
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7464
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7468
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7432
  def value; end

  class << self
    # source://syntax_tree//lib/syntax_tree/node.rb#7481
    def default; end
  end
end

# source://syntax_tree//lib/syntax_tree/node.rb#7052
class SyntaxTree::Label < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#7059
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7094
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7065
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7069
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7057
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7073
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7069
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7086
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7090
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7054
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#7106
class SyntaxTree::LabelEnd < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#7110
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7136
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7115
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7119
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7123
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7119
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7132
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7108
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#7145
class SyntaxTree::Lambda < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#7155
  def initialize(params:, statements:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7239
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7162
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7166
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7153
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7170
  def copy(params: T.unsafe(nil), statements: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7166
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7184
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7193
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7147
  def params; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7150
  def statements; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#7253
class SyntaxTree::LambdaVar < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#7263
  def initialize(params:, locals:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7309
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7270
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7274
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7261
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7278
  def copy(params: T.unsafe(nil), locals: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7274
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7292
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7296
  def empty?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7300
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7258
  def locals; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7255
  def params; end
end

# source://syntax_tree//lib/syntax_tree/language_server.rb#14
class SyntaxTree::LanguageServer
  # source://syntax_tree//lib/syntax_tree/language_server.rb#217
  def initialize(input: T.unsafe(nil), output: T.unsafe(nil), print_width: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/language_server.rb#215
  def input; end

  # source://syntax_tree//lib/syntax_tree/language_server.rb#215
  def output; end

  # source://syntax_tree//lib/syntax_tree/language_server.rb#215
  def print_width; end

  # source://syntax_tree//lib/syntax_tree/language_server.rb#228
  def run; end

  private

  # source://syntax_tree//lib/syntax_tree/language_server.rb#280
  def capabilities; end

  # source://syntax_tree//lib/syntax_tree/language_server.rb#293
  def format(source, extension); end

  # source://syntax_tree//lib/syntax_tree/language_server.rb#317
  def inlay_hints(source); end

  # source://syntax_tree//lib/syntax_tree/language_server.rb#333
  def log(message); end

  # source://syntax_tree//lib/syntax_tree/language_server.rb#327
  def write(value); end
end

# source://syntax_tree//lib/syntax_tree/language_server.rb#18
class SyntaxTree::LanguageServer::InlayHints < ::SyntaxTree::Visitor
  # source://syntax_tree//lib/syntax_tree/language_server.rb#43
  def initialize; end

  # source://syntax_tree//lib/syntax_tree/language_server.rb#41
  def hints; end

  # source://syntax_tree//lib/syntax_tree/language_server.rb#41
  def stack; end

  # source://syntax_tree//lib/syntax_tree/language_server.rb#48
  def visit(node); end

  # source://syntax_tree//lib/syntax_tree/language_server.rb#67
  def visit_assign(node); end

  # source://syntax_tree//lib/syntax_tree/language_server.rb#81
  def visit_binary(node); end

  # source://syntax_tree//lib/syntax_tree/language_server.rb#102
  def visit_if_op(node); end

  # source://syntax_tree//lib/syntax_tree/language_server.rb#124
  def visit_rescue(node); end

  # source://syntax_tree//lib/syntax_tree/language_server.rb#145
  def visit_unary(node); end

  private

  # source://syntax_tree//lib/syntax_tree/language_server.rb#156
  def parentheses(location); end
end

# source://syntax_tree//lib/syntax_tree/language_server.rb#20
class SyntaxTree::LanguageServer::InlayHints::Hint
  # source://syntax_tree//lib/syntax_tree/language_server.rb#23
  def initialize(line:, character:, label:); end

  # source://syntax_tree//lib/syntax_tree/language_server.rb#21
  def character; end

  # source://syntax_tree//lib/syntax_tree/language_server.rb#21
  def label; end

  # source://syntax_tree//lib/syntax_tree/language_server.rb#21
  def line; end

  # source://syntax_tree//lib/syntax_tree/language_server.rb#30
  def to_json(*opts); end
end

# source://syntax_tree//lib/syntax_tree/language_server.rb#174
module SyntaxTree::LanguageServer::Request
  class << self
    # source://syntax_tree//lib/syntax_tree/language_server.rb#203
    def [](value); end
  end
end

# source://syntax_tree//lib/syntax_tree/language_server.rb#176
class SyntaxTree::LanguageServer::Request::Shape
  # source://syntax_tree//lib/syntax_tree/language_server.rb#179
  def initialize(values); end

  # source://syntax_tree//lib/syntax_tree/language_server.rb#183
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/language_server.rb#177
  def values; end
end

# source://syntax_tree//lib/syntax_tree/language_server.rb#191
class SyntaxTree::LanguageServer::Request::Tuple
  # source://syntax_tree//lib/syntax_tree/language_server.rb#194
  def initialize(values); end

  # source://syntax_tree//lib/syntax_tree/language_server.rb#198
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/language_server.rb#192
  def values; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#5
class SyntaxTree::Location
  # source://syntax_tree//lib/syntax_tree/node.rb#13
  def initialize(start_line:, start_char:, start_column:, end_line:, end_char:, end_column:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#33
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#50
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#54
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6
  def end_char; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6
  def end_column; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6
  def end_line; end

  # source://syntax_tree//lib/syntax_tree/node.rb#29
  def lines; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6
  def start_char; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6
  def start_column; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6
  def start_line; end

  # source://syntax_tree//lib/syntax_tree/node.rb#39
  def to(other); end

  class << self
    # source://syntax_tree//lib/syntax_tree/node.rb#90
    def default; end

    # source://syntax_tree//lib/syntax_tree/node.rb#76
    def fixed(line:, char:, column:); end

    # source://syntax_tree//lib/syntax_tree/node.rb#65
    def token(line:, char:, column:, size:); end
  end
end

# source://syntax_tree//lib/syntax_tree/node.rb#11378
class SyntaxTree::LoopFormatter
  # source://syntax_tree//lib/syntax_tree/node.rb#11385
  def initialize(keyword, node); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11390
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11380
  def keyword; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11383
  def node; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#11437
  def format_break(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#7500
class SyntaxTree::MAssign < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#7510
  def initialize(target:, value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7554
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7517
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7521
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7508
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7525
  def copy(target: T.unsafe(nil), value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7521
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7539
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7543
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7502
  def target; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7505
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#7638
class SyntaxTree::MLHS < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#7655
  def initialize(parts:, location:, comma: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7693
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7662
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7666
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7650
  def comma; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7650
  def comma=(_arg0); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7653
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7670
  def copy(parts: T.unsafe(nil), location: T.unsafe(nil), comma: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7666
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7684
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7688
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7645
  def parts; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#7704
class SyntaxTree::MLHSParen < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#7716
  def initialize(contents:, location:, comma: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7769
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7723
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7727
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7711
  def comma; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7711
  def comma=(_arg0); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7714
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7706
  def contents; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7731
  def copy(contents: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7727
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7744
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7748
  def format(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#7869
class SyntaxTree::MRHS < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#7876
  def initialize(parts:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7911
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7882
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7886
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7874
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7890
  def copy(parts: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7886
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7903
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7907
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7871
  def parts; end
end

# source://syntax_tree//lib/syntax_tree/match_visitor.rb#6
class SyntaxTree::MatchVisitor < ::SyntaxTree::FieldVisitor
  # source://syntax_tree//lib/syntax_tree/match_visitor.rb#9
  def initialize(q); end

  # source://syntax_tree//lib/syntax_tree/match_visitor.rb#7
  def q; end

  # source://syntax_tree//lib/syntax_tree/match_visitor.rb#13
  def visit(node); end

  private

  # source://syntax_tree//lib/syntax_tree/match_visitor.rb#30
  def comments(node); end

  # source://syntax_tree//lib/syntax_tree/match_visitor.rb#44
  def field(name, value); end

  # source://syntax_tree//lib/syntax_tree/match_visitor.rb#52
  def list(name, values); end

  # source://syntax_tree//lib/syntax_tree/match_visitor.rb#65
  def node(node, _type); end

  # source://syntax_tree//lib/syntax_tree/match_visitor.rb#86
  def pairs(name, values); end

  # source://syntax_tree//lib/syntax_tree/match_visitor.rb#112
  def text(name, value); end
end

# source://syntax_tree//lib/syntax_tree/mermaid.rb#9
module SyntaxTree::Mermaid
  class << self
    # source://syntax_tree//lib/syntax_tree/mermaid.rb#158
    def escape(label); end

    # source://syntax_tree//lib/syntax_tree/mermaid.rb#165
    def flowchart; end
  end
end

# source://syntax_tree//lib/syntax_tree/mermaid.rb#12
class SyntaxTree::Mermaid::FlowChart
  # source://syntax_tree//lib/syntax_tree/mermaid.rb#15
  def initialize; end

  # source://syntax_tree//lib/syntax_tree/mermaid.rb#25
  def fetch(id); end

  # source://syntax_tree//lib/syntax_tree/mermaid.rb#30
  def link(from, to, label = T.unsafe(nil), type: T.unsafe(nil), color: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/mermaid.rb#13
  def links; end

  # source://syntax_tree//lib/syntax_tree/mermaid.rb#39
  def node(id, label = T.unsafe(nil), shape: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/mermaid.rb#13
  def nodes; end

  # source://syntax_tree//lib/syntax_tree/mermaid.rb#13
  def output; end

  # source://syntax_tree//lib/syntax_tree/mermaid.rb#13
  def prefix; end

  # source://syntax_tree//lib/syntax_tree/mermaid.rb#64
  def render; end

  # source://syntax_tree//lib/syntax_tree/mermaid.rb#49
  def subgraph(label); end
end

# source://syntax_tree//lib/syntax_tree/mermaid.rb#78
class SyntaxTree::Mermaid::Link
  # source://syntax_tree//lib/syntax_tree/mermaid.rb#84
  def initialize(from, to, label, type, color); end

  # source://syntax_tree//lib/syntax_tree/mermaid.rb#82
  def color; end

  # source://syntax_tree//lib/syntax_tree/mermaid.rb#82
  def from; end

  # source://syntax_tree//lib/syntax_tree/mermaid.rb#82
  def label; end

  # source://syntax_tree//lib/syntax_tree/mermaid.rb#95
  def render; end

  # source://syntax_tree//lib/syntax_tree/mermaid.rb#82
  def to; end

  # source://syntax_tree//lib/syntax_tree/mermaid.rb#82
  def type; end

  private

  # source://syntax_tree//lib/syntax_tree/mermaid.rb#108
  def sides; end
end

# source://syntax_tree//lib/syntax_tree/mermaid.rb#80
SyntaxTree::Mermaid::Link::COLORS = T.let(T.unsafe(nil), Array)

# source://syntax_tree//lib/syntax_tree/mermaid.rb#79
SyntaxTree::Mermaid::Link::TYPES = T.let(T.unsafe(nil), Array)

# source://syntax_tree//lib/syntax_tree/mermaid.rb#121
class SyntaxTree::Mermaid::Node
  # source://syntax_tree//lib/syntax_tree/mermaid.rb#126
  def initialize(id, label, shape); end

  # source://syntax_tree//lib/syntax_tree/mermaid.rb#124
  def id; end

  # source://syntax_tree//lib/syntax_tree/mermaid.rb#124
  def label; end

  # source://syntax_tree//lib/syntax_tree/mermaid.rb#134
  def render; end

  # source://syntax_tree//lib/syntax_tree/mermaid.rb#124
  def shape; end

  private

  # source://syntax_tree//lib/syntax_tree/mermaid.rb#141
  def bounds; end
end

# source://syntax_tree//lib/syntax_tree/mermaid.rb#122
SyntaxTree::Mermaid::Node::SHAPES = T.let(T.unsafe(nil), Array)

# source://syntax_tree//lib/syntax_tree/mermaid_visitor.rb#5
class SyntaxTree::MermaidVisitor < ::SyntaxTree::FieldVisitor
  # source://syntax_tree//lib/syntax_tree/mermaid_visitor.rb#8
  def initialize; end

  # source://syntax_tree//lib/syntax_tree/mermaid_visitor.rb#6
  def flowchart; end

  # source://syntax_tree//lib/syntax_tree/mermaid_visitor.rb#6
  def target; end

  # source://syntax_tree//lib/syntax_tree/mermaid_visitor.rb#13
  def visit_program(node); end

  private

  # source://syntax_tree//lib/syntax_tree/mermaid_visitor.rb#20
  def comments(node); end

  # source://syntax_tree//lib/syntax_tree/mermaid_visitor.rb#24
  def field(name, value); end

  # source://syntax_tree//lib/syntax_tree/mermaid_visitor.rb#37
  def list(name, values); end

  # source://syntax_tree//lib/syntax_tree/mermaid_visitor.rb#43
  def node(node, type); end

  # source://syntax_tree//lib/syntax_tree/mermaid_visitor.rb#55
  def pairs(name, values); end

  # source://syntax_tree//lib/syntax_tree/mermaid_visitor.rb#65
  def text(name, value); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#7563
class SyntaxTree::MethodAddBlock < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#7573
  def initialize(call:, block:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7622
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7580
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7568
  def block; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7565
  def call; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7584
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7571
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7588
  def copy(call: T.unsafe(nil), block: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7584
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7602
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7606
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7627
  def format_contents(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#7779
class SyntaxTree::ModuleDeclaration < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#7789
  def initialize(constant:, bodystmt:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7849
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7796
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7784
  def bodystmt; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7800
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7787
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7781
  def constant; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7804
  def copy(constant: T.unsafe(nil), bodystmt: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7800
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7818
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7827
  def format(q); end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#7856
  def format_declaration(q); end
end

# source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#6
class SyntaxTree::MutationVisitor < ::SyntaxTree::BasicVisitor
  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#9
  def initialize; end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#18
  def mutate(query, &block); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#7
  def mutations; end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#25
  def visit(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#38
  def visit_BEGIN(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#46
  def visit_CHAR(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#51
  def visit_END(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#59
  def visit___end__(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#64
  def visit_alias(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#69
  def visit_aref(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#74
  def visit_aref_field(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#89
  def visit_arg_block(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#79
  def visit_arg_paren(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#94
  def visit_arg_star(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#84
  def visit_args(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#99
  def visit_args_forward(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#104
  def visit_array(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#112
  def visit_aryptn(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#122
  def visit_assign(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#127
  def visit_assoc(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#132
  def visit_assoc_splat(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#137
  def visit_backref(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#142
  def visit_backtick(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#147
  def visit_bare_assoc_hash(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#152
  def visit_begin(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#162
  def visit_binary(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#295
  def visit_block(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#167
  def visit_block_var(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#172
  def visit_blockarg(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#177
  def visit_bodystmt(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#187
  def visit_break(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#192
  def visit_call(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#202
  def visit_case(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#216
  def visit_class(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#225
  def visit_comma(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#230
  def visit_command(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#239
  def visit_command_call(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#249
  def visit_comment(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#254
  def visit_const(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#259
  def visit_const_path_field(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#264
  def visit_const_path_ref(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#269
  def visit_const_ref(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#274
  def visit_cvar(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#279
  def visit_def(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#290
  def visit_defined(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#313
  def visit_dyna_symbol(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#318
  def visit_else(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#326
  def visit_elsif(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#334
  def visit_embdoc(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#339
  def visit_embexpr_beg(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#344
  def visit_embexpr_end(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#349
  def visit_embvar(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#354
  def visit_ensure(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#362
  def visit_excessed_comma(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#367
  def visit_field(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#375
  def visit_float(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#380
  def visit_fndptn(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#390
  def visit_for(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#395
  def visit_gvar(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#400
  def visit_hash(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#405
  def visit_heredoc(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#414
  def visit_heredoc_beg(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#419
  def visit_heredoc_end(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#424
  def visit_hshptn(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#434
  def visit_ident(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#439
  def visit_if(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#448
  def visit_if_op(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#453
  def visit_imaginary(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#458
  def visit_in(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#466
  def visit_int(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#471
  def visit_ivar(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#476
  def visit_kw(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#481
  def visit_kwrest_param(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#486
  def visit_label(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#491
  def visit_label_end(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#496
  def visit_lambda(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#504
  def visit_lambda_var(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#509
  def visit_lbrace(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#514
  def visit_lbracket(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#519
  def visit_lparen(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#524
  def visit_massign(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#529
  def visit_method_add_block(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#534
  def visit_mlhs(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#539
  def visit_mlhs_paren(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#544
  def visit_module(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#552
  def visit_mrhs(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#557
  def visit_next(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#812
  def visit_not(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#562
  def visit_op(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#567
  def visit_opassign(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#572
  def visit_params(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#588
  def visit_paren(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#593
  def visit_period(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#157
  def visit_pinned_begin(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#854
  def visit_pinned_var_ref(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#598
  def visit_program(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#603
  def visit_qsymbols(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#611
  def visit_qsymbols_beg(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#616
  def visit_qwords(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#624
  def visit_qwords_beg(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#304
  def visit_range(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#211
  def visit_rassign(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#629
  def visit_rational(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#634
  def visit_rbrace(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#639
  def visit_rbracket(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#644
  def visit_redo(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#654
  def visit_regexp_beg(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#649
  def visit_regexp_content(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#659
  def visit_regexp_end(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#664
  def visit_regexp_literal(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#674
  def visit_rescue(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#669
  def visit_rescue_ex(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#684
  def visit_rescue_mod(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#689
  def visit_rest_param(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#694
  def visit_retry(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#699
  def visit_return(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#704
  def visit_rparen(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#709
  def visit_sclass(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#714
  def visit_statements(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#724
  def visit_string_concat(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#719
  def visit_string_content(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#729
  def visit_string_dvar(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#734
  def visit_string_embexpr(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#739
  def visit_string_literal(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#744
  def visit_super(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#749
  def visit_symbeg(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#754
  def visit_symbol_content(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#759
  def visit_symbol_literal(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#764
  def visit_symbols(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#772
  def visit_symbols_beg(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#777
  def visit_tlambda(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#782
  def visit_tlambeg(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#787
  def visit_top_const_field(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#792
  def visit_top_const_ref(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#797
  def visit_tstring_beg(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#802
  def visit_tstring_content(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#807
  def visit_tstring_end(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#817
  def visit_unary(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#822
  def visit_undef(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#827
  def visit_unless(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#836
  def visit_until(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#844
  def visit_var_field(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#849
  def visit_var_ref(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#859
  def visit_vcall(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#864
  def visit_void_stmt(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#869
  def visit_when(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#878
  def visit_while(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#886
  def visit_word(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#891
  def visit_words(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#899
  def visit_words_beg(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#904
  def visit_xstring(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#909
  def visit_xstring_literal(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#914
  def visit_yield(node); end

  # source://syntax_tree//lib/syntax_tree/mutation_visitor.rb#919
  def visit_zsuper(node); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#7933
class SyntaxTree::Next < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#7940
  def initialize(arguments:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7975
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7946
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7935
  def arguments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7950
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7938
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7954
  def copy(arguments: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7950
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7967
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7971
  def format(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#105
class SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#109
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#113
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#149
  def construct_keys; end

  # source://syntax_tree//lib/syntax_tree/node.rb#117
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#121
  def deconstruct_keys(keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#133
  def end_char; end

  # source://syntax_tree//lib/syntax_tree/node.rb#125
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#107
  def location; end

  # source://syntax_tree//lib/syntax_tree/node.rb#137
  def pretty_print(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#129
  def start_char; end

  # source://syntax_tree//lib/syntax_tree/node.rb#141
  def to_json(*opts); end

  # source://syntax_tree//lib/syntax_tree/node.rb#145
  def to_mermaid; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#11077
class SyntaxTree::Not < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#11088
  def initialize(statement:, parentheses:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11150
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11095
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11099
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11086
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11103
  def copy(statement: T.unsafe(nil), parentheses: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11099
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11117
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11126
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11082
  def parentheses; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11082
  def parentheses?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11079
  def statement; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#7985
class SyntaxTree::Op < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#7995
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8028
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8002
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8006
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7993
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8010
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8006
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8020
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8024
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7990
  def name; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7987
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#8038
class SyntaxTree::OpAssign < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#8052
  def initialize(target:, operator:, value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8111
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8060
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8064
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8050
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8068
  def copy(target: T.unsafe(nil), operator: T.unsafe(nil), value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8064
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8083
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8093
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8044
  def operator; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8041
  def target; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8047
  def value; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#8118
  def skip_indent?; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#6174
SyntaxTree::PATTERNS = T.let(T.unsafe(nil), Array)

# source://syntax_tree//lib/syntax_tree/node.rb#8196
class SyntaxTree::Params < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#8298
  def initialize(location:, requireds: T.unsafe(nil), optionals: T.unsafe(nil), rest: T.unsafe(nil), posts: T.unsafe(nil), keywords: T.unsafe(nil), keyword_rest: T.unsafe(nil), block: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8428
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8328
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8451
  def arity; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8293
  def block; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8332
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8296
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8346
  def copy(location: T.unsafe(nil), requireds: T.unsafe(nil), optionals: T.unsafe(nil), rest: T.unsafe(nil), posts: T.unsafe(nil), keywords: T.unsafe(nil), keyword_rest: T.unsafe(nil), block: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8332
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8374
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8323
  def empty?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8388
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8290
  def keyword_rest; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8286
  def keywords; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8274
  def optionals; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8282
  def posts; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8270
  def requireds; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8278
  def rest; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#8467
  def format_contents(q, parts); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#8224
class SyntaxTree::Params::KeywordFormatter
  # source://syntax_tree//lib/syntax_tree/node.rb#8231
  def initialize(name, value); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8236
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8240
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8226
  def name; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8229
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#8252
class SyntaxTree::Params::KeywordRestFormatter
  # source://syntax_tree//lib/syntax_tree/node.rb#8256
  def initialize(value); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8260
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8264
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8254
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#8199
class SyntaxTree::Params::OptionalFormatter
  # source://syntax_tree//lib/syntax_tree/node.rb#8206
  def initialize(name, value); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8211
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8215
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8201
  def name; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8204
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#8479
class SyntaxTree::Paren < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#8489
  def initialize(lparen:, contents:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8545
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8496
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8500
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8487
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8484
  def contents; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8504
  def copy(lparen: T.unsafe(nil), contents: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8500
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8518
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8527
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8481
  def lparen; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#8155
module SyntaxTree::Parentheses
  class << self
    # source://syntax_tree//lib/syntax_tree/node.rb#8175
    def break(q); end

    # source://syntax_tree//lib/syntax_tree/node.rb#8167
    def flat(q); end
  end
end

# source://syntax_tree//lib/syntax_tree/node.rb#8156
SyntaxTree::Parentheses::NODES = T.let(T.unsafe(nil), Array)

# source://syntax_tree//lib/syntax_tree/parser.rb#6
class SyntaxTree::Parser < ::Ripper
  # source://syntax_tree//lib/syntax_tree/parser.rb#116
  def initialize(source, *_arg1); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#114
  def comments; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#105
  def line_counts; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#101
  def source; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#110
  def tokens; end

  private

  # source://syntax_tree//lib/syntax_tree/parser.rb#2911
  def attach_comments(program, comments); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#197
  def char_pos; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#295
  def consume_error(name, location); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#312
  def consume_keyword(name); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#318
  def consume_operator(name); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#300
  def consume_token(type); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#306
  def consume_tstring_end(location); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#203
  def current_column; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#328
  def find_colon2_before(const); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#272
  def find_keyword(name); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#277
  def find_keyword_between(name, left, right); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#349
  def find_next_statement_start(position); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#290
  def find_operator(name); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#254
  def find_token(type); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#259
  def find_token_between(type, left, right); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#210
  def find_token_error(location); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2362
  def lambda_locals(source); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2946
  def nearest_nodes(node, comment); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#371
  def on_BEGIN(statements); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#395
  def on_CHAR(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#410
  def on_END(statements); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#434
  def on___end__(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#453
  def on_alias(left, right); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2863
  def on_alias_error(error, *_arg1); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#465
  def on_aref(collection, index); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#481
  def on_aref_field(collection, index); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#500
  def on_arg_paren(arguments); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#522
  def on_args_add(arguments, argument); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#543
  def on_args_add_block(arguments, block); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#581
  def on_args_add_star(arguments, argument); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#603
  def on_args_forward; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#611
  def on_args_new; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#622
  def on_array(contents); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#701
  def on_aryptn(constant, requireds, rest, posts); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#756
  def on_assign(target, value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2863
  def on_assign_error(error, *_arg1); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#766
  def on_assoc_new(key, value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#775
  def on_assoc_splat(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#790
  def on_backref(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#805
  def on_backtick(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#826
  def on_bare_assoc_hash(assocs); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#835
  def on_begin(bodystmt); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#874
  def on_binary(left, operator, right); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#906
  def on_block_var(params, locals); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#946
  def on_blockarg(name); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#962
  def on_bodystmt(statements, rescue_clause, else_clause, ensure_clause); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#988
  def on_brace_block(block_var, statements); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1025
  def on_break(arguments); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1040
  def on_call(receiver, operator, message); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1061
  def on_case(value, consequent); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1096
  def on_class(constant, superclass, bodystmt); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2863
  def on_class_name_error(error, *_arg1); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1120
  def on_comma(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1139
  def on_command(message, arguments); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1155
  def on_command_call(receiver, operator, message, arguments); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1170
  def on_comment(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1208
  def on_const(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1224
  def on_const_path_field(parent, constant); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1243
  def on_const_path_ref(parent, constant); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1253
  def on_const_ref(constant); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1259
  def on_cvar(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1278
  def on_def(name, params, bodystmt); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1346
  def on_defined(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1370
  def on_defs(target, operator, name, params, bodystmt); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1435
  def on_do_block(block_var, bodystmt); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1459
  def on_dot2(left, right); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1475
  def on_dot3(left, right); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1491
  def on_dyna_symbol(string_content); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1517
  def on_else(statements); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1558
  def on_elsif(predicate, statements, consequent); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1588
  def on_embdoc(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1595
  def on_embdoc_beg(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1606
  def on_embdoc_end(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1630
  def on_embexpr_beg(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1649
  def on_embexpr_end(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1668
  def on_embvar(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1687
  def on_ensure(statements); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1714
  def on_excessed_comma(*_arg0); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1722
  def on_fcall(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1738
  def on_field(parent, operator, name); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1749
  def on_float(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1769
  def on_fndptn(constant, left, values, right); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1821
  def on_for(index, collection, statements); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1859
  def on_gvar(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1874
  def on_hash(assocs); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1887
  def on_heredoc_beg(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1906
  def on_heredoc_dedent(string, width); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1920
  def on_heredoc_end(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#1956
  def on_hshptn(constant, keywords, keyword_rest); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2026
  def on_ident(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2045
  def on_if(predicate, statements, consequent); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2085
  def on_if_mod(predicate, statement); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2074
  def on_ifop(predicate, truthy, falsy); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2107
  def on_imaginary(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2127
  def on_in(pattern, statements, consequent); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2172
  def on_int(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2187
  def on_ivar(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2202
  def on_kw(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2221
  def on_kwrest_param(name); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2230
  def on_label(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2245
  def on_label_end(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2267
  def on_lambda(params, statements); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2349
  def on_lambda_var(params, locals); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2432
  def on_lbrace(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2451
  def on_lbracket(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2470
  def on_lparen(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2493
  def on_massign(target, value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2509
  def on_method_add_arg(call, arguments); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2527
  def on_method_add_block(call, block); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2556
  def on_mlhs_add(mlhs, part); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2565
  def on_mlhs_add_post(left, right); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2577
  def on_mlhs_add_star(mlhs, part); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2590
  def on_mlhs_new; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2600
  def on_mlhs_paren(contents); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2618
  def on_module(constant, bodystmt); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2650
  def on_mrhs_add(mrhs, part); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2659
  def on_mrhs_add_star(mrhs, value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2640
  def on_mrhs_new; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2681
  def on_mrhs_new_from_args(arguments); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2687
  def on_next(arguments); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2706
  def on_op(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2735
  def on_opassign(target, operator, value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2863
  def on_param_error(error, *_arg1); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2758
  def on_params(requireds, optionals, rest, posts, keywords, keyword_rest, block); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2823
  def on_paren(contents); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2863
  def on_parse_error(error, *_arg1); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2873
  def on_period(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#2888
  def on_program(statements); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3000
  def on_qsymbols_add(qsymbols, element); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3010
  def on_qsymbols_beg(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3029
  def on_qsymbols_new; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3041
  def on_qwords_add(qwords, element); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3051
  def on_qwords_beg(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3070
  def on_qwords_new; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3082
  def on_rational(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3097
  def on_rbrace(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3116
  def on_rbracket(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3135
  def on_redo; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3146
  def on_regexp_add(regexp_content, part); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3156
  def on_regexp_beg(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3175
  def on_regexp_end(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3193
  def on_regexp_literal(regexp_content, ending); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3211
  def on_regexp_new; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3228
  def on_rescue(exceptions, variable, statements, consequent); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3281
  def on_rescue_mod(statement, value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3293
  def on_rest_param(name); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3302
  def on_retry; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3310
  def on_return(arguments); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3321
  def on_return0; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3329
  def on_rparen(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3348
  def on_sclass(target, bodystmt); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3381
  def on_semicolon(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3400
  def on_stmts_add(statements, statement); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3413
  def on_stmts_new; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3426
  def on_string_add(string, part); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3443
  def on_string_concat(left, right); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3453
  def on_string_content; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3463
  def on_string_dvar(variable); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3474
  def on_string_embexpr(statements); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3504
  def on_string_literal(string); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3544
  def on_super(arguments); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3556
  def on_symbeg(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3577
  def on_symbol(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3590
  def on_symbol_literal(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3606
  def on_symbols_add(symbols, word); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3616
  def on_symbols_beg(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3635
  def on_symbols_new; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3647
  def on_tlambda(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3666
  def on_tlambeg(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3685
  def on_top_const_field(constant); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3696
  def on_top_const_ref(constant); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3707
  def on_tstring_beg(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3726
  def on_tstring_content(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3741
  def on_tstring_end(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3761
  def on_unary(operator, statement); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3804
  def on_undef(symbols); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3819
  def on_unless(predicate, statements, consequent); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3848
  def on_unless_mod(predicate, statement); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3862
  def on_until(predicate, statements); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3893
  def on_until_mod(predicate, statement); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3906
  def on_var_alias(left, right); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3920
  def on_var_field(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3935
  def on_var_ref(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3941
  def on_vcall(ident); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3947
  def on_void_stmt; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3960
  def on_when(arguments, statements, consequent); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3992
  def on_while(predicate, statements); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#4023
  def on_while_mod(predicate, statement); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#4039
  def on_word_add(word, part); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#4048
  def on_word_new; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#4058
  def on_words_add(words, word); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#4068
  def on_words_beg(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#4087
  def on_words_new; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#4106
  def on_xstring_add(xstring, part); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#4130
  def on_xstring_literal(xstring); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#4115
  def on_xstring_new; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#4153
  def on_yield(arguments); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#4164
  def on_yield0; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#4172
  def on_zsuper; end
end

# source://syntax_tree//lib/syntax_tree/parser.rb#38
class SyntaxTree::Parser::MultiByteString
  # source://syntax_tree//lib/syntax_tree/parser.rb#41
  def initialize(start, line); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#55
  def [](byteindex); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#39
  def indices; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#39
  def start; end
end

# source://syntax_tree//lib/syntax_tree/parser.rb#9
class SyntaxTree::Parser::ParseError < ::StandardError
  # source://syntax_tree//lib/syntax_tree/parser.rb#12
  def initialize(error, lineno, column); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#10
  def column; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#10
  def lineno; end
end

# source://syntax_tree//lib/syntax_tree/parser.rb#656
class SyntaxTree::Parser::PinVisitor < ::SyntaxTree::Visitor
  # source://syntax_tree//lib/syntax_tree/parser.rb#659
  def initialize(pins); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#657
  def pins; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#657
  def stack; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#664
  def visit(node); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#672
  def visit_var_ref(node); end

  class << self
    # source://syntax_tree//lib/syntax_tree/parser.rb#677
    def visit(node, tokens); end
  end
end

# source://syntax_tree//lib/syntax_tree/parser.rb#3371
class SyntaxTree::Parser::Semicolon
  # source://syntax_tree//lib/syntax_tree/parser.rb#3374
  def initialize(location); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#3372
  def location; end
end

# source://syntax_tree//lib/syntax_tree/parser.rb#22
class SyntaxTree::Parser::SingleByteString
  # source://syntax_tree//lib/syntax_tree/parser.rb#25
  def initialize(start); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#29
  def [](byteindex); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#23
  def start; end
end

# source://syntax_tree//lib/syntax_tree/parser.rb#63
class SyntaxTree::Parser::TokenList
  # source://syntax_tree//lib/syntax_tree/parser.rb#66
  def initialize; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#71
  def <<(token); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#75
  def [](index); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#79
  def any?(&block); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#91
  def delete(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#95
  def delete_at(index); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#64
  def last_deleted; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#83
  def reverse_each(&block); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#87
  def rindex(&block); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#64
  def tokens; end
end

# source://syntax_tree//lib/syntax_tree/pattern.rb#39
class SyntaxTree::Pattern
  # source://syntax_tree//lib/syntax_tree/pattern.rb#61
  def initialize(query); end

  # source://syntax_tree//lib/syntax_tree/pattern.rb#65
  def compile; end

  # source://syntax_tree//lib/syntax_tree/pattern.rb#59
  def query; end

  private

  # source://syntax_tree//lib/syntax_tree/pattern.rb#80
  def combine_and(left, right); end

  # source://syntax_tree//lib/syntax_tree/pattern.rb#86
  def combine_or(left, right); end

  # source://syntax_tree//lib/syntax_tree/pattern.rb#109
  def compile_aryptn(node); end

  # source://syntax_tree//lib/syntax_tree/pattern.rb#134
  def compile_binary(node); end

  # source://syntax_tree//lib/syntax_tree/pattern.rb#142
  def compile_const(node); end

  # source://syntax_tree//lib/syntax_tree/pattern.rb#159
  def compile_const_path_ref(node); end

  # source://syntax_tree//lib/syntax_tree/pattern.rb#172
  def compile_dyna_symbol(node); end

  # source://syntax_tree//lib/syntax_tree/pattern.rb#91
  def compile_error(node); end

  # source://syntax_tree//lib/syntax_tree/pattern.rb#188
  def compile_hshptn(node); end

  # source://syntax_tree//lib/syntax_tree/pattern.rb#260
  def compile_node(node); end

  # source://syntax_tree//lib/syntax_tree/pattern.rb#214
  def compile_regexp_literal(node); end

  # source://syntax_tree//lib/syntax_tree/pattern.rb#226
  def compile_string_literal(node); end

  # source://syntax_tree//lib/syntax_tree/pattern.rb#238
  def compile_symbol_literal(node); end

  # source://syntax_tree//lib/syntax_tree/pattern.rb#246
  def compile_var_ref(node); end

  # source://syntax_tree//lib/syntax_tree/pattern.rb#100
  def extract_string(node); end
end

# source://syntax_tree//lib/syntax_tree/pattern.rb#42
class SyntaxTree::Pattern::CompilationError < ::StandardError
  # source://syntax_tree//lib/syntax_tree/pattern.rb#43
  def initialize(repr); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#8553
class SyntaxTree::Period < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#8560
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8595
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8566
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8570
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8558
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8574
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8570
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8587
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8591
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8555
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#1962
class SyntaxTree::PinnedBegin < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#1969
  def initialize(statement:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2014
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1975
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1979
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1967
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1983
  def copy(statement: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1979
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1996
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2000
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1964
  def statement; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#11661
class SyntaxTree::PinnedVarRef < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#11668
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11706
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11674
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11678
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11666
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11682
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11678
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11695
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11699
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11663
  def value; end
end

# source://syntax_tree//lib/syntax_tree/pretty_print_visitor.rb#5
class SyntaxTree::PrettyPrintVisitor < ::SyntaxTree::FieldVisitor
  # source://syntax_tree//lib/syntax_tree/pretty_print_visitor.rb#8
  def initialize(q); end

  # source://syntax_tree//lib/syntax_tree/pretty_print_visitor.rb#6
  def q; end

  # source://syntax_tree//lib/syntax_tree/pretty_print_visitor.rb#14
  def visit_binary(node); end

  # source://syntax_tree//lib/syntax_tree/pretty_print_visitor.rb#25
  def visit_label(node); end

  private

  # source://syntax_tree//lib/syntax_tree/pretty_print_visitor.rb#36
  def comments(node); end

  # source://syntax_tree//lib/syntax_tree/pretty_print_visitor.rb#45
  def field(_name, value); end

  # source://syntax_tree//lib/syntax_tree/pretty_print_visitor.rb#50
  def list(_name, values); end

  # source://syntax_tree//lib/syntax_tree/pretty_print_visitor.rb#55
  def node(_node, type); end

  # source://syntax_tree//lib/syntax_tree/pretty_print_visitor.rb#62
  def pairs(_name, values); end

  # source://syntax_tree//lib/syntax_tree/pretty_print_visitor.rb#78
  def text(_name, value); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#8601
class SyntaxTree::Program < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#8608
  def initialize(statements:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8648
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8614
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8618
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8606
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8622
  def copy(statements: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8618
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8635
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8639
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8603
  def statements; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#8657
class SyntaxTree::QSymbols < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#8667
  def initialize(beginning:, elements:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8727
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8674
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8659
  def beginning; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8678
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8665
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8682
  def copy(beginning: T.unsafe(nil), elements: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8678
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8696
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8662
  def elements; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8705
  def format(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#8740
class SyntaxTree::QSymbolsBeg < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#8744
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8770
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8749
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8753
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8757
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8753
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8766
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8742
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#8779
class SyntaxTree::QWords < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#8789
  def initialize(beginning:, elements:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8845
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8796
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8781
  def beginning; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8800
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8787
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8804
  def copy(beginning: T.unsafe(nil), elements: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8800
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8814
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8784
  def elements; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8823
  def format(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#8858
class SyntaxTree::QWordsBeg < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#8862
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8888
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8867
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8871
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8875
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8871
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8884
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8860
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#4615
module SyntaxTree::Quotes
  class << self
    # source://syntax_tree//lib/syntax_tree/node.rb#4624
    def locked?(node, quote); end

    # source://syntax_tree//lib/syntax_tree/node.rb#4631
    def matching(quote); end

    # source://syntax_tree//lib/syntax_tree/node.rb#4637
    def normalize(content, enclosing); end
  end
end

# source://syntax_tree//lib/syntax_tree/node.rb#4617
SyntaxTree::Quotes::PAIRS = T.let(T.unsafe(nil), Hash)

# source://syntax_tree//lib/syntax_tree/node.rb#3201
class SyntaxTree::RAssign < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#3215
  def initialize(value:, operator:, pattern:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3277
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3223
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3227
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3213
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3231
  def copy(value: T.unsafe(nil), operator: T.unsafe(nil), pattern: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3227
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3246
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3256
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3207
  def operator; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3210
  def pattern; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3203
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#8945
class SyntaxTree::RBrace < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#8949
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8975
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8954
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8958
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8962
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8958
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8971
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8947
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#8981
class SyntaxTree::RBracket < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#8985
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9011
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8990
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8994
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8998
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8994
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9007
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8983
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#9751
class SyntaxTree::RParen < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#9755
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9781
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9760
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9764
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9768
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9764
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9777
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9753
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#4540
class SyntaxTree::RangeNode < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#4553
  def initialize(left:, operator:, right:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4607
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4561
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4565
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4551
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4569
  def copy(left: T.unsafe(nil), operator: T.unsafe(nil), right: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4565
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4584
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4594
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4542
  def left; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4545
  def operator; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4548
  def right; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#8897
class SyntaxTree::RationalLiteral < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#8904
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8939
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8910
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8914
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8902
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8918
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8914
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8931
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8935
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8899
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#9020
class SyntaxTree::Redo < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#9024
  def initialize(location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9054
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9029
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9033
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9022
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9037
  def copy(location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9033
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9046
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9050
  def format(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#9116
class SyntaxTree::RegexpBeg < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#9120
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9146
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9125
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9129
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9133
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9129
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9142
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9118
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#9065
class SyntaxTree::RegexpContent < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#9073
  def initialize(beginning:, parts:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9101
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9079
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9067
  def beginning; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9083
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9087
  def copy(beginning: T.unsafe(nil), parts: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9083
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9097
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9071
  def parts; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#9161
class SyntaxTree::RegexpEnd < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#9165
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9191
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9170
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9174
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9178
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9174
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9187
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9163
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#9200
class SyntaxTree::RegexpLiteral < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#9214
  def initialize(beginning:, ending:, parts:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9296
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9222
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9202
  def beginning; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9226
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9212
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9230
  def copy(beginning: T.unsafe(nil), ending: T.unsafe(nil), parts: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9226
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9245
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9205
  def ending; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9256
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9302
  def options; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9209
  def parts; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#9318
  def ambiguous?(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9308
  def include?(pattern); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#9408
class SyntaxTree::Rescue < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#9424
  def initialize(keyword:, exception:, statements:, consequent:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9520
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9455
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9433
  def bind_end(end_char, end_column); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9459
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9422
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9419
  def consequent; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9463
  def copy(keyword: T.unsafe(nil), exception: T.unsafe(nil), statements: T.unsafe(nil), consequent: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9459
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9485
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9413
  def exception; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9496
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9410
  def keyword; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9416
  def statements; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#9333
class SyntaxTree::RescueEx < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#9344
  def initialize(exceptions:, variable:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9396
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9351
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9355
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9342
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9359
  def copy(exceptions: T.unsafe(nil), variable: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9355
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9373
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9335
  def exceptions; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9382
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9339
  def variable; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#9531
class SyntaxTree::RescueMod < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#9541
  def initialize(statement:, value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9597
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9548
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9552
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9539
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9556
  def copy(statement: T.unsafe(nil), value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9552
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9570
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9579
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9533
  def statement; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9536
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#9608
class SyntaxTree::RestParam < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#9615
  def initialize(name:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9651
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9621
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9625
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9613
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9629
  def copy(name: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9625
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9642
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9646
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9610
  def name; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#9660
class SyntaxTree::Retry < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#9664
  def initialize(location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9694
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9669
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9673
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9662
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9677
  def copy(location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9673
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9686
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9690
  def format(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#9703
class SyntaxTree::ReturnNode < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#9710
  def initialize(arguments:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9745
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9716
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9705
  def arguments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9720
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9708
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9724
  def copy(arguments: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9720
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9737
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9741
  def format(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#9793
class SyntaxTree::SClass < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#9803
  def initialize(target:, bodystmt:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9854
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9810
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9798
  def bodystmt; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9814
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9801
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9818
  def copy(target: T.unsafe(nil), bodystmt: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9814
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9832
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9841
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9795
  def target; end
end

# source://syntax_tree//lib/syntax_tree/search.rb#6
class SyntaxTree::Search
  # source://syntax_tree//lib/syntax_tree/search.rb#9
  def initialize(pattern); end

  # source://syntax_tree//lib/syntax_tree/search.rb#7
  def pattern; end

  # source://syntax_tree//lib/syntax_tree/search.rb#13
  def scan(root); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#9867
class SyntaxTree::Statements < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#9874
  def initialize(body:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10000
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9927
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9880
  def bind(parser, start_char, start_column, end_char, end_column); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9909
  def bind_end(end_char, end_column); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9869
  def body; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9931
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9872
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9935
  def copy(body: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9931
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9948
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9921
  def empty?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9952
  def format(q); end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#10009
  def attach_comments(parser, start_char, end_char); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#10124
class SyntaxTree::StringConcat < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#10135
  def initialize(left:, right:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10179
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10142
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10146
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10133
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10150
  def copy(left: T.unsafe(nil), right: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10146
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10164
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10168
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10127
  def left; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10130
  def right; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#10051
class SyntaxTree::StringContent < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#10059
  def initialize(parts:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10086
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10065
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10069
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10057
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10073
  def copy(parts: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10069
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10082
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10090
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10054
  def parts; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#10190
class SyntaxTree::StringDVar < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#10197
  def initialize(variable:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10234
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10203
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10207
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10195
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10211
  def copy(variable: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10207
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10224
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10228
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10192
  def variable; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#10245
class SyntaxTree::StringEmbExpr < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#10252
  def initialize(statements:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10309
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10258
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10262
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10250
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10266
  def copy(statements: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10262
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10279
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10283
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10247
  def statements; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#10318
class SyntaxTree::StringLiteral < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#10329
  def initialize(parts:, quote:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10403
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10336
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10340
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10327
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10344
  def copy(parts: T.unsafe(nil), quote: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10340
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10358
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10362
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10321
  def parts; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10324
  def quote; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#10414
class SyntaxTree::Super < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#10421
  def initialize(arguments:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10465
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10427
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10416
  def arguments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10431
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10419
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10435
  def copy(arguments: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10431
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10448
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10452
  def format(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#10486
class SyntaxTree::SymBeg < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#10490
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10516
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10495
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10499
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10503
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10499
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10512
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10488
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#10526
class SyntaxTree::SymbolContent < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#10531
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10557
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10536
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10540
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10544
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10540
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10553
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10529
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#10567
class SyntaxTree::SymbolLiteral < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#10575
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10612
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10581
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10585
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10573
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10589
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10585
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10602
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10606
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10570
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#10621
class SyntaxTree::Symbols < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#10631
  def initialize(beginning:, elements:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10687
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10638
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10623
  def beginning; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10642
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10629
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10646
  def copy(beginning: T.unsafe(nil), elements: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10642
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10656
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10626
  def elements; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10665
  def format(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#10701
class SyntaxTree::SymbolsBeg < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#10705
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10731
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10710
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10714
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10718
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10714
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10727
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10703
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#10782
class SyntaxTree::TLamBeg < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#10786
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10812
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10791
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10795
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10799
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10795
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10808
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10784
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#10741
class SyntaxTree::TLambda < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#10745
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10771
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10750
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10754
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10758
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10754
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10767
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10743
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#10934
class SyntaxTree::TStringBeg < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#10938
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10964
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10943
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10947
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10951
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10947
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10960
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10936
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#10977
class SyntaxTree::TStringContent < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#10984
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11023
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10994
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10998
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10982
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11002
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10998
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11015
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11019
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10990
  def match?(pattern); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10979
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#11038
class SyntaxTree::TStringEnd < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#11042
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11068
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11047
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11051
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11055
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11051
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11064
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11040
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#6254
module SyntaxTree::Ternaryable
  class << self
    # source://syntax_tree//lib/syntax_tree/node.rb#6256
    def call(q, node); end

    private

    # source://syntax_tree//lib/syntax_tree/node.rb#6294
    def ternaryable?(statement); end
  end
end

# source://syntax_tree//lib/syntax_tree/node.rb#10823
class SyntaxTree::TopConstField < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#10830
  def initialize(constant:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10866
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10836
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10840
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10828
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10825
  def constant; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10844
  def copy(constant: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10840
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10857
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10861
  def format(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#10876
class SyntaxTree::TopConstRef < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#10883
  def initialize(constant:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10919
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10889
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10893
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10881
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10878
  def constant; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10897
  def copy(constant: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10893
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10910
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10914
  def format(q); end
end

# source://syntax_tree//lib/syntax_tree/translation.rb#6
module SyntaxTree::Translation
  class << self
    # source://syntax_tree//lib/syntax_tree/translation.rb#10
    def to_parser(node, buffer); end

    # source://syntax_tree//lib/syntax_tree/translation.rb#20
    def to_rubocop_ast(node, buffer); end
  end
end

# source://syntax_tree//lib/syntax_tree/node.rb#11161
class SyntaxTree::Unary < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#11171
  def initialize(operator:, statement:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11214
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11178
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11182
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11169
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11186
  def copy(operator: T.unsafe(nil), statement: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11182
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11200
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11209
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11163
  def operator; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11166
  def statement; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#11224
class SyntaxTree::Undef < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#11255
  def initialize(symbols:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11298
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11261
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11265
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11253
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11269
  def copy(symbols: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11265
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11282
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11286
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11250
  def symbols; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#11228
class SyntaxTree::Undef::UndefArgumentFormatter
  # source://syntax_tree//lib/syntax_tree/node.rb#11232
  def initialize(node); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11236
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11244
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11230
  def node; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#11308
class SyntaxTree::UnlessNode < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#11321
  def initialize(predicate:, statements:, consequent:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11366
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11329
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11333
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11319
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11316
  def consequent; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11337
  def copy(predicate: T.unsafe(nil), statements: T.unsafe(nil), consequent: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11333
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11352
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11362
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11372
  def modifier?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11310
  def predicate; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11313
  def statements; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#11454
class SyntaxTree::UntilNode < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#11464
  def initialize(predicate:, statements:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11506
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11471
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11475
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11462
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11479
  def copy(predicate: T.unsafe(nil), statements: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11475
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11493
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11502
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11511
  def modifier?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11456
  def predicate; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11459
  def statements; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#11716
class SyntaxTree::VCall < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#11723
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11758
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11729
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11762
  def access_control?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11766
  def arity; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11733
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11721
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11737
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11733
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11750
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11754
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11718
  def value; end
end

# source://syntax_tree//lib/syntax_tree/version.rb#4
SyntaxTree::VERSION = T.let(T.unsafe(nil), String)

# source://syntax_tree//lib/syntax_tree/node.rb#11522
class SyntaxTree::VarField < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#11529
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11568
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11535
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11539
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11527
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11543
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11539
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11556
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11560
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11524
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#11581
class SyntaxTree::VarRef < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#11588
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11623
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11594
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11598
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11586
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11602
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11598
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11615
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11619
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11634
  def pin(parent, pin); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11583
  def value; end
end

# source://syntax_tree//lib/syntax_tree/visitor.rb#7
class SyntaxTree::Visitor < ::SyntaxTree::BasicVisitor
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_BEGIN(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_CHAR(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_END(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit___end__(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_alias(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_aref(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_aref_field(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_arg_block(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_arg_paren(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_arg_star(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_args(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_args_forward(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_array(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_aryptn(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_assign(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_assoc(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_assoc_splat(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_backref(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_backtick(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_bare_assoc_hash(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_begin(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_binary(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_block(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_block_var(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_blockarg(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_bodystmt(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_break(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_call(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_case(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_class(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_comma(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_command(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_command_call(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_comment(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_const(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_const_path_field(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_const_path_ref(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_const_ref(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_cvar(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_def(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_defined(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_dyna_symbol(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_else(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_elsif(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_embdoc(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_embexpr_beg(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_embexpr_end(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_embvar(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_ensure(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_excessed_comma(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_field(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_float(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_fndptn(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_for(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_gvar(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_hash(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_heredoc(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_heredoc_beg(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_heredoc_end(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_hshptn(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_ident(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_if(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_if_op(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_imaginary(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_in(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_int(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_ivar(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_kw(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_kwrest_param(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_label(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_label_end(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_lambda(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_lambda_var(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_lbrace(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_lbracket(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_lparen(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_massign(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_method_add_block(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_mlhs(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_mlhs_paren(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_module(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_mrhs(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_next(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_not(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_op(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_opassign(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_params(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_paren(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_period(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_pinned_begin(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_pinned_var_ref(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_program(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_qsymbols(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_qsymbols_beg(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_qwords(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_qwords_beg(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_range(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_rassign(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_rational(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_rbrace(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_rbracket(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_redo(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_regexp_beg(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_regexp_content(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_regexp_end(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_regexp_literal(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_rescue(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_rescue_ex(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_rescue_mod(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_rest_param(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_retry(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_return(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_rparen(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_sclass(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_statements(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_string_concat(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_string_content(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_string_dvar(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_string_embexpr(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_string_literal(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_super(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_symbeg(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_symbol_content(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_symbol_literal(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_symbols(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_symbols_beg(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_tlambda(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_tlambeg(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_top_const_field(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_top_const_ref(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_tstring_beg(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_tstring_content(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_tstring_end(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_unary(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_undef(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_unless(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_until(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_var_field(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_var_ref(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_vcall(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_void_stmt(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_when(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_while(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_word(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_words(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_words_beg(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_xstring(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_xstring_literal(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_yield(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#113
  def visit_zsuper(node); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#11775
class SyntaxTree::VoidStmt < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#11779
  def initialize(location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11808
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11784
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11788
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11777
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11792
  def copy(location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11788
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11801
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11805
  def format(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#11819
class SyntaxTree::When < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#11832
  def initialize(arguments:, statements:, consequent:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11924
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11840
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11821
  def arguments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11844
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11830
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11827
  def consequent; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11848
  def copy(arguments: T.unsafe(nil), statements: T.unsafe(nil), consequent: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11844
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11863
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11889
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11824
  def statements; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#11887
SyntaxTree::When::SEPARATOR = T.let(T.unsafe(nil), SyntaxTree::When::Separator)

# source://syntax_tree//lib/syntax_tree/node.rb#11876
class SyntaxTree::When::Separator
  # source://syntax_tree//lib/syntax_tree/node.rb#11877
  def call(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#11935
class SyntaxTree::WhileNode < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#11945
  def initialize(predicate:, statements:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11987
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11952
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11956
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11943
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11960
  def copy(predicate: T.unsafe(nil), statements: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11956
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11974
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11983
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#11992
  def modifier?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11937
  def predicate; end

  # source://syntax_tree//lib/syntax_tree/node.rb#11940
  def statements; end
end

# source://syntax_tree//lib/syntax_tree/with_scope.rb#27
module SyntaxTree::WithScope
  # source://syntax_tree//lib/syntax_tree/with_scope.rb#122
  def initialize(*args, **kwargs, &block); end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#120
  def current_scope; end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#236
  def visit_binary(node); end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#189
  def visit_block_var(node); end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#182
  def visit_blockarg(node); end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#131
  def visit_class(node); end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#147
  def visit_def(node); end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#175
  def visit_kwrest_param(node); end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#189
  def visit_lambda_var(node); end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#142
  def visit_method_add_block(node); end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#135
  def visit_module(node); end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#153
  def visit_params(node); end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#207
  def visit_pinned_var_ref(node); end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#168
  def visit_rest_param(node); end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#199
  def visit_var_field(node); end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#215
  def visit_var_ref(node); end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#227
  def visit_vcall(node); end

  private

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#285
  def add_argument_definitions(list); end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#299
  def next_scope_id; end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#303
  def with_scope(parent_scope = T.unsafe(nil)); end
end

# source://syntax_tree//lib/syntax_tree/with_scope.rb#30
class SyntaxTree::WithScope::Scope
  # source://syntax_tree//lib/syntax_tree/with_scope.rb#68
  def initialize(id, parent = T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#78
  def add_local_definition(identifier, type); end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#95
  def add_local_usage(identifier, type); end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#102
  def find_local(name); end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#59
  def id; end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#66
  def locals; end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#62
  def parent; end

  private

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#108
  def resolve_local(name, type); end
end

# source://syntax_tree//lib/syntax_tree/with_scope.rb#32
class SyntaxTree::WithScope::Scope::Local
  # source://syntax_tree//lib/syntax_tree/with_scope.rb#43
  def initialize(type); end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#49
  def add_definition(location); end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#53
  def add_usage(location); end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#38
  def definitions; end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#34
  def type; end

  # source://syntax_tree//lib/syntax_tree/with_scope.rb#41
  def usages; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#12004
class SyntaxTree::Word < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#12012
  def initialize(parts:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12051
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12022
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12026
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#12010
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#12030
  def copy(parts: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12026
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#12043
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12047
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12018
  def match?(pattern); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12007
  def parts; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#12060
class SyntaxTree::Words < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#12070
  def initialize(beginning:, elements:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12126
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12077
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12062
  def beginning; end

  # source://syntax_tree//lib/syntax_tree/node.rb#12081
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#12068
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#12085
  def copy(beginning: T.unsafe(nil), elements: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12081
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#12095
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12065
  def elements; end

  # source://syntax_tree//lib/syntax_tree/node.rb#12104
  def format(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#12140
class SyntaxTree::WordsBeg < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#12144
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12170
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12149
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12153
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#12157
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12153
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#12166
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12142
  def value; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#12179
class SyntaxTree::XString < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#12184
  def initialize(parts:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12210
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12189
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12193
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#12197
  def copy(parts: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12193
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#12206
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12182
  def parts; end
end

# source://syntax_tree//lib/syntax_tree/node.rb#12219
class SyntaxTree::XStringLiteral < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#12227
  def initialize(parts:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12264
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12233
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12237
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#12225
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#12241
  def copy(parts: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12237
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#12254
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12258
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12222
  def parts; end
end

# source://syntax_tree//lib/syntax_tree/yarv/basic_block.rb#4
module SyntaxTree::YARV
  class << self
    # source://syntax_tree//lib/syntax_tree/yarv/calldata.rb#88
    def calldata(method, argc = T.unsafe(nil), flags = T.unsafe(nil), kw_arg = T.unsafe(nil)); end

    # source://syntax_tree//lib/syntax_tree/yarv.rb#25
    def compile(source, options = T.unsafe(nil)); end

    # source://syntax_tree//lib/syntax_tree/yarv.rb#30
    def interpret(source, options = T.unsafe(nil)); end
  end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#69
class SyntaxTree::YARV::AdjustStack < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#72
  def initialize(number); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#88
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#100
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#84
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#76
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#92
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#70
  def number; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#96
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#80
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#123
class SyntaxTree::YARV::AnyToString < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#136
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#148
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#132
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#124
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#140
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#144
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#128
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/assembler.rb#5
class SyntaxTree::YARV::Assembler
  # source://syntax_tree//lib/syntax_tree/yarv/assembler.rb#66
  def initialize(lines); end

  # source://syntax_tree//lib/syntax_tree/yarv/assembler.rb#70
  def assemble; end

  # source://syntax_tree//lib/syntax_tree/yarv/assembler.rb#64
  def lines; end

  private

  # source://syntax_tree//lib/syntax_tree/yarv/assembler.rb#88
  def assemble_iseq(iseq, lines); end

  # source://syntax_tree//lib/syntax_tree/yarv/assembler.rb#408
  def find_local(iseq, operands); end

  # source://syntax_tree//lib/syntax_tree/yarv/assembler.rb#417
  def parse(value); end

  # source://syntax_tree//lib/syntax_tree/yarv/assembler.rb#449
  def parse_calldata(value); end

  # source://syntax_tree//lib/syntax_tree/yarv/assembler.rb#444
  def parse_nested(lines); end

  # source://syntax_tree//lib/syntax_tree/yarv/assembler.rb#432
  def parse_number(value); end

  # source://syntax_tree//lib/syntax_tree/yarv/assembler.rb#424
  def parse_options(value, options); end

  # source://syntax_tree//lib/syntax_tree/yarv/assembler.rb#436
  def parse_string(value); end

  # source://syntax_tree//lib/syntax_tree/yarv/assembler.rb#440
  def parse_symbol(value); end

  # source://syntax_tree//lib/syntax_tree/yarv/assembler.rb#428
  def parse_type(value, type); end

  class << self
    # source://syntax_tree//lib/syntax_tree/yarv/assembler.rb#78
    def assemble(source); end

    # source://syntax_tree//lib/syntax_tree/yarv/assembler.rb#82
    def assemble_file(filepath); end
  end
end

# source://syntax_tree//lib/syntax_tree/yarv/assembler.rb#28
SyntaxTree::YARV::Assembler::CALLDATA_FLAGS = T.let(T.unsafe(nil), Hash)

# source://syntax_tree//lib/syntax_tree/yarv/assembler.rb#43
SyntaxTree::YARV::Assembler::DEFINED_TYPES = T.let(T.unsafe(nil), Array)

# source://syntax_tree//lib/syntax_tree/yarv/assembler.rb#6
class SyntaxTree::YARV::Assembler::ObjectVisitor < ::SyntaxTree::YARV::Compiler::RubyVisitor
  # source://syntax_tree//lib/syntax_tree/yarv/assembler.rb#7
  def visit_dyna_symbol(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/assembler.rb#15
  def visit_string_literal(node); end
end

# source://syntax_tree//lib/syntax_tree/yarv/basic_block.rb#7
class SyntaxTree::YARV::BasicBlock
  # source://syntax_tree//lib/syntax_tree/yarv/basic_block.rb#23
  def initialize(block_start, insns); end

  # source://syntax_tree//lib/syntax_tree/yarv/basic_block.rb#12
  def block_start; end

  # source://syntax_tree//lib/syntax_tree/yarv/basic_block.rb#35
  def each_with_length; end

  # source://syntax_tree//lib/syntax_tree/yarv/basic_block.rb#9
  def id; end

  # source://syntax_tree//lib/syntax_tree/yarv/basic_block.rb#18
  def incoming_blocks; end

  # source://syntax_tree//lib/syntax_tree/yarv/basic_block.rb#15
  def insns; end

  # source://syntax_tree//lib/syntax_tree/yarv/basic_block.rb#21
  def outgoing_blocks; end

  # source://syntax_tree//lib/syntax_tree/yarv/basic_block.rb#48
  def verify; end
end

# source://syntax_tree//lib/syntax_tree/yarv/bf.rb#7
class SyntaxTree::YARV::Bf
  # source://syntax_tree//lib/syntax_tree/yarv/bf.rb#10
  def initialize(source); end

  # source://syntax_tree//lib/syntax_tree/yarv/bf.rb#14
  def compile; end

  # source://syntax_tree//lib/syntax_tree/yarv/bf.rb#8
  def source; end

  private

  # source://syntax_tree//lib/syntax_tree/yarv/bf.rb#84
  def change_by(iseq, value); end

  # source://syntax_tree//lib/syntax_tree/yarv/bf.rb#133
  def input_char(iseq); end

  # source://syntax_tree//lib/syntax_tree/yarv/bf.rb#163
  def loop_end(iseq, start_label, end_label); end

  # source://syntax_tree//lib/syntax_tree/yarv/bf.rb#146
  def loop_start(iseq); end

  # source://syntax_tree//lib/syntax_tree/yarv/bf.rb#120
  def output_char(iseq); end

  # source://syntax_tree//lib/syntax_tree/yarv/bf.rb#105
  def shift_by(iseq, value); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#175
class SyntaxTree::YARV::BranchIf < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#178
  def initialize(label); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#194
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#210
  def branch_targets; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#206
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#190
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#182
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#214
  def falls_through?; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#176
  def label; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#198
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#202
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#186
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#236
class SyntaxTree::YARV::BranchNil < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#239
  def initialize(label); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#255
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#271
  def branch_targets; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#267
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#251
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#243
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#275
  def falls_through?; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#237
  def label; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#259
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#263
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#247
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#296
class SyntaxTree::YARV::BranchUnless < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#299
  def initialize(label); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#315
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#331
  def branch_targets; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#327
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#311
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#303
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#335
  def falls_through?; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#297
  def label; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#319
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#323
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#307
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/calldata.rb#7
class SyntaxTree::YARV::CallData
  # source://syntax_tree//lib/syntax_tree/yarv/calldata.rb#31
  def initialize(method, argc = T.unsafe(nil), flags = T.unsafe(nil), kw_arg = T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/yarv/calldata.rb#29
  def argc; end

  # source://syntax_tree//lib/syntax_tree/yarv/calldata.rb#43
  def flag?(mask); end

  # source://syntax_tree//lib/syntax_tree/yarv/calldata.rb#29
  def flags; end

  # source://syntax_tree//lib/syntax_tree/yarv/calldata.rb#53
  def inspect; end

  # source://syntax_tree//lib/syntax_tree/yarv/calldata.rb#29
  def kw_arg; end

  # source://syntax_tree//lib/syntax_tree/yarv/calldata.rb#29
  def method; end

  # source://syntax_tree//lib/syntax_tree/yarv/calldata.rb#47
  def to_h; end

  class << self
    # source://syntax_tree//lib/syntax_tree/yarv/calldata.rb#77
    def from(serialized); end
  end
end

# source://syntax_tree//lib/syntax_tree/yarv/calldata.rb#27
SyntaxTree::YARV::CallData::CALL_ARGS_BLOCKARG = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/calldata.rb#27
SyntaxTree::YARV::CallData::CALL_ARGS_SIMPLE = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/calldata.rb#27
SyntaxTree::YARV::CallData::CALL_ARGS_SPLAT = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/calldata.rb#27
SyntaxTree::YARV::CallData::CALL_BLOCKISEQ = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/calldata.rb#27
SyntaxTree::YARV::CallData::CALL_FCALL = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/calldata.rb#27
SyntaxTree::YARV::CallData::CALL_KWARG = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/calldata.rb#27
SyntaxTree::YARV::CallData::CALL_KW_SPLAT = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/calldata.rb#27
SyntaxTree::YARV::CallData::CALL_KW_SPLAT_MUT = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/calldata.rb#27
SyntaxTree::YARV::CallData::CALL_OPT_SEND = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/calldata.rb#27
SyntaxTree::YARV::CallData::CALL_SUPER = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/calldata.rb#27
SyntaxTree::YARV::CallData::CALL_TAILCALL = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/calldata.rb#27
SyntaxTree::YARV::CallData::CALL_VCALL = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/calldata.rb#27
SyntaxTree::YARV::CallData::CALL_ZSUPER = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#359
class SyntaxTree::YARV::CheckKeyword < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#362
  def initialize(keyword_bits_index, keyword_index); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#386
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#400
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#382
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#367
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#360
  def keyword_bits_index; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#360
  def keyword_index; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#392
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#396
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#374
  def to_a(iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#417
class SyntaxTree::YARV::CheckMatch < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#426
  def initialize(type); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#442
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#458
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#438
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#430
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#446
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#450
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#454
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#434
  def to_a(_iseq); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#424
  def type; end

  private

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#472
  def check?(pattern, target); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#422
SyntaxTree::YARV::CheckMatch::VM_CHECKMATCH_ARRAY = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#419
SyntaxTree::YARV::CheckMatch::VM_CHECKMATCH_TYPE_CASE = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#421
SyntaxTree::YARV::CheckMatch::VM_CHECKMATCH_TYPE_MASK = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#420
SyntaxTree::YARV::CheckMatch::VM_CHECKMATCH_TYPE_RESCUE = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#418
SyntaxTree::YARV::CheckMatch::VM_CHECKMATCH_TYPE_WHEN = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#501
class SyntaxTree::YARV::CheckType < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#526
  def initialize(type); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#588
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#608
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#584
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#530
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#592
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#596
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#600
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#580
  def to_a(_iseq); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#524
  def type; end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#508
SyntaxTree::YARV::CheckType::TYPE_ARRAY = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#511
SyntaxTree::YARV::CheckType::TYPE_BIGNUM = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#503
SyntaxTree::YARV::CheckType::TYPE_CLASS = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#515
SyntaxTree::YARV::CheckType::TYPE_COMPLEX = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#513
SyntaxTree::YARV::CheckType::TYPE_DATA = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#519
SyntaxTree::YARV::CheckType::TYPE_FALSE = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#512
SyntaxTree::YARV::CheckType::TYPE_FILE = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#521
SyntaxTree::YARV::CheckType::TYPE_FIXNUM = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#505
SyntaxTree::YARV::CheckType::TYPE_FLOAT = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#509
SyntaxTree::YARV::CheckType::TYPE_HASH = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#514
SyntaxTree::YARV::CheckType::TYPE_MATCH = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#504
SyntaxTree::YARV::CheckType::TYPE_MODULE = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#517
SyntaxTree::YARV::CheckType::TYPE_NIL = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#502
SyntaxTree::YARV::CheckType::TYPE_OBJECT = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#516
SyntaxTree::YARV::CheckType::TYPE_RATIONAL = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#507
SyntaxTree::YARV::CheckType::TYPE_REGEXP = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#506
SyntaxTree::YARV::CheckType::TYPE_STRING = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#510
SyntaxTree::YARV::CheckType::TYPE_STRUCT = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#520
SyntaxTree::YARV::CheckType::TYPE_SYMBOL = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#518
SyntaxTree::YARV::CheckType::TYPE_TRUE = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#522
SyntaxTree::YARV::CheckType::TYPE_UNDEF = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#47
class SyntaxTree::YARV::Compiler < ::SyntaxTree::BasicVisitor
  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#293
  def initialize(options = T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#286
  def iseq; end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#291
  def last_statement; end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#283
  def options; end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#299
  def visit_BEGIN(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#303
  def visit_CHAR(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#311
  def visit_END(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#339
  def visit_alias(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#347
  def visit_aref(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#369
  def visit_arg_block(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#373
  def visit_arg_paren(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#377
  def visit_arg_star(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#382
  def visit_args(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#386
  def visit_array(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#421
  def visit_aryptn(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#424
  def visit_assign(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#522
  def visit_assoc(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#527
  def visit_assoc_splat(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#531
  def visit_backref(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#535
  def visit_bare_assoc_hash(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#543
  def visit_begin(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#546
  def visit_binary(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#575
  def visit_block(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#585
  def visit_block_var(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#599
  def visit_blockarg(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#605
  def visit_bodystmt(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#609
  def visit_break(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#612
  def visit_call(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#712
  def visit_case(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#757
  def visit_class(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#792
  def visit_command(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#805
  def visit_command_call(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#818
  def visit_const_path_field(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#822
  def visit_const_path_ref(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#827
  def visit_def(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#850
  def visit_defined(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#907
  def visit_dyna_symbol(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#913
  def visit_else(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#918
  def visit_elsif(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#929
  def visit_ensure(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#932
  def visit_field(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#936
  def visit_float(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#940
  def visit_fndptn(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#943
  def visit_for(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#976
  def visit_hash(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#988
  def visit_heredoc(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#985
  def visit_hshptn(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#999
  def visit_if(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1053
  def visit_if_op(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1074
  def visit_imaginary(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1078
  def visit_int(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1082
  def visit_kwrest_param(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1088
  def visit_label(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1092
  def visit_lambda(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1106
  def visit_lambda_var(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1110
  def visit_massign(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1116
  def visit_method_add_block(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1129
  def visit_mlhs(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1142
  def visit_module(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1171
  def visit_mrhs(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1180
  def visit_next(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1183
  def visit_not(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1188
  def visit_opassign(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1254
  def visit_params(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1360
  def visit_paren(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1364
  def visit_pinned_begin(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1367
  def visit_pinned_var_ref(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1370
  def visit_program(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1421
  def visit_qsymbols(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1425
  def visit_qwords(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1434
  def visit_range(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1444
  def visit_rassign(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1521
  def visit_rational(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1525
  def visit_redo(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1528
  def visit_regexp_literal(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1538
  def visit_rescue(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1541
  def visit_rescue_ex(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1544
  def visit_rescue_mod(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1547
  def visit_rest_param(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1553
  def visit_retry(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1556
  def visit_return(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1559
  def visit_sclass(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1580
  def visit_statements(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1594
  def visit_string_concat(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1606
  def visit_string_embexpr(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1610
  def visit_string_literal(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1619
  def visit_super(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1633
  def visit_symbol_literal(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1637
  def visit_symbols(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1656
  def visit_top_const_ref(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1660
  def visit_tstring_content(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1668
  def visit_unary(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1689
  def visit_undef(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1699
  def visit_unless(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1725
  def visit_until(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1744
  def visit_var_field(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1761
  def visit_var_ref(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1796
  def visit_vcall(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1808
  def visit_when(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1812
  def visit_while(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1831
  def visit_word(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1840
  def visit_words(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1850
  def visit_xstring_literal(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1863
  def visit_yield(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1869
  def visit_zsuper(_node); end

  private

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1887
  def argument_parts(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1908
  def constant_names(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#2196
  def last_statement?; end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#1936
  def opassign_defined(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#2016
  def push_interpolate; end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#2029
  def visit_pattern(node, end_label); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#2137
  def visit_string_parts(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#2167
  def with_child_iseq(child_iseq); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#2185
  def with_last_statement; end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#2206
  def with_opassign(node); end
end

# source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#52
class SyntaxTree::YARV::Compiler::Options
  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#53
  def initialize(frozen_string_literal: T.unsafe(nil), inline_const_cache: T.unsafe(nil), operands_unification: T.unsafe(nil), peephole_optimization: T.unsafe(nil), specialized_instruction: T.unsafe(nil), tailcall_optimization: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#80
  def frozen_string_literal!; end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#84
  def frozen_string_literal?; end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#88
  def inline_const_cache?; end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#92
  def operands_unification?; end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#96
  def peephole_optimization?; end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#100
  def specialized_instruction?; end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#104
  def tailcall_optimization?; end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#69
  def to_hash; end
end

# source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#114
class SyntaxTree::YARV::Compiler::RubyVisitor < ::SyntaxTree::BasicVisitor
  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_BEGIN(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_CHAR(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_END(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit___end__(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_alias(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_aref(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_aref_field(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_arg_block(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_arg_paren(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_arg_star(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_args(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_args_forward(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#128
  def visit_array(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_aryptn(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_assign(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_assoc(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_assoc_splat(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_backref(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_backtick(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#132
  def visit_bare_assoc_hash(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_begin(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_binary(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_block(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_block_var(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_blockarg(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_bodystmt(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_break(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_call(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_case(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_class(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_comma(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_command(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_command_call(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_comment(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_const(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_const_path_field(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_const_path_ref(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_const_ref(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_cvar(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_def(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_defined(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_dyna_symbol(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_else(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_elsif(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_embdoc(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_embexpr_beg(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_embexpr_end(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_embvar(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_ensure(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_excessed_comma(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_field(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#141
  def visit_float(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_fndptn(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_for(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_gvar(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#132
  def visit_hash(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_heredoc(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_heredoc_beg(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_heredoc_end(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_hshptn(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_ident(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_if(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_if_op(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#147
  def visit_imaginary(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_in(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#151
  def visit_int(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_ivar(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_kw(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_kwrest_param(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#166
  def visit_label(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_label_end(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_lambda(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_lambda_var(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_lbrace(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_lbracket(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_lparen(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_massign(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_method_add_block(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_mlhs(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_mlhs_paren(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_module(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#170
  def visit_mrhs(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_next(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_not(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_op(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_opassign(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_params(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_paren(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_period(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_pinned_begin(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_pinned_var_ref(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_program(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#174
  def visit_qsymbols(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_qsymbols_beg(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#178
  def visit_qwords(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_qwords_beg(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#182
  def visit_range(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_rassign(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#187
  def visit_rational(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_rbrace(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_rbracket(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_redo(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_regexp_beg(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_regexp_content(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_regexp_end(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#191
  def visit_regexp_literal(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#249
  def visit_regexp_literal_flags(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_rescue(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_rescue_ex(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_rescue_mod(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_rest_param(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_retry(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_return(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_rparen(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_sclass(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_statements(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_string_concat(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_string_content(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_string_dvar(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_string_embexpr(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_string_literal(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_super(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_symbeg(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_symbol_content(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#204
  def visit_symbol_literal(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#208
  def visit_symbols(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_symbols_beg(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_tlambda(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_tlambeg(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_top_const_field(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_top_const_ref(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_tstring_beg(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#212
  def visit_tstring_content(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_tstring_end(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_unary(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_undef(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_unless(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_unsupported(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_until(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_var_field(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#216
  def visit_var_ref(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_vcall(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_void_stmt(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_when(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_while(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#231
  def visit_word(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#241
  def visit_words(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_words_beg(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_xstring(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_xstring_literal(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_yield(_node); end

  # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#268
  def visit_zsuper(_node); end

  class << self
    # source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#122
    def compile(node); end
  end
end

# source://syntax_tree//lib/syntax_tree/yarv/compiler.rb#117
class SyntaxTree::YARV::Compiler::RubyVisitor::CompilationError < ::StandardError; end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#674
class SyntaxTree::YARV::ConcatArray < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#687
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#699
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#683
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#675
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#691
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#695
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#679
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#720
class SyntaxTree::YARV::ConcatStrings < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#723
  def initialize(number); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#739
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#755
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#735
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#727
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#743
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#721
  def number; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#747
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#751
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#731
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/control_flow_graph.rb#16
class SyntaxTree::YARV::ControlFlowGraph
  # source://syntax_tree//lib/syntax_tree/yarv/control_flow_graph.rb#173
  def initialize(iseq, insns, blocks); end

  # source://syntax_tree//lib/syntax_tree/yarv/control_flow_graph.rb#171
  def blocks; end

  # source://syntax_tree//lib/syntax_tree/yarv/control_flow_graph.rb#179
  def disasm; end

  # source://syntax_tree//lib/syntax_tree/yarv/control_flow_graph.rb#168
  def insns; end

  # source://syntax_tree//lib/syntax_tree/yarv/control_flow_graph.rb#163
  def iseq; end

  # source://syntax_tree//lib/syntax_tree/yarv/control_flow_graph.rb#202
  def to_dfg; end

  # source://syntax_tree//lib/syntax_tree/yarv/control_flow_graph.rb#210
  def to_mermaid; end

  # source://syntax_tree//lib/syntax_tree/yarv/control_flow_graph.rb#206
  def to_son; end

  # source://syntax_tree//lib/syntax_tree/yarv/control_flow_graph.rb#248
  def verify; end

  class << self
    # source://syntax_tree//lib/syntax_tree/yarv/control_flow_graph.rb#252
    def compile(iseq); end
  end
end

# source://syntax_tree//lib/syntax_tree/yarv/control_flow_graph.rb#19
class SyntaxTree::YARV::ControlFlowGraph::Compiler
  # source://syntax_tree//lib/syntax_tree/yarv/control_flow_graph.rb#34
  def initialize(iseq); end

  # source://syntax_tree//lib/syntax_tree/yarv/control_flow_graph.rb#54
  def compile; end

  # source://syntax_tree//lib/syntax_tree/yarv/control_flow_graph.rb#25
  def insns; end

  # source://syntax_tree//lib/syntax_tree/yarv/control_flow_graph.rb#21
  def iseq; end

  # source://syntax_tree//lib/syntax_tree/yarv/control_flow_graph.rb#32
  def labels; end

  private

  # source://syntax_tree//lib/syntax_tree/yarv/control_flow_graph.rb#92
  def build_basic_blocks; end

  # source://syntax_tree//lib/syntax_tree/yarv/control_flow_graph.rb#123
  def connect_basic_blocks(blocks); end

  # source://syntax_tree//lib/syntax_tree/yarv/control_flow_graph.rb#72
  def find_basic_block_starts; end

  # source://syntax_tree//lib/syntax_tree/yarv/control_flow_graph.rb#145
  def prune_basic_blocks(blocks); end
end

# source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#18
class SyntaxTree::YARV::DataFlowGraph
  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#68
  def initialize(cfg, insn_flows, block_flows); end

  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#66
  def block_flows; end

  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#74
  def blocks; end

  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#66
  def cfg; end

  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#78
  def disasm; end

  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#66
  def insn_flows; end

  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#127
  def to_mermaid; end

  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#123
  def to_son; end

  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#179
  def verify; end

  class << self
    # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#204
    def compile(cfg); end
  end
end

# source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#32
class SyntaxTree::YARV::DataFlowGraph::BlockArgument
  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#35
  def initialize(name); end

  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#39
  def local?; end

  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#33
  def name; end

  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#43
  def to_str; end
end

# source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#210
class SyntaxTree::YARV::DataFlowGraph::Compiler
  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#221
  def initialize(cfg); end

  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#219
  def block_flows; end

  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#212
  def cfg; end

  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#227
  def compile; end

  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#216
  def insn_flows; end

  private

  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#304
  def find_external_flow; end

  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#237
  def find_internal_flow; end
end

# source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#20
class SyntaxTree::YARV::DataFlowGraph::DataFlow
  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#24
  def initialize; end

  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#21
  def in; end

  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#22
  def out; end
end

# source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#50
class SyntaxTree::YARV::DataFlowGraph::LocalArgument
  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#53
  def initialize(length); end

  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#51
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#57
  def local?; end

  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#51
  def name; end

  # source://syntax_tree//lib/syntax_tree/yarv/data_flow_graph.rb#61
  def to_str; end
end

# source://syntax_tree//lib/syntax_tree/yarv/decompiler.rb#7
class SyntaxTree::YARV::Decompiler
  include ::SyntaxTree::DSL

  # source://syntax_tree//lib/syntax_tree/yarv/decompiler.rb#32
  def initialize(iseq); end

  # source://syntax_tree//lib/syntax_tree/yarv/decompiler.rb#30
  def block_label; end

  # source://syntax_tree//lib/syntax_tree/yarv/decompiler.rb#30
  def iseq; end

  # source://syntax_tree//lib/syntax_tree/yarv/decompiler.rb#37
  def to_ruby; end

  private

  # source://syntax_tree//lib/syntax_tree/yarv/decompiler.rb#52
  def decompile(iseq); end

  # source://syntax_tree//lib/syntax_tree/yarv/decompiler.rb#256
  def local_name(index, level); end

  # source://syntax_tree//lib/syntax_tree/yarv/decompiler.rb#43
  def node_for(value); end
end

# source://syntax_tree//lib/syntax_tree/yarv/decompiler.rb#12
class SyntaxTree::YARV::Decompiler::BlockLabel
  include ::SyntaxTree::DSL

  # source://syntax_tree//lib/syntax_tree/yarv/decompiler.rb#16
  def initialize(name); end

  # source://syntax_tree//lib/syntax_tree/yarv/decompiler.rb#20
  def field; end

  # source://syntax_tree//lib/syntax_tree/yarv/decompiler.rb#14
  def name; end

  # source://syntax_tree//lib/syntax_tree/yarv/decompiler.rb#24
  def ref; end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#775
class SyntaxTree::YARV::DefineClass < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#784
  def initialize(name, class_iseq, flags); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#806
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#823
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#782
  def class_iseq; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#802
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#790
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#782
  def flags; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#811
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#782
  def name; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#815
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#819
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#798
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#780
SyntaxTree::YARV::DefineClass::FLAG_HAS_SUPERCLASS = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#779
SyntaxTree::YARV::DefineClass::FLAG_SCOPED = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#776
SyntaxTree::YARV::DefineClass::TYPE_CLASS = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#778
SyntaxTree::YARV::DefineClass::TYPE_MODULE = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#777
SyntaxTree::YARV::DefineClass::TYPE_SINGLETON_CLASS = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1068
class SyntaxTree::YARV::DefineMethod < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1071
  def initialize(method_name, method_iseq); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1092
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1101
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1088
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1076
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1097
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1069
  def method_iseq; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1069
  def method_name; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1084
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1137
class SyntaxTree::YARV::DefineSMethod < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1140
  def initialize(method_name, method_iseq); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1161
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1174
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1157
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1145
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1166
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1138
  def method_iseq; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1138
  def method_name; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1170
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1153
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#859
class SyntaxTree::YARV::Defined < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#880
  def initialize(type, name, message); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#939
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#956
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#935
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#886
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#944
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#878
  def message; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#878
  def name; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#948
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#952
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#931
  def to_a(_iseq); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#878
  def type; end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#872
SyntaxTree::YARV::Defined::TYPE_ASGN = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#865
SyntaxTree::YARV::Defined::TYPE_CONST = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#876
SyntaxTree::YARV::Defined::TYPE_CONST_FROM = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#864
SyntaxTree::YARV::Defined::TYPE_CVAR = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#873
SyntaxTree::YARV::Defined::TYPE_EXPR = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#871
SyntaxTree::YARV::Defined::TYPE_FALSE = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#875
SyntaxTree::YARV::Defined::TYPE_FUNC = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#863
SyntaxTree::YARV::Defined::TYPE_GVAR = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#861
SyntaxTree::YARV::Defined::TYPE_IVAR = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#862
SyntaxTree::YARV::Defined::TYPE_LVAR = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#866
SyntaxTree::YARV::Defined::TYPE_METHOD = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#860
SyntaxTree::YARV::Defined::TYPE_NIL = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#874
SyntaxTree::YARV::Defined::TYPE_REF = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#869
SyntaxTree::YARV::Defined::TYPE_SELF = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#870
SyntaxTree::YARV::Defined::TYPE_TRUE = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#867
SyntaxTree::YARV::Defined::TYPE_YIELD = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#868
SyntaxTree::YARV::Defined::TYPE_ZSUPER = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1011
class SyntaxTree::YARV::DefinedIVar < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1014
  def initialize(name, cache, message); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1035
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1012
  def cache; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1048
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1031
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1020
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1040
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1012
  def message; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1012
  def name; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1044
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1027
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#5
class SyntaxTree::YARV::Disassembler
  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#46
  def initialize(current_iseq = T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#58
  def calldata(value); end

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#44
  def current_iseq; end

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#44
  def current_iseq=(_arg0); end

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#43
  def current_prefix; end

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#62
  def enqueue(iseq); end

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#66
  def event(name); end

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#116
  def format!; end

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#123
  def format_insns!(insns, length = T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#87
  def inline_storage(cache); end

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#91
  def instruction(name, operands = T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#95
  def label(value); end

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#99
  def local(index, explicit: T.unsafe(nil), implicit: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#108
  def object(value); end

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#41
  def output; end

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#167
  def print(string); end

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#171
  def puts(string); end

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#41
  def queue; end

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#175
  def string; end

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#179
  def with_prefix(value); end

  private

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#192
  def format_iseq(iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#9
class SyntaxTree::YARV::Disassembler::Squished
  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#10
  def calldata(value); end

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#14
  def enqueue(iseq); end

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#17
  def event(name); end

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#20
  def inline_storage(cache); end

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#24
  def instruction(name, operands = T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#28
  def label(value); end

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#32
  def local(index, **_arg1); end

  # source://syntax_tree//lib/syntax_tree/yarv/disassembler.rb#36
  def object(value); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1206
class SyntaxTree::YARV::Dup < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1219
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1231
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1215
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1207
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1223
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1227
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1235
  def side_effects?; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1211
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1250
class SyntaxTree::YARV::DupArray < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1253
  def initialize(object); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1269
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1281
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1265
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1257
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1273
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1251
  def object; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1277
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1261
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1296
class SyntaxTree::YARV::DupHash < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1299
  def initialize(object); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1315
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1327
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1311
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1303
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1319
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1297
  def object; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1323
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1307
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1342
class SyntaxTree::YARV::DupN < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1345
  def initialize(number); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1361
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1373
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1357
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1349
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1365
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1343
  def number; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1369
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1353
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1392
class SyntaxTree::YARV::ExpandArray < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1395
  def initialize(number, flags); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1412
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1429
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1408
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1400
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1393
  def flags; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1417
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1393
  def number; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1421
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1425
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1404
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1486
class SyntaxTree::YARV::GetBlockParam < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1489
  def initialize(index, level); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1508
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1521
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1504
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1494
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1487
  def index; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1513
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1487
  def level; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1517
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1498
  def to_a(iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1541
class SyntaxTree::YARV::GetBlockParamProxy < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1544
  def initialize(index, level); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1566
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1579
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1562
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1549
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1542
  def index; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1571
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1542
  def level; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1575
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1556
  def to_a(iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1596
class SyntaxTree::YARV::GetClassVariable < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1599
  def initialize(name, cache); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1619
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1597
  def cache; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1632
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1615
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1604
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1624
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1597
  def name; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1628
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1611
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1651
class SyntaxTree::YARV::GetConstant < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1654
  def initialize(name); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1670
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1686
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1666
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1658
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1674
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1652
  def name; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1678
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1682
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1662
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1717
class SyntaxTree::YARV::GetGlobal < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1720
  def initialize(name); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1736
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1748
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1732
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1724
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1740
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1718
  def name; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1744
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1728
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1772
class SyntaxTree::YARV::GetInstanceVariable < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1775
  def initialize(name, cache); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1795
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1773
  def cache; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1808
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1791
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1780
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1800
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1773
  def name; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1804
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1787
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1828
class SyntaxTree::YARV::GetLocal < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1831
  def initialize(index, level); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1850
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1862
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1846
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1836
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1829
  def index; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1854
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1829
  def level; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1858
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1840
  def to_a(iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1880
class SyntaxTree::YARV::GetLocalWC0 < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1883
  def initialize(index); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1899
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1915
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1911
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1895
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1887
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1881
  def index; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1903
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1907
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1891
  def to_a(iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1933
class SyntaxTree::YARV::GetLocalWC1 < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1936
  def initialize(index); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1952
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1968
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1964
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1948
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1940
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1934
  def index; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1956
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1960
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1944
  def to_a(iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1983
class SyntaxTree::YARV::GetSpecial < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1990
  def initialize(key, type); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2007
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2019
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2003
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1995
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1988
  def key; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2011
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2015
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1999
  def to_a(_iseq); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1988
  def type; end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1985
SyntaxTree::YARV::GetSpecial::SVAR_BACKREF = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1986
SyntaxTree::YARV::GetSpecial::SVAR_FLIPFLOP_START = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#1984
SyntaxTree::YARV::GetSpecial::SVAR_LASTLINE = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#7
class SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#33
  def branch_targets; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#11
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#44
  def falls_through?; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#38
  def leaves?; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#18
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#28
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#23
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#51
  def side_effects?; end
end

# source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#9
class SyntaxTree::YARV::InstructionSequence
  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#168
  def initialize(name, file, line, type, parent_iseq = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#652
  def adjuststack(number); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#656
  def anytostring; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#143
  def argument_options; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#142
  def argument_size; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#142
  def argument_size=(_arg0); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#472
  def block_child_iseq(line); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#660
  def branchif(label); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#664
  def branchnil(label); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#668
  def branchunless(label); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#565
  def catch_break(iseq, begin_label, end_label, exit_label, restore_sp); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#575
  def catch_ensure(iseq, begin_label, end_label, exit_label, restore_sp); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#585
  def catch_next(begin_label, end_label, exit_label, restore_sp); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#595
  def catch_redo(begin_label, end_label, exit_label, restore_sp); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#605
  def catch_rescue(iseq, begin_label, end_label, exit_label, restore_sp); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#615
  def catch_retry(begin_label, end_label, exit_label, restore_sp); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#146
  def catch_table; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#672
  def checkkeyword(keyword_bits_index, keyword_index); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#676
  def checkmatch(type); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#680
  def checktype(type); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#468
  def child_iseq(name, line, type); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#478
  def class_child_iseq(name, line); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#305
  def compile!; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#684
  def concatarray; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#688
  def concatstrings(number); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#692
  def defineclass(name, class_iseq, flags); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#696
  def defined(type, name, message); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#700
  def definedivar(name, cache, message); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#709
  def definemethod(name, method_iseq); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#713
  def definesmethod(name, method_iseq); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#292
  def disasm; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#717
  def dup; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#721
  def duparray(object); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#725
  def duphash(object); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#729
  def dupn(number); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#232
  def eval; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#648
  def event(name); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#733
  def expandarray(length, flags); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#132
  def file; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#737
  def getblockparam(index, level); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#741
  def getblockparamproxy(index, level); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#745
  def getclassvariable(name); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#753
  def getconstant(name); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#757
  def getglobal(name); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#761
  def getinstancevariable(name); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#769
  def getlocal(index, level); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#788
  def getspecial(key, type); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#207
  def inline_storage; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#213
  def inline_storage_for(name); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#156
  def inline_storages; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#149
  def insns; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#299
  def inspect; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#792
  def intern; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#796
  def invokeblock(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#800
  def invokesuper(calldata, block_iseq); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#804
  def jump(label); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#629
  def label; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#808
  def leave; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#219
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#132
  def line; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#152
  def local_table; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#199
  def local_variable(name, level = T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#482
  def method_child_iseq(name, line); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#486
  def module_child_iseq(name, line); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#129
  def name; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#812
  def newarray(number); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#816
  def newarraykwsplat(number); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#820
  def newhash(number); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#824
  def newrange(exclude_end); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#828
  def nop; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#832
  def objtostring(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#836
  def once(iseq, cache); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#840
  def opt_aref_with(object, calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#844
  def opt_aset_with(object, calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#848
  def opt_case_dispatch(case_dispatch_hash, else_label); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#852
  def opt_getconstant_path(names); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#888
  def opt_getinlinecache(label, cache); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#892
  def opt_setinlinecache(cache); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#166
  def options; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#138
  def parent_iseq; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#896
  def pop; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#633
  def push(value); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#900
  def putnil; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#904
  def putobject(object); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#922
  def putself; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#926
  def putspecialobject(object); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#930
  def putstring(object); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#934
  def send(calldata, block_iseq = T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#938
  def setblockparam(index, level); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#942
  def setclassvariable(name); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#950
  def setconstant(name); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#954
  def setglobal(name); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#958
  def setinstancevariable(name); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#966
  def setlocal(index, level); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#985
  def setn(number); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#989
  def setspecial(key); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#490
  def singleton_class_child_iseq(line); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#341
  def specialize_instructions!; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#993
  def splatarray(flag); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#163
  def stack; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#159
  def storage_index; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#997
  def swap; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#1001
  def throw(type); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#236
  def to_a; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#280
  def to_cfg; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#284
  def to_dfg; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#288
  def to_son; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#1005
  def topn(number); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#1009
  def toregexp(options, length); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#135
  def type; end

  class << self
    # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#1015
    def from(source, options = T.unsafe(nil), parent_iseq = T.unsafe(nil)); end

    # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#13
    def iseq_load(iseq); end
  end
end

# source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#510
class SyntaxTree::YARV::InstructionSequence::CatchBreak < ::SyntaxTree::YARV::InstructionSequence::CatchEntry
  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#511
  def to_a; end
end

# source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#523
class SyntaxTree::YARV::InstructionSequence::CatchEnsure < ::SyntaxTree::YARV::InstructionSequence::CatchEntry
  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#524
  def to_a; end
end

# source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#498
class SyntaxTree::YARV::InstructionSequence::CatchEntry
  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#501
  def initialize(iseq, begin_label, end_label, exit_label, restore_sp); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#499
  def begin_label; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#499
  def end_label; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#499
  def exit_label; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#499
  def iseq; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#499
  def restore_sp; end
end

# source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#535
class SyntaxTree::YARV::InstructionSequence::CatchNext < ::SyntaxTree::YARV::InstructionSequence::CatchEntry
  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#536
  def to_a; end
end

# source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#541
class SyntaxTree::YARV::InstructionSequence::CatchRedo < ::SyntaxTree::YARV::InstructionSequence::CatchEntry
  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#542
  def to_a; end
end

# source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#547
class SyntaxTree::YARV::InstructionSequence::CatchRescue < ::SyntaxTree::YARV::InstructionSequence::CatchEntry
  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#548
  def to_a; end
end

# source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#559
class SyntaxTree::YARV::InstructionSequence::CatchRetry < ::SyntaxTree::YARV::InstructionSequence::CatchEntry
  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#560
  def to_a; end
end

# source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#35
class SyntaxTree::YARV::InstructionSequence::InstructionList
  include ::Enumerable

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#48
  def initialize; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#53
  def each(&_blk); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#58
  def each_node; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#46
  def head_node; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#68
  def push(instruction); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#46
  def tail_node; end
end

# source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#36
class SyntaxTree::YARV::InstructionSequence::InstructionList::Node
  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#39
  def initialize(value, next_node = T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#37
  def next_node; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#37
  def next_node=(_arg0); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#37
  def value; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#37
  def value=(_arg0); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#107
class SyntaxTree::YARV::InstructionSequence::Label
  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#115
  def initialize(name = T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#123
  def inspect; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#108
  def name; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#113
  def node; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#113
  def node=(_arg0); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#119
  def patch!(name); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#83
SyntaxTree::YARV::InstructionSequence::MAGIC = T.let(T.unsafe(nil), String)

# source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#90
class SyntaxTree::YARV::InstructionSequence::Stack
  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#93
  def initialize; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#98
  def change_by(value); end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#91
  def current_size; end

  # source://syntax_tree//lib/syntax_tree/yarv/instruction_sequence.rb#91
  def maximum_size; end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2042
class SyntaxTree::YARV::Intern < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2055
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2067
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2051
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2043
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2059
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2063
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2047
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2086
class SyntaxTree::YARV::InvokeBlock < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2089
  def initialize(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2105
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2121
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2087
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2101
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2093
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2109
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2113
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2117
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2097
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2140
class SyntaxTree::YARV::InvokeSuper < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2143
  def initialize(calldata, block_iseq); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2164
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2141
  def block_iseq; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2178
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2141
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2160
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2148
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2169
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2174
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2156
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2217
class SyntaxTree::YARV::Jump < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2220
  def initialize(label); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2236
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2248
  def branch_targets; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2244
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2232
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2224
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2218
  def label; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2240
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2228
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2263
class SyntaxTree::YARV::Leave < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2276
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2290
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2272
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2264
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2294
  def leaves?; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2280
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2284
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2268
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#7
module SyntaxTree::YARV::Legacy; end

# source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#22
class SyntaxTree::YARV::Legacy::GetClassVariable < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#25
  def initialize(name); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#41
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#57
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#53
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#37
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#29
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#45
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#23
  def name; end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#49
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#33
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#78
class SyntaxTree::YARV::Legacy::OptGetInlineCache < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#81
  def initialize(label, cache); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#101
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#118
  def branch_targets; end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#79
  def cache; end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#114
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#97
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#86
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#122
  def falls_through?; end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#79
  def label; end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#106
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#110
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#93
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#139
class SyntaxTree::YARV::Legacy::OptNewArrayMax < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#142
  def initialize(number); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#158
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#174
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#154
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#146
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#162
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#140
  def number; end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#166
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#170
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#150
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#191
class SyntaxTree::YARV::Legacy::OptNewArrayMin < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#194
  def initialize(number); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#210
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#226
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#206
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#198
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#214
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#192
  def number; end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#218
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#222
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#202
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#246
class SyntaxTree::YARV::Legacy::OptSetInlineCache < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#249
  def initialize(cache); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#265
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#247
  def cache; end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#281
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#261
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#253
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#269
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#273
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#277
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#257
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#299
class SyntaxTree::YARV::Legacy::SetClassVariable < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#302
  def initialize(name); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#318
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#334
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#330
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#314
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#306
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#322
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#300
  def name; end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#326
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/legacy.rb#310
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/local_table.rb#10
class SyntaxTree::YARV::LocalTable
  # source://syntax_tree//lib/syntax_tree/yarv/local_table.rb#43
  def initialize; end

  # source://syntax_tree//lib/syntax_tree/yarv/local_table.rb#73
  def block(name); end

  # source://syntax_tree//lib/syntax_tree/yarv/local_table.rb#47
  def empty?; end

  # source://syntax_tree//lib/syntax_tree/yarv/local_table.rb#51
  def find(name, level = T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/yarv/local_table.rb#56
  def has?(name); end

  # source://syntax_tree//lib/syntax_tree/yarv/local_table.rb#41
  def locals; end

  # source://syntax_tree//lib/syntax_tree/yarv/local_table.rb#64
  def name_at(index); end

  # source://syntax_tree//lib/syntax_tree/yarv/local_table.rb#60
  def names; end

  # source://syntax_tree//lib/syntax_tree/yarv/local_table.rb#84
  def offset(index); end

  # source://syntax_tree//lib/syntax_tree/yarv/local_table.rb#78
  def plain(name); end

  # source://syntax_tree//lib/syntax_tree/yarv/local_table.rb#68
  def size; end
end

# source://syntax_tree//lib/syntax_tree/yarv/local_table.rb#13
class SyntaxTree::YARV::LocalTable::BlockLocal
  # source://syntax_tree//lib/syntax_tree/yarv/local_table.rb#16
  def initialize(name); end

  # source://syntax_tree//lib/syntax_tree/yarv/local_table.rb#14
  def name; end
end

# source://syntax_tree//lib/syntax_tree/yarv/local_table.rb#31
class SyntaxTree::YARV::LocalTable::Lookup
  # source://syntax_tree//lib/syntax_tree/yarv/local_table.rb#34
  def initialize(local, index, level); end

  # source://syntax_tree//lib/syntax_tree/yarv/local_table.rb#32
  def index; end

  # source://syntax_tree//lib/syntax_tree/yarv/local_table.rb#32
  def level; end

  # source://syntax_tree//lib/syntax_tree/yarv/local_table.rb#32
  def local; end
end

# source://syntax_tree//lib/syntax_tree/yarv/local_table.rb#22
class SyntaxTree::YARV::LocalTable::PlainLocal
  # source://syntax_tree//lib/syntax_tree/yarv/local_table.rb#25
  def initialize(name); end

  # source://syntax_tree//lib/syntax_tree/yarv/local_table.rb#23
  def name; end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2311
class SyntaxTree::YARV::NewArray < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2314
  def initialize(number); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2330
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2346
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2326
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2318
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2334
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2312
  def number; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2338
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2342
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2322
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2363
class SyntaxTree::YARV::NewArrayKwSplat < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2366
  def initialize(number); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2382
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2398
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2378
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2370
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2386
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2364
  def number; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2390
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2394
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2374
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2417
class SyntaxTree::YARV::NewHash < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2420
  def initialize(number); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2436
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2452
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2432
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2424
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2440
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2418
  def number; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2444
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2448
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2428
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2472
class SyntaxTree::YARV::NewRange < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2475
  def initialize(exclude_end); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2491
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2507
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2487
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2479
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2473
  def exclude_end; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2495
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2499
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2503
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2483
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2523
class SyntaxTree::YARV::Nop < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2536
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2540
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2532
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2524
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2543
  def side_effects?; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2528
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2562
class SyntaxTree::YARV::ObjToString < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2565
  def initialize(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2581
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2597
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2563
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2577
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2569
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2585
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2589
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2593
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2573
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2615
class SyntaxTree::YARV::Once < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2618
  def initialize(iseq, cache); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2636
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2616
  def cache; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2648
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2632
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2623
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2616
  def iseq; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2640
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2644
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2628
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2668
class SyntaxTree::YARV::OptAnd < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2671
  def initialize(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2687
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2707
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2669
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2703
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2683
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2675
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2691
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2695
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2699
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2679
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2724
class SyntaxTree::YARV::OptAref < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2727
  def initialize(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2743
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2763
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2725
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2759
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2739
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2731
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2747
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2751
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2755
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2735
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2781
class SyntaxTree::YARV::OptArefWith < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2784
  def initialize(object, calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2804
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2821
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2782
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2800
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2789
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2809
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2782
  def object; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2813
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2817
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2796
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2839
class SyntaxTree::YARV::OptAset < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2842
  def initialize(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2858
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2878
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2840
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2874
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2854
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2846
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2862
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2866
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2870
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2850
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2895
class SyntaxTree::YARV::OptAsetWith < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2898
  def initialize(object, calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2918
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2935
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2896
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2914
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2903
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2923
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2896
  def object; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2927
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2931
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2910
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2964
class SyntaxTree::YARV::OptCaseDispatch < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2967
  def initialize(case_dispatch_hash, else_label); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2991
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3009
  def branch_targets; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3005
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2965
  def case_dispatch_hash; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2987
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2972
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2965
  def else_label; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3013
  def falls_through?; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2997
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3001
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#2979
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3031
class SyntaxTree::YARV::OptDiv < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3034
  def initialize(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3050
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3070
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3032
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3066
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3046
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3038
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3054
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3058
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3062
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3042
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3087
class SyntaxTree::YARV::OptEmptyP < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3090
  def initialize(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3106
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3126
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3088
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3122
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3102
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3094
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3110
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3114
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3118
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3098
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3144
class SyntaxTree::YARV::OptEq < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3147
  def initialize(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3163
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3183
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3145
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3179
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3159
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3151
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3167
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3171
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3175
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3155
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3201
class SyntaxTree::YARV::OptGE < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3204
  def initialize(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3220
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3240
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3202
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3236
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3216
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3208
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3224
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3228
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3232
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3212
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3314
class SyntaxTree::YARV::OptGT < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3317
  def initialize(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3333
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3353
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3315
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3349
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3329
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3321
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3337
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3341
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3345
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3325
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3257
class SyntaxTree::YARV::OptGetConstantPath < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3260
  def initialize(names); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3277
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3289
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3273
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3264
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3281
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3258
  def names; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3285
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3269
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3371
class SyntaxTree::YARV::OptLE < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3374
  def initialize(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3390
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3410
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3372
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3406
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3386
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3378
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3394
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3398
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3402
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3382
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3485
class SyntaxTree::YARV::OptLT < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3488
  def initialize(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3504
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3524
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3486
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3520
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3500
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3492
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3508
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3512
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3516
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3496
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3542
class SyntaxTree::YARV::OptLTLT < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3545
  def initialize(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3561
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3581
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3543
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3577
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3557
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3549
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3565
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3569
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3573
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3553
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3428
class SyntaxTree::YARV::OptLength < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3431
  def initialize(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3447
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3467
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3429
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3463
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3443
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3435
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3451
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3455
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3459
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3439
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3600
class SyntaxTree::YARV::OptMinus < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3603
  def initialize(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3619
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3639
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3601
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3635
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3615
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3607
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3623
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3627
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3631
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3611
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3657
class SyntaxTree::YARV::OptMod < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3660
  def initialize(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3676
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3696
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3658
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3692
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3672
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3664
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3680
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3684
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3688
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3668
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3714
class SyntaxTree::YARV::OptMult < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3717
  def initialize(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3733
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3753
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3715
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3749
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3729
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3721
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3737
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3741
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3745
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3725
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3773
class SyntaxTree::YARV::OptNEq < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3776
  def initialize(eq_calldata, neq_calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3796
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3813
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3792
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3781
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3774
  def eq_calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3801
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3774
  def neq_calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3805
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3809
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3788
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3832
class SyntaxTree::YARV::OptNewArraySend < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3835
  def initialize(number, method); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3855
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3872
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3851
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3840
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3860
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3833
  def method; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3833
  def number; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3864
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3868
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3847
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3890
class SyntaxTree::YARV::OptNilP < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3893
  def initialize(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3909
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3929
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3891
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3925
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3905
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3897
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3913
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3917
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3921
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3901
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3945
class SyntaxTree::YARV::OptNot < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3948
  def initialize(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3964
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3984
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3946
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3980
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3960
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3952
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3968
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3972
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3976
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#3956
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4002
class SyntaxTree::YARV::OptOr < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4005
  def initialize(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4021
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4041
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4003
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4037
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4017
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4009
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4025
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4029
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4033
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4013
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4059
class SyntaxTree::YARV::OptPlus < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4062
  def initialize(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4078
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4098
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4060
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4094
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4074
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4066
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4082
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4086
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4090
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4070
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4115
class SyntaxTree::YARV::OptRegExpMatch2 < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4118
  def initialize(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4134
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4154
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4116
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4150
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4130
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4122
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4138
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4142
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4146
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4126
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4171
class SyntaxTree::YARV::OptSendWithoutBlock < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4174
  def initialize(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4190
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4210
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4172
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4206
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4186
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4178
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4194
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4198
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4202
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4182
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4228
class SyntaxTree::YARV::OptSize < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4231
  def initialize(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4247
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4267
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4229
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4263
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4243
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4235
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4251
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4255
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4259
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4239
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4284
class SyntaxTree::YARV::OptStrFreeze < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4287
  def initialize(object, calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4307
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4320
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4285
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4303
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4292
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4312
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4285
  def object; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4316
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4299
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4337
class SyntaxTree::YARV::OptStrUMinus < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4340
  def initialize(object, calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4360
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4373
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4338
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4356
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4345
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4365
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4338
  def object; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4369
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4352
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4391
class SyntaxTree::YARV::OptSucc < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4394
  def initialize(calldata); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4410
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4430
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4392
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4426
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4406
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4398
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4414
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4418
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4422
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4402
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4445
class SyntaxTree::YARV::Pop < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4458
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4466
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4454
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4446
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4462
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4470
  def side_effects?; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4450
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4485
class SyntaxTree::YARV::PutNil < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4498
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4510
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4506
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4494
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4486
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4502
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4514
  def side_effects?; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4490
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4529
class SyntaxTree::YARV::PutObject < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4532
  def initialize(object); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4548
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4560
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4544
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4536
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4552
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4530
  def object; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4556
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4564
  def side_effects?; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4540
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4581
class SyntaxTree::YARV::PutObjectInt2Fix0 < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4594
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4606
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4602
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4590
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4582
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4598
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4610
  def side_effects?; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4586
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4627
class SyntaxTree::YARV::PutObjectInt2Fix1 < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4640
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4652
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4648
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4636
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4628
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4644
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4656
  def side_effects?; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4632
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4671
class SyntaxTree::YARV::PutSelf < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4684
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4692
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4680
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4672
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4688
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4696
  def side_effects?; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4676
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4713
class SyntaxTree::YARV::PutSpecialObject < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4720
  def initialize(object); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4736
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4748
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4732
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4724
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4740
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4718
  def object; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4744
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4728
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4715
SyntaxTree::YARV::PutSpecialObject::OBJECT_CBASE = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4716
SyntaxTree::YARV::PutSpecialObject::OBJECT_CONST_BASE = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4714
SyntaxTree::YARV::PutSpecialObject::OBJECT_VMCORE = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4772
class SyntaxTree::YARV::PutString < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4775
  def initialize(object); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4791
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4803
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4787
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4779
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4795
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4773
  def object; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4799
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4783
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#11
class SyntaxTree::YARV::SeaOfNodes
  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#462
  def initialize(dfg, nodes, local_graphs); end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#460
  def dfg; end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#460
  def local_graphs; end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#460
  def nodes; end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#468
  def to_mermaid; end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#499
  def verify; end

  class << self
    # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#529
    def compile(dfg); end
  end
end

# source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#100
class SyntaxTree::YARV::SeaOfNodes::Compiler
  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#103
  def initialize(dfg); end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#113
  def compile; end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#101
  def dfg; end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#101
  def nodes; end

  private

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#339
  def cleanup_insn_nodes; end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#315
  def cleanup_phi_nodes; end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#423
  def connect(from, to, type, label = T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#246
  def connect_local_graphs_control(local_graphs); end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#271
  def connect_local_graphs_data(local_graphs); end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#433
  def connect_over(node); end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#136
  def create_local_graph(block); end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#130
  def id_counter; end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#447
  def remove(node); end
end

# source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#67
class SyntaxTree::YARV::SeaOfNodes::Edge
  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#75
  def initialize(from, to, type, label); end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#70
  def from; end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#73
  def label; end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#71
  def to; end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#72
  def type; end
end

# source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#68
SyntaxTree::YARV::SeaOfNodes::Edge::TYPES = T.let(T.unsafe(nil), Array)

# source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#14
class SyntaxTree::YARV::SeaOfNodes::InsnNode
  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#17
  def initialize(insn, offset); end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#25
  def id; end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#15
  def inputs; end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#15
  def insn; end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#29
  def label; end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#15
  def offset; end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#15
  def outputs; end
end

# source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#52
class SyntaxTree::YARV::SeaOfNodes::MergeNode
  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#55
  def initialize(id); end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#53
  def id; end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#53
  def inputs; end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#61
  def label; end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#53
  def outputs; end
end

# source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#36
class SyntaxTree::YARV::SeaOfNodes::PhiNode
  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#39
  def initialize(id); end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#37
  def id; end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#37
  def inputs; end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#45
  def label; end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#37
  def outputs; end
end

# source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#87
class SyntaxTree::YARV::SeaOfNodes::SubGraph
  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#90
  def initialize(first_fixed, last_fixed, inputs, outputs); end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#88
  def first_fixed; end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#88
  def inputs; end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#88
  def last_fixed; end

  # source://syntax_tree//lib/syntax_tree/yarv/sea_of_nodes.rb#88
  def outputs; end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4821
class SyntaxTree::YARV::Send < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4824
  def initialize(calldata, block_iseq); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4845
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4822
  def block_iseq; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4863
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4822
  def calldata; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4841
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4829
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4850
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4854
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4859
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4837
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4905
class SyntaxTree::YARV::SetBlockParam < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4908
  def initialize(index, level); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4927
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4940
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4923
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4913
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4906
  def index; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4932
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4906
  def level; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4936
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4917
  def to_a(iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4958
class SyntaxTree::YARV::SetClassVariable < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4961
  def initialize(name, cache); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4981
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4959
  def cache; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4994
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4977
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4966
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4986
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4959
  def name; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4990
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#4973
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5012
class SyntaxTree::YARV::SetConstant < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5015
  def initialize(name); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5031
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5043
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5027
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5019
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5035
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5013
  def name; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5039
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5023
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5060
class SyntaxTree::YARV::SetGlobal < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5063
  def initialize(name); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5079
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5091
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5075
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5067
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5083
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5061
  def name; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5087
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5071
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5114
class SyntaxTree::YARV::SetInstanceVariable < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5117
  def initialize(name, cache); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5137
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5115
  def cache; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5150
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5133
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5122
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5142
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5115
  def name; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5146
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5129
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5170
class SyntaxTree::YARV::SetLocal < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5173
  def initialize(index, level); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5192
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5204
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5188
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5178
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5171
  def index; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5196
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5171
  def level; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5200
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5182
  def to_a(iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5222
class SyntaxTree::YARV::SetLocalWC0 < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5225
  def initialize(index); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5241
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5257
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5253
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5237
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5229
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5223
  def index; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5245
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5249
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5233
  def to_a(iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5275
class SyntaxTree::YARV::SetLocalWC1 < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5278
  def initialize(index); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5294
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5310
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5306
  def canonical; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5290
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5282
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5276
  def index; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5298
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5302
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5286
  def to_a(iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5326
class SyntaxTree::YARV::SetN < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5329
  def initialize(number); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5345
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5361
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5341
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5333
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5349
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5327
  def number; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5353
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5357
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5337
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5378
class SyntaxTree::YARV::SetSpecial < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5381
  def initialize(key); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5397
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5409
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5393
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5385
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5379
  def key; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5401
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5405
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5389
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5433
class SyntaxTree::YARV::SplatArray < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5436
  def initialize(flag); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5452
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5468
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5448
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5440
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5434
  def flag; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5456
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5460
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5464
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5444
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5507
class SyntaxTree::YARV::Swap < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5520
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5532
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5516
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5508
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5524
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5528
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5512
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5550
class SyntaxTree::YARV::Throw < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5566
  def initialize(type); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5582
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5598
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5578
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5570
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5586
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5590
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5594
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5574
  def to_a(_iseq); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5564
  def type; end

  private

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5625
  def error_backtrace(vm); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5553
SyntaxTree::YARV::Throw::RUBY_TAG_BREAK = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5559
SyntaxTree::YARV::Throw::RUBY_TAG_FATAL = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5554
SyntaxTree::YARV::Throw::RUBY_TAG_NEXT = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5551
SyntaxTree::YARV::Throw::RUBY_TAG_NONE = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5557
SyntaxTree::YARV::Throw::RUBY_TAG_RAISE = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5556
SyntaxTree::YARV::Throw::RUBY_TAG_REDO = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5555
SyntaxTree::YARV::Throw::RUBY_TAG_RETRY = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5552
SyntaxTree::YARV::Throw::RUBY_TAG_RETURN = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5558
SyntaxTree::YARV::Throw::RUBY_TAG_THROW = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5561
SyntaxTree::YARV::Throw::VM_THROW_NO_ESCAPE_FLAG = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5562
SyntaxTree::YARV::Throw::VM_THROW_STATE_MASK = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5700
class SyntaxTree::YARV::ToRegExp < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5703
  def initialize(options, length); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5720
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5733
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5716
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5708
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5701
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5701
  def options; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5725
  def pops; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5729
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5712
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5653
class SyntaxTree::YARV::TopN < ::SyntaxTree::YARV::Instruction
  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5656
  def initialize(number); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5672
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5684
  def call(vm); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5668
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5660
  def disasm(fmt); end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5676
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5654
  def number; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5680
  def pushes; end

  # source://syntax_tree//lib/syntax_tree/yarv/instructions.rb#5664
  def to_a(_iseq); end
end

# source://syntax_tree//lib/syntax_tree/yarv/vm.rb#8
class SyntaxTree::YARV::VM
  extend ::Forwardable

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#216
  def initialize(events = T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#623
  def catch(tag, &block); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#494
  def const_base; end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#610
  def eval(source, binding = T.unsafe(nil), filename = T.unsafe(nil), lineno = T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#209
  def events; end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#344
  def find_catch_entry(frame, type); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#214
  def frame; end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#498
  def frame_at(level); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#504
  def frame_svar; end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#510
  def frame_yield; end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#516
  def frozen_core; end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#520
  def jump(label); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#524
  def leave; end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#606
  def load(filepath); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#528
  def local_get(index, level); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#532
  def local_set(index, level, value); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def pop(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def push(*args, **_arg1, &block); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#598
  def require(filepath); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#549
  def require_internal(filepath, loading: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#602
  def require_relative(filepath); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#543
  def require_resolved(filepath); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#360
  def run_block_frame(iseq, frame, *args, **kwargs, &block); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#366
  def run_class_frame(iseq, clazz); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#230
  def run_frame(frame); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#370
  def run_method_frame(name, nesting, iseq, _self, *args, **kwargs, &block); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#384
  def run_rescue_frame(iseq, frame, error); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#356
  def run_top_frame(iseq); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#391
  def setup_arguments(iseq, args, kwargs, block); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#211
  def stack; end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#619
  def throw(tag, value = T.unsafe(nil)); end

  class << self
    # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#222
    def run(iseq); end
  end
end

# source://syntax_tree//lib/syntax_tree/yarv/vm.rb#48
class SyntaxTree::YARV::VM::BlockFrame < ::SyntaxTree::YARV::VM::Frame
  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#49
  def initialize(iseq, parent, stack_index); end
end

# source://syntax_tree//lib/syntax_tree/yarv/vm.rb#89
class SyntaxTree::YARV::VM::BreakError < ::SyntaxTree::YARV::VM::ThrownError; end

# source://syntax_tree//lib/syntax_tree/yarv/vm.rb#64
class SyntaxTree::YARV::VM::ClassFrame < ::SyntaxTree::YARV::VM::Frame
  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#65
  def initialize(iseq, parent, stack_index, _self); end
end

# source://syntax_tree//lib/syntax_tree/yarv/vm.rb#540
SyntaxTree::YARV::VM::DLEXT = T.let(T.unsafe(nil), String)

# source://syntax_tree//lib/syntax_tree/yarv/vm.rb#205
SyntaxTree::YARV::VM::FROZEN_CORE = T.let(T.unsafe(nil), SyntaxTree::YARV::VM::FrozenCore)

# source://syntax_tree//lib/syntax_tree/yarv/vm.rb#25
class SyntaxTree::YARV::VM::Frame
  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#29
  def initialize(iseq, parent, stack_index, _self, nesting); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#26
  def _self; end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#26
  def iseq; end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#27
  def line; end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#27
  def line=(_arg0); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#26
  def nesting; end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#26
  def parent; end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#27
  def pc; end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#27
  def pc=(_arg0); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#26
  def stack_index; end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#26
  def svars; end
end

# source://syntax_tree//lib/syntax_tree/yarv/vm.rb#95
class SyntaxTree::YARV::VM::FrozenCore; end

# source://syntax_tree//lib/syntax_tree/yarv/vm.rb#9
class SyntaxTree::YARV::VM::Jump
  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#12
  def initialize(label); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#10
  def label; end
end

# source://syntax_tree//lib/syntax_tree/yarv/vm.rb#17
class SyntaxTree::YARV::VM::Leave
  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#20
  def initialize(value); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#18
  def value; end
end

# source://syntax_tree//lib/syntax_tree/yarv/vm.rb#54
class SyntaxTree::YARV::VM::MethodFrame < ::SyntaxTree::YARV::VM::Frame
  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#57
  def initialize(iseq, nesting, parent, stack_index, _self, name, block); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#55
  def block; end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#55
  def name; end
end

# source://syntax_tree//lib/syntax_tree/yarv/vm.rb#92
class SyntaxTree::YARV::VM::NextError < ::SyntaxTree::YARV::VM::ThrownError; end

# source://syntax_tree//lib/syntax_tree/yarv/vm.rb#122
class SyntaxTree::YARV::VM::NullEvents
  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#123
  def publish_frame_change(frame); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#126
  def publish_instruction(iseq, insn); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#129
  def publish_stack_change(stack); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#132
  def publish_tracepoint(event); end
end

# source://syntax_tree//lib/syntax_tree/yarv/vm.rb#70
class SyntaxTree::YARV::VM::RescueFrame < ::SyntaxTree::YARV::VM::Frame
  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#71
  def initialize(iseq, parent, stack_index); end
end

# source://syntax_tree//lib/syntax_tree/yarv/vm.rb#86
class SyntaxTree::YARV::VM::ReturnError < ::SyntaxTree::YARV::VM::ThrownError; end

# source://syntax_tree//lib/syntax_tree/yarv/vm.rb#541
SyntaxTree::YARV::VM::SOEXT = T.let(T.unsafe(nil), String)

# source://syntax_tree//lib/syntax_tree/yarv/vm.rb#137
class SyntaxTree::YARV::VM::STDOUTEvents
  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#140
  def initialize; end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#138
  def disassembler; end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#144
  def publish_frame_change(frame); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#148
  def publish_instruction(iseq, insn); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#153
  def publish_stack_change(stack); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#157
  def publish_tracepoint(event); end
end

# source://syntax_tree//lib/syntax_tree/yarv/vm.rb#164
class SyntaxTree::YARV::VM::Stack
  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#167
  def initialize(events); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#196
  def [](*_arg0, **_arg1, &_arg2); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#200
  def []=(*_arg0, **_arg1, &_arg2); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#172
  def concat(*_arg0, **_arg1, &_arg2); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#165
  def events; end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#176
  def last; end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#180
  def length; end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#188
  def pop(*_arg0, **_arg1, &_arg2); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#184
  def push(*_arg0, **_arg1, &_arg2); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#192
  def slice!(*_arg0, **_arg1, &_arg2); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#165
  def values; end
end

# source://syntax_tree//lib/syntax_tree/yarv/vm.rb#76
class SyntaxTree::YARV::VM::ThrownError < ::StandardError
  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#79
  def initialize(value, backtrace); end

  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#77
  def value; end
end

# source://syntax_tree//lib/syntax_tree/yarv/vm.rb#42
class SyntaxTree::YARV::VM::TopFrame < ::SyntaxTree::YARV::VM::Frame
  # source://syntax_tree//lib/syntax_tree/yarv/vm.rb#43
  def initialize(iseq); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#12273
class SyntaxTree::YieldNode < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#12280
  def initialize(arguments:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12334
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12286
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12275
  def arguments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#12290
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#12278
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#12294
  def copy(arguments: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12290
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#12307
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12311
  def format(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#12343
class SyntaxTree::ZSuper < ::SyntaxTree::Node
  # source://syntax_tree//lib/syntax_tree/node.rb#12347
  def initialize(location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12377
  def ===(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12352
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12356
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#12345
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#12360
  def copy(location: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12356
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#12369
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#12373
  def format(q); end
end
