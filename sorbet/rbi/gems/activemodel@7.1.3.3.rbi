# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activemodel` gem.
# Please instead update this file by running `bin/tapioca gem activemodel`.


# source://activemodel//lib/active_model/gem_version.rb#3
module ActiveModel
  extend ::ActiveSupport::Autoload

  class << self
    # source://activemodel//lib/active_model/deprecator.rb#4
    def deprecator; end

    # source://activemodel//lib/active_model.rb#76
    def eager_load!; end

    # source://activemodel//lib/active_model/gem_version.rb#5
    def gem_version; end

    # source://activemodel//lib/active_model/version.rb#7
    def version; end
  end
end

# source://activemodel//lib/active_model/api.rb#59
module ActiveModel::API
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Validations
  include ::ActiveModel::Conversion

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods
  mixes_in_class_methods ::ActiveModel::Conversion::ClassMethods

  # source://activemodel//lib/active_model/api.rb#80
  def initialize(attributes = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/api.rb#95
  def persisted?; end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
    def param_delimiter; end
    def param_delimiter=(value); end
    def param_delimiter?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _validators; end
    def _validators?; end
    def param_delimiter=(value); end
  end
end

# source://activemodel//lib/active_model/access.rb#7
module ActiveModel::Access
  # source://activemodel//lib/active_model/access.rb#8
  def slice(*methods); end

  # source://activemodel//lib/active_model/access.rb#12
  def values_at(*methods); end
end

# source://activemodel//lib/active_model/attribute.rb#6
class ActiveModel::Attribute
  # source://activemodel//lib/active_model/attribute.rb#33
  def initialize(name, value_before_type_cast, type, original_attribute = T.unsafe(nil), value = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/attribute.rb#115
  def ==(other); end

  # source://activemodel//lib/active_model/attribute.rb#107
  def came_from_user?; end

  # source://activemodel//lib/active_model/attribute.rb#66
  def changed?; end

  # source://activemodel//lib/active_model/attribute.rb#70
  def changed_in_place?; end

  # source://activemodel//lib/active_model/attribute.rb#135
  def encode_with(coder); end

  # source://activemodel//lib/active_model/attribute.rb#115
  def eql?(other); end

  # source://activemodel//lib/active_model/attribute.rb#74
  def forgetting_assignment; end

  # source://activemodel//lib/active_model/attribute.rb#111
  def has_been_read?; end

  # source://activemodel//lib/active_model/attribute.rb#123
  def hash; end

  # source://activemodel//lib/active_model/attribute.rb#127
  def init_with(coder); end

  # source://activemodel//lib/active_model/attribute.rb#103
  def initialized?; end

  # source://activemodel//lib/active_model/attribute.rb#29
  def name; end

  # source://activemodel//lib/active_model/attribute.rb#47
  def original_value; end

  # source://activemodel//lib/active_model/attribute.rb#143
  def original_value_for_database; end

  # source://activemodel//lib/active_model/attribute.rb#62
  def serializable?(&block); end

  # source://activemodel//lib/active_model/attribute.rb#29
  def type; end

  # source://activemodel//lib/active_model/attribute.rb#99
  def type_cast(*_arg0); end

  # source://activemodel//lib/active_model/attribute.rb#41
  def value; end

  # source://activemodel//lib/active_model/attribute.rb#29
  def value_before_type_cast; end

  # source://activemodel//lib/active_model/attribute.rb#55
  def value_for_database; end

  # source://activemodel//lib/active_model/attribute.rb#87
  def with_cast_value(value); end

  # source://activemodel//lib/active_model/attribute.rb#91
  def with_type(type); end

  # source://activemodel//lib/active_model/attribute/user_provided_default.rb#7
  def with_user_default(value); end

  # source://activemodel//lib/active_model/attribute.rb#83
  def with_value_from_database(value); end

  # source://activemodel//lib/active_model/attribute.rb#78
  def with_value_from_user(value); end

  private

  # source://activemodel//lib/active_model/attribute.rb#169
  def _original_value_for_database; end

  # source://activemodel//lib/active_model/attribute.rb#165
  def _value_for_database; end

  # source://activemodel//lib/active_model/attribute.rb#152
  def assigned?; end

  # source://activemodel//lib/active_model/attribute.rb#161
  def changed_from_assignment?; end

  # source://activemodel//lib/active_model/attribute.rb#155
  def initialize_dup(other); end

  # source://activemodel//lib/active_model/attribute.rb#152
  def original_attribute; end

  class << self
    # source://activemodel//lib/active_model/attribute.rb#8
    def from_database(name, value_before_type_cast, type, value = T.unsafe(nil)); end

    # source://activemodel//lib/active_model/attribute.rb#12
    def from_user(name, value_before_type_cast, type, original_attribute = T.unsafe(nil)); end

    # source://activemodel//lib/active_model/attribute.rb#20
    def null(name); end

    # source://activemodel//lib/active_model/attribute.rb#24
    def uninitialized(name, type); end

    # source://activemodel//lib/active_model/attribute.rb#16
    def with_cast_value(name, value_before_type_cast, type); end
  end
end

# source://activemodel//lib/active_model/attribute.rb#173
class ActiveModel::Attribute::FromDatabase < ::ActiveModel::Attribute
  # source://activemodel//lib/active_model/attribute.rb#178
  def forgetting_assignment; end

  # source://activemodel//lib/active_model/attribute.rb#174
  def type_cast(value); end

  private

  # source://activemodel//lib/active_model/attribute.rb#192
  def _original_value_for_database; end
end

# source://activemodel//lib/active_model/attribute.rb#197
class ActiveModel::Attribute::FromUser < ::ActiveModel::Attribute
  # source://activemodel//lib/active_model/attribute.rb#202
  def came_from_user?; end

  # source://activemodel//lib/active_model/attribute.rb#198
  def type_cast(value); end

  private

  # source://activemodel//lib/active_model/attribute.rb#207
  def _value_for_database; end
end

# source://activemodel//lib/active_model/attribute.rb#222
class ActiveModel::Attribute::Null < ::ActiveModel::Attribute
  # source://activemodel//lib/active_model/attribute.rb#223
  def initialize(name); end

  # source://activemodel//lib/active_model/attribute.rb#227
  def type_cast(*_arg0); end

  # source://activemodel//lib/active_model/attribute.rb#235
  def with_cast_value(value); end

  # source://activemodel//lib/active_model/attribute.rb#231
  def with_type(type); end

  # source://activemodel//lib/active_model/attribute.rb#235
  def with_value_from_database(value); end

  # source://activemodel//lib/active_model/attribute.rb#235
  def with_value_from_user(value); end
end

# source://activemodel//lib/active_model/attribute.rb#242
class ActiveModel::Attribute::Uninitialized < ::ActiveModel::Attribute
  # source://activemodel//lib/active_model/attribute.rb#245
  def initialize(name, type); end

  # source://activemodel//lib/active_model/attribute.rb#266
  def forgetting_assignment; end

  # source://activemodel//lib/active_model/attribute.rb#262
  def initialized?; end

  # source://activemodel//lib/active_model/attribute.rb#255
  def original_value; end

  # source://activemodel//lib/active_model/attribute.rb#249
  def value; end

  # source://activemodel//lib/active_model/attribute.rb#259
  def value_for_database; end

  # source://activemodel//lib/active_model/attribute.rb#270
  def with_type(type); end
end

# source://activemodel//lib/active_model/attribute.rb#243
ActiveModel::Attribute::Uninitialized::UNINITIALIZED_ORIGINAL_VALUE = T.let(T.unsafe(nil), Object)

# source://activemodel//lib/active_model/attribute/user_provided_default.rb#11
class ActiveModel::Attribute::UserProvidedDefault < ::ActiveModel::Attribute::FromUser
  # source://activemodel//lib/active_model/attribute/user_provided_default.rb#12
  def initialize(name, value, type, database_default); end

  # source://activemodel//lib/active_model/attribute/user_provided_default.rb#29
  def marshal_dump; end

  # source://activemodel//lib/active_model/attribute/user_provided_default.rb#40
  def marshal_load(values); end

  # source://activemodel//lib/active_model/attribute/user_provided_default.rb#17
  def value_before_type_cast; end

  # source://activemodel//lib/active_model/attribute/user_provided_default.rb#25
  def with_type(type); end

  private

  # source://activemodel//lib/active_model/attribute/user_provided_default.rb#52
  def user_provided_value; end
end

# source://activemodel//lib/active_model/attribute.rb#212
class ActiveModel::Attribute::WithCastValue < ::ActiveModel::Attribute
  # source://activemodel//lib/active_model/attribute.rb#217
  def changed_in_place?; end

  # source://activemodel//lib/active_model/attribute.rb#213
  def type_cast(value); end
end

# source://activemodel//lib/active_model/attribute_assignment.rb#6
module ActiveModel::AttributeAssignment
  include ::ActiveModel::ForbiddenAttributesProtection

  # source://activemodel//lib/active_model/attribute_assignment.rb#28
  def assign_attributes(new_attributes); end

  # source://activemodel//lib/active_model/attribute_assignment.rb#28
  def attributes=(new_attributes); end

  private

  # source://activemodel//lib/active_model/attribute_assignment.rb#46
  def _assign_attribute(k, v); end

  # source://activemodel//lib/active_model/attribute_assignment.rb#40
  def _assign_attributes(attributes); end
end

# source://activemodel//lib/active_model/attribute_methods.rb#64
module ActiveModel::AttributeMethods
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeMethods::ClassMethods

  # source://activemodel//lib/active_model/attribute_methods.rb#498
  def attribute_missing(match, *args, **_arg2, &block); end

  # source://activemodel//lib/active_model/attribute_methods.rb#484
  def method_missing(method, *args, **_arg2, &block); end

  # source://activemodel//lib/active_model/attribute_methods.rb#507
  def respond_to?(method, include_private_methods = T.unsafe(nil)); end

  def respond_to_without_attributes?(*_arg0); end

  private

  # source://activemodel//lib/active_model/attribute_methods.rb#535
  def _read_attribute(attr); end

  # source://activemodel//lib/active_model/attribute_methods.rb#520
  def attribute_method?(attr_name); end

  # source://activemodel//lib/active_model/attribute_methods.rb#526
  def matched_attribute_method(method_name); end

  # source://activemodel//lib/active_model/attribute_methods.rb#531
  def missing_attribute(attr_name, stack); end

  module GeneratedClassMethods
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_patterns; end
    def attribute_method_patterns=(value); end
    def attribute_method_patterns?; end
  end

  module GeneratedInstanceMethods
    def attribute_aliases; end
    def attribute_aliases?; end
    def attribute_method_patterns; end
    def attribute_method_patterns?; end
  end
end

# source://activemodel//lib/active_model/attribute_methods.rb#539
module ActiveModel::AttributeMethods::AttrNames
  class << self
    # source://activemodel//lib/active_model/attribute_methods.rb#556
    def define_attribute_accessor_method(owner, attr_name, writer: T.unsafe(nil)); end
  end
end

# source://activemodel//lib/active_model/attribute_methods.rb#540
ActiveModel::AttributeMethods::AttrNames::DEF_SAFE_NAME = T.let(T.unsafe(nil), Regexp)

# source://activemodel//lib/active_model/attribute_methods.rb#68
ActiveModel::AttributeMethods::CALL_COMPILABLE_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://activemodel//lib/active_model/attribute_methods.rb#76
module ActiveModel::AttributeMethods::ClassMethods
  # source://activemodel//lib/active_model/attribute_methods.rb#204
  def alias_attribute(new_name, old_name); end

  # source://activemodel//lib/active_model/attribute_methods.rb#224
  def alias_attribute_method_definition(code_generator, pattern, new_name, old_name); end

  # source://activemodel//lib/active_model/attribute_methods.rb#375
  def aliases_by_attribute_name; end

  # source://activemodel//lib/active_model/attribute_methods.rb#258
  def attribute_alias(name); end

  # source://activemodel//lib/active_model/attribute_methods.rb#253
  def attribute_alias?(new_name); end

  # source://activemodel//lib/active_model/attribute_methods.rb#176
  def attribute_method_affix(*affixes); end

  # source://activemodel//lib/active_model/attribute_methods.rb#107
  def attribute_method_prefix(*prefixes, parameters: T.unsafe(nil)); end

  # source://activemodel//lib/active_model/attribute_methods.rb#141
  def attribute_method_suffix(*suffixes, parameters: T.unsafe(nil)); end

  # source://activemodel//lib/active_model/attribute_methods.rb#324
  def define_attribute_method(attr_name, _owner: T.unsafe(nil)); end

  # source://activemodel//lib/active_model/attribute_methods.rb#285
  def define_attribute_methods(*attr_names); end

  # source://activemodel//lib/active_model/attribute_methods.rb#212
  def eagerly_generate_alias_attribute_methods(new_name, old_name); end

  # source://activemodel//lib/active_model/attribute_methods.rb#218
  def generate_alias_attribute_methods(code_generator, new_name, old_name); end

  # source://activemodel//lib/active_model/attribute_methods.rb#368
  def undefine_attribute_methods; end

  private

  # source://activemodel//lib/active_model/attribute_methods.rb#408
  def attribute_method_patterns_cache; end

  # source://activemodel//lib/active_model/attribute_methods.rb#412
  def attribute_method_patterns_matching(method_name); end

  # source://activemodel//lib/active_model/attribute_methods.rb#421
  def define_proxy_call(code_generator, name, proxy_target, parameters, *call_args, namespace:); end

  # source://activemodel//lib/active_model/attribute_methods.rb#391
  def generated_attribute_methods; end

  # source://activemodel//lib/active_model/attribute_methods.rb#380
  def inherited(base); end

  # source://activemodel//lib/active_model/attribute_methods.rb#395
  def instance_method_already_implemented?(method_name); end

  # source://activemodel//lib/active_model/attribute_methods.rb#387
  def resolve_attribute_name(name); end
end

# source://activemodel//lib/active_model/attribute_methods.rb#448
class ActiveModel::AttributeMethods::ClassMethods::AttributeMethodPattern
  # source://activemodel//lib/active_model/attribute_methods.rb#453
  def initialize(prefix: T.unsafe(nil), suffix: T.unsafe(nil), parameters: T.unsafe(nil)); end

  # source://activemodel//lib/active_model/attribute_methods.rb#462
  def match(method_name); end

  # source://activemodel//lib/active_model/attribute_methods.rb#468
  def method_name(attr_name); end

  # source://activemodel//lib/active_model/attribute_methods.rb#449
  def parameters; end

  # source://activemodel//lib/active_model/attribute_methods.rb#449
  def prefix; end

  # source://activemodel//lib/active_model/attribute_methods.rb#449
  def proxy_target; end

  # source://activemodel//lib/active_model/attribute_methods.rb#449
  def suffix; end
end

# source://activemodel//lib/active_model/attribute_methods.rb#451
class ActiveModel::AttributeMethods::ClassMethods::AttributeMethodPattern::AttributeMethod < ::Struct
  def attr_name; end
  def attr_name=(_); end
  def proxy_target; end
  def proxy_target=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activemodel//lib/active_model/attribute_methods.rb#69
ActiveModel::AttributeMethods::FORWARD_PARAMETERS = T.let(T.unsafe(nil), String)

# source://activemodel//lib/active_model/attribute_methods.rb#67
ActiveModel::AttributeMethods::NAME_COMPILABLE_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://activemodel//lib/active_model/attribute_mutation_tracker.rb#7
class ActiveModel::AttributeMutationTracker
  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#10
  def initialize(attributes); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#40
  def any_changes?; end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#34
  def change_to_attribute(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#44
  def changed?(attr_name, from: T.unsafe(nil), to: T.unsafe(nil)); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#14
  def changed_attribute_names; end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#50
  def changed_in_place?(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#18
  def changed_values; end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#26
  def changes; end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#63
  def force_change(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#54
  def forget_change(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#59
  def original_value(attr_name); end

  private

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#74
  def attr_names; end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#78
  def attribute_changed?(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#68
  def attributes; end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#82
  def fetch_value(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#70
  def forced_changes; end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#86
  def type_cast(attr_name, value); end
end

# source://activemodel//lib/active_model/attribute_mutation_tracker.rb#8
ActiveModel::AttributeMutationTracker::OPTION_NOT_GIVEN = T.let(T.unsafe(nil), Object)

# source://activemodel//lib/active_model/attribute_registration.rb#8
module ActiveModel::AttributeRegistration
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveModel::AttributeRegistration::ClassMethods
end

# source://activemodel//lib/active_model/attribute_registration.rb#11
module ActiveModel::AttributeRegistration::ClassMethods
  # source://activemodel//lib/active_model/attribute_registration.rb#22
  def _default_attributes; end

  # source://activemodel//lib/active_model/attribute_registration.rb#12
  def attribute(name, type = T.unsafe(nil), default: T.unsafe(nil), **options); end

  # source://activemodel//lib/active_model/attribute_registration.rb#26
  def attribute_types; end

  private

  # source://activemodel//lib/active_model/attribute_registration.rb#48
  def apply_pending_attributes(attribute_set); end

  # source://activemodel//lib/active_model/attribute_registration.rb#58
  def build_default_attributes; end

  # source://activemodel//lib/active_model/attribute_registration.rb#43
  def pending_attribute(name); end

  # source://activemodel//lib/active_model/attribute_registration.rb#62
  def reset_default_attributes; end

  # source://activemodel//lib/active_model/attribute_registration.rb#68
  def resolve_attribute_name(name); end

  # source://activemodel//lib/active_model/attribute_registration.rb#72
  def resolve_type_name(name, **options); end
end

# source://activemodel//lib/active_model/attribute_registration.rb#33
class ActiveModel::AttributeRegistration::ClassMethods::PendingAttribute
  # source://activemodel//lib/active_model/attribute_registration.rb#36
  def apply_to(attribute); end

  # source://activemodel//lib/active_model/attribute_registration.rb#34
  def default; end

  # source://activemodel//lib/active_model/attribute_registration.rb#34
  def default=(_arg0); end

  # source://activemodel//lib/active_model/attribute_registration.rb#34
  def type; end

  # source://activemodel//lib/active_model/attribute_registration.rb#34
  def type=(_arg0); end
end

# source://activemodel//lib/active_model/attribute_set/builder.rb#6
class ActiveModel::AttributeSet
  # source://activemodel//lib/active_model/attribute_set.rb#12
  def initialize(attributes); end

  # source://activemodel//lib/active_model/attribute_set.rb#106
  def ==(other); end

  # source://activemodel//lib/active_model/attribute_set.rb#16
  def [](name); end

  # source://activemodel//lib/active_model/attribute_set.rb#20
  def []=(name, value); end

  # source://activemodel//lib/active_model/attribute_set.rb#93
  def accessed; end

  # source://activemodel//lib/active_model/attribute_set.rb#24
  def cast_types; end

  # source://activemodel//lib/active_model/attribute_set.rb#73
  def deep_dup; end

  # source://activemodel//lib/active_model/attribute_set.rb#10
  def each_value(*_arg0, **_arg1, &_arg2); end

  # source://activemodel//lib/active_model/attribute_set.rb#10
  def except(*_arg0, **_arg1, &_arg2); end

  # source://activemodel//lib/active_model/attribute_set.rb#10
  def fetch(*_arg0, **_arg1, &_arg2); end

  # source://activemodel//lib/active_model/attribute_set.rb#50
  def fetch_value(name, &block); end

  # source://activemodel//lib/active_model/attribute_set.rb#68
  def freeze; end

  # source://activemodel//lib/active_model/attribute_set.rb#41
  def include?(name); end

  # source://activemodel//lib/active_model/attribute_set.rb#41
  def key?(name); end

  # source://activemodel//lib/active_model/attribute_set.rb#46
  def keys; end

  # source://activemodel//lib/active_model/attribute_set.rb#97
  def map(&block); end

  # source://activemodel//lib/active_model/attribute_set.rb#87
  def reset(key); end

  # source://activemodel//lib/active_model/attribute_set.rb#102
  def reverse_merge!(target_attributes); end

  # source://activemodel//lib/active_model/attribute_set.rb#36
  def to_h; end

  # source://activemodel//lib/active_model/attribute_set.rb#36
  def to_hash; end

  # source://activemodel//lib/active_model/attribute_set.rb#28
  def values_before_type_cast; end

  # source://activemodel//lib/active_model/attribute_set.rb#32
  def values_for_database; end

  # source://activemodel//lib/active_model/attribute_set.rb#64
  def write_cast_value(name, value); end

  # source://activemodel//lib/active_model/attribute_set.rb#54
  def write_from_database(name, value); end

  # source://activemodel//lib/active_model/attribute_set.rb#58
  def write_from_user(name, value); end

  protected

  # source://activemodel//lib/active_model/attribute_set.rb#111
  def attributes; end

  private

  # source://activemodel//lib/active_model/attribute_set.rb#114
  def default_attribute(name); end

  # source://activemodel//lib/active_model/attribute_set.rb#82
  def initialize_clone(_); end

  # source://activemodel//lib/active_model/attribute_set.rb#77
  def initialize_dup(_); end
end

# source://activemodel//lib/active_model/attribute_set/builder.rb#7
class ActiveModel::AttributeSet::Builder
  # source://activemodel//lib/active_model/attribute_set/builder.rb#10
  def initialize(types, default_attributes = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#15
  def build_from_database(values = T.unsafe(nil), additional_types = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#8
  def default_attributes; end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#8
  def types; end
end

# source://activemodel//lib/active_model/attribute_set/yaml_encoder.rb#7
class ActiveModel::AttributeSet::YAMLEncoder
  # source://activemodel//lib/active_model/attribute_set/yaml_encoder.rb#8
  def initialize(default_types); end

  # source://activemodel//lib/active_model/attribute_set/yaml_encoder.rb#22
  def decode(coder); end

  # source://activemodel//lib/active_model/attribute_set/yaml_encoder.rb#12
  def encode(attribute_set, coder); end

  private

  # source://activemodel//lib/active_model/attribute_set/yaml_encoder.rb#37
  def default_types; end
end

# source://activemodel//lib/active_model/attributes.rb#30
module ActiveModel::Attributes
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveModel::AttributeRegistration
  include ::ActiveModel::AttributeMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeRegistration::ClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeMethods::ClassMethods
  mixes_in_class_methods ::ActiveModel::Attributes::ClassMethods

  # source://activemodel//lib/active_model/attributes.rb#93
  def initialize(*_arg0); end

  # source://activemodel//lib/active_model/attributes.rb#133
  def attribute_names; end

  # source://activemodel//lib/active_model/attributes.rb#118
  def attributes; end

  # source://activemodel//lib/active_model/attributes.rb#137
  def freeze; end

  private

  # source://activemodel//lib/active_model/attributes.rb#143
  def _write_attribute(attr_name, value); end

  # source://activemodel//lib/active_model/attributes.rb#148
  def attribute(attr_name); end

  # source://activemodel//lib/active_model/attributes.rb#143
  def attribute=(attr_name, value); end

  # source://activemodel//lib/active_model/attributes.rb#98
  def initialize_dup(other); end

  module GeneratedClassMethods
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_patterns; end
    def attribute_method_patterns=(value); end
    def attribute_method_patterns?; end
  end

  module GeneratedInstanceMethods
    def attribute_aliases; end
    def attribute_aliases?; end
    def attribute_method_patterns; end
    def attribute_method_patterns?; end
  end
end

# source://activemodel//lib/active_model/attributes.rb#39
module ActiveModel::Attributes::ClassMethods
  # source://activemodel//lib/active_model/attributes.rb#59
  def attribute(name, *_arg1, **_arg2, &_arg3); end

  # source://activemodel//lib/active_model/attributes.rb#74
  def attribute_names; end

  private

  # source://activemodel//lib/active_model/attributes.rb#79
  def define_method_attribute=(name, owner:); end
end

# source://activemodel//lib/active_model/validator.rb#179
class ActiveModel::BlockValidator < ::ActiveModel::EachValidator
  # source://activemodel//lib/active_model/validator.rb#180
  def initialize(options, &block); end

  private

  # source://activemodel//lib/active_model/validator.rb#186
  def validate_each(record, attribute, value); end
end

# source://activemodel//lib/active_model/callbacks.rb#65
module ActiveModel::Callbacks
  # source://activemodel//lib/active_model/callbacks.rb#109
  def define_model_callbacks(*callbacks); end

  private

  # source://activemodel//lib/active_model/callbacks.rb#143
  def _define_after_model_callback(klass, callback); end

  # source://activemodel//lib/active_model/callbacks.rb#136
  def _define_around_model_callback(klass, callback); end

  # source://activemodel//lib/active_model/callbacks.rb#129
  def _define_before_model_callback(klass, callback); end

  class << self
    # source://activemodel//lib/active_model/callbacks.rb#66
    def extended(base); end
  end
end

# source://activemodel//lib/active_model/conversion.rb#24
module ActiveModel::Conversion
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Conversion::ClassMethods

  # source://activemodel//lib/active_model/conversion.rb#67
  def to_key; end

  # source://activemodel//lib/active_model/conversion.rb#49
  def to_model; end

  # source://activemodel//lib/active_model/conversion.rb#90
  def to_param; end

  # source://activemodel//lib/active_model/conversion.rb#103
  def to_partial_path; end

  module GeneratedClassMethods
    def param_delimiter; end
    def param_delimiter=(value); end
    def param_delimiter?; end
  end

  module GeneratedInstanceMethods
    def param_delimiter=(value); end
  end
end

# source://activemodel//lib/active_model/conversion.rb#107
module ActiveModel::Conversion::ClassMethods
  # source://activemodel//lib/active_model/conversion.rb#110
  def _to_partial_path; end
end

# source://activemodel//lib/active_model/dirty.rb#123
module ActiveModel::Dirty
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveModel::AttributeMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeMethods::ClassMethods

  # source://activemodel//lib/active_model/dirty.rb#258
  def as_json(options = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/dirty.rb#293
  def attribute_changed?(attr_name, **options); end

  # source://activemodel//lib/active_model/dirty.rb#360
  def attribute_changed_in_place?(attr_name); end

  # source://activemodel//lib/active_model/dirty.rb#303
  def attribute_previously_changed?(attr_name, **options); end

  # source://activemodel//lib/active_model/dirty.rb#308
  def attribute_previously_was(attr_name); end

  # source://activemodel//lib/active_model/dirty.rb#298
  def attribute_was(attr_name); end

  # source://activemodel//lib/active_model/dirty.rb#288
  def changed; end

  # source://activemodel//lib/active_model/dirty.rb#279
  def changed?; end

  # source://activemodel//lib/active_model/dirty.rb#336
  def changed_attributes; end

  # source://activemodel//lib/active_model/dirty.rb#346
  def changes; end

  # source://activemodel//lib/active_model/dirty.rb#265
  def changes_applied; end

  # source://activemodel//lib/active_model/dirty.rb#324
  def clear_attribute_changes(attr_names); end

  # source://activemodel//lib/active_model/dirty.rb#318
  def clear_changes_information; end

  # source://activemodel//lib/active_model/dirty.rb#356
  def previous_changes; end

  # source://activemodel//lib/active_model/dirty.rb#313
  def restore_attributes(attr_names = T.unsafe(nil)); end

  private

  # source://activemodel//lib/active_model/dirty.rb#392
  def attribute_change(attr_name); end

  # source://activemodel//lib/active_model/dirty.rb#397
  def attribute_previous_change(attr_name); end

  # source://activemodel//lib/active_model/dirty.rb#402
  def attribute_will_change!(attr_name); end

  # source://activemodel//lib/active_model/dirty.rb#371
  def clear_attribute_change(attr_name); end

  # source://activemodel//lib/active_model/dirty.rb#383
  def forget_attribute_assignments; end

  # source://activemodel//lib/active_model/dirty.rb#365
  def init_internals; end

  # source://activemodel//lib/active_model/dirty.rb#248
  def initialize_dup(other); end

  # source://activemodel//lib/active_model/dirty.rb#387
  def mutations_before_last_save; end

  # source://activemodel//lib/active_model/dirty.rb#375
  def mutations_from_database; end

  # source://activemodel//lib/active_model/dirty.rb#407
  def restore_attribute!(attr_name); end

  module GeneratedClassMethods
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_patterns; end
    def attribute_method_patterns=(value); end
    def attribute_method_patterns?; end
  end

  module GeneratedInstanceMethods
    def attribute_aliases; end
    def attribute_aliases?; end
    def attribute_method_patterns; end
    def attribute_method_patterns?; end
  end
end

# source://activemodel//lib/active_model/validator.rb#134
class ActiveModel::EachValidator < ::ActiveModel::Validator
  # source://activemodel//lib/active_model/validator.rb#140
  def initialize(options); end

  # source://activemodel//lib/active_model/validator.rb#135
  def attributes; end

  # source://activemodel//lib/active_model/validator.rb#168
  def check_validity!; end

  # source://activemodel//lib/active_model/validator.rb#150
  def validate(record); end

  # source://activemodel//lib/active_model/validator.rb#161
  def validate_each(record, attribute, value); end

  private

  # source://activemodel//lib/active_model/validator.rb#172
  def prepare_value_for_validation(value, record, attr_name); end
end

# source://activemodel//lib/active_model/error.rb#9
class ActiveModel::Error
  # source://activemodel//lib/active_model/error.rb#103
  def initialize(base, attribute, type = T.unsafe(nil), **options); end

  # source://activemodel//lib/active_model/error.rb#190
  def ==(other); end

  # source://activemodel//lib/active_model/error.rb#121
  def attribute; end

  # source://activemodel//lib/active_model/error.rb#119
  def base; end

  # source://activemodel//lib/active_model/error.rb#149
  def detail; end

  # source://activemodel//lib/active_model/error.rb#149
  def details; end

  # source://activemodel//lib/active_model/error.rb#190
  def eql?(other); end

  # source://activemodel//lib/active_model/error.rb#159
  def full_message; end

  # source://activemodel//lib/active_model/error.rb#195
  def hash; end

  # source://activemodel//lib/active_model/error.rb#13
  def i18n_customize_full_message; end

  # source://activemodel//lib/active_model/error.rb#13
  def i18n_customize_full_message=(_arg0); end

  # source://activemodel//lib/active_model/error.rb#13
  def i18n_customize_full_message?; end

  # source://activemodel//lib/active_model/error.rb#199
  def inspect; end

  # source://activemodel//lib/active_model/error.rb#166
  def match?(attribute, type = T.unsafe(nil), **options); end

  # source://activemodel//lib/active_model/error.rb#135
  def message; end

  # source://activemodel//lib/active_model/error.rb#128
  def options; end

  # source://activemodel//lib/active_model/error.rb#126
  def raw_type; end

  # source://activemodel//lib/active_model/error.rb#184
  def strict_match?(attribute, type, **options); end

  # source://activemodel//lib/active_model/error.rb#123
  def type; end

  protected

  # source://activemodel//lib/active_model/error.rb#204
  def attributes_for_hash; end

  private

  # source://activemodel//lib/active_model/error.rb#111
  def initialize_dup(other); end

  class << self
    # source://activemodel//lib/active_model/error.rb#15
    def full_message(attribute, message, base); end

    # source://activemodel//lib/active_model/error.rb#64
    def generate_message(attribute, type, base, options); end

    # source://activemodel//lib/active_model/error.rb#13
    def i18n_customize_full_message; end

    # source://activemodel//lib/active_model/error.rb#13
    def i18n_customize_full_message=(value); end

    # source://activemodel//lib/active_model/error.rb#13
    def i18n_customize_full_message?; end
  end
end

# source://activemodel//lib/active_model/error.rb#10
ActiveModel::Error::CALLBACKS_OPTIONS = T.let(T.unsafe(nil), Array)

# source://activemodel//lib/active_model/error.rb#11
ActiveModel::Error::MESSAGE_OPTIONS = T.let(T.unsafe(nil), Array)

# source://activemodel//lib/active_model/errors.rb#61
class ActiveModel::Errors
  include ::Enumerable
  extend ::Forwardable

  # source://activemodel//lib/active_model/errors.rb#117
  def initialize(base); end

  # source://activemodel//lib/active_model/errors.rb#229
  def [](attribute); end

  # source://activemodel//lib/active_model/errors.rb#342
  def add(attribute, type = T.unsafe(nil), **options); end

  # source://activemodel//lib/active_model/errors.rb#372
  def added?(attribute, type = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/errors.rb#247
  def as_json(options = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/errors.rb#237
  def attribute_names; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def clear(*args, **_arg1, &block); end

  # source://activemodel//lib/active_model/errors.rb#138
  def copy!(other); end

  # source://activemodel//lib/active_model/errors.rb#215
  def delete(attribute, type = T.unsafe(nil), **options); end

  # source://activemodel//lib/active_model/errors.rb#276
  def details; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def each(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def empty?(*args, **_arg1, &block); end

  # source://activemodel//lib/active_model/errors.rb#107
  def errors; end

  # source://activemodel//lib/active_model/errors.rb#451
  def full_message(attribute, message); end

  # source://activemodel//lib/active_model/errors.rb#415
  def full_messages; end

  # source://activemodel//lib/active_model/errors.rb#430
  def full_messages_for(attribute); end

  # source://activemodel//lib/active_model/errors.rb#479
  def generate_message(attribute, type = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/errors.rb#289
  def group_by_attribute; end

  # source://activemodel//lib/active_model/errors.rb#202
  def has_key?(attribute); end

  # source://activemodel//lib/active_model/errors.rb#154
  def import(error, override_options = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/errors.rb#202
  def include?(attribute); end

  # source://activemodel//lib/active_model/errors.rb#483
  def inspect; end

  # source://activemodel//lib/active_model/errors.rb#202
  def key?(attribute); end

  # source://activemodel//lib/active_model/errors.rb#174
  def merge!(other); end

  # source://activemodel//lib/active_model/errors.rb#268
  def messages; end

  # source://activemodel//lib/active_model/errors.rb#444
  def messages_for(attribute); end

  # source://activemodel//lib/active_model/errors.rb#107
  def objects; end

  # source://activemodel//lib/active_model/errors.rb#395
  def of_kind?(attribute, type = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def size(*args, **_arg1, &block); end

  # source://activemodel//lib/active_model/errors.rb#415
  def to_a; end

  # source://activemodel//lib/active_model/errors.rb#256
  def to_hash(full_messages = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def uniq!(*args, **_arg1, &block); end

  # source://activemodel//lib/active_model/errors.rb#189
  def where(attribute, type = T.unsafe(nil), **options); end

  private

  # source://activemodel//lib/active_model/errors.rb#122
  def initialize_dup(other); end

  # source://activemodel//lib/active_model/errors.rb#490
  def normalize_arguments(attribute, type, **options); end
end

# source://activemodel//lib/active_model/errors.rb#265
ActiveModel::Errors::EMPTY_ARRAY = T.let(T.unsafe(nil), Array)

# source://activemodel//lib/active_model/forbidden_attributes_protection.rb#18
class ActiveModel::ForbiddenAttributesError < ::StandardError; end

# source://activemodel//lib/active_model/forbidden_attributes_protection.rb#21
module ActiveModel::ForbiddenAttributesProtection
  private

  # source://activemodel//lib/active_model/forbidden_attributes_protection.rb#23
  def sanitize_for_mass_assignment(attributes); end

  # source://activemodel//lib/active_model/forbidden_attributes_protection.rb#23
  def sanitize_forbidden_attributes(attributes); end
end

# source://activemodel//lib/active_model/attribute_mutation_tracker.rb#91
class ActiveModel::ForcedMutationTracker < ::ActiveModel::AttributeMutationTracker
  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#92
  def initialize(attributes); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#101
  def change_to_attribute(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#97
  def changed_in_place?(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#125
  def finalize_changes; end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#121
  def force_change(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#109
  def forget_change(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#113
  def original_value(attr_name); end

  private

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#132
  def attr_names; end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#136
  def attribute_changed?(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#144
  def clone_value(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#140
  def fetch_value(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#130
  def finalized_changes; end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#151
  def type_cast(attr_name, value); end
end

# source://activemodel//lib/active_model/attribute_set/builder.rb#94
class ActiveModel::LazyAttributeHash
  # source://activemodel//lib/active_model/attribute_set/builder.rb#97
  def initialize(types, values, additional_types, default_attributes, delegate_hash = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#134
  def ==(other); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#110
  def [](key); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#114
  def []=(key, value); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#118
  def deep_dup; end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#129
  def each_key(&block); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#95
  def each_value(*_arg0, **_arg1, &_arg2); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#95
  def except(*_arg0, **_arg1, &_arg2); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#95
  def fetch(*_arg0, **_arg1, &_arg2); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#106
  def key?(key); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#142
  def marshal_dump; end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#146
  def marshal_load(values); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#95
  def transform_values(*_arg0, **_arg1, &_arg2); end

  protected

  # source://activemodel//lib/active_model/attribute_set/builder.rb#151
  def materialize; end

  private

  # source://activemodel//lib/active_model/attribute_set/builder.rb#163
  def additional_types; end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#165
  def assign_default_value(name); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#163
  def default_attributes; end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#163
  def delegate_hash; end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#124
  def initialize_dup(_); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#163
  def types; end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#163
  def values; end
end

# source://activemodel//lib/active_model/attribute_set/builder.rb#21
class ActiveModel::LazyAttributeSet < ::ActiveModel::AttributeSet
  # source://activemodel//lib/active_model/attribute_set/builder.rb#22
  def initialize(values, types, additional_types, default_attributes, attributes = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#41
  def fetch_value(name, &block); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#32
  def key?(name); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#36
  def keys; end

  protected

  # source://activemodel//lib/active_model/attribute_set/builder.rb#61
  def attributes; end

  private

  # source://activemodel//lib/active_model/attribute_set/builder.rb#71
  def additional_types; end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#73
  def default_attribute(name, value_present = T.unsafe(nil), value = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#71
  def default_attributes; end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#71
  def types; end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#71
  def values; end
end

# source://activemodel//lib/active_model/lint.rb#4
module ActiveModel::Lint; end

# source://activemodel//lib/active_model/lint.rb#24
module ActiveModel::Lint::Tests
  # source://activemodel//lib/active_model/lint.rb#102
  def test_errors_aref; end

  # source://activemodel//lib/active_model/lint.rb#81
  def test_model_naming; end

  # source://activemodel//lib/active_model/lint.rb#70
  def test_persisted?; end

  # source://activemodel//lib/active_model/lint.rb#31
  def test_to_key; end

  # source://activemodel//lib/active_model/lint.rb#46
  def test_to_param; end

  # source://activemodel//lib/active_model/lint.rb#58
  def test_to_partial_path; end

  private

  # source://activemodel//lib/active_model/lint.rb#113
  def assert_boolean(result, name); end

  # source://activemodel//lib/active_model/lint.rb#108
  def model; end
end

# source://activemodel//lib/active_model/attribute_methods.rb#15
class ActiveModel::MissingAttributeError < ::NoMethodError; end

# source://activemodel//lib/active_model/model.rb#42
module ActiveModel::Model
  include ::ActiveModel::Access
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Validations
  include ::ActiveModel::Conversion
  include ::ActiveModel::API

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods
  mixes_in_class_methods ::ActiveModel::Conversion::ClassMethods

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
    def param_delimiter; end
    def param_delimiter=(value); end
    def param_delimiter?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _validators; end
    def _validators?; end
    def param_delimiter=(value); end
  end
end

# source://activemodel//lib/active_model/naming.rb#9
class ActiveModel::Name
  include ::Comparable

  # source://activemodel//lib/active_model/naming.rb#166
  def initialize(klass, namespace = T.unsafe(nil), name = T.unsafe(nil), locale = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/naming.rb#151
  def !~(*_arg0, **_arg1, &_arg2); end

  # source://activemodel//lib/active_model/naming.rb#151
  def <=>(*_arg0, **_arg1, &_arg2); end

  # source://activemodel//lib/active_model/naming.rb#151
  def ==(arg); end

  # source://activemodel//lib/active_model/naming.rb#151
  def ===(arg); end

  # source://activemodel//lib/active_model/naming.rb#151
  def =~(*_arg0, **_arg1, &_arg2); end

  # source://activemodel//lib/active_model/naming.rb#151
  def as_json(*_arg0, **_arg1, &_arg2); end

  # source://activemodel//lib/active_model/naming.rb#12
  def cache_key; end

  # source://activemodel//lib/active_model/naming.rb#12
  def collection; end

  # source://activemodel//lib/active_model/naming.rb#12
  def collection=(_arg0); end

  # source://activemodel//lib/active_model/naming.rb#12
  def element; end

  # source://activemodel//lib/active_model/naming.rb#12
  def element=(_arg0); end

  # source://activemodel//lib/active_model/naming.rb#151
  def eql?(*_arg0, **_arg1, &_arg2); end

  # source://activemodel//lib/active_model/naming.rb#197
  def human(options = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/naming.rb#12
  def i18n_key; end

  # source://activemodel//lib/active_model/naming.rb#12
  def i18n_key=(_arg0); end

  # source://activemodel//lib/active_model/naming.rb#151
  def match?(*_arg0, **_arg1, &_arg2); end

  # source://activemodel//lib/active_model/naming.rb#12
  def name; end

  # source://activemodel//lib/active_model/naming.rb#12
  def name=(_arg0); end

  # source://activemodel//lib/active_model/naming.rb#12
  def param_key; end

  # source://activemodel//lib/active_model/naming.rb#12
  def param_key=(_arg0); end

  # source://activemodel//lib/active_model/naming.rb#12
  def plural; end

  # source://activemodel//lib/active_model/naming.rb#12
  def plural=(_arg0); end

  # source://activemodel//lib/active_model/naming.rb#12
  def route_key; end

  # source://activemodel//lib/active_model/naming.rb#12
  def route_key=(_arg0); end

  # source://activemodel//lib/active_model/naming.rb#12
  def singular; end

  # source://activemodel//lib/active_model/naming.rb#12
  def singular=(_arg0); end

  # source://activemodel//lib/active_model/naming.rb#12
  def singular_route_key; end

  # source://activemodel//lib/active_model/naming.rb#12
  def singular_route_key=(_arg0); end

  # source://activemodel//lib/active_model/naming.rb#151
  def to_s(*_arg0, **_arg1, &_arg2); end

  # source://activemodel//lib/active_model/naming.rb#151
  def to_str(*_arg0, **_arg1, &_arg2); end

  # source://activemodel//lib/active_model/naming.rb#209
  def uncountable?; end

  private

  # source://activemodel//lib/active_model/naming.rb#216
  def _singularize(string); end

  # source://activemodel//lib/active_model/naming.rb#220
  def i18n_keys; end

  # source://activemodel//lib/active_model/naming.rb#228
  def i18n_scope; end
end

# source://activemodel//lib/active_model/naming.rb#214
ActiveModel::Name::MISSING_TRANSLATION = T.let(T.unsafe(nil), Integer)

# source://activemodel//lib/active_model/naming.rb#252
module ActiveModel::Naming
  # source://activemodel//lib/active_model/naming.rb#270
  def model_name; end

  private

  # source://activemodel//lib/active_model/naming.rb#352
  def inherited(base); end

  class << self
    # source://activemodel//lib/active_model/naming.rb#253
    def extended(base); end

    # source://activemodel//lib/active_model/naming.rb#338
    def param_key(record_or_class); end

    # source://activemodel//lib/active_model/naming.rb#283
    def plural(record_or_class); end

    # source://activemodel//lib/active_model/naming.rb#326
    def route_key(record_or_class); end

    # source://activemodel//lib/active_model/naming.rb#291
    def singular(record_or_class); end

    # source://activemodel//lib/active_model/naming.rb#311
    def singular_route_key(record_or_class); end

    # source://activemodel//lib/active_model/naming.rb#299
    def uncountable?(record_or_class); end

    private

    # source://activemodel//lib/active_model/naming.rb#342
    def model_name_from_record_or_class(record_or_class); end
  end
end

# source://activemodel//lib/active_model/nested_error.rb#7
class ActiveModel::NestedError < ::ActiveModel::Error
  extend ::Forwardable

  # source://activemodel//lib/active_model/nested_error.rb#8
  def initialize(base, inner_error, override_options = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/nested_error.rb#17
  def inner_error; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def message(*args, **_arg1, &block); end
end

# source://activemodel//lib/active_model/attribute_mutation_tracker.rb#156
class ActiveModel::NullMutationTracker
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#174
  def any_changes?; end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#171
  def change_to_attribute(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#178
  def changed?(attr_name, **_arg1); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#159
  def changed_attribute_names; end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#182
  def changed_in_place?(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#163
  def changed_values; end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#167
  def changes; end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#186
  def original_value(attr_name); end

  class << self
    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://activemodel//lib/active_model/railtie.rb#7
class ActiveModel::Railtie < ::Rails::Railtie; end

# source://activemodel//lib/active_model/errors.rb#523
class ActiveModel::RangeError < ::RangeError; end

# source://activemodel//lib/active_model/secure_password.rb#4
module ActiveModel::SecurePassword
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveModel::SecurePassword::ClassMethods

  class << self
    # source://activemodel//lib/active_model/secure_password.rb#13
    def min_cost; end

    # source://activemodel//lib/active_model/secure_password.rb#13
    def min_cost=(_arg0); end
  end
end

# source://activemodel//lib/active_model/secure_password.rb#17
module ActiveModel::SecurePassword::ClassMethods
  # source://activemodel//lib/active_model/secure_password.rb#101
  def has_secure_password(attribute = T.unsafe(nil), validations: T.unsafe(nil)); end
end

# source://activemodel//lib/active_model/secure_password.rb#148
class ActiveModel::SecurePassword::InstanceMethodsOnActivation < ::Module
  # source://activemodel//lib/active_model/secure_password.rb#149
  def initialize(attribute); end
end

# source://activemodel//lib/active_model/secure_password.rb#10
ActiveModel::SecurePassword::MAX_PASSWORD_LENGTH_ALLOWED = T.let(T.unsafe(nil), Integer)

# source://activemodel//lib/active_model/serialization.rb#69
module ActiveModel::Serialization
  def read_attribute_for_serialization(*_arg0); end

  # source://activemodel//lib/active_model/serialization.rb#125
  def serializable_hash(options = T.unsafe(nil)); end

  private

  # source://activemodel//lib/active_model/serialization.rb#152
  def attribute_names_for_serialization; end

  # source://activemodel//lib/active_model/serialization.rb#184
  def serializable_add_includes(options = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/serialization.rb#174
  def serializable_attributes(attribute_names); end
end

# source://activemodel//lib/active_model.rb#68
module ActiveModel::Serializers
  extend ::ActiveSupport::Autoload
end

# source://activemodel//lib/active_model/serializers/json.rb#8
module ActiveModel::Serializers::JSON
  include ::ActiveModel::Serialization
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Naming

  # source://activemodel//lib/active_model/serializers/json.rb#96
  def as_json(options = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/serializers/json.rb#146
  def from_json(json, include_root = T.unsafe(nil)); end

  module GeneratedClassMethods
    def include_root_in_json; end
    def include_root_in_json=(value); end
    def include_root_in_json?; end
  end

  module GeneratedInstanceMethods
    def include_root_in_json; end
    def include_root_in_json?; end
  end
end

# source://activemodel//lib/active_model/errors.rb#517
class ActiveModel::StrictValidationFailed < ::StandardError; end

# source://activemodel//lib/active_model/translation.rb#22
module ActiveModel::Translation
  include ::ActiveModel::Naming

  # source://activemodel//lib/active_model/translation.rb#46
  def human_attribute_name(attribute, options = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/translation.rb#26
  def i18n_scope; end

  # source://activemodel//lib/active_model/translation.rb#34
  def lookup_ancestors; end
end

# source://activemodel//lib/active_model/translation.rb#38
ActiveModel::Translation::MISSING_TRANSLATION = T.let(T.unsafe(nil), Integer)

# source://activemodel//lib/active_model/type/helpers/accepts_multiparameter_time.rb#4
module ActiveModel::Type
  class << self
    # source://activemodel//lib/active_model/type.rb#38
    def default_value; end

    # source://activemodel//lib/active_model/type.rb#34
    def lookup(*_arg0, **_arg1, &_arg2); end

    # source://activemodel//lib/active_model/type.rb#30
    def register(type_name, klass = T.unsafe(nil), &block); end

    # source://activemodel//lib/active_model/type.rb#26
    def registry; end

    # source://activemodel//lib/active_model/type.rb#26
    def registry=(_arg0); end
  end
end

# source://activemodel//lib/active_model/type/big_integer.rb#25
class ActiveModel::Type::BigInteger < ::ActiveModel::Type::Integer
  # source://activemodel//lib/active_model/type/big_integer.rb#26
  def serialize_cast_value(value); end

  private

  # source://activemodel//lib/active_model/type/big_integer.rb#31
  def max_value; end
end

# source://activemodel//lib/active_model/type/binary.rb#11
class ActiveModel::Type::Binary < ::ActiveModel::Type::Value
  # source://activemodel//lib/active_model/type/binary.rb#16
  def binary?; end

  # source://activemodel//lib/active_model/type/binary.rb#20
  def cast(value); end

  # source://activemodel//lib/active_model/type/binary.rb#35
  def changed_in_place?(raw_old_value, value); end

  # source://activemodel//lib/active_model/type/binary.rb#30
  def serialize(value); end

  # source://activemodel//lib/active_model/type/binary.rb#12
  def type; end
end

# source://activemodel//lib/active_model/type/binary.rb#40
class ActiveModel::Type::Binary::Data
  # source://activemodel//lib/active_model/type/binary.rb#41
  def initialize(value); end

  # source://activemodel//lib/active_model/type/binary.rb#56
  def ==(other); end

  # source://activemodel//lib/active_model/type/binary.rb#52
  def hex; end

  # source://activemodel//lib/active_model/type/binary.rb#47
  def to_s; end

  # source://activemodel//lib/active_model/type/binary.rb#47
  def to_str; end
end

# source://activemodel//lib/active_model/type/boolean.rb#14
class ActiveModel::Type::Boolean < ::ActiveModel::Type::Value
  # source://activemodel//lib/active_model/type/boolean.rb#30
  def serialize(value); end

  # source://activemodel//lib/active_model/type/boolean.rb#34
  def serialize_cast_value(value); end

  # source://activemodel//lib/active_model/type/boolean.rb#26
  def type; end

  private

  # source://activemodel//lib/active_model/type/boolean.rb#39
  def cast_value(value); end
end

# source://activemodel//lib/active_model/type/boolean.rb#15
ActiveModel::Type::Boolean::FALSE_VALUES = T.let(T.unsafe(nil), Set)

# source://activemodel//lib/active_model/type/date.rb#26
class ActiveModel::Type::Date < ::ActiveModel::Type::Value
  include ::ActiveModel::Type::Helpers::Timezone
  include ::ActiveModel::Type::Helpers::AcceptsMultiparameterTime::InstanceMethods

  # source://activemodel//lib/active_model/type/date.rb#30
  def type; end

  # source://activemodel//lib/active_model/type/date.rb#34
  def type_cast_for_schema(value); end

  private

  # source://activemodel//lib/active_model/type/date.rb#39
  def cast_value(value); end

  # source://activemodel//lib/active_model/type/date.rb#57
  def fallback_string_to_date(string); end

  # source://activemodel//lib/active_model/type/date.rb#51
  def fast_string_to_date(string); end

  # source://activemodel//lib/active_model/type/date.rb#66
  def new_date(year, mon, mday); end

  # source://activemodel//lib/active_model/type/date.rb#72
  def value_from_multiparameter_assignment(*_arg0); end
end

# source://activemodel//lib/active_model/type/date.rb#50
ActiveModel::Type::Date::ISO_DATE = T.let(T.unsafe(nil), Regexp)

# source://activemodel//lib/active_model/type/date_time.rb#42
class ActiveModel::Type::DateTime < ::ActiveModel::Type::Value
  include ::ActiveModel::Type::Helpers::Timezone
  include ::ActiveModel::Type::Helpers::AcceptsMultiparameterTime::InstanceMethods
  include ::ActiveModel::Type::Helpers::TimeValue

  # source://activemodel//lib/active_model/type/date_time.rb#49
  def type; end

  private

  # source://activemodel//lib/active_model/type/date_time.rb#54
  def cast_value(value); end

  # source://activemodel//lib/active_model/type/date_time.rb#67
  def fallback_string_to_time(string); end

  # source://activemodel//lib/active_model/type/date_time.rb#63
  def microseconds(time); end

  # source://activemodel//lib/active_model/type/date_time.rb#79
  def value_from_multiparameter_assignment(values_hash); end
end

# source://activemodel//lib/active_model/type/decimal.rb#45
class ActiveModel::Type::Decimal < ::ActiveModel::Type::Value
  include ::ActiveModel::Type::Helpers::Numeric

  # source://activemodel//lib/active_model/type/decimal.rb#49
  def type; end

  # source://activemodel//lib/active_model/type/decimal.rb#53
  def type_cast_for_schema(value); end

  private

  # source://activemodel//lib/active_model/type/decimal.rb#98
  def apply_scale(value); end

  # source://activemodel//lib/active_model/type/decimal.rb#58
  def cast_value(value); end

  # source://activemodel//lib/active_model/type/decimal.rb#82
  def convert_float_to_big_decimal(value); end

  # source://activemodel//lib/active_model/type/decimal.rb#90
  def float_precision; end
end

# source://activemodel//lib/active_model/type/decimal.rb#47
ActiveModel::Type::Decimal::BIGDECIMAL_PRECISION = T.let(T.unsafe(nil), Integer)

# source://activemodel//lib/active_model/type/float.rb#36
class ActiveModel::Type::Float < ::ActiveModel::Type::Value
  include ::ActiveModel::Type::Helpers::Numeric

  # source://activemodel//lib/active_model/type/float.rb#39
  def type; end

  # source://activemodel//lib/active_model/type/float.rb#43
  def type_cast_for_schema(value); end

  private

  # source://activemodel//lib/active_model/type/float.rb#53
  def cast_value(value); end
end

# source://activemodel//lib/active_model/type/helpers/accepts_multiparameter_time.rb#5
module ActiveModel::Type::Helpers; end

# source://activemodel//lib/active_model/type/helpers/accepts_multiparameter_time.rb#6
class ActiveModel::Type::Helpers::AcceptsMultiparameterTime < ::Module
  # source://activemodel//lib/active_model/type/helpers/accepts_multiparameter_time.rb#37
  def initialize(defaults: T.unsafe(nil)); end
end

# source://activemodel//lib/active_model/type/helpers/accepts_multiparameter_time.rb#7
module ActiveModel::Type::Helpers::AcceptsMultiparameterTime::InstanceMethods
  # source://activemodel//lib/active_model/type/helpers/accepts_multiparameter_time.rb#24
  def assert_valid_value(value); end

  # source://activemodel//lib/active_model/type/helpers/accepts_multiparameter_time.rb#16
  def cast(value); end

  # source://activemodel//lib/active_model/type/helpers/accepts_multiparameter_time.rb#8
  def serialize(value); end

  # source://activemodel//lib/active_model/type/helpers/accepts_multiparameter_time.rb#12
  def serialize_cast_value(value); end

  # source://activemodel//lib/active_model/type/helpers/accepts_multiparameter_time.rb#32
  def value_constructed_by_mass_assignment?(value); end
end

# source://activemodel//lib/active_model/type/helpers/mutable.rb#6
module ActiveModel::Type::Helpers::Mutable
  # source://activemodel//lib/active_model/type/helpers/mutable.rb#7
  def cast(value); end

  # source://activemodel//lib/active_model/type/helpers/mutable.rb#14
  def changed_in_place?(raw_old_value, new_value); end

  # source://activemodel//lib/active_model/type/helpers/mutable.rb#18
  def mutable?; end
end

# source://activemodel//lib/active_model/type/helpers/numeric.rb#6
module ActiveModel::Type::Helpers::Numeric
  # source://activemodel//lib/active_model/type/helpers/numeric.rb#15
  def cast(value); end

  # source://activemodel//lib/active_model/type/helpers/numeric.rb#31
  def changed?(old_value, _new_value, new_value_before_type_cast); end

  # source://activemodel//lib/active_model/type/helpers/numeric.rb#7
  def serialize(value); end

  # source://activemodel//lib/active_model/type/helpers/numeric.rb#11
  def serialize_cast_value(value); end

  private

  # source://activemodel//lib/active_model/type/helpers/numeric.rb#37
  def equal_nan?(old_value, new_value); end

  # source://activemodel//lib/active_model/type/helpers/numeric.rb#49
  def non_numeric_string?(value); end

  # source://activemodel//lib/active_model/type/helpers/numeric.rb#44
  def number_to_non_number?(old_value, new_value_before_type_cast); end
end

# source://activemodel//lib/active_model/type/helpers/numeric.rb#56
ActiveModel::Type::Helpers::Numeric::NUMERIC_REGEX = T.let(T.unsafe(nil), Regexp)

# source://activemodel//lib/active_model/type/helpers/time_value.rb#9
module ActiveModel::Type::Helpers::TimeValue
  # source://activemodel//lib/active_model/type/helpers/time_value.rb#24
  def apply_seconds_precision(value); end

  # source://activemodel//lib/active_model/type/helpers/time_value.rb#10
  def serialize_cast_value(value); end

  # source://activemodel//lib/active_model/type/helpers/time_value.rb#38
  def type_cast_for_schema(value); end

  # source://activemodel//lib/active_model/type/helpers/time_value.rb#42
  def user_input_in_time_zone(value); end

  private

  # source://activemodel//lib/active_model/type/helpers/time_value.rb#73
  def fast_string_to_time(string); end

  # source://activemodel//lib/active_model/type/helpers/time_value.rb#47
  def new_time(year, mon, mday, hour, min, sec, microsec, offset = T.unsafe(nil)); end
end

# source://activemodel//lib/active_model/type/helpers/time_value.rb#64
ActiveModel::Type::Helpers::TimeValue::ISO_DATETIME = T.let(T.unsafe(nil), Regexp)

# source://activemodel//lib/active_model/type/helpers/timezone.rb#8
module ActiveModel::Type::Helpers::Timezone
  # source://activemodel//lib/active_model/type/helpers/timezone.rb#13
  def default_timezone; end

  # source://activemodel//lib/active_model/type/helpers/timezone.rb#9
  def is_utc?; end
end

# source://activemodel//lib/active_model/type/immutable_string.rb#37
class ActiveModel::Type::ImmutableString < ::ActiveModel::Type::Value
  # source://activemodel//lib/active_model/type/immutable_string.rb#38
  def initialize(**args); end

  # source://activemodel//lib/active_model/type/immutable_string.rb#48
  def serialize(value); end

  # source://activemodel//lib/active_model/type/immutable_string.rb#57
  def serialize_cast_value(value); end

  # source://activemodel//lib/active_model/type/immutable_string.rb#44
  def type; end

  private

  # source://activemodel//lib/active_model/type/immutable_string.rb#62
  def cast_value(value); end
end

# source://activemodel//lib/active_model/type/integer.rb#44
class ActiveModel::Type::Integer < ::ActiveModel::Type::Value
  include ::ActiveModel::Type::Helpers::Numeric

  # source://activemodel//lib/active_model/type/integer.rb#51
  def initialize(**_arg0); end

  # source://activemodel//lib/active_model/type/integer.rb#60
  def deserialize(value); end

  # source://activemodel//lib/active_model/type/integer.rb#74
  def serializable?(value); end

  # source://activemodel//lib/active_model/type/integer.rb#65
  def serialize(value); end

  # source://activemodel//lib/active_model/type/integer.rb#70
  def serialize_cast_value(value); end

  # source://activemodel//lib/active_model/type/integer.rb#56
  def type; end

  private

  # source://activemodel//lib/active_model/type/integer.rb#108
  def _limit; end

  # source://activemodel//lib/active_model/type/integer.rb#89
  def cast_value(value); end

  # source://activemodel//lib/active_model/type/integer.rb#93
  def ensure_in_range(value); end

  # source://activemodel//lib/active_model/type/integer.rb#85
  def in_range?(value); end

  # source://activemodel//lib/active_model/type/integer.rb#100
  def max_value; end

  # source://activemodel//lib/active_model/type/integer.rb#104
  def min_value; end

  # source://activemodel//lib/active_model/type/integer.rb#83
  def range; end
end

# source://activemodel//lib/active_model/type/integer.rb#49
ActiveModel::Type::Integer::DEFAULT_LIMIT = T.let(T.unsafe(nil), Integer)

# source://activemodel//lib/active_model/type/registry.rb#5
class ActiveModel::Type::Registry
  # source://activemodel//lib/active_model/type/registry.rb#6
  def initialize; end

  # source://activemodel//lib/active_model/type/registry.rb#23
  def lookup(symbol, *args, **_arg2); end

  # source://activemodel//lib/active_model/type/registry.rb#15
  def register(type_name, klass = T.unsafe(nil), &block); end

  private

  # source://activemodel//lib/active_model/type/registry.rb#10
  def initialize_copy(other); end

  # source://activemodel//lib/active_model/type/registry.rb#35
  def registrations; end
end

# source://activemodel//lib/active_model/type/serialize_cast_value.rb#5
module ActiveModel::Type::SerializeCastValue
  extend ::ActiveSupport::Concern
  include ::ActiveModel::Type::SerializeCastValue::DefaultImplementation

  mixes_in_class_methods ::ActiveModel::Type::SerializeCastValue::ClassMethods

  # source://activemodel//lib/active_model/type/serialize_cast_value.rb#41
  def initialize(*_arg0, **_arg1, &_arg2); end

  # source://activemodel//lib/active_model/type/serialize_cast_value.rb#37
  def itself_if_serialize_cast_value_compatible; end

  class << self
    # source://activemodel//lib/active_model/type/serialize_cast_value.rb#21
    def included(klass); end

    # source://activemodel//lib/active_model/type/serialize_cast_value.rb#25
    def serialize(type, value); end
  end
end

# source://activemodel//lib/active_model/type/serialize_cast_value.rb#8
module ActiveModel::Type::SerializeCastValue::ClassMethods
  # source://activemodel//lib/active_model/type/serialize_cast_value.rb#9
  def serialize_cast_value_compatible?; end
end

# source://activemodel//lib/active_model/type/serialize_cast_value.rb#15
module ActiveModel::Type::SerializeCastValue::DefaultImplementation
  # source://activemodel//lib/active_model/type/serialize_cast_value.rb#16
  def serialize_cast_value(value); end
end

# source://activemodel//lib/active_model/type/string.rb#15
class ActiveModel::Type::String < ::ActiveModel::Type::ImmutableString
  # source://activemodel//lib/active_model/type/string.rb#16
  def changed_in_place?(raw_old_value, new_value); end

  # source://activemodel//lib/active_model/type/string.rb#22
  def to_immutable_string; end

  private

  # source://activemodel//lib/active_model/type/string.rb#33
  def cast_value(value); end
end

# source://activemodel//lib/active_model/type/time.rb#38
class ActiveModel::Type::Time < ::ActiveModel::Type::Value
  include ::ActiveModel::Type::Helpers::Timezone
  include ::ActiveModel::Type::Helpers::AcceptsMultiparameterTime::InstanceMethods
  include ::ActiveModel::Type::Helpers::TimeValue

  # source://activemodel//lib/active_model/type/time.rb#45
  def type; end

  # source://activemodel//lib/active_model/type/time.rb#49
  def user_input_in_time_zone(value); end

  private

  # source://activemodel//lib/active_model/type/time.rb#69
  def cast_value(value); end
end

# source://activemodel//lib/active_model/type/value.rb#9
class ActiveModel::Type::Value
  include ::ActiveModel::Type::SerializeCastValue
  include ::ActiveModel::Type::SerializeCastValue::DefaultImplementation
  extend ::ActiveModel::Type::SerializeCastValue::ClassMethods

  # source://activemodel//lib/active_model/type/value.rb#17
  def initialize(precision: T.unsafe(nil), limit: T.unsafe(nil), scale: T.unsafe(nil)); end

  # source://activemodel//lib/active_model/type/value.rb#121
  def ==(other); end

  # source://activemodel//lib/active_model/type/value.rb#144
  def as_json(*_arg0); end

  # source://activemodel//lib/active_model/type/value.rb#133
  def assert_valid_value(_); end

  # source://activemodel//lib/active_model/type/value.rb#77
  def binary?; end

  # source://activemodel//lib/active_model/type/value.rb#57
  def cast(value); end

  # source://activemodel//lib/active_model/type/value.rb#84
  def changed?(old_value, new_value, _new_value_before_type_cast); end

  # source://activemodel//lib/active_model/type/value.rb#105
  def changed_in_place?(raw_old_value, new_value); end

  # source://activemodel//lib/active_model/type/value.rb#43
  def deserialize(value); end

  # source://activemodel//lib/active_model/type/value.rb#121
  def eql?(other); end

  # source://activemodel//lib/active_model/type/value.rb#113
  def force_equality?(_value); end

  # source://activemodel//lib/active_model/type/value.rb#129
  def hash; end

  # source://activemodel//lib/active_model/type/value.rb#11
  def limit; end

  # source://activemodel//lib/active_model/type/value.rb#117
  def map(value); end

  # source://activemodel//lib/active_model/type/value.rb#140
  def mutable?; end

  # source://activemodel//lib/active_model/type/value.rb#11
  def precision; end

  # source://activemodel//lib/active_model/type/value.rb#11
  def scale; end

  # source://activemodel//lib/active_model/type/value.rb#28
  def serializable?(value); end

  # source://activemodel//lib/active_model/type/value.rb#65
  def serialize(value); end

  # source://activemodel//lib/active_model/type/value.rb#136
  def serialized?; end

  # source://activemodel//lib/active_model/type/value.rb#34
  def type; end

  # source://activemodel//lib/active_model/type/value.rb#71
  def type_cast_for_schema(value); end

  # source://activemodel//lib/active_model/type/value.rb#109
  def value_constructed_by_mass_assignment?(_value); end

  private

  # source://activemodel//lib/active_model/type/value.rb#152
  def cast_value(value); end
end

# source://activemodel//lib/active_model/errors.rb#538
class ActiveModel::UnknownAttributeError < ::NoMethodError
  # source://activemodel//lib/active_model/errors.rb#541
  def initialize(record, attribute); end

  # source://activemodel//lib/active_model/errors.rb#539
  def attribute; end

  # source://activemodel//lib/active_model/errors.rb#539
  def record; end
end

# source://activemodel//lib/active_model/gem_version.rb#9
module ActiveModel::VERSION; end

# source://activemodel//lib/active_model/gem_version.rb#10
ActiveModel::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://activemodel//lib/active_model/gem_version.rb#11
ActiveModel::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://activemodel//lib/active_model/gem_version.rb#13
ActiveModel::VERSION::PRE = T.let(T.unsafe(nil), String)

# source://activemodel//lib/active_model/gem_version.rb#15
ActiveModel::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://activemodel//lib/active_model/gem_version.rb#12
ActiveModel::VERSION::TINY = T.let(T.unsafe(nil), Integer)

# source://activemodel//lib/active_model/validations.rb#460
class ActiveModel::ValidationError < ::StandardError
  # source://activemodel//lib/active_model/validations.rb#463
  def initialize(model); end

  # source://activemodel//lib/active_model/validations.rb#461
  def model; end
end

# source://activemodel//lib/active_model/validations.rb#37
module ActiveModel::Validations
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods

  # source://activemodel//lib/active_model/validations.rb#330
  def errors; end

  # source://activemodel//lib/active_model/validations.rb#402
  def invalid?(context = T.unsafe(nil)); end

  def read_attribute_for_validation(*_arg0); end

  # source://activemodel//lib/active_model/validations.rb#363
  def valid?(context = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/validations.rb#363
  def validate(context = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/validations.rb#411
  def validate!(context = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/validations/with.rb#144
  def validates_with(*args, &block); end

  private

  # source://activemodel//lib/active_model/validations.rb#434
  def init_internals; end

  # source://activemodel//lib/active_model/validations.rb#312
  def initialize_dup(other); end

  # source://activemodel//lib/active_model/validations.rb#445
  def raise_validation_error; end

  # source://activemodel//lib/active_model/validations.rb#440
  def run_validations!; end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _validators; end
    def _validators?; end
  end
end

# source://activemodel//lib/active_model/validations/absence.rb#6
class ActiveModel::Validations::AbsenceValidator < ::ActiveModel::EachValidator
  # source://activemodel//lib/active_model/validations/absence.rb#7
  def validate_each(record, attr_name, value); end
end

# source://activemodel//lib/active_model/validations/acceptance.rb#5
class ActiveModel::Validations::AcceptanceValidator < ::ActiveModel::EachValidator
  # source://activemodel//lib/active_model/validations/acceptance.rb#6
  def initialize(options); end

  # source://activemodel//lib/active_model/validations/acceptance.rb#11
  def validate_each(record, attribute, value); end

  private

  # source://activemodel//lib/active_model/validations/acceptance.rb#23
  def acceptable_option?(value); end

  # source://activemodel//lib/active_model/validations/acceptance.rb#18
  def setup!(klass); end
end

# source://activemodel//lib/active_model/validations/acceptance.rb#27
class ActiveModel::Validations::AcceptanceValidator::LazilyDefineAttributes < ::Module
  # source://activemodel//lib/active_model/validations/acceptance.rb#28
  def initialize(attributes); end

  # source://activemodel//lib/active_model/validations/acceptance.rb#73
  def ==(other); end

  # source://activemodel//lib/active_model/validations/acceptance.rb#56
  def define_on(klass); end

  # source://activemodel//lib/active_model/validations/acceptance.rb#32
  def included(klass); end

  # source://activemodel//lib/active_model/validations/acceptance.rb#51
  def matches?(method_name); end

  protected

  # source://activemodel//lib/active_model/validations/acceptance.rb#78
  def attributes; end
end

# source://activemodel//lib/active_model/validations/callbacks.rb#22
module ActiveModel::Validations::Callbacks
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker

  private

  # source://activemodel//lib/active_model/validations/callbacks.rb#114
  def run_validations!; end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

# source://activemodel//lib/active_model/validations/callbacks.rb#32
module ActiveModel::Validations::Callbacks::ClassMethods
  # source://activemodel//lib/active_model/validations/callbacks.rb#88
  def after_validation(*args, &block); end

  # source://activemodel//lib/active_model/validations/callbacks.rb#55
  def before_validation(*args, &block); end

  private

  # source://activemodel//lib/active_model/validations/callbacks.rb#99
  def set_options_for_callback(options); end
end

# source://activemodel//lib/active_model/validations.rb#74
module ActiveModel::Validations::ClassMethods
  # source://activemodel//lib/active_model/validations.rb#284
  def attribute_method?(attribute); end

  # source://activemodel//lib/active_model/validations.rb#248
  def clear_validators!; end

  # source://activemodel//lib/active_model/validations.rb#289
  def inherited(base); end

  # source://activemodel//lib/active_model/validations.rb#171
  def validate(*args, &block); end

  # source://activemodel//lib/active_model/validations/validates.rb#106
  def validates(*attributes); end

  # source://activemodel//lib/active_model/validations/validates.rb#148
  def validates!(*attributes); end

  # source://activemodel//lib/active_model/validations.rb#104
  def validates_each(*attr_names, &block); end

  # source://activemodel//lib/active_model/validations/with.rb#88
  def validates_with(*args, &block); end

  # source://activemodel//lib/active_model/validations.rb#206
  def validators; end

  # source://activemodel//lib/active_model/validations.rb#268
  def validators_on(*attributes); end

  private

  # source://activemodel//lib/active_model/validations/validates.rb#161
  def _parse_validates_options(options); end

  # source://activemodel//lib/active_model/validations/validates.rb#157
  def _validates_default_keys; end

  # source://activemodel//lib/active_model/validations.rb#298
  def predicate_for_validation_context(context); end
end

# source://activemodel//lib/active_model/validations.rb#108
ActiveModel::Validations::ClassMethods::VALID_OPTIONS_FOR_VALIDATE = T.let(T.unsafe(nil), Array)

# source://activemodel//lib/active_model/validations/clusivity.rb#8
module ActiveModel::Validations::Clusivity
  include ::ActiveModel::Validations::ResolveValue

  # source://activemodel//lib/active_model/validations/clusivity.rb#14
  def check_validity!; end

  private

  # source://activemodel//lib/active_model/validations/clusivity.rb#31
  def delimiter; end

  # source://activemodel//lib/active_model/validations/clusivity.rb#21
  def include?(record, value); end

  # source://activemodel//lib/active_model/validations/clusivity.rb#40
  def inclusion_method(enumerable); end
end

# source://activemodel//lib/active_model/validations/clusivity.rb#11
ActiveModel::Validations::Clusivity::ERROR_MESSAGE = T.let(T.unsafe(nil), String)

# source://activemodel//lib/active_model/validations/comparability.rb#5
module ActiveModel::Validations::Comparability
  # source://activemodel//lib/active_model/validations/comparability.rb#10
  def error_options(value, option_value); end
end

# source://activemodel//lib/active_model/validations/comparability.rb#6
ActiveModel::Validations::Comparability::COMPARE_CHECKS = T.let(T.unsafe(nil), Hash)

# source://activemodel//lib/active_model/validations/comparison.rb#8
class ActiveModel::Validations::ComparisonValidator < ::ActiveModel::EachValidator
  include ::ActiveModel::Validations::Comparability
  include ::ActiveModel::Validations::ResolveValue

  # source://activemodel//lib/active_model/validations/comparison.rb#12
  def check_validity!; end

  # source://activemodel//lib/active_model/validations/comparison.rb#19
  def validate_each(record, attr_name, value); end
end

# source://activemodel//lib/active_model/validations/confirmation.rb#5
class ActiveModel::Validations::ConfirmationValidator < ::ActiveModel::EachValidator
  # source://activemodel//lib/active_model/validations/confirmation.rb#6
  def initialize(options); end

  # source://activemodel//lib/active_model/validations/confirmation.rb#11
  def validate_each(record, attribute, value); end

  private

  # source://activemodel//lib/active_model/validations/confirmation.rb#31
  def confirmation_value_equal?(record, attribute, value, confirmed); end

  # source://activemodel//lib/active_model/validations/confirmation.rb#21
  def setup!(klass); end
end

# source://activemodel//lib/active_model/validations/exclusion.rb#7
class ActiveModel::Validations::ExclusionValidator < ::ActiveModel::EachValidator
  include ::ActiveModel::Validations::ResolveValue
  include ::ActiveModel::Validations::Clusivity

  # source://activemodel//lib/active_model/validations/exclusion.rb#10
  def validate_each(record, attribute, value); end
end

# source://activemodel//lib/active_model/validations/format.rb#7
class ActiveModel::Validations::FormatValidator < ::ActiveModel::EachValidator
  include ::ActiveModel::Validations::ResolveValue

  # source://activemodel//lib/active_model/validations/format.rb#20
  def check_validity!; end

  # source://activemodel//lib/active_model/validations/format.rb#10
  def validate_each(record, attribute, value); end

  private

  # source://activemodel//lib/active_model/validations/format.rb#34
  def check_options_validity(name); end

  # source://activemodel//lib/active_model/validations/format.rb#30
  def record_error(record, attribute, name, value); end

  # source://activemodel//lib/active_model/validations/format.rb#48
  def regexp_using_multiline_anchors?(regexp); end
end

# source://activemodel//lib/active_model/validations/absence.rb#12
module ActiveModel::Validations::HelperMethods
  # source://activemodel//lib/active_model/validations/absence.rb#28
  def validates_absence_of(*attr_names); end

  # source://activemodel//lib/active_model/validations/acceptance.rb#108
  def validates_acceptance_of(*attr_names); end

  # source://activemodel//lib/active_model/validations/comparison.rb#85
  def validates_comparison_of(*attr_names); end

  # source://activemodel//lib/active_model/validations/confirmation.rb#75
  def validates_confirmation_of(*attr_names); end

  # source://activemodel//lib/active_model/validations/exclusion.rb#44
  def validates_exclusion_of(*attr_names); end

  # source://activemodel//lib/active_model/validations/format.rb#107
  def validates_format_of(*attr_names); end

  # source://activemodel//lib/active_model/validations/inclusion.rb#42
  def validates_inclusion_of(*attr_names); end

  # source://activemodel//lib/active_model/validations/length.rb#123
  def validates_length_of(*attr_names); end

  # source://activemodel//lib/active_model/validations/numericality.rb#217
  def validates_numericality_of(*attr_names); end

  # source://activemodel//lib/active_model/validations/presence.rb#34
  def validates_presence_of(*attr_names); end

  # source://activemodel//lib/active_model/validations/length.rb#123
  def validates_size_of(*attr_names); end

  private

  # source://activemodel//lib/active_model/validations/helper_methods.rb#7
  def _merge_attributes(attr_names); end
end

# source://activemodel//lib/active_model/validations/inclusion.rb#7
class ActiveModel::Validations::InclusionValidator < ::ActiveModel::EachValidator
  include ::ActiveModel::Validations::ResolveValue
  include ::ActiveModel::Validations::Clusivity

  # source://activemodel//lib/active_model/validations/inclusion.rb#10
  def validate_each(record, attribute, value); end
end

# source://activemodel//lib/active_model/validations/length.rb#7
class ActiveModel::Validations::LengthValidator < ::ActiveModel::EachValidator
  include ::ActiveModel::Validations::ResolveValue

  # source://activemodel//lib/active_model/validations/length.rb#15
  def initialize(options); end

  # source://activemodel//lib/active_model/validations/length.rb#29
  def check_validity!; end

  # source://activemodel//lib/active_model/validations/length.rb#47
  def validate_each(record, attribute, value); end

  private

  # source://activemodel//lib/active_model/validations/length.rb#69
  def skip_nil_check?(key); end
end

# source://activemodel//lib/active_model/validations/length.rb#11
ActiveModel::Validations::LengthValidator::CHECKS = T.let(T.unsafe(nil), Hash)

# source://activemodel//lib/active_model/validations/length.rb#10
ActiveModel::Validations::LengthValidator::MESSAGES = T.let(T.unsafe(nil), Hash)

# source://activemodel//lib/active_model/validations/length.rb#13
ActiveModel::Validations::LengthValidator::RESERVED_OPTIONS = T.let(T.unsafe(nil), Array)

# source://activemodel//lib/active_model/validations/numericality.rb#9
class ActiveModel::Validations::NumericalityValidator < ::ActiveModel::EachValidator
  include ::ActiveModel::Validations::Comparability
  include ::ActiveModel::Validations::ResolveValue

  # source://activemodel//lib/active_model/validations/numericality.rb#22
  def check_validity!; end

  # source://activemodel//lib/active_model/validations/numericality.rb#36
  def validate_each(record, attr_name, value, precision: T.unsafe(nil), scale: T.unsafe(nil)); end

  private

  # source://activemodel//lib/active_model/validations/numericality.rb#118
  def allow_only_integer?(record); end

  # source://activemodel//lib/active_model/validations/numericality.rb#112
  def filtered_options(value); end

  # source://activemodel//lib/active_model/validations/numericality.rb#108
  def is_hexadecimal_literal?(raw_value); end

  # source://activemodel//lib/active_model/validations/numericality.rb#104
  def is_integer?(raw_value); end

  # source://activemodel//lib/active_model/validations/numericality.rb#94
  def is_number?(raw_value, precision, scale); end

  # source://activemodel//lib/active_model/validations/numericality.rb#68
  def option_as_number(record, option_value, precision, scale); end

  # source://activemodel//lib/active_model/validations/numericality.rb#72
  def parse_as_number(raw_value, precision, scale); end

  # source://activemodel//lib/active_model/validations/numericality.rb#86
  def parse_float(raw_value, precision, scale); end

  # source://activemodel//lib/active_model/validations/numericality.rb#122
  def prepare_value_for_validation(value, record, attr_name); end

  # source://activemodel//lib/active_model/validations/numericality.rb#143
  def record_attribute_changed_in_place?(record, attr_name); end

  # source://activemodel//lib/active_model/validations/numericality.rb#90
  def round(raw_value, scale); end
end

# source://activemodel//lib/active_model/validations/numericality.rb#20
ActiveModel::Validations::NumericalityValidator::HEXADECIMAL_REGEX = T.let(T.unsafe(nil), Regexp)

# source://activemodel//lib/active_model/validations/numericality.rb#18
ActiveModel::Validations::NumericalityValidator::INTEGER_REGEX = T.let(T.unsafe(nil), Regexp)

# source://activemodel//lib/active_model/validations/numericality.rb#14
ActiveModel::Validations::NumericalityValidator::NUMBER_CHECKS = T.let(T.unsafe(nil), Hash)

# source://activemodel//lib/active_model/validations/numericality.rb#13
ActiveModel::Validations::NumericalityValidator::RANGE_CHECKS = T.let(T.unsafe(nil), Hash)

# source://activemodel//lib/active_model/validations/numericality.rb#16
ActiveModel::Validations::NumericalityValidator::RESERVED_OPTIONS = T.let(T.unsafe(nil), Array)

# source://activemodel//lib/active_model/validations/presence.rb#5
class ActiveModel::Validations::PresenceValidator < ::ActiveModel::EachValidator
  # source://activemodel//lib/active_model/validations/presence.rb#6
  def validate_each(record, attr_name, value); end
end

# source://activemodel//lib/active_model/validations/resolve_value.rb#5
module ActiveModel::Validations::ResolveValue
  # source://activemodel//lib/active_model/validations/resolve_value.rb#6
  def resolve_value(record, value); end
end

# source://activemodel//lib/active_model/validations/with.rb#7
class ActiveModel::Validations::WithValidator < ::ActiveModel::EachValidator
  # source://activemodel//lib/active_model/validations/with.rb#8
  def validate_each(record, attr, val); end
end

# source://activemodel//lib/active_model/validator.rb#96
class ActiveModel::Validator
  # source://activemodel//lib/active_model/validator.rb#108
  def initialize(options = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/validator.rb#116
  def kind; end

  # source://activemodel//lib/active_model/validator.rb#97
  def options; end

  # source://activemodel//lib/active_model/validator.rb#122
  def validate(record); end

  class << self
    # source://activemodel//lib/active_model/validator.rb#103
    def kind; end
  end
end
