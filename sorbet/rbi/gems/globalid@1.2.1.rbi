# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `globalid` gem.
# Please instead update this file by running `bin/tapioca gem globalid`.


# source://globalid//lib/global_id/global_id.rb#7
class GlobalID
  extend ::ActiveSupport::Autoload

  # source://globalid//lib/global_id/global_id.rb#44
  def initialize(gid, options = T.unsafe(nil)); end

  # source://globalid//lib/global_id/global_id.rb#63
  def ==(other); end

  # source://globalid//lib/global_id/global_id.rb#42
  def app(*_arg0, **_arg1, &_arg2); end

  # source://globalid//lib/global_id/global_id.rb#76
  def as_json(*_arg0); end

  # source://globalid//lib/global_id/global_id.rb#42
  def deconstruct_keys(*_arg0, **_arg1, &_arg2); end

  # source://globalid//lib/global_id/global_id.rb#63
  def eql?(other); end

  # source://globalid//lib/global_id/global_id.rb#48
  def find(options = T.unsafe(nil)); end

  # source://globalid//lib/global_id/global_id.rb#68
  def hash; end

  # source://globalid//lib/global_id/global_id.rb#52
  def model_class; end

  # source://globalid//lib/global_id/global_id.rb#42
  def model_id(*_arg0, **_arg1, &_arg2); end

  # source://globalid//lib/global_id/global_id.rb#42
  def model_name(*_arg0, **_arg1, &_arg2); end

  # source://globalid//lib/global_id/global_id.rb#42
  def params(*_arg0, **_arg1, &_arg2); end

  # source://globalid//lib/global_id/global_id.rb#72
  def to_param; end

  # source://globalid//lib/global_id/global_id.rb#42
  def to_s(*_arg0, **_arg1, &_arg2); end

  # source://globalid//lib/global_id/global_id.rb#41
  def uri; end

  class << self
    # source://globalid//lib/global_id/global_id.rb#9
    def app; end

    # source://globalid//lib/global_id/global_id.rb#31
    def app=(app); end

    # source://globalid//lib/global_id/global_id.rb#11
    def create(model, options = T.unsafe(nil)); end

    # source://globalid//lib/global_id.rb#20
    def deprecator; end

    # source://globalid//lib/global_id.rb#15
    def eager_load!; end

    # source://globalid//lib/global_id/global_id.rb#21
    def find(gid, options = T.unsafe(nil)); end

    # source://globalid//lib/global_id/global_id.rb#25
    def parse(gid, options = T.unsafe(nil)); end

    private

    # source://globalid//lib/global_id/global_id.rb#36
    def parse_encoded_gid(gid, options); end
  end
end

# source://globalid//lib/global_id/identification.rb#28
module GlobalID::Identification
  # source://globalid//lib/global_id/identification.rb#37
  def to_gid(options = T.unsafe(nil)); end

  # source://globalid//lib/global_id/identification.rb#46
  def to_gid_param(options = T.unsafe(nil)); end

  # source://globalid//lib/global_id/identification.rb#37
  def to_global_id(options = T.unsafe(nil)); end

  # source://globalid//lib/global_id/identification.rb#107
  def to_sgid(options = T.unsafe(nil)); end

  # source://globalid//lib/global_id/identification.rb#116
  def to_sgid_param(options = T.unsafe(nil)); end

  # source://globalid//lib/global_id/identification.rb#107
  def to_signed_global_id(options = T.unsafe(nil)); end
end

# source://globalid//lib/global_id/locator.rb#4
module GlobalID::Locator
  class << self
    # source://globalid//lib/global_id/locator.rb#20
    def locate(gid, options = T.unsafe(nil)); end

    # source://globalid//lib/global_id/locator.rb#60
    def locate_many(gids, options = T.unsafe(nil)); end

    # source://globalid//lib/global_id/locator.rb#103
    def locate_many_signed(sgids, options = T.unsafe(nil)); end

    # source://globalid//lib/global_id/locator.rb#81
    def locate_signed(sgid, options = T.unsafe(nil)); end

    # source://globalid//lib/global_id/locator.rb#127
    def use(app, locator = T.unsafe(nil), &locator_block); end

    private

    # source://globalid//lib/global_id/locator.rb#140
    def find_allowed?(model_class, only = T.unsafe(nil)); end

    # source://globalid//lib/global_id/locator.rb#136
    def locator_for(gid); end

    # source://globalid//lib/global_id/locator.rb#148
    def normalize_app(app); end

    # source://globalid//lib/global_id/locator.rb#144
    def parse_allowed(gids, only = T.unsafe(nil)); end
  end
end

# source://globalid//lib/global_id/locator.rb#156
class GlobalID::Locator::BaseLocator
  # source://globalid//lib/global_id/locator.rb#157
  def locate(gid, options = T.unsafe(nil)); end

  # source://globalid//lib/global_id/locator.rb#165
  def locate_many(gids, options = T.unsafe(nil)); end

  private

  # source://globalid//lib/global_id/locator.rb#189
  def find_records(model_class, ids, options); end

  # source://globalid//lib/global_id/locator.rb#199
  def model_id_is_valid?(gid); end

  # source://globalid//lib/global_id/locator.rb#203
  def primary_key(model_class); end
end

# source://globalid//lib/global_id/locator.rb#228
class GlobalID::Locator::BlockLocator
  # source://globalid//lib/global_id/locator.rb#229
  def initialize(block); end

  # source://globalid//lib/global_id/locator.rb#233
  def locate(gid, options = T.unsafe(nil)); end

  # source://globalid//lib/global_id/locator.rb#237
  def locate_many(gids, options = T.unsafe(nil)); end
end

# source://globalid//lib/global_id/locator.rb#226
GlobalID::Locator::DEFAULT_LOCATOR = T.let(T.unsafe(nil), GlobalID::Locator::UnscopedLocator)

# source://globalid//lib/global_id/locator.rb#5
class GlobalID::Locator::InvalidModelIdError < ::StandardError; end

# source://globalid//lib/global_id/locator.rb#208
class GlobalID::Locator::UnscopedLocator < ::GlobalID::Locator::BaseLocator
  # source://globalid//lib/global_id/locator.rb#209
  def locate(gid, options = T.unsafe(nil)); end

  private

  # source://globalid//lib/global_id/locator.rb#214
  def find_records(model_class, ids, options); end

  # source://globalid//lib/global_id/locator.rb#218
  def unscoped(model_class); end
end

# source://globalid//lib/global_id/railtie.rb#12
class GlobalID::Railtie < ::Rails::Railtie; end

# source://globalid//lib/global_id/verifier.rb#4
class GlobalID::Verifier < ::ActiveSupport::MessageVerifier
  private

  # source://globalid//lib/global_id/verifier.rb#10
  def decode(data, **_arg1); end

  # source://globalid//lib/global_id/verifier.rb#6
  def encode(data, **_arg1); end
end

# source://globalid//lib/global_id/signed_global_id.rb#4
class SignedGlobalID < ::GlobalID
  # source://globalid//lib/global_id/signed_global_id.rb#59
  def initialize(gid, options = T.unsafe(nil)); end

  # source://globalid//lib/global_id/signed_global_id.rb#71
  def ==(other); end

  # source://globalid//lib/global_id/signed_global_id.rb#57
  def expires_at; end

  # source://globalid//lib/global_id/signed_global_id.rb#75
  def inspect; end

  # source://globalid//lib/global_id/signed_global_id.rb#57
  def purpose; end

  # source://globalid//lib/global_id/signed_global_id.rb#66
  def to_param; end

  # source://globalid//lib/global_id/signed_global_id.rb#66
  def to_s; end

  # source://globalid//lib/global_id/signed_global_id.rb#57
  def verifier; end

  private

  # source://globalid//lib/global_id/signed_global_id.rb#80
  def pick_expiration(options); end

  class << self
    # source://globalid//lib/global_id/signed_global_id.rb#8
    def expires_in; end

    # source://globalid//lib/global_id/signed_global_id.rb#8
    def expires_in=(_arg0); end

    # source://globalid//lib/global_id/signed_global_id.rb#10
    def parse(sgid, options = T.unsafe(nil)); end

    # source://globalid//lib/global_id/signed_global_id.rb#24
    def pick_purpose(options); end

    # source://globalid//lib/global_id/signed_global_id.rb#16
    def pick_verifier(options); end

    # source://globalid//lib/global_id/signed_global_id.rb#8
    def verifier; end

    # source://globalid//lib/global_id/signed_global_id.rb#8
    def verifier=(_arg0); end

    private

    # source://globalid//lib/global_id/signed_global_id.rb#50
    def raise_if_expired(expires_at); end

    # source://globalid//lib/global_id/signed_global_id.rb#29
    def verify(sgid, options); end

    # source://globalid//lib/global_id/signed_global_id.rb#40
    def verify_with_legacy_self_validated_metadata(sgid, options); end

    # source://globalid//lib/global_id/signed_global_id.rb#34
    def verify_with_verifier_validated_metadata(sgid, options); end
  end
end

# source://globalid//lib/global_id/signed_global_id.rb#5
class SignedGlobalID::ExpiredMessage < ::StandardError; end

# source://globalid//lib/global_id/uri/gid.rb#7
class URI::GID < ::URI::Generic
  # source://uri/0.13.0/uri/generic.rb#243
  def app; end

  # source://globalid//lib/global_id/uri/gid.rb#107
  def deconstruct_keys(_keys); end

  # source://globalid//lib/global_id/uri/gid.rb#29
  def model_id; end

  # source://globalid//lib/global_id/uri/gid.rb#29
  def model_name; end

  # source://globalid//lib/global_id/uri/gid.rb#29
  def params; end

  # source://globalid//lib/global_id/uri/gid.rb#102
  def to_s; end

  protected

  # source://globalid//lib/global_id/uri/gid.rb#118
  def query=(query); end

  # source://globalid//lib/global_id/uri/gid.rb#129
  def set_params(params); end

  # source://globalid//lib/global_id/uri/gid.rb#112
  def set_path(path); end

  # source://globalid//lib/global_id/uri/gid.rb#124
  def set_query(query); end

  private

  # source://globalid//lib/global_id/uri/gid.rb#136
  def check_host(host); end

  # source://globalid//lib/global_id/uri/gid.rb#141
  def check_path(path); end

  # source://globalid//lib/global_id/uri/gid.rb#146
  def check_scheme(scheme); end

  # source://globalid//lib/global_id/uri/gid.rb#195
  def parse_query_params(query); end

  # source://globalid//lib/global_id/uri/gid.rb#154
  def set_model_components(path, validate = T.unsafe(nil)); end

  # source://globalid//lib/global_id/uri/gid.rb#174
  def validate_component(component); end

  # source://globalid//lib/global_id/uri/gid.rb#188
  def validate_model_id(model_id_part); end

  # source://globalid//lib/global_id/uri/gid.rb#181
  def validate_model_id_section(model_id, model_name); end

  class << self
    # source://globalid//lib/global_id/uri/gid.rb#88
    def build(args); end

    # source://globalid//lib/global_id/uri/gid.rb#72
    def create(app, model, params = T.unsafe(nil)); end

    # source://globalid//lib/global_id/uri/gid.rb#64
    def parse(uri); end

    # source://globalid//lib/global_id/uri/gid.rb#48
    def validate_app(app); end
  end
end

# source://globalid//lib/global_id/uri/gid.rb#134
URI::GID::COMPONENT = T.let(T.unsafe(nil), Array)

# source://globalid//lib/global_id/uri/gid.rb#37
URI::GID::COMPOSITE_MODEL_ID_DELIMITER = T.let(T.unsafe(nil), String)

# source://globalid//lib/global_id/uri/gid.rb#36
URI::GID::COMPOSITE_MODEL_ID_MAX_SIZE = T.let(T.unsafe(nil), Integer)

# source://globalid//lib/global_id/uri/gid.rb#33
class URI::GID::InvalidModelIdError < ::URI::InvalidComponentError; end

# source://globalid//lib/global_id/uri/gid.rb#32
class URI::GID::MissingModelIdError < ::URI::InvalidComponentError; end
