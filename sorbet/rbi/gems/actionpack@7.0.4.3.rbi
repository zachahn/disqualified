# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `actionpack` gem.
# Please instead update this file by running `bin/tapioca gem actionpack`.

# source://actionpack//lib/abstract_controller.rb#8
module AbstractController
  extend ::ActiveSupport::Autoload

  class << self
    # source://actionpack//lib/abstract_controller.rb#24
    def eager_load!; end
  end
end

# source://actionpack//lib/abstract_controller/base.rb#11
class AbstractController::ActionNotFound < ::StandardError
  include ::DidYouMean::Correctable

  # source://actionpack//lib/abstract_controller/base.rb#14
  def initialize(message = T.unsafe(nil), controller = T.unsafe(nil), action = T.unsafe(nil)); end

  # source://actionpack//lib/abstract_controller/base.rb#12
  def action; end

  # source://actionpack//lib/abstract_controller/base.rb#12
  def controller; end

  # source://actionpack//lib/abstract_controller/base.rb#23
  def corrections; end
end

# source://actionpack//lib/abstract_controller/asset_paths.rb#4
module AbstractController::AssetPaths
  extend ::ActiveSupport::Concern
end

# source://actionpack//lib/abstract_controller/base.rb#33
class AbstractController::Base
  include ::ActiveSupport::Configurable
  extend ::ActiveSupport::Configurable::ClassMethods
  extend ::ActiveSupport::DescendantsTracker

  # source://actionpack//lib/abstract_controller/base.rb#161
  def action_methods; end

  # source://activesupport/7.0.4.3/lib/active_support/core_ext/module/attr_internal.rb#33
  def action_name; end

  # source://activesupport/7.0.4.3/lib/active_support/core_ext/module/attr_internal.rb#33
  def action_name=(_arg0); end

  # source://actionpack//lib/abstract_controller/base.rb#175
  def available_action?(action_name); end

  # source://actionpack//lib/abstract_controller/base.rb#156
  def controller_path; end

  # source://activesupport/7.0.4.3/lib/active_support/core_ext/module/attr_internal.rb#33
  def formats; end

  # source://activesupport/7.0.4.3/lib/active_support/core_ext/module/attr_internal.rb#33
  def formats=(_arg0); end

  # source://actionpack//lib/abstract_controller/base.rb#194
  def inspect; end

  # source://actionpack//lib/abstract_controller/base.rb#182
  def performed?; end

  # source://actionpack//lib/abstract_controller/base.rb#142
  def process(action, *args, **_arg2); end

  # source://activesupport/7.0.4.3/lib/active_support/core_ext/module/attr_internal.rb#33
  def response_body; end

  # source://activesupport/7.0.4.3/lib/active_support/core_ext/module/attr_internal.rb#33
  def response_body=(_arg0); end

  def send_action(*_arg0); end

  private

  # source://actionpack//lib/abstract_controller/base.rb#246
  def _find_action_name(action_name); end

  # source://actionpack//lib/abstract_controller/base.rb#228
  def _handle_action_missing(*args); end

  # source://actionpack//lib/abstract_controller/base.rb#282
  def _valid_action_name?(action_name); end

  # source://actionpack//lib/abstract_controller/base.rb#204
  def action_method?(name); end

  # source://actionpack//lib/abstract_controller/base.rb#273
  def method_for_action(action_name); end

  # source://actionpack//lib/abstract_controller/base.rb#214
  def process_action(*_arg0, **_arg1, &_arg2); end

  class << self
    # source://actionpack//lib/abstract_controller/base.rb#50
    def abstract; end

    # source://actionpack//lib/abstract_controller/base.rb#55
    def abstract!; end

    # source://actionpack//lib/abstract_controller/base.rb#50
    def abstract?; end

    # source://actionpack//lib/abstract_controller/base.rb#89
    def action_methods; end

    # source://actionpack//lib/abstract_controller/base.rb#107
    def clear_action_methods!; end

    # source://actionpack//lib/abstract_controller/base.rb#121
    def controller_path; end

    # source://actionpack//lib/abstract_controller/base.rb#59
    def inherited(klass); end

    # source://actionpack//lib/abstract_controller/base.rb#74
    def internal_methods; end

    # source://actionpack//lib/abstract_controller/base.rb#126
    def method_added(name); end

    # source://actionpack//lib/abstract_controller/base.rb#190
    def supports_path?; end
  end
end

# source://actionpack//lib/abstract_controller/caching.rb#4
module AbstractController::Caching
  include ::AbstractController::Caching::ConfigMethods
  extend ::ActiveSupport::Concern
  extend ::ActiveSupport::Autoload
  include GeneratedInstanceMethods
  include ::AbstractController::Caching::Fragments

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Caching::Fragments::ClassMethods
  mixes_in_class_methods ::AbstractController::Caching::ClassMethods
  mixes_in_class_methods ::AbstractController::Caching::ConfigMethods

  # source://actionpack//lib/abstract_controller/caching.rb#52
  def view_cache_dependencies; end

  private

  # source://actionpack//lib/abstract_controller/caching.rb#58
  def cache(key, options = T.unsafe(nil), &block); end

  module GeneratedClassMethods
    def _view_cache_dependencies; end
    def _view_cache_dependencies=(value); end
    def _view_cache_dependencies?; end
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end

  module GeneratedInstanceMethods
    def _view_cache_dependencies; end
    def _view_cache_dependencies=(value); end
    def _view_cache_dependencies?; end
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end
end

# source://actionpack//lib/abstract_controller/caching.rb#46
module AbstractController::Caching::ClassMethods
  # source://actionpack//lib/abstract_controller/caching.rb#47
  def view_cache_dependency(&dependency); end
end

# source://actionpack//lib/abstract_controller/caching.rb#12
module AbstractController::Caching::ConfigMethods
  # source://actionpack//lib/abstract_controller/caching.rb#13
  def cache_store; end

  # source://actionpack//lib/abstract_controller/caching.rb#17
  def cache_store=(store); end

  private

  # source://actionpack//lib/abstract_controller/caching.rb#22
  def cache_configured?; end
end

# source://actionpack//lib/abstract_controller/caching/fragments.rb#18
module AbstractController::Caching::Fragments
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Caching::Fragments::ClassMethods

  # source://actionpack//lib/abstract_controller/caching/fragments.rb#68
  def combined_fragment_cache_key(key); end

  # source://actionpack//lib/abstract_controller/caching/fragments.rb#132
  def expire_fragment(key, options = T.unsafe(nil)); end

  # source://actionpack//lib/abstract_controller/caching/fragments.rb#105
  def fragment_exist?(key, options = T.unsafe(nil)); end

  # source://actionpack//lib/abstract_controller/caching/fragments.rb#145
  def instrument_fragment_cache(name, key, &block); end

  # source://actionpack//lib/abstract_controller/caching/fragments.rb#93
  def read_fragment(key, options = T.unsafe(nil)); end

  # source://actionpack//lib/abstract_controller/caching/fragments.rb#80
  def write_fragment(key, content, options = T.unsafe(nil)); end

  module GeneratedClassMethods
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end

  module GeneratedInstanceMethods
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end
end

# source://actionpack//lib/abstract_controller/caching/fragments.rb#35
module AbstractController::Caching::Fragments::ClassMethods
  # source://actionpack//lib/abstract_controller/caching/fragments.rb#57
  def fragment_cache_key(value = T.unsafe(nil), &key); end
end

# source://actionpack//lib/abstract_controller/callbacks.rb#24
module AbstractController::Callbacks
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::AbstractController::Callbacks::ClassMethods

  private

  # source://actionpack//lib/abstract_controller/callbacks.rb#232
  def process_action(*_arg0, **_arg1, &_arg2); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

# source://actionpack//lib/abstract_controller/callbacks.rb#38
class AbstractController::Callbacks::ActionFilter
  # source://actionpack//lib/abstract_controller/callbacks.rb#39
  def initialize(actions); end

  # source://actionpack//lib/abstract_controller/callbacks.rb#43
  def after(controller); end

  # source://actionpack//lib/abstract_controller/callbacks.rb#43
  def around(controller); end

  # source://actionpack//lib/abstract_controller/callbacks.rb#43
  def before(controller); end

  # source://actionpack//lib/abstract_controller/callbacks.rb#43
  def match?(controller); end
end

# source://actionpack//lib/abstract_controller/callbacks.rb#52
module AbstractController::Callbacks::ClassMethods
  # source://actionpack//lib/abstract_controller/callbacks.rb#96
  def _insert_callbacks(callbacks, block = T.unsafe(nil)); end

  # source://actionpack//lib/abstract_controller/callbacks.rb#77
  def _normalize_callback_option(options, from, to); end

  # source://actionpack//lib/abstract_controller/callbacks.rb#72
  def _normalize_callback_options(options); end

  # source://actionpack//lib/abstract_controller/callbacks.rb#204
  def after_action(*names, &blk); end

  # source://actionpack//lib/abstract_controller/callbacks.rb#204
  def append_after_action(*names, &blk); end

  # source://actionpack//lib/abstract_controller/callbacks.rb#204
  def append_around_action(*names, &blk); end

  # source://actionpack//lib/abstract_controller/callbacks.rb#204
  def append_before_action(*names, &blk); end

  # source://actionpack//lib/abstract_controller/callbacks.rb#204
  def around_action(*names, &blk); end

  # source://actionpack//lib/abstract_controller/callbacks.rb#204
  def before_action(*names, &blk); end

  # source://actionpack//lib/abstract_controller/callbacks.rb#210
  def prepend_after_action(*names, &blk); end

  # source://actionpack//lib/abstract_controller/callbacks.rb#210
  def prepend_around_action(*names, &blk); end

  # source://actionpack//lib/abstract_controller/callbacks.rb#210
  def prepend_before_action(*names, &blk); end

  # source://actionpack//lib/abstract_controller/callbacks.rb#218
  def skip_after_action(*names); end

  # source://actionpack//lib/abstract_controller/callbacks.rb#218
  def skip_around_action(*names); end

  # source://actionpack//lib/abstract_controller/callbacks.rb#218
  def skip_before_action(*names); end
end

# source://actionpack//lib/abstract_controller/collector.rb#6
module AbstractController::Collector
  # source://actionpack//lib/abstract_controller/collector.rb#10
  def atom(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def bmp(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def css(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def csv(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def gif(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def gzip(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def html(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def ics(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def jpeg(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def js(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def json(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def m4a(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def mp3(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def mp4(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def mpeg(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def multipart_form(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def ogg(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def otf(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def pdf(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def png(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def rss(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def svg(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def text(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def tiff(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def ttf(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def url_encoded_form(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def vcf(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def vtt(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def webm(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def woff(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def woff2(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def xml(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def yaml(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/collector.rb#10
  def zip(*args, **_arg1, &block); end

  private

  # source://actionpack//lib/abstract_controller/collector.rb#26
  def method_missing(symbol, *args, **_arg2, &block); end

  class << self
    # source://actionpack//lib/abstract_controller/collector.rb#7
    def generate_method_for_mime(mime); end
  end
end

# source://actionpack//lib/abstract_controller/rendering.rb#9
class AbstractController::DoubleRenderError < ::AbstractController::Error
  # source://actionpack//lib/abstract_controller/rendering.rb#12
  def initialize(message = T.unsafe(nil)); end
end

# source://actionpack//lib/abstract_controller/rendering.rb#10
AbstractController::DoubleRenderError::DEFAULT_MESSAGE = T.let(T.unsafe(nil), String)

# source://actionpack//lib/abstract_controller/error.rb#4
class AbstractController::Error < ::StandardError; end

# source://actionpack//lib/abstract_controller/helpers.rb#7
module AbstractController::Helpers
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Helpers::ClassMethods

  # source://actionpack//lib/abstract_controller/helpers.rb#40
  def _helpers; end

  module GeneratedClassMethods
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end

  module GeneratedInstanceMethods
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end
end

# source://actionpack//lib/abstract_controller/helpers.rb#44
module AbstractController::Helpers::ClassMethods
  # source://actionpack//lib/abstract_controller/helpers.rb#56
  def _helpers=(_arg0); end

  # source://actionpack//lib/abstract_controller/helpers.rb#184
  def _helpers_for_modification; end

  # source://actionpack//lib/abstract_controller/helpers.rb#158
  def clear_helpers; end

  # source://actionpack//lib/abstract_controller/helpers.rb#147
  def helper(*args, &block); end

  # source://actionpack//lib/abstract_controller/helpers.rb#79
  def helper_method(*methods); end

  # source://actionpack//lib/abstract_controller/helpers.rb#48
  def inherited(klass); end

  # source://actionpack//lib/abstract_controller/helpers.rb#169
  def modules_for_helpers(modules_or_helper_prefixes); end

  private

  # source://actionpack//lib/abstract_controller/helpers.rb#203
  def default_helper_module!; end

  # source://actionpack//lib/abstract_controller/helpers.rb#192
  def define_helpers_module(klass, helpers = T.unsafe(nil)); end
end

# source://actionpack//lib/abstract_controller/helpers.rb#26
class AbstractController::Helpers::MissingHelperError < ::LoadError
  # source://actionpack//lib/abstract_controller/helpers.rb#27
  def initialize(error, path); end
end

# source://actionpack//lib/abstract_controller/logger.rb#6
module AbstractController::Logger
  extend ::ActiveSupport::Concern
  include ::ActiveSupport::Benchmarkable
end

# source://actionpack//lib/abstract_controller/railties/routes_helpers.rb#6
module AbstractController::Railties; end

# source://actionpack//lib/abstract_controller/railties/routes_helpers.rb#7
module AbstractController::Railties::RoutesHelpers
  class << self
    # source://actionpack//lib/abstract_controller/railties/routes_helpers.rb#8
    def with(routes, include_path_helpers = T.unsafe(nil)); end
  end
end

# source://actionpack//lib/abstract_controller/rendering.rb#17
module AbstractController::Rendering
  extend ::ActiveSupport::Concern
  include ::ActionView::ViewPaths

  mixes_in_class_methods ::ActionView::ViewPaths::ClassMethods

  # source://actionpack//lib/abstract_controller/rendering.rb#23
  def render(*args, &block); end

  # source://actionpack//lib/abstract_controller/rendering.rb#51
  def render_to_body(options = T.unsafe(nil)); end

  # source://actionpack//lib/abstract_controller/rendering.rb#45
  def render_to_string(*args, &block); end

  # source://actionpack//lib/abstract_controller/rendering.rb#55
  def rendered_format; end

  # source://actionpack//lib/abstract_controller/rendering.rb#63
  def view_assigns; end

  private

  # source://actionpack//lib/abstract_controller/rendering.rb#75
  def _normalize_args(action = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://actionpack//lib/abstract_controller/rendering.rb#90
  def _normalize_options(options); end

  # source://actionpack//lib/abstract_controller/rendering.rb#116
  def _normalize_render(*args, &block); end

  # source://actionpack//lib/abstract_controller/rendering.rb#100
  def _process_format(format); end

  # source://actionpack//lib/abstract_controller/rendering.rb#95
  def _process_options(options); end

  # source://actionpack//lib/abstract_controller/rendering.rb#103
  def _process_variant(options); end

  # source://actionpack//lib/abstract_controller/rendering.rb#123
  def _protected_ivars; end

  # source://actionpack//lib/abstract_controller/rendering.rb#106
  def _set_html_content_type; end

  # source://actionpack//lib/abstract_controller/rendering.rb#112
  def _set_rendered_content_type(format); end

  # source://actionpack//lib/abstract_controller/rendering.rb#109
  def _set_vary_header; end
end

# source://actionpack//lib/abstract_controller/rendering.rb#59
AbstractController::Rendering::DEFAULT_PROTECTED_INSTANCE_VARIABLES = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/abstract_controller/translation.rb#6
module AbstractController::Translation
  # source://actionpack//lib/abstract_controller/translation.rb#33
  def l(object, **options); end

  # source://actionpack//lib/abstract_controller/translation.rb#33
  def localize(object, **options); end

  # source://actionpack//lib/abstract_controller/translation.rb#7
  def raise_on_missing_translations; end

  # source://actionpack//lib/abstract_controller/translation.rb#7
  def raise_on_missing_translations=(val); end

  # source://actionpack//lib/abstract_controller/translation.rb#17
  def t(key, **options); end

  # source://actionpack//lib/abstract_controller/translation.rb#17
  def translate(key, **options); end

  class << self
    # source://actionpack//lib/abstract_controller/translation.rb#7
    def raise_on_missing_translations; end

    # source://actionpack//lib/abstract_controller/translation.rb#7
    def raise_on_missing_translations=(val); end
  end
end

# source://actionpack//lib/abstract_controller/url_for.rb#10
module AbstractController::UrlFor
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionDispatch::Routing::UrlFor

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::UrlFor::ClassMethods

  # source://actionpack//lib/abstract_controller/url_for.rb#14
  def _routes; end

  module GeneratedClassMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end

  module GeneratedInstanceMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end
end

# source://actionpack//lib/abstract_controller/url_for.rb#19
module AbstractController::UrlFor::ClassMethods
  # source://actionpack//lib/abstract_controller/url_for.rb#20
  def _routes; end

  # source://actionpack//lib/abstract_controller/url_for.rb#24
  def action_methods; end
end

# source://actionpack//lib/action_controller/metal/strong_parameters.rb#13
module ActionController
  extend ::ActiveSupport::Autoload

  class << self
    # source://actionpack//lib/action_controller/metal/renderers.rb#7
    def add_renderer(key, &block); end

    # source://actionpack//lib/action_controller/metal/renderers.rb#12
    def remove_renderer(key); end
  end
end

# source://actionpack//lib/action_controller/api.rb#89
class ActionController::API < ::ActionController::Metal
  include ::ActionView::ViewPaths
  include ::AbstractController::Rendering
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::Routing::UrlFor
  include ::AbstractController::UrlFor
  include ::ActionController::UrlFor
  include ::AbstractController::Logger
  include ::ActiveSupport::Benchmarkable
  include ::ActionController::Redirecting
  include ::ActionController::ApiRendering
  include ::ActionController::Rendering
  include ::ActionController::Renderers
  include ::ActionController::Renderers::All
  include ::ActionController::Head
  include ::ActionController::ConditionalGet
  include ::ActionController::BasicImplicitRender
  include ::ActionController::StrongParameters
  include ::ActionController::DataStreaming
  include ::ActionController::DefaultHeaders
  include ::ActionController::Logging
  include ::ActiveSupport::Callbacks
  include ::AbstractController::Callbacks
  include ::ActiveSupport::Rescuable
  include ::ActionController::Rescue
  include ::ActionController::Instrumentation
  include ::ActionController::ParamsWrapper
  extend ::ActionView::ViewPaths::ClassMethods
  extend ::AbstractController::UrlFor::ClassMethods
  extend ::ActionController::Rendering::ClassMethods
  extend ::ActionController::Renderers::ClassMethods
  extend ::ActionController::ConditionalGet::ClassMethods
  extend ::ActionController::DefaultHeaders::ClassMethods
  extend ::ActionController::Logging::ClassMethods
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::AbstractController::Callbacks::ClassMethods
  extend ::ActiveSupport::Rescuable::ClassMethods
  extend ::ActionController::Instrumentation::ClassMethods
  extend ::ActionController::ParamsWrapper::ClassMethods

  # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#940
  def _process_action_callbacks; end

  # source://actionpack//lib/action_controller/metal/renderers.rb#31
  def _renderers; end

  # source://actionpack//lib/action_controller/metal/renderers.rb#31
  def _renderers=(_arg0); end

  # source://actionpack//lib/action_controller/metal/renderers.rb#31
  def _renderers?; end

  # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#928
  def _run_process_action_callbacks(&block); end

  # source://actionpack//lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options; end

  # source://actionpack//lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options=(_arg0); end

  # source://actionpack//lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options?; end

  # source://actionpack//lib/action_dispatch/routing/url_for.rb#95
  def default_url_options; end

  # source://actionpack//lib/action_dispatch/routing/url_for.rb#95
  def default_url_options=(_arg0); end

  # source://actionpack//lib/action_dispatch/routing/url_for.rb#95
  def default_url_options?; end

  # source://actionpack//lib/action_controller/metal/conditional_get.rb#13
  def etaggers; end

  # source://actionpack//lib/action_controller/metal/conditional_get.rb#13
  def etaggers=(_arg0); end

  # source://actionpack//lib/action_controller/metal/conditional_get.rb#13
  def etaggers?; end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
  def logger; end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
  def logger=(value); end

  # source://actionpack//lib/action_controller/metal/redirecting.rb#13
  def raise_on_open_redirects; end

  # source://actionpack//lib/action_controller/metal/redirecting.rb#13
  def raise_on_open_redirects=(val); end

  # source://activesupport/7.0.4.3/lib/active_support/rescuable.rb#13
  def rescue_handlers; end

  # source://activesupport/7.0.4.3/lib/active_support/rescuable.rb#13
  def rescue_handlers=(_arg0); end

  # source://activesupport/7.0.4.3/lib/active_support/rescuable.rb#13
  def rescue_handlers?; end

  class << self
    # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#932
    def _process_action_callbacks; end

    # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#936
    def _process_action_callbacks=(value); end

    # source://actionpack//lib/action_controller/metal/renderers.rb#31
    def _renderers; end

    # source://actionpack//lib/action_controller/metal/renderers.rb#31
    def _renderers=(value); end

    # source://actionpack//lib/action_controller/metal/renderers.rb#31
    def _renderers?; end

    # source://actionpack//lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options; end

    # source://actionpack//lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options=(value); end

    # source://actionpack//lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options?; end

    # source://actionpack//lib/action_dispatch/routing/url_for.rb#95
    def default_url_options; end

    # source://actionpack//lib/action_dispatch/routing/url_for.rb#95
    def default_url_options=(value); end

    # source://actionpack//lib/action_dispatch/routing/url_for.rb#95
    def default_url_options?; end

    # source://actionpack//lib/action_controller/metal/conditional_get.rb#13
    def etaggers; end

    # source://actionpack//lib/action_controller/metal/conditional_get.rb#13
    def etaggers=(value); end

    # source://actionpack//lib/action_controller/metal/conditional_get.rb#13
    def etaggers?; end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
    def logger; end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
    def logger=(value); end

    # source://actionpack//lib/action_controller/metal.rb#210
    def middleware_stack; end

    # source://actionpack//lib/action_controller/metal/redirecting.rb#13
    def raise_on_open_redirects; end

    # source://actionpack//lib/action_controller/metal/redirecting.rb#13
    def raise_on_open_redirects=(val); end

    # source://activesupport/7.0.4.3/lib/active_support/rescuable.rb#13
    def rescue_handlers; end

    # source://activesupport/7.0.4.3/lib/active_support/rescuable.rb#13
    def rescue_handlers=(value); end

    # source://activesupport/7.0.4.3/lib/active_support/rescuable.rb#13
    def rescue_handlers?; end

    # source://actionpack//lib/action_controller/api.rb#104
    def without_modules(*modules); end
  end
end

# source://actionpack//lib/action_controller/api.rb#112
ActionController::API::MODULES = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_controller/metal/exceptions.rb#4
class ActionController::ActionControllerError < ::StandardError; end

# source://actionpack//lib/action_controller/api/api_rendering.rb#4
module ActionController::ApiRendering
  extend ::ActiveSupport::Concern
  include ::ActionController::Rendering

  mixes_in_class_methods ::ActionController::Rendering::ClassMethods

  # source://actionpack//lib/action_controller/api/api_rendering.rb#11
  def render_to_body(options = T.unsafe(nil)); end
end

# source://actionpack//lib/action_controller/metal/exceptions.rb#7
class ActionController::BadRequest < ::ActionController::ActionControllerError
  # source://actionpack//lib/action_controller/metal/exceptions.rb#8
  def initialize(msg = T.unsafe(nil)); end
end

# source://actionpack//lib/action_controller/base.rb#167
class ActionController::Base < ::ActionController::Metal
  include ::ActionView::ViewPaths
  include ::AbstractController::Rendering
  include ::AbstractController::Translation
  include ::AbstractController::AssetPaths
  include ::AbstractController::Helpers
  include ::ActionController::Helpers
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::Routing::UrlFor
  include ::AbstractController::UrlFor
  include ::ActionController::UrlFor
  include ::AbstractController::Logger
  include ::ActiveSupport::Benchmarkable
  include ::ActionController::Redirecting
  include ::ActionView::Rendering
  include ::ActionView::Layouts
  include ::ActionController::Rendering
  include ::ActionController::Renderers
  include ::ActionController::Renderers::All
  include ::ActionController::Head
  include ::ActionController::ConditionalGet
  include ::ActionController::EtagWithTemplateDigest
  include ::ActionController::EtagWithFlash
  include ::ActionController::Caching
  include ::AbstractController::Caching::Fragments
  include ::AbstractController::Caching::ConfigMethods
  include ::AbstractController::Caching
  include ::ActionController::MimeResponds
  include ::ActionController::BasicImplicitRender
  include ::ActionController::ImplicitRender
  include ::ActionController::StrongParameters
  include ::ActionController::ParameterEncoding
  include ::ActionController::Cookies
  include ::ActionController::Flash
  include ::ActionController::FormBuilder
  include ::ActiveSupport::Callbacks
  include ::AbstractController::Callbacks
  include ::ActionController::RequestForgeryProtection
  include ::ActionController::ContentSecurityPolicy
  include ::ActionController::PermissionsPolicy
  include ::ActionController::Streaming
  include ::ActionController::DataStreaming
  include ::ActionController::HttpAuthentication::Basic::ControllerMethods
  include ::ActionController::HttpAuthentication::Digest::ControllerMethods
  include ::ActionController::HttpAuthentication::Token::ControllerMethods
  include ::ActionController::DefaultHeaders
  include ::ActionController::Logging
  include ::ActiveSupport::Rescuable
  include ::ActionController::Rescue
  include ::ActionController::Instrumentation
  include ::ActionController::ParamsWrapper
  extend ::ActionView::ViewPaths::ClassMethods
  extend ::AbstractController::Helpers::ClassMethods
  extend ::ActionController::Helpers::ClassMethods
  extend ::AbstractController::UrlFor::ClassMethods
  extend ::ActionView::Rendering::ClassMethods
  extend ::ActionView::Layouts::ClassMethods
  extend ::ActionController::Rendering::ClassMethods
  extend ::ActionController::Renderers::ClassMethods
  extend ::ActionController::ConditionalGet::ClassMethods
  extend ::AbstractController::Caching::Fragments::ClassMethods
  extend ::AbstractController::Caching::ClassMethods
  extend ::AbstractController::Caching::ConfigMethods
  extend ::ActionController::ParameterEncoding::ClassMethods
  extend ::ActionController::Flash::ClassMethods
  extend ::ActionController::FormBuilder::ClassMethods
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::AbstractController::Callbacks::ClassMethods
  extend ::ActionController::RequestForgeryProtection::ClassMethods
  extend ::ActionController::ContentSecurityPolicy::ClassMethods
  extend ::ActionController::PermissionsPolicy::ClassMethods
  extend ::ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods
  extend ::ActionController::DefaultHeaders::ClassMethods
  extend ::ActionController::Logging::ClassMethods
  extend ::ActiveSupport::Rescuable::ClassMethods
  extend ::ActionController::Instrumentation::ClassMethods
  extend ::ActionController::ParamsWrapper::ClassMethods

  # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://actionpack//lib/abstract_controller/helpers.rb#11
  def _helper_methods; end

  # source://actionpack//lib/abstract_controller/helpers.rb#11
  def _helper_methods=(_arg0); end

  # source://actionpack//lib/abstract_controller/helpers.rb#11
  def _helper_methods?; end

  # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#940
  def _process_action_callbacks; end

  # source://actionpack//lib/action_controller/metal/renderers.rb#31
  def _renderers; end

  # source://actionpack//lib/action_controller/metal/renderers.rb#31
  def _renderers=(_arg0); end

  # source://actionpack//lib/action_controller/metal/renderers.rb#31
  def _renderers?; end

  # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#928
  def _run_process_action_callbacks(&block); end

  # source://actionpack//lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies; end

  # source://actionpack//lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies=(_arg0); end

  # source://actionpack//lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies?; end

  # source://actionpack//lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options; end

  # source://actionpack//lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options=(_arg0); end

  # source://actionpack//lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options?; end

  # source://actionpack//lib/action_controller/metal/flash.rb#36
  def alert; end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
  def allow_forgery_protection; end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
  def allow_forgery_protection=(value); end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
  def asset_host; end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
  def asset_host=(value); end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
  def assets_dir; end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
  def assets_dir=(value); end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
  def default_asset_host_protocol; end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
  def default_asset_host_protocol=(value); end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
  def default_protect_from_forgery; end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
  def default_protect_from_forgery=(value); end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
  def default_static_extension; end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
  def default_static_extension=(value); end

  # source://actionpack//lib/action_dispatch/routing/url_for.rb#95
  def default_url_options; end

  # source://actionpack//lib/action_dispatch/routing/url_for.rb#95
  def default_url_options=(_arg0); end

  # source://actionpack//lib/action_dispatch/routing/url_for.rb#95
  def default_url_options?; end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
  def enable_fragment_cache_logging; end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
  def enable_fragment_cache_logging=(value); end

  # source://actionpack//lib/action_controller/metal/etag_with_template_digest.rb#27
  def etag_with_template_digest; end

  # source://actionpack//lib/action_controller/metal/etag_with_template_digest.rb#27
  def etag_with_template_digest=(_arg0); end

  # source://actionpack//lib/action_controller/metal/etag_with_template_digest.rb#27
  def etag_with_template_digest?; end

  # source://actionpack//lib/action_controller/metal/conditional_get.rb#13
  def etaggers; end

  # source://actionpack//lib/action_controller/metal/conditional_get.rb#13
  def etaggers=(_arg0); end

  # source://actionpack//lib/action_controller/metal/conditional_get.rb#13
  def etaggers?; end

  # source://actionpack//lib/action_controller/metal/flash.rb#10
  def flash(*_arg0, **_arg1, &_arg2); end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
  def forgery_protection_origin_check; end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
  def forgery_protection_origin_check=(value); end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
  def forgery_protection_strategy; end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
  def forgery_protection_strategy=(value); end

  # source://actionpack//lib/abstract_controller/caching/fragments.rb#23
  def fragment_cache_keys; end

  # source://actionpack//lib/abstract_controller/caching/fragments.rb#23
  def fragment_cache_keys=(_arg0); end

  # source://actionpack//lib/abstract_controller/caching/fragments.rb#23
  def fragment_cache_keys?; end

  # source://actionpack//lib/action_controller/metal/helpers.rb#63
  def helpers_path; end

  # source://actionpack//lib/action_controller/metal/helpers.rb#63
  def helpers_path=(_arg0); end

  # source://actionpack//lib/action_controller/metal/helpers.rb#63
  def helpers_path?; end

  # source://actionpack//lib/action_controller/metal/helpers.rb#64
  def include_all_helpers; end

  # source://actionpack//lib/action_controller/metal/helpers.rb#64
  def include_all_helpers=(_arg0); end

  # source://actionpack//lib/action_controller/metal/helpers.rb#64
  def include_all_helpers?; end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
  def javascripts_dir; end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
  def javascripts_dir=(value); end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
  def log_warning_on_csrf_failure; end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
  def log_warning_on_csrf_failure=(value); end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
  def logger; end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
  def logger=(value); end

  # source://actionpack//lib/action_controller/metal/flash.rb#36
  def notice; end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
  def per_form_csrf_tokens; end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
  def per_form_csrf_tokens=(value); end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
  def perform_caching; end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
  def perform_caching=(value); end

  # source://actionpack//lib/action_controller/metal/redirecting.rb#13
  def raise_on_open_redirects; end

  # source://actionpack//lib/action_controller/metal/redirecting.rb#13
  def raise_on_open_redirects=(val); end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
  def relative_url_root; end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
  def relative_url_root=(value); end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
  def request_forgery_protection_token; end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
  def request_forgery_protection_token=(value); end

  # source://activesupport/7.0.4.3/lib/active_support/rescuable.rb#13
  def rescue_handlers; end

  # source://activesupport/7.0.4.3/lib/active_support/rescuable.rb#13
  def rescue_handlers=(_arg0); end

  # source://activesupport/7.0.4.3/lib/active_support/rescuable.rb#13
  def rescue_handlers?; end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
  def stylesheets_dir; end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
  def stylesheets_dir=(value); end

  # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
  def urlsafe_csrf_tokens; end

  private

  # source://actionview/7.0.4.3/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  # source://actionpack//lib/action_controller/base.rb#266
  def _protected_ivars; end

  class << self
    # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://actionpack//lib/action_controller/form_builder.rb#31
    def _default_form_builder; end

    # source://actionpack//lib/action_controller/form_builder.rb#31
    def _default_form_builder=(value); end

    # source://actionpack//lib/action_controller/form_builder.rb#31
    def _default_form_builder?; end

    # source://actionpack//lib/action_controller/metal/flash.rb#8
    def _flash_types; end

    # source://actionpack//lib/action_controller/metal/flash.rb#8
    def _flash_types=(value); end

    # source://actionpack//lib/action_controller/metal/flash.rb#8
    def _flash_types?; end

    # source://actionpack//lib/abstract_controller/helpers.rb#11
    def _helper_methods; end

    # source://actionpack//lib/abstract_controller/helpers.rb#11
    def _helper_methods=(value); end

    # source://actionpack//lib/abstract_controller/helpers.rb#11
    def _helper_methods?; end

    # source://actionpack//lib/abstract_controller/helpers.rb#15
    def _helpers; end

    # source://actionview/7.0.4.3/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/7.0.4.3/lib/action_view/layouts.rb#209
    def _layout=(value); end

    # source://actionview/7.0.4.3/lib/action_view/layouts.rb#209
    def _layout?; end

    # source://actionview/7.0.4.3/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionview/7.0.4.3/lib/action_view/layouts.rb#210
    def _layout_conditions=(value); end

    # source://actionview/7.0.4.3/lib/action_view/layouts.rb#210
    def _layout_conditions?; end

    # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#932
    def _process_action_callbacks; end

    # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#936
    def _process_action_callbacks=(value); end

    # source://actionpack//lib/action_controller/metal/renderers.rb#31
    def _renderers; end

    # source://actionpack//lib/action_controller/metal/renderers.rb#31
    def _renderers=(value); end

    # source://actionpack//lib/action_controller/metal/renderers.rb#31
    def _renderers?; end

    # source://actionpack//lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies; end

    # source://actionpack//lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies=(value); end

    # source://actionpack//lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies?; end

    # source://actionpack//lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options; end

    # source://actionpack//lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options=(value); end

    # source://actionpack//lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options?; end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
    def allow_forgery_protection; end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
    def allow_forgery_protection=(value); end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
    def asset_host; end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
    def asset_host=(value); end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
    def assets_dir; end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
    def assets_dir=(value); end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
    def default_asset_host_protocol; end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
    def default_asset_host_protocol=(value); end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
    def default_protect_from_forgery; end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
    def default_protect_from_forgery=(value); end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
    def default_static_extension; end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
    def default_static_extension=(value); end

    # source://actionpack//lib/action_dispatch/routing/url_for.rb#95
    def default_url_options; end

    # source://actionpack//lib/action_dispatch/routing/url_for.rb#95
    def default_url_options=(value); end

    # source://actionpack//lib/action_dispatch/routing/url_for.rb#95
    def default_url_options?; end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
    def enable_fragment_cache_logging; end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
    def enable_fragment_cache_logging=(value); end

    # source://actionpack//lib/action_controller/metal/etag_with_template_digest.rb#27
    def etag_with_template_digest; end

    # source://actionpack//lib/action_controller/metal/etag_with_template_digest.rb#27
    def etag_with_template_digest=(value); end

    # source://actionpack//lib/action_controller/metal/etag_with_template_digest.rb#27
    def etag_with_template_digest?; end

    # source://actionpack//lib/action_controller/metal/conditional_get.rb#13
    def etaggers; end

    # source://actionpack//lib/action_controller/metal/conditional_get.rb#13
    def etaggers=(value); end

    # source://actionpack//lib/action_controller/metal/conditional_get.rb#13
    def etaggers?; end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
    def forgery_protection_origin_check; end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
    def forgery_protection_origin_check=(value); end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
    def forgery_protection_strategy; end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
    def forgery_protection_strategy=(value); end

    # source://actionpack//lib/abstract_controller/caching/fragments.rb#23
    def fragment_cache_keys; end

    # source://actionpack//lib/abstract_controller/caching/fragments.rb#23
    def fragment_cache_keys=(value); end

    # source://actionpack//lib/abstract_controller/caching/fragments.rb#23
    def fragment_cache_keys?; end

    # source://actionpack//lib/action_controller/metal/helpers.rb#63
    def helpers_path; end

    # source://actionpack//lib/action_controller/metal/helpers.rb#63
    def helpers_path=(value); end

    # source://actionpack//lib/action_controller/metal/helpers.rb#63
    def helpers_path?; end

    # source://actionpack//lib/action_controller/metal/helpers.rb#64
    def include_all_helpers; end

    # source://actionpack//lib/action_controller/metal/helpers.rb#64
    def include_all_helpers=(value); end

    # source://actionpack//lib/action_controller/metal/helpers.rb#64
    def include_all_helpers?; end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
    def javascripts_dir; end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
    def javascripts_dir=(value); end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
    def log_warning_on_csrf_failure; end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
    def log_warning_on_csrf_failure=(value); end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
    def logger; end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
    def logger=(value); end

    # source://actionpack//lib/action_controller/metal.rb#210
    def middleware_stack; end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
    def per_form_csrf_tokens; end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
    def per_form_csrf_tokens=(value); end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
    def perform_caching; end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
    def perform_caching=(value); end

    # source://actionpack//lib/action_controller/metal/redirecting.rb#13
    def raise_on_open_redirects; end

    # source://actionpack//lib/action_controller/metal/redirecting.rb#13
    def raise_on_open_redirects=(val); end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
    def relative_url_root; end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
    def relative_url_root=(value); end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
    def request_forgery_protection_token; end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
    def request_forgery_protection_token=(value); end

    # source://activesupport/7.0.4.3/lib/active_support/rescuable.rb#13
    def rescue_handlers; end

    # source://activesupport/7.0.4.3/lib/active_support/rescuable.rb#13
    def rescue_handlers=(value); end

    # source://activesupport/7.0.4.3/lib/active_support/rescuable.rb#13
    def rescue_handlers?; end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
    def stylesheets_dir; end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#114
    def stylesheets_dir=(value); end

    # source://activesupport/7.0.4.3/lib/active_support/configurable.rb#113
    def urlsafe_csrf_tokens; end

    # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#97
    def urlsafe_csrf_tokens=(urlsafe_csrf_tokens); end

    # source://actionpack//lib/action_controller/base.rb#198
    def without_modules(*modules); end
  end
end

# source://actionpack//lib/action_controller/base.rb#0
module ActionController::Base::HelperMethods
  include ::ActionText::ContentHelper
  include ::ActionText::TagHelper

  # source://actionpack//lib/action_controller/metal/flash.rb#39
  def alert(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/caching/fragments.rb#31
  def combined_fragment_cache_key(*args, **_arg1, &block); end

  # source://actionpack//lib/action_controller/metal/content_security_policy.rb#11
  def content_security_policy?(*args, **_arg1, &block); end

  # source://actionpack//lib/action_controller/metal/content_security_policy.rb#12
  def content_security_policy_nonce(*args, **_arg1, &block); end

  # source://actionpack//lib/action_controller/metal/cookies.rb#8
  def cookies(*args, **_arg1, &block); end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#106
  def form_authenticity_token(*args, **_arg1, &block); end

  # source://actionpack//lib/action_controller/metal/flash.rb#39
  def notice(*args, **_arg1, &block); end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#107
  def protect_against_forgery?(*args, **_arg1, &block); end

  # source://actionpack//lib/abstract_controller/caching.rb#43
  def view_cache_dependencies(*args, **_arg1, &block); end
end

# source://actionpack//lib/action_controller/base.rb#206
ActionController::Base::MODULES = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_controller/base.rb#261
ActionController::Base::PROTECTED_IVARS = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_controller/metal/basic_implicit_render.rb#4
module ActionController::BasicImplicitRender
  # source://actionpack//lib/action_controller/metal/basic_implicit_render.rb#9
  def default_render; end

  # source://actionpack//lib/action_controller/metal/basic_implicit_render.rb#5
  def send_action(method, *args); end
end

# source://actionpack//lib/action_controller/caching.rb#24
module ActionController::Caching
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::AbstractController::Caching::Fragments
  include ::AbstractController::Caching

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Caching::Fragments::ClassMethods
  mixes_in_class_methods ::AbstractController::Caching::ClassMethods
  mixes_in_class_methods ::AbstractController::Caching::ConfigMethods

  private

  # source://actionpack//lib/action_controller/caching.rb#40
  def instrument_name; end

  # source://actionpack//lib/action_controller/caching.rb#32
  def instrument_payload(key); end

  module GeneratedClassMethods
    def _view_cache_dependencies; end
    def _view_cache_dependencies=(value); end
    def _view_cache_dependencies?; end
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end

  module GeneratedInstanceMethods
    def _view_cache_dependencies; end
    def _view_cache_dependencies=(value); end
    def _view_cache_dependencies?; end
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end
end

# source://actionpack//lib/action_controller/metal/conditional_get.rb#7
module ActionController::ConditionalGet
  include ::ActionController::Head
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::ConditionalGet::ClassMethods

  # source://actionpack//lib/action_controller/metal/conditional_get.rb#276
  def expires_in(seconds, options = T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/metal/conditional_get.rb#294
  def expires_now; end

  # source://actionpack//lib/action_controller/metal/conditional_get.rb#117
  def fresh_when(object = T.unsafe(nil), etag: T.unsafe(nil), weak_etag: T.unsafe(nil), strong_etag: T.unsafe(nil), last_modified: T.unsafe(nil), public: T.unsafe(nil), cache_control: T.unsafe(nil), template: T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/metal/conditional_get.rb#306
  def http_cache_forever(public: T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/metal/conditional_get.rb#316
  def no_store; end

  # source://actionpack//lib/action_controller/metal/conditional_get.rb#249
  def stale?(object = T.unsafe(nil), **freshness_kwargs); end

  private

  # source://actionpack//lib/action_controller/metal/conditional_get.rb#321
  def combine_etags(validator, options); end

  module GeneratedClassMethods
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end

  module GeneratedInstanceMethods
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end
end

# source://actionpack//lib/action_controller/metal/conditional_get.rb#16
module ActionController::ConditionalGet::ClassMethods
  # source://actionpack//lib/action_controller/metal/conditional_get.rb#31
  def etag(&etagger); end
end

# source://actionpack//lib/action_controller/metal/content_security_policy.rb#4
module ActionController::ContentSecurityPolicy
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::AbstractController::Helpers
  include ::ActiveSupport::Callbacks
  include ::AbstractController::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Helpers::ClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::AbstractController::Callbacks::ClassMethods
  mixes_in_class_methods ::ActionController::ContentSecurityPolicy::ClassMethods

  private

  # source://actionpack//lib/action_controller/metal/content_security_policy.rb#73
  def content_security_policy?; end

  # source://actionpack//lib/action_controller/metal/content_security_policy.rb#77
  def content_security_policy_nonce; end

  # source://actionpack//lib/action_controller/metal/content_security_policy.rb#81
  def current_content_security_policy; end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end
end

# source://actionpack//lib/action_controller/metal/content_security_policy.rb#15
module ActionController::ContentSecurityPolicy::ClassMethods
  # source://actionpack//lib/action_controller/metal/content_security_policy.rb#39
  def content_security_policy(enabled = T.unsafe(nil), **options, &block); end

  # source://actionpack//lib/action_controller/metal/content_security_policy.rb#65
  def content_security_policy_report_only(report_only = T.unsafe(nil), **options); end
end

# source://actionpack//lib/action_controller/metal/cookies.rb#4
module ActionController::Cookies
  extend ::ActiveSupport::Concern

  private

  # source://actionpack//lib/action_controller/metal/cookies.rb#14
  def cookies; end
end

# source://actionpack//lib/action_controller/metal/data_streaming.rb#9
module ActionController::DataStreaming
  extend ::ActiveSupport::Concern
  include ::ActionController::Rendering

  mixes_in_class_methods ::ActionController::Rendering::ClassMethods

  private

  # source://actionpack//lib/action_controller/metal/data_streaming.rb#109
  def send_data(data, options = T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/metal/data_streaming.rb#69
  def send_file(path, options = T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/metal/data_streaming.rb#114
  def send_file_headers!(options); end
end

# source://actionpack//lib/action_controller/metal/data_streaming.rb#15
ActionController::DataStreaming::DEFAULT_SEND_FILE_DISPOSITION = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_controller/metal/data_streaming.rb#14
ActionController::DataStreaming::DEFAULT_SEND_FILE_TYPE = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_controller/metal/default_headers.rb#6
module ActionController::DefaultHeaders
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::DefaultHeaders::ClassMethods
end

# source://actionpack//lib/action_controller/metal/default_headers.rb#9
module ActionController::DefaultHeaders::ClassMethods
  # source://actionpack//lib/action_controller/metal/default_headers.rb#10
  def make_response!(request); end
end

# source://actionpack//lib/action_controller/metal/etag_with_flash.rb#9
module ActionController::EtagWithFlash
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionController::ConditionalGet

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::ConditionalGet::ClassMethods

  module GeneratedClassMethods
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end

  module GeneratedInstanceMethods
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end
end

# source://actionpack//lib/action_controller/metal/etag_with_template_digest.rb#21
module ActionController::EtagWithTemplateDigest
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionController::ConditionalGet

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::ConditionalGet::ClassMethods

  private

  # source://actionpack//lib/action_controller/metal/etag_with_template_digest.rb#35
  def determine_template_etag(options); end

  # source://actionpack//lib/action_controller/metal/etag_with_template_digest.rb#51
  def lookup_and_digest_template(template); end

  # source://actionpack//lib/action_controller/metal/etag_with_template_digest.rb#45
  def pick_template_for_etag(options); end

  module GeneratedClassMethods
    def etag_with_template_digest; end
    def etag_with_template_digest=(value); end
    def etag_with_template_digest?; end
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end

  module GeneratedInstanceMethods
    def etag_with_template_digest; end
    def etag_with_template_digest=(value); end
    def etag_with_template_digest?; end
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end
end

# source://actionpack//lib/action_controller/metal/flash.rb#4
module ActionController::Flash
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::Flash::ClassMethods

  private

  # source://actionpack//lib/action_controller/metal/flash.rb#51
  def redirect_to(options = T.unsafe(nil), response_options_and_flash = T.unsafe(nil)); end

  module GeneratedClassMethods
    def _flash_types; end
    def _flash_types=(value); end
    def _flash_types?; end
  end

  module GeneratedInstanceMethods; end
end

# source://actionpack//lib/action_controller/metal/flash.rb#14
module ActionController::Flash::ClassMethods
  # source://actionpack//lib/action_controller/metal/flash.rb#45
  def action_methods; end

  # source://actionpack//lib/action_controller/metal/flash.rb#32
  def add_flash_types(*types); end
end

# source://actionpack//lib/action_controller/form_builder.rb#27
module ActionController::FormBuilder
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::FormBuilder::ClassMethods

  # source://actionpack//lib/action_controller/form_builder.rb#46
  def default_form_builder; end

  module GeneratedClassMethods
    def _default_form_builder; end
    def _default_form_builder=(value); end
    def _default_form_builder?; end
  end

  module GeneratedInstanceMethods; end
end

# source://actionpack//lib/action_controller/form_builder.rb#34
module ActionController::FormBuilder::ClassMethods
  # source://actionpack//lib/action_controller/form_builder.rb#40
  def default_form_builder(builder); end
end

# source://actionpack//lib/action_controller/metal/head.rb#4
module ActionController::Head
  # source://actionpack//lib/action_controller/metal/head.rb#21
  def head(status, options = T.unsafe(nil)); end

  private

  # source://actionpack//lib/action_controller/metal/head.rb#52
  def include_content?(status); end
end

# source://actionpack//lib/action_controller/metal/helpers.rb#56
module ActionController::Helpers
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::AbstractController::Helpers

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Helpers::ClassMethods
  mixes_in_class_methods ::ActionController::Helpers::ClassMethods

  # source://actionpack//lib/action_controller/metal/helpers.rb#128
  def helpers; end

  class << self
    # source://actionpack//lib/action_controller/metal/helpers.rb#59
    def helpers_path; end

    # source://actionpack//lib/action_controller/metal/helpers.rb#59
    def helpers_path=(_arg0); end
  end

  module GeneratedClassMethods
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
    def helpers_path; end
    def helpers_path=(value); end
    def helpers_path?; end
    def include_all_helpers; end
    def include_all_helpers=(value); end
    def include_all_helpers?; end
  end

  module GeneratedInstanceMethods
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
    def helpers_path; end
    def helpers_path=(value); end
    def helpers_path?; end
    def include_all_helpers; end
    def include_all_helpers=(value); end
    def include_all_helpers?; end
  end
end

# source://actionpack//lib/action_controller/metal/helpers.rb#67
module ActionController::Helpers::ClassMethods
  # source://actionpack//lib/action_controller/metal/helpers.rb#111
  def all_helpers_from_path(path); end

  # source://actionpack//lib/action_controller/metal/helpers.rb#76
  def helper_attr(*attrs); end

  # source://actionpack//lib/action_controller/metal/helpers.rb#86
  def helpers; end

  # source://actionpack//lib/action_controller/metal/helpers.rb#102
  def modules_for_helpers(args); end

  private

  # source://actionpack//lib/action_controller/metal/helpers.rb#122
  def all_application_helpers; end
end

# source://actionpack//lib/action_controller/metal/http_authentication.rb#9
module ActionController::HttpAuthentication; end

# source://actionpack//lib/action_controller/metal/http_authentication.rb#66
module ActionController::HttpAuthentication::Basic
  extend ::ActionController::HttpAuthentication::Basic

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#127
  def auth_param(request); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#123
  def auth_scheme(request); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#105
  def authenticate(request, &login_procedure); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#135
  def authentication_request(controller, realm, message); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#119
  def decode_credentials(request); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#131
  def encode_credentials(user_name, password); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#111
  def has_basic_credentials?(request); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#115
  def user_name_and_password(request); end
end

# source://actionpack//lib/action_controller/metal/http_authentication.rb#69
module ActionController::HttpAuthentication::Basic::ControllerMethods
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#92
  def authenticate_or_request_with_http_basic(realm = T.unsafe(nil), message = T.unsafe(nil), &login_procedure); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#96
  def authenticate_with_http_basic(&login_procedure); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#83
  def http_basic_authenticate_or_request_with(name:, password:, realm: T.unsafe(nil), message: T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#100
  def request_http_basic_authentication(realm = T.unsafe(nil), message = T.unsafe(nil)); end
end

# source://actionpack//lib/action_controller/metal/http_authentication.rb#72
module ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods
  # source://actionpack//lib/action_controller/metal/http_authentication.rb#76
  def http_basic_authenticate_with(name:, password:, realm: T.unsafe(nil), **options); end
end

# source://actionpack//lib/action_controller/metal/http_authentication.rb#185
module ActionController::HttpAuthentication::Digest
  extend ::ActionController::HttpAuthentication::Digest

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#211
  def authenticate(request, realm, &password_procedure); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#269
  def authentication_header(controller, realm); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#276
  def authentication_request(controller, realm, message = T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#262
  def decode_credentials(header); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#258
  def decode_credentials_header(request); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#253
  def encode_credentials(http_method, credentials, password, password_is_ha1); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#243
  def expected_response(http_method, uri, credentials, password, password_is_ha1 = T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#249
  def ha1(credentials, password); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#321
  def nonce(secret_key, time = T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#340
  def opaque(secret_key); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#283
  def secret_token(request); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#218
  def validate_digest_response(request, realm, &password_procedure); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#333
  def validate_nonce(secret_key, request, value, seconds_to_timeout = T.unsafe(nil)); end
end

# source://actionpack//lib/action_controller/metal/http_authentication.rb#188
module ActionController::HttpAuthentication::Digest::ControllerMethods
  # source://actionpack//lib/action_controller/metal/http_authentication.rb#193
  def authenticate_or_request_with_http_digest(realm = T.unsafe(nil), message = T.unsafe(nil), &password_procedure); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#199
  def authenticate_with_http_digest(realm = T.unsafe(nil), &password_procedure); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#205
  def request_http_digest_authentication(realm = T.unsafe(nil), message = T.unsafe(nil)); end
end

# source://actionpack//lib/action_controller/metal/http_authentication.rb#419
module ActionController::HttpAuthentication::Token
  extend ::ActionController::HttpAuthentication::Token

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#461
  def authenticate(controller, &login_procedure); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#541
  def authentication_request(controller, realm, message = T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#526
  def encode_credentials(token, options = T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#496
  def params_array_from(raw_params); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#508
  def raw_params(auth); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#501
  def rewrite_param_values(array_params); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#483
  def token_and_options(request); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#491
  def token_params_from(auth); end
end

# source://actionpack//lib/action_controller/metal/http_authentication.rb#422
ActionController::HttpAuthentication::Token::AUTHN_PAIR_DELIMITERS = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_controller/metal/http_authentication.rb#425
module ActionController::HttpAuthentication::Token::ControllerMethods
  # source://actionpack//lib/action_controller/metal/http_authentication.rb#430
  def authenticate_or_request_with_http_token(realm = T.unsafe(nil), message = T.unsafe(nil), &login_procedure); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#436
  def authenticate_with_http_token(&login_procedure); end

  # source://actionpack//lib/action_controller/metal/http_authentication.rb#442
  def request_http_token_authentication(realm = T.unsafe(nil), message = T.unsafe(nil)); end
end

# source://actionpack//lib/action_controller/metal/http_authentication.rb#420
ActionController::HttpAuthentication::Token::TOKEN_KEY = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_controller/metal/http_authentication.rb#421
ActionController::HttpAuthentication::Token::TOKEN_REGEX = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_controller/metal/implicit_render.rb#29
module ActionController::ImplicitRender
  include ::ActionController::BasicImplicitRender

  # source://actionpack//lib/action_controller/metal/implicit_render.rb#33
  def default_render; end

  # source://actionpack//lib/action_controller/metal/implicit_render.rb#52
  def method_for_action(action_name); end

  private

  # source://actionpack//lib/action_controller/metal/implicit_render.rb#59
  def interactive_browser_request?; end
end

# source://actionpack//lib/action_controller/metal/instrumentation.rb#12
module ActionController::Instrumentation
  extend ::ActiveSupport::Concern
  include ::ActiveSupport::Benchmarkable
  include ::AbstractController::Logger

  mixes_in_class_methods ::ActionController::Instrumentation::ClassMethods

  # source://actionpack//lib/action_controller/metal/instrumentation.rb#40
  def redirect_to(*_arg0); end

  # source://actionpack//lib/action_controller/metal/instrumentation.rb#19
  def render(*_arg0); end

  # source://actionpack//lib/action_controller/metal/instrumentation.rb#34
  def send_data(data, options = T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/metal/instrumentation.rb#27
  def send_file(path, options = T.unsafe(nil)); end

  def view_runtime; end
  def view_runtime=(_arg0); end

  private

  # source://actionpack//lib/action_controller/metal/instrumentation.rb#96
  def append_info_to_payload(payload); end

  # source://actionpack//lib/action_controller/metal/instrumentation.rb#90
  def cleanup_view_runtime; end

  # source://actionpack//lib/action_controller/metal/instrumentation.rb#80
  def halted_callback_hook(filter, _); end

  # source://actionpack//lib/action_controller/metal/instrumentation.rb#50
  def process_action(*_arg0); end
end

# source://actionpack//lib/action_controller/metal/instrumentation.rb#100
module ActionController::Instrumentation::ClassMethods
  # source://actionpack//lib/action_controller/metal/instrumentation.rb#104
  def log_process_action(payload); end
end

# source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#8
class ActionController::InvalidAuthenticityToken < ::ActionController::ActionControllerError; end

# source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#11
class ActionController::InvalidCrossOriginRequest < ::ActionController::ActionControllerError; end

# source://actionpack//lib/action_controller/metal/live.rb#37
module ActionController::Live
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::Live::ClassMethods

  # source://actionpack//lib/action_controller/test_case.rb#24
  def new_controller_thread; end

  # source://actionpack//lib/action_controller/metal/live.rb#249
  def process(name); end

  # source://actionpack//lib/action_controller/metal/live.rb#295
  def response_body=(body); end

  # source://actionpack//lib/action_controller/metal/live.rb#321
  def send_stream(filename:, disposition: T.unsafe(nil), type: T.unsafe(nil)); end

  private

  # source://actionpack//lib/action_controller/metal/live.rb#348
  def log_error(exception); end
end

# source://actionpack//lib/action_controller/metal/live.rb#127
class ActionController::Live::Buffer < ::ActionDispatch::Response::Buffer
  include ::MonitorMixin

  # source://actionpack//lib/action_controller/metal/live.rb#143
  def initialize(response); end

  # source://actionpack//lib/action_controller/metal/live.rb#193
  def abort; end

  # source://actionpack//lib/action_controller/metal/live.rb#212
  def call_on_error; end

  # source://actionpack//lib/action_controller/metal/live.rb#180
  def close; end

  # source://actionpack//lib/action_controller/metal/live.rb#204
  def connected?; end

  # source://actionpack//lib/action_controller/metal/live.rb#141
  def ignore_disconnect; end

  # source://actionpack//lib/action_controller/metal/live.rb#141
  def ignore_disconnect=(_arg0); end

  # source://actionpack//lib/action_controller/metal/live.rb#208
  def on_error(&block); end

  # source://actionpack//lib/action_controller/metal/live.rb#151
  def write(string); end

  # source://actionpack//lib/action_controller/metal/live.rb#172
  def writeln(string); end

  private

  # source://actionpack//lib/action_controller/metal/live.rb#228
  def build_queue(queue_size); end

  # source://actionpack//lib/action_controller/metal/live.rb#217
  def each_chunk(&block); end

  class << self
    # source://actionpack//lib/action_controller/metal/live.rb#131
    def queue_size; end

    # source://actionpack//lib/action_controller/metal/live.rb#131
    def queue_size=(_arg0); end
  end
end

# source://actionpack//lib/action_controller/metal/live.rb#40
module ActionController::Live::ClassMethods
  # source://actionpack//lib/action_controller/metal/live.rb#41
  def make_response!(request); end
end

# source://actionpack//lib/action_controller/metal/live.rb#124
class ActionController::Live::ClientDisconnected < ::RuntimeError; end

# source://actionpack//lib/action_controller/metal/live.rb#233
class ActionController::Live::Response < ::ActionDispatch::Response
  private

  # source://actionpack//lib/action_controller/metal/live.rb#235
  def before_committed; end

  # source://actionpack//lib/action_controller/metal/live.rb#242
  def build_buffer(response, body); end
end

# source://actionpack//lib/action_controller/metal/live.rb#88
class ActionController::Live::SSE
  # source://actionpack//lib/action_controller/metal/live.rb#91
  def initialize(stream, options = T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/metal/live.rb#96
  def close; end

  # source://actionpack//lib/action_controller/metal/live.rb#100
  def write(object, options = T.unsafe(nil)); end

  private

  # source://actionpack//lib/action_controller/metal/live.rb#110
  def perform_write(json, options); end
end

# source://actionpack//lib/action_controller/metal/live.rb#89
ActionController::Live::SSE::PERMITTED_OPTIONS = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_controller/test_case.rb#169
class ActionController::LiveTestResponse < ::ActionController::Live::Response
  # source://rack/2.2.6.4/lib/rack/response.rb#141
  def error?; end

  # source://rack/2.2.6.4/lib/rack/response.rb#151
  def missing?; end

  # source://rack/2.2.6.4/lib/rack/response.rb#138
  def success?; end
end

# source://actionpack//lib/action_controller/log_subscriber.rb#4
class ActionController::LogSubscriber < ::ActiveSupport::LogSubscriber
  # source://actionpack//lib/action_controller/log_subscriber.rb#67
  def exist_fragment?(event); end

  # source://actionpack//lib/action_controller/log_subscriber.rb#67
  def expire_fragment(event); end

  # source://actionpack//lib/action_controller/log_subscriber.rb#40
  def halted_callback(event); end

  # source://actionpack//lib/action_controller/log_subscriber.rb#76
  def logger; end

  # source://actionpack//lib/action_controller/log_subscriber.rb#20
  def process_action(event); end

  # source://actionpack//lib/action_controller/log_subscriber.rb#67
  def read_fragment(event); end

  # source://actionpack//lib/action_controller/log_subscriber.rb#48
  def redirect_to(event); end

  # source://actionpack//lib/action_controller/log_subscriber.rb#52
  def send_data(event); end

  # source://actionpack//lib/action_controller/log_subscriber.rb#44
  def send_file(event); end

  # source://actionpack//lib/action_controller/log_subscriber.rb#7
  def start_processing(event); end

  # source://actionpack//lib/action_controller/log_subscriber.rb#56
  def unpermitted_parameters(event); end

  # source://actionpack//lib/action_controller/log_subscriber.rb#67
  def write_fragment(event); end
end

# source://actionpack//lib/action_controller/log_subscriber.rb#5
ActionController::LogSubscriber::INTERNAL_PARAMS = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_controller/metal/logging.rb#4
module ActionController::Logging
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::Logging::ClassMethods
end

# source://actionpack//lib/action_controller/metal/logging.rb#7
module ActionController::Logging::ClassMethods
  # source://actionpack//lib/action_controller/metal/logging.rb#15
  def log_at(level, **options); end
end

# source://actionpack//lib/action_controller/metal.rb#117
class ActionController::Metal < ::AbstractController::Base
  include ::ActionController::Testing::Functional

  # source://actionpack//lib/action_controller/metal.rb#150
  def initialize; end

  # source://actionpack//lib/action_controller/metal.rb#147
  def content_type(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_controller/metal.rb#147
  def content_type=(arg); end

  # source://actionpack//lib/action_controller/metal.rb#141
  def controller_name; end

  # source://actionpack//lib/action_controller/metal.rb#185
  def dispatch(name, request, response); end

  # source://actionpack//lib/action_controller/metal.rb#147
  def headers(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_controller/metal.rb#147
  def location(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_controller/metal.rb#147
  def location=(arg); end

  # source://actionpack//lib/action_controller/metal.rb#147
  def media_type(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_controller/metal.rb#210
  def middleware_stack; end

  # source://actionpack//lib/action_controller/metal.rb#210
  def middleware_stack=(_arg0); end

  # source://actionpack//lib/action_controller/metal.rb#210
  def middleware_stack?; end

  # source://actionpack//lib/action_controller/metal.rb#157
  def params; end

  # source://actionpack//lib/action_controller/metal.rb#161
  def params=(val); end

  # source://actionpack//lib/action_controller/metal.rb#181
  def performed?; end

  # source://activesupport/7.0.4.3/lib/active_support/core_ext/module/attr_internal.rb#33
  def request; end

  # source://activesupport/7.0.4.3/lib/active_support/core_ext/module/attr_internal.rb#33
  def request=(_arg0); end

  # source://actionpack//lib/action_controller/metal.rb#206
  def reset_session; end

  # source://activesupport/7.0.4.3/lib/active_support/core_ext/module/attr_internal.rb#33
  def response; end

  # source://activesupport/7.0.4.3/lib/active_support/core_ext/module/attr_internal.rb#33
  def response=(_arg0); end

  # source://actionpack//lib/action_controller/metal.rb#172
  def response_body=(body); end

  # source://actionpack//lib/action_controller/metal.rb#147
  def response_code(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_controller/metal.rb#146
  def session(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_controller/metal.rb#197
  def set_request!(request); end

  # source://actionpack//lib/action_controller/metal.rb#193
  def set_response!(response); end

  # source://actionpack//lib/action_controller/metal.rb#147
  def status(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_controller/metal.rb#147
  def status=(arg); end

  # source://actionpack//lib/action_controller/metal.rb#202
  def to_a; end

  # source://actionpack//lib/action_controller/metal.rb#168
  def url_for(string); end

  class << self
    # source://actionpack//lib/action_controller/metal.rb#231
    def action(name); end

    # source://actionpack//lib/action_controller/metal.rb#136
    def action_encoding_template(action); end

    # source://actionpack//lib/action_controller/metal.rb#126
    def controller_name; end

    # source://actionpack//lib/action_controller/metal.rb#247
    def dispatch(name, req, res); end

    # source://actionpack//lib/action_controller/metal.rb#212
    def inherited(base); end

    # source://actionpack//lib/action_controller/metal.rb#130
    def make_response!(request); end

    # source://actionpack//lib/action_controller/metal.rb#226
    def middleware; end

    # source://actionpack//lib/action_controller/metal.rb#210
    def middleware_stack; end

    # source://actionpack//lib/action_controller/metal.rb#210
    def middleware_stack=(value); end

    # source://actionpack//lib/action_controller/metal.rb#210
    def middleware_stack?; end

    # source://actionpack//lib/action_controller/metal.rb#220
    def use(*_arg0, **_arg1, &_arg2); end
  end
end

# source://actionpack//lib/action_controller/metal/exceptions.rb#50
class ActionController::MethodNotAllowed < ::ActionController::ActionControllerError
  # source://actionpack//lib/action_controller/metal/exceptions.rb#51
  def initialize(*allowed_methods); end
end

# source://actionpack//lib/action_controller/metal.rb#14
class ActionController::MiddlewareStack < ::ActionDispatch::MiddlewareStack
  # source://actionpack//lib/action_controller/metal.rb#27
  def build(action, app = T.unsafe(nil), &block); end

  private

  # source://actionpack//lib/action_controller/metal.rb#40
  def build_middleware(klass, args, block); end
end

# source://actionpack//lib/action_controller/metal.rb#37
ActionController::MiddlewareStack::EXCLUDE = T.let(T.unsafe(nil), Proc)

# source://actionpack//lib/action_controller/metal.rb#36
ActionController::MiddlewareStack::INCLUDE = T.let(T.unsafe(nil), Proc)

# source://actionpack//lib/action_controller/metal.rb#15
class ActionController::MiddlewareStack::Middleware < ::ActionDispatch::MiddlewareStack::Middleware
  # source://actionpack//lib/action_controller/metal.rb#16
  def initialize(klass, args, actions, strategy, block); end

  # source://actionpack//lib/action_controller/metal.rb#22
  def valid?(action); end
end

# source://actionpack//lib/action_controller/metal.rb#38
ActionController::MiddlewareStack::NULL = T.let(T.unsafe(nil), Proc)

# source://actionpack//lib/action_controller/metal/mime_responds.rb#6
module ActionController::MimeResponds
  # source://actionpack//lib/action_controller/metal/mime_responds.rb#201
  def respond_to(*mimes); end
end

# source://actionpack//lib/action_controller/metal/mime_responds.rb#242
class ActionController::MimeResponds::Collector
  include ::AbstractController::Collector

  # source://actionpack//lib/action_controller/metal/mime_responds.rb#246
  def initialize(mimes, variant = T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/metal/mime_responds.rb#253
  def all(*args, &block); end

  # source://actionpack//lib/action_controller/metal/mime_responds.rb#253
  def any(*args, &block); end

  # source://actionpack//lib/action_controller/metal/mime_responds.rb#271
  def any_response?; end

  # source://actionpack//lib/action_controller/metal/mime_responds.rb#262
  def custom(mime_type, &block); end

  # source://actionpack//lib/action_controller/metal/mime_responds.rb#244
  def format; end

  # source://actionpack//lib/action_controller/metal/mime_responds.rb#244
  def format=(_arg0); end

  # source://actionpack//lib/action_controller/metal/mime_responds.rb#288
  def negotiate_format(request); end

  # source://actionpack//lib/action_controller/metal/mime_responds.rb#275
  def response; end
end

# source://actionpack//lib/action_controller/metal/mime_responds.rb#292
class ActionController::MimeResponds::Collector::VariantCollector
  # source://actionpack//lib/action_controller/metal/mime_responds.rb#293
  def initialize(variant = T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/metal/mime_responds.rb#298
  def all(*args, &block); end

  # source://actionpack//lib/action_controller/metal/mime_responds.rb#298
  def any(*args, &block); end

  # source://actionpack//lib/action_controller/metal/mime_responds.rb#309
  def method_missing(name, *args, &block); end

  # source://actionpack//lib/action_controller/metal/mime_responds.rb#313
  def variant; end

  private

  # source://actionpack//lib/action_controller/metal/mime_responds.rb#322
  def variant_key; end
end

# source://actionpack//lib/action_controller/metal/exceptions.rb#94
class ActionController::MissingExactTemplate < ::ActionController::UnknownFormat; end

# source://actionpack//lib/action_controller/metal/exceptions.rb#59
class ActionController::MissingFile < ::ActionController::ActionControllerError; end

# source://actionpack//lib/action_controller/metal/renderers.rb#17
class ActionController::MissingRenderer < ::LoadError
  # source://actionpack//lib/action_controller/metal/renderers.rb#18
  def initialize(format); end
end

# source://actionpack//lib/action_controller/metal/exceptions.rb#56
class ActionController::NotImplemented < ::ActionController::MethodNotAllowed; end

# source://actionpack//lib/action_controller/metal/parameter_encoding.rb#5
module ActionController::ParameterEncoding
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::ParameterEncoding::ClassMethods
end

# source://actionpack//lib/action_controller/metal/parameter_encoding.rb#8
module ActionController::ParameterEncoding::ClassMethods
  # source://actionpack//lib/action_controller/metal/parameter_encoding.rb#18
  def action_encoding_template(action); end

  # source://actionpack//lib/action_controller/metal/parameter_encoding.rb#9
  def inherited(klass); end

  # source://actionpack//lib/action_controller/metal/parameter_encoding.rb#77
  def param_encoding(action, param, encoding); end

  # source://actionpack//lib/action_controller/metal/parameter_encoding.rb#14
  def setup_param_encode; end

  # source://actionpack//lib/action_controller/metal/parameter_encoding.rb#48
  def skip_parameter_encoding(action); end
end

# source://actionpack//lib/action_controller/metal/strong_parameters.rb#21
class ActionController::ParameterMissing < ::KeyError
  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#24
  def initialize(param, keys = T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#33
  def corrections; end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#22
  def keys; end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#22
  def param; end
end

# source://actionpack//lib/action_controller/metal/strong_parameters.rb#132
class ActionController::Parameters
  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#267
  def initialize(parameters = T.unsafe(nil), logging_context = T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#275
  def ==(other); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#643
  def [](key); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#649
  def []=(key, value); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#243
  def always_permitted_parameters; end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#243
  def always_permitted_parameters=(val); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#233
  def as_json(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#819
  def compact; end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#824
  def compact!; end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#830
  def compact_blank; end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#836
  def compact_blank!; end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#407
  def converted_arrays; end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#921
  def deep_dup; end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#770
  def deep_transform_keys(&block); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#779
  def deep_transform_keys!(&block); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#788
  def delete(key, &block); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#812
  def delete_if(&block); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#687
  def dig(*keys); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#379
  def each(&block); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#233
  def each_key(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#379
  def each_pair(&block); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#391
  def each_value(&block); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#233
  def empty?(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#916
  def encode_with(coder); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#283
  def eql?(other); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#716
  def except(*keys); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#725
  def extract!(*keys); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#666
  def fetch(key, *args); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#233
  def has_key?(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#233
  def has_value?(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#289
  def hash; end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#233
  def include?(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#898
  def init_with(coder); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#885
  def inspect; end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#799
  def keep_if(&block); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#233
  def key?(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#233
  def keys(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#233
  def member?(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#848
  def merge(other_hash); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#856
  def merge!(other_hash); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#620
  def permit(*filters); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#433
  def permit!; end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#417
  def permitted?; end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#807
  def reject(&block); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#812
  def reject!(&block); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#494
  def require(key); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#494
  def required(key); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#863
  def reverse_merge(other_hash); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#872
  def reverse_merge!(other_hash); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#794
  def select(&block); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#799
  def select!(&block); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#699
  def slice(*keys); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#705
  def slice!(*keys); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#881
  def stringify_keys; end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#305
  def to_h; end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#325
  def to_hash; end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#357
  def to_param(*args); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#357
  def to_query(*args); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#233
  def to_s(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#372
  def to_unsafe_h; end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#372
  def to_unsafe_hash; end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#752
  def transform_keys(&block); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#761
  def transform_keys!(&block); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#735
  def transform_values; end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#744
  def transform_values!; end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#233
  def value?(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#233
  def values(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#842
  def values_at(*keys); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#863
  def with_defaults(other_hash); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#872
  def with_defaults!(other_hash); end

  protected

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#936
  def each_nested_attribute; end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#932
  def nested_attributes?; end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#928
  def parameters; end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#930
  def permitted=(_arg0); end

  private

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#1076
  def array_of_permitted_scalars?(value); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#964
  def convert_hashes_to_parameters(key, value); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#949
  def convert_parameters_to_hashes(value, using); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#970
  def convert_value_to_parameters(value); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#990
  def each_element(object, filter, &block); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#1088
  def hash_filter(params, filter); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#1147
  def initialize_copy(source); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#943
  def new_instance_with_inherited_permitted_status(hash); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#1082
  def non_scalar?(value); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#1132
  def permit_any_in_array(array); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#1115
  def permit_any_in_parameters(params); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#1047
  def permitted_scalar?(value); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#1061
  def permitted_scalar_filter(params, permitted_key); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#984
  def specify_numeric_keys?(filter); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#1016
  def unpermitted_keys(params); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#1003
  def unpermitted_parameters!(params); end

  class << self
    # source://actionpack//lib/action_controller/metal/strong_parameters.rb#135
    def action_on_unpermitted_parameters; end

    # source://actionpack//lib/action_controller/metal/strong_parameters.rb#135
    def action_on_unpermitted_parameters=(val); end

    # source://actionpack//lib/action_controller/metal/strong_parameters.rb#243
    def always_permitted_parameters; end

    # source://actionpack//lib/action_controller/metal/strong_parameters.rb#243
    def always_permitted_parameters=(val); end

    # source://actionpack//lib/action_controller/metal/strong_parameters.rb#889
    def hook_into_yaml_loading; end

    # source://actionpack//lib/action_controller/metal/strong_parameters.rb#246
    def nested_attribute?(key, value); end

    # source://actionpack//lib/action_controller/metal/strong_parameters.rb#133
    def permit_all_parameters; end

    # source://actionpack//lib/action_controller/metal/strong_parameters.rb#133
    def permit_all_parameters=(val); end
  end
end

# source://actionpack//lib/action_controller/metal/strong_parameters.rb#1086
ActionController::Parameters::EMPTY_ARRAY = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_controller/metal/strong_parameters.rb#1087
ActionController::Parameters::EMPTY_HASH = T.let(T.unsafe(nil), Hash)

# source://actionpack//lib/action_controller/metal/strong_parameters.rb#1031
ActionController::Parameters::PERMITTED_SCALAR_TYPES = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_controller/metal/params_wrapper.rb#80
module ActionController::ParamsWrapper
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::ParamsWrapper::ClassMethods

  private

  # source://actionpack//lib/action_controller/metal/params_wrapper.rb#277
  def _extract_parameters(parameters); end

  # source://actionpack//lib/action_controller/metal/params_wrapper.rb#299
  def _perform_parameter_wrapping; end

  # source://actionpack//lib/action_controller/metal/params_wrapper.rb#273
  def _wrap_parameters(parameters); end

  # source://actionpack//lib/action_controller/metal/params_wrapper.rb#289
  def _wrapper_enabled?; end

  # source://actionpack//lib/action_controller/metal/params_wrapper.rb#268
  def _wrapper_formats; end

  # source://actionpack//lib/action_controller/metal/params_wrapper.rb#263
  def _wrapper_key; end

  # source://actionpack//lib/action_controller/metal/params_wrapper.rb#257
  def process_action(*_arg0); end

  module GeneratedClassMethods
    def _wrapper_options; end
    def _wrapper_options=(value); end
    def _wrapper_options?; end
  end

  module GeneratedInstanceMethods
    def _wrapper_options; end
    def _wrapper_options=(value); end
    def _wrapper_options?; end
  end
end

# source://actionpack//lib/action_controller/metal/params_wrapper.rb#188
module ActionController::ParamsWrapper::ClassMethods
  # source://actionpack//lib/action_controller/metal/params_wrapper.rb#189
  def _set_wrapper_options(options); end

  # source://actionpack//lib/action_controller/metal/params_wrapper.rb#244
  def inherited(klass); end

  # source://actionpack//lib/action_controller/metal/params_wrapper.rb#220
  def wrap_parameters(name_or_model_or_options, options = T.unsafe(nil)); end
end

# source://actionpack//lib/action_controller/metal/params_wrapper.rb#83
ActionController::ParamsWrapper::EXCLUDE_PARAMETERS = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_controller/metal/params_wrapper.rb#87
class ActionController::ParamsWrapper::Options < ::Struct
  include ::Mutex_m

  # source://actionpack//lib/action_controller/metal/params_wrapper.rb#98
  def initialize(name, format, include, exclude, klass, model); end

  # source://actionpack//lib/action_controller/metal/params_wrapper.rb#108
  def include; end

  # source://mutex_m/0.1.2/mutex_m.rb#93
  def lock; end

  # source://mutex_m/0.1.2/mutex_m.rb#83
  def locked?; end

  # source://actionpack//lib/action_controller/metal/params_wrapper.rb#104
  def model; end

  # source://actionpack//lib/action_controller/metal/params_wrapper.rb#141
  def name; end

  # source://mutex_m/0.1.2/mutex_m.rb#78
  def synchronize(&block); end

  # source://mutex_m/0.1.2/mutex_m.rb#88
  def try_lock; end

  # source://mutex_m/0.1.2/mutex_m.rb#98
  def unlock; end

  private

  # source://actionpack//lib/action_controller/metal/params_wrapper.rb#165
  def _default_wrap_model; end

  class << self
    # source://actionpack//lib/action_controller/metal/params_wrapper.rb#90
    def from_hash(hash); end
  end
end

# source://actionpack//lib/action_controller/metal/permissions_policy.rb#4
module ActionController::PermissionsPolicy
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::PermissionsPolicy::ClassMethods
end

# source://actionpack//lib/action_controller/metal/permissions_policy.rb#7
module ActionController::PermissionsPolicy::ClassMethods
  # source://actionpack//lib/action_controller/metal/permissions_policy.rb#26
  def permissions_policy(**options, &block); end
end

# source://actionpack//lib/action_controller/railtie.rb#11
class ActionController::Railtie < ::Rails::Railtie; end

# source://actionpack//lib/action_controller/railties/helpers.rb#4
module ActionController::Railties; end

# source://actionpack//lib/action_controller/railties/helpers.rb#5
module ActionController::Railties::Helpers
  # source://actionpack//lib/action_controller/railties/helpers.rb#6
  def inherited(klass); end
end

# source://actionpack//lib/action_controller/metal/redirecting.rb#4
module ActionController::Redirecting
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Benchmarkable
  include ::AbstractController::Logger
  include ::ActionDispatch::Routing::UrlFor
  include ::AbstractController::UrlFor
  include ::ActionController::UrlFor

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::UrlFor::ClassMethods

  # source://actionpack//lib/action_controller/metal/redirecting.rb#130
  def _compute_redirect_to_location(request, options); end

  # source://actionpack//lib/action_controller/metal/redirecting.rb#95
  def redirect_back(fallback_location:, allow_other_host: T.unsafe(nil), **args); end

  # source://actionpack//lib/action_controller/metal/redirecting.rb#121
  def redirect_back_or_to(fallback_location, allow_other_host: T.unsafe(nil), **options); end

  # source://actionpack//lib/action_controller/metal/redirecting.rb#82
  def redirect_to(options = T.unsafe(nil), response_options = T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/metal/redirecting.rb#169
  def url_from(location); end

  private

  # source://actionpack//lib/action_controller/metal/redirecting.rb#175
  def _allow_other_host; end

  # source://actionpack//lib/action_controller/metal/redirecting.rb#189
  def _enforce_open_redirect_protection(location, allow_other_host:); end

  # source://actionpack//lib/action_controller/metal/redirecting.rb#179
  def _extract_redirect_to_status(options, response_options); end

  # source://actionpack//lib/action_controller/metal/redirecting.rb#197
  def _url_host_allowed?(url); end

  class << self
    # source://actionpack//lib/action_controller/metal/redirecting.rb#130
    def _compute_redirect_to_location(request, options); end
  end

  module GeneratedClassMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end

  module GeneratedInstanceMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end
end

# source://actionpack//lib/action_controller/metal/redirecting.rb#10
class ActionController::Redirecting::UnsafeRedirectError < ::StandardError; end

# source://actionpack//lib/action_controller/metal/exceptions.rb#14
class ActionController::RenderError < ::ActionController::ActionControllerError; end

# source://actionpack//lib/action_controller/renderer.rb#36
class ActionController::Renderer
  # source://actionpack//lib/action_controller/renderer.rb#65
  def initialize(controller, env, defaults); end

  # source://actionpack//lib/action_controller/renderer.rb#37
  def controller; end

  # source://actionpack//lib/action_controller/renderer.rb#37
  def defaults; end

  # source://actionpack//lib/action_controller/renderer.rb#53
  def new(env = T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/renderer.rb#91
  def render(*args); end

  # source://actionpack//lib/action_controller/renderer.rb#91
  def render_to_string(*args); end

  # source://actionpack//lib/action_controller/renderer.rb#58
  def with_defaults(defaults); end

  private

  # source://actionpack//lib/action_controller/renderer.rb#105
  def normalize_keys(defaults, env); end

  # source://actionpack//lib/action_controller/renderer.rb#126
  def rack_key_for(key); end

  # source://actionpack//lib/action_controller/renderer.rb#130
  def rack_value_for(key, value); end

  class << self
    # source://actionpack//lib/action_controller/renderer.rb#48
    def for(controller, env = T.unsafe(nil), defaults = T.unsafe(nil)); end
  end
end

# source://actionpack//lib/action_controller/renderer.rb#39
ActionController::Renderer::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://actionpack//lib/action_controller/renderer.rb#118
ActionController::Renderer::RACK_KEY_TRANSLATION = T.let(T.unsafe(nil), Hash)

# source://actionpack//lib/action_controller/metal/renderers.rb#23
module ActionController::Renderers
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::Renderers::ClassMethods

  # source://actionpack//lib/action_controller/metal/renderers.rb#144
  def _render_to_body_with_renderer(options); end

  # source://actionpack//lib/action_controller/metal/renderers.rb#170
  def _render_with_renderer_js(js, options); end

  # source://actionpack//lib/action_controller/metal/renderers.rb#155
  def _render_with_renderer_json(json, options); end

  # source://actionpack//lib/action_controller/metal/renderers.rb#175
  def _render_with_renderer_xml(xml, options); end

  # source://actionpack//lib/action_controller/metal/renderers.rb#140
  def render_to_body(options); end

  class << self
    # source://actionpack//lib/action_controller/metal/renderers.rb#90
    def _render_with_renderer_method_name(key); end

    # source://actionpack//lib/action_controller/metal/renderers.rb#74
    def add(key, &block); end

    # source://actionpack//lib/action_controller/metal/renderers.rb#84
    def remove(key); end
  end

  module GeneratedClassMethods
    def _renderers; end
    def _renderers=(value); end
    def _renderers?; end
  end

  module GeneratedInstanceMethods
    def _renderers; end
    def _renderers=(value); end
    def _renderers?; end
  end
end

# source://actionpack//lib/action_controller/metal/renderers.rb#36
module ActionController::Renderers::All
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionController::Renderers

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::Renderers::ClassMethods

  module GeneratedClassMethods
    def _renderers; end
    def _renderers=(value); end
    def _renderers?; end
  end

  module GeneratedInstanceMethods
    def _renderers; end
    def _renderers=(value); end
    def _renderers?; end
  end
end

# source://actionpack//lib/action_controller/metal/renderers.rb#94
module ActionController::Renderers::ClassMethods
  # source://actionpack//lib/action_controller/metal/renderers.rb#128
  def use_renderer(*args); end

  # source://actionpack//lib/action_controller/metal/renderers.rb#128
  def use_renderers(*args); end
end

# source://actionpack//lib/action_controller/metal/renderers.rb#28
ActionController::Renderers::RENDERERS = T.let(T.unsafe(nil), Set)

# source://actionpack//lib/action_controller/metal/rendering.rb#4
module ActionController::Rendering
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::Rendering::ClassMethods

  # source://actionpack//lib/action_controller/metal/rendering.rb#28
  def render(*args); end

  # source://actionpack//lib/action_controller/metal/rendering.rb#45
  def render_to_body(options = T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/metal/rendering.rb#34
  def render_to_string(*_arg0); end

  private

  # source://actionpack//lib/action_controller/metal/rendering.rb#87
  def _normalize_args(action = T.unsafe(nil), options = T.unsafe(nil), &blk); end

  # source://actionpack//lib/action_controller/metal/rendering.rb#94
  def _normalize_options(options); end

  # source://actionpack//lib/action_controller/metal/rendering.rb#108
  def _normalize_text(options); end

  # source://actionpack//lib/action_controller/metal/rendering.rb#117
  def _process_options(options); end

  # source://actionpack//lib/action_controller/metal/rendering.rb#56
  def _process_variant(options); end

  # source://actionpack//lib/action_controller/metal/rendering.rb#62
  def _render_in_priorities(options); end

  # source://actionpack//lib/action_controller/metal/rendering.rb#70
  def _set_html_content_type; end

  # source://actionpack//lib/action_controller/metal/rendering.rb#74
  def _set_rendered_content_type(format); end

  # source://actionpack//lib/action_controller/metal/rendering.rb#80
  def _set_vary_header; end

  # source://actionpack//lib/action_controller/metal/rendering.rb#51
  def process_action(*_arg0); end
end

# source://actionpack//lib/action_controller/metal/rendering.rb#9
module ActionController::Rendering::ClassMethods
  # source://actionpack//lib/action_controller/metal/rendering.rb#21
  def inherited(klass); end

  # source://actionpack//lib/action_controller/metal/rendering.rb#11
  def render(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_controller/metal/rendering.rb#15
  def renderer; end

  # source://actionpack//lib/action_controller/metal/rendering.rb#17
  def setup_renderer!; end
end

# source://actionpack//lib/action_controller/metal/rendering.rb#7
ActionController::Rendering::RENDER_FORMATS_IN_PRIORITY = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#57
module ActionController::RequestForgeryProtection
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::AbstractController::Helpers
  include ::ActiveSupport::Callbacks
  include ::AbstractController::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Helpers::ClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::AbstractController::Callbacks::ClassMethods
  mixes_in_class_methods ::ActionController::RequestForgeryProtection::ClassMethods

  private

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#344
  def any_authenticity_token_valid?; end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#430
  def compare_with_global_token(token, session); end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#426
  def compare_with_real_token(token, session); end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#464
  def csrf_token_hmac(session, identifier); end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#535
  def decode_csrf_token(encoded_csrf_token); end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#527
  def encode_csrf_token(csrf_token); end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#484
  def form_authenticity_param; end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#356
  def form_authenticity_token(form_options: T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#519
  def generate_csrf_token; end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#460
  def global_csrf_token(session); end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#277
  def handle_unverified_request; end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#316
  def mark_for_same_origin_verification!; end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#322
  def marked_for_same_origin_verification?; end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#419
  def mask_token(raw_token); end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#363
  def masked_authenticity_token(session, form_options: T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#327
  def non_xhr_javascript_response?; end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#514
  def normalize_action_path(action_path); end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#453
  def per_form_csrf_token(session, action_path, method); end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#489
  def protect_against_forgery?; end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#448
  def real_csrf_token(session); end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#351
  def request_authenticity_tokens; end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#411
  def unmask_token(masked_token); end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#287
  def unverified_request_warning_message; end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#379
  def valid_authenticity_token?(session, encoded_masked_token); end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#434
  def valid_per_form_csrf_token?(token, session); end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#504
  def valid_request_origin?; end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#338
  def verified_request?; end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#267
  def verify_authenticity_token; end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#306
  def verify_same_origin_request; end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#472
  def xor_byte_strings(s1, s2); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end
end

# source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#331
ActionController::RequestForgeryProtection::AUTHENTICITY_TOKEN_LENGTH = T.let(T.unsafe(nil), Integer)

# source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#296
ActionController::RequestForgeryProtection::CROSS_ORIGIN_JAVASCRIPT_WARNING = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#110
module ActionController::RequestForgeryProtection::ClassMethods
  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#156
  def protect_from_forgery(options = T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#170
  def skip_forgery_protection(options = T.unsafe(nil)); end

  private

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#175
  def protection_method_class(name); end
end

# source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#457
ActionController::RequestForgeryProtection::GLOBAL_CSRF_TOKEN_IDENTIFIER = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#493
ActionController::RequestForgeryProtection::NULL_ORIGIN_MESSAGE = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#191
module ActionController::RequestForgeryProtection::ProtectionMethods; end

# source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#243
class ActionController::RequestForgeryProtection::ProtectionMethods::Exception
  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#246
  def initialize(controller); end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#250
  def handle_unverified_request; end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#244
  def warning_message; end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#244
  def warning_message=(_arg0); end
end

# source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#192
class ActionController::RequestForgeryProtection::ProtectionMethods::NullSession
  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#193
  def initialize(controller); end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#198
  def handle_unverified_request; end
end

# source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#226
class ActionController::RequestForgeryProtection::ProtectionMethods::NullSession::NullCookieJar < ::ActionDispatch::Cookies::CookieJar
  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#227
  def write(*_arg0); end
end

# source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#207
class ActionController::RequestForgeryProtection::ProtectionMethods::NullSession::NullSessionHash < ::Rack::Session::Abstract::SessionHash
  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#208
  def initialize(req); end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#215
  def destroy; end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#221
  def enabled?; end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#217
  def exists?; end
end

# source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#233
class ActionController::RequestForgeryProtection::ProtectionMethods::ResetSession
  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#234
  def initialize(controller); end

  # source://actionpack//lib/action_controller/metal/request_forgery_protection.rb#238
  def handle_unverified_request; end
end

# source://actionpack//lib/action_controller/metal/rescue.rb#7
module ActionController::Rescue
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Rescuable

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Rescuable::ClassMethods

  # source://actionpack//lib/action_controller/metal/rescue.rb#16
  def show_detailed_exceptions?; end

  private

  # source://actionpack//lib/action_controller/metal/rescue.rb#21
  def process_action(*_arg0); end

  module GeneratedClassMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end

  module GeneratedInstanceMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end
end

# source://actionpack//lib/action_controller/metal/exceptions.rb#86
class ActionController::RespondToMismatchError < ::ActionController::ActionControllerError
  # source://actionpack//lib/action_controller/metal/exceptions.rb#89
  def initialize(message = T.unsafe(nil)); end
end

# source://actionpack//lib/action_controller/metal/exceptions.rb#87
ActionController::RespondToMismatchError::DEFAULT_MESSAGE = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_controller/metal/exceptions.rb#17
class ActionController::RoutingError < ::ActionController::ActionControllerError
  # source://actionpack//lib/action_controller/metal/exceptions.rb#19
  def initialize(message, failures = T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/metal/exceptions.rb#18
  def failures; end
end

# source://actionpack//lib/action_controller/metal/exceptions.rb#62
class ActionController::SessionOverflowError < ::ActionController::ActionControllerError
  # source://actionpack//lib/action_controller/metal/exceptions.rb#65
  def initialize(message = T.unsafe(nil)); end
end

# source://actionpack//lib/action_controller/metal/exceptions.rb#63
ActionController::SessionOverflowError::DEFAULT_MESSAGE = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_controller/metal/streaming.rb#195
module ActionController::Streaming
  private

  # source://actionpack//lib/action_controller/metal/streaming.rb#198
  def _process_options(options); end

  # source://actionpack//lib/action_controller/metal/streaming.rb#212
  def _render_template(options); end
end

# source://actionpack//lib/action_controller/metal/strong_parameters.rb#1221
module ActionController::StrongParameters
  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#1224
  def params; end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#1239
  def params=(value); end
end

# source://actionpack//lib/action_controller/template_assertions.rb#4
module ActionController::TemplateAssertions
  # source://actionpack//lib/action_controller/template_assertions.rb#5
  def assert_template(options = T.unsafe(nil), message = T.unsafe(nil)); end
end

# source://actionpack//lib/action_controller/test_case.rb#335
class ActionController::TestCase < ::ActiveSupport::TestCase
  include ::ActiveSupport::Testing::ConstantLookup
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionDispatch::TestProcess
  include ::ActionController::TestCase::Behavior
  include ::ActionController::TemplateAssertions
  include ::ActionDispatch::Assertions
  extend ::ActiveSupport::Testing::ConstantLookup::ClassMethods
  extend ::ActionController::TestCase::Behavior::ClassMethods

  # source://actionpack//lib/action_controller/test_case.rb#561
  def _controller_class; end

  # source://actionpack//lib/action_controller/test_case.rb#561
  def _controller_class=(_arg0); end

  # source://actionpack//lib/action_controller/test_case.rb#561
  def _controller_class?; end

  class << self
    # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack//lib/action_controller/test_case.rb#561
    def _controller_class; end

    # source://actionpack//lib/action_controller/test_case.rb#561
    def _controller_class=(value); end

    # source://actionpack//lib/action_controller/test_case.rb#561
    def _controller_class?; end

    # source://actionpack//lib/action_controller/test_case.rb#336
    def executor_around_each_request; end

    # source://actionpack//lib/action_controller/test_case.rb#336
    def executor_around_each_request=(_arg0); end
  end
end

# source://actionpack//lib/action_controller/test_case.rb#338
module ActionController::TestCase::Behavior
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionDispatch::TestProcess
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Testing::ConstantLookup
  include ::Rails::Dom::Testing::Assertions
  include ::ActionController::TemplateAssertions
  include ::ActionDispatch::Assertions

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Testing::ConstantLookup::ClassMethods
  mixes_in_class_methods ::ActionController::TestCase::Behavior::ClassMethods

  # source://actionpack//lib/action_controller/test_case.rb#554
  def build_response(klass); end

  # source://actionpack//lib/action_controller/test_case.rb#514
  def controller_class_name; end

  # source://actionpack//lib/action_controller/test_case.rb#429
  def delete(action, **args); end

  # source://actionpack//lib/action_controller/test_case.rb#518
  def generated_path(generated_extras); end

  # source://actionpack//lib/action_controller/test_case.rb#403
  def get(action, **args); end

  # source://actionpack//lib/action_controller/test_case.rb#435
  def head(action, **args); end

  # source://actionpack//lib/action_controller/test_case.rb#417
  def patch(action, **args); end

  # source://actionpack//lib/action_controller/test_case.rb#411
  def post(action, **args); end

  # source://actionpack//lib/action_controller/test_case.rb#474
  def process(action, method: T.unsafe(nil), params: T.unsafe(nil), session: T.unsafe(nil), body: T.unsafe(nil), flash: T.unsafe(nil), format: T.unsafe(nil), xhr: T.unsafe(nil), as: T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/test_case.rb#423
  def put(action, **args); end

  # source://actionpack//lib/action_controller/test_case.rb#522
  def query_parameter_names(generated_extras); end

  # source://actionpack//lib/action_controller/test_case.rb#344
  def request; end

  # source://actionpack//lib/action_controller/test_case.rb#344
  def response; end

  # source://actionpack//lib/action_controller/test_case.rb#526
  def setup_controller_request_and_response; end

  private

  # source://actionpack//lib/action_controller/test_case.rb#646
  def check_required_ivars; end

  # source://actionpack//lib/action_controller/test_case.rb#642
  def document_root_element; end

  # source://actionpack//lib/action_controller/test_case.rb#597
  def process_controller_response(action, cookies, xhr); end

  # source://actionpack//lib/action_controller/test_case.rb#632
  def scrub_env!(env); end

  # source://actionpack//lib/action_controller/test_case.rb#567
  def setup_request(controller_class_name, action, parameters, session, flash, xhr); end

  # source://actionpack//lib/action_controller/test_case.rb#589
  def wrap_execution(&block); end

  module GeneratedClassMethods
    def _controller_class; end
    def _controller_class=(value); end
    def _controller_class?; end
  end

  module GeneratedInstanceMethods
    def _controller_class; end
    def _controller_class=(value); end
    def _controller_class?; end
  end
end

# source://actionpack//lib/action_controller/test_case.rb#346
module ActionController::TestCase::Behavior::ClassMethods
  # source://actionpack//lib/action_controller/test_case.rb#368
  def controller_class; end

  # source://actionpack//lib/action_controller/test_case.rb#364
  def controller_class=(new_class); end

  # source://actionpack//lib/action_controller/test_case.rb#376
  def determine_default_controller_class(name); end

  # source://actionpack//lib/action_controller/test_case.rb#353
  def tests(controller_class); end
end

# source://actionpack//lib/action_controller/test_case.rb#34
class ActionController::TestRequest < ::ActionDispatch::TestRequest
  # source://actionpack//lib/action_controller/test_case.rb#57
  def initialize(env, session, controller_class); end

  # source://actionpack//lib/action_controller/test_case.rb#76
  def assign_parameters(routes, controller_path, action, parameters, generated_path, query_string_keys); end

  # source://actionpack//lib/action_controller/test_case.rb#72
  def content_type=(type); end

  # source://actionpack//lib/action_controller/test_case.rb#42
  def controller_class; end

  # source://actionpack//lib/action_controller/test_case.rb#68
  def query_string=(string); end

  private

  # source://actionpack//lib/action_controller/test_case.rb#164
  def params_parsers; end

  class << self
    # source://actionpack//lib/action_controller/test_case.rb#45
    def create(controller_class); end

    # source://actionpack//lib/action_controller/test_case.rb#38
    def new_session; end

    private

    # source://actionpack//lib/action_controller/test_case.rb#52
    def default_env; end
  end
end

# source://actionpack//lib/action_controller/test_case.rb#35
ActionController::TestRequest::DEFAULT_ENV = T.let(T.unsafe(nil), Hash)

# source://actionpack//lib/action_controller/test_case.rb#136
ActionController::TestRequest::ENCODER = T.let(T.unsafe(nil), T.untyped)

# source://actionpack//lib/action_controller/test_case.rb#182
class ActionController::TestSession < ::Rack::Session::Abstract::PersistedSecure::SecureSessionHash
  # source://actionpack//lib/action_controller/test_case.rb#185
  def initialize(session = T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/test_case.rb#204
  def destroy; end

  # source://actionpack//lib/action_controller/test_case.rb#208
  def dig(*keys); end

  # source://actionpack//lib/action_controller/test_case.rb#217
  def enabled?; end

  # source://actionpack//lib/action_controller/test_case.rb#192
  def exists?; end

  # source://actionpack//lib/action_controller/test_case.rb#213
  def fetch(key, *args, &block); end

  # source://actionpack//lib/action_controller/test_case.rb#196
  def keys; end

  # source://actionpack//lib/action_controller/test_case.rb#200
  def values; end

  private

  # source://actionpack//lib/action_controller/test_case.rb#222
  def load!; end
end

# source://actionpack//lib/action_controller/test_case.rb#183
ActionController::TestSession::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://actionpack//lib/action_controller/metal/testing.rb#4
module ActionController::Testing; end

# source://actionpack//lib/action_controller/metal/testing.rb#6
module ActionController::Testing::Functional
  # source://actionpack//lib/action_controller/metal/testing.rb#7
  def clear_instance_variables_between_requests; end

  # source://actionpack//lib/action_controller/metal/testing.rb#16
  def recycle!; end
end

# source://actionpack//lib/action_controller/metal/strong_parameters.rb#61
class ActionController::UnfilteredParameters < ::ArgumentError
  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#62
  def initialize; end
end

# source://actionpack//lib/action_controller/metal/exceptions.rb#73
class ActionController::UnknownFormat < ::ActionController::ActionControllerError; end

# source://actionpack//lib/action_controller/metal/exceptions.rb#70
class ActionController::UnknownHttpMethod < ::ActionController::ActionControllerError; end

# source://actionpack//lib/action_controller/metal/strong_parameters.rb#46
class ActionController::UnpermittedParameters < ::IndexError
  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#49
  def initialize(params); end

  # source://actionpack//lib/action_controller/metal/strong_parameters.rb#47
  def params; end
end

# source://actionpack//lib/action_controller/metal/url_for.rb#25
module ActionController::UrlFor
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionDispatch::Routing::UrlFor
  include ::AbstractController::UrlFor

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::UrlFor::ClassMethods

  # source://actionpack//lib/action_controller/metal/url_for.rb#30
  def url_options; end

  module GeneratedClassMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end

  module GeneratedInstanceMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end
end

# source://actionpack//lib/action_controller/metal/exceptions.rb#25
class ActionController::UrlGenerationError < ::ActionController::ActionControllerError
  include ::DidYouMean::Correctable

  # source://actionpack//lib/action_controller/metal/exceptions.rb#28
  def initialize(message, routes = T.unsafe(nil), route_name = T.unsafe(nil), method_name = T.unsafe(nil)); end

  # source://actionpack//lib/action_controller/metal/exceptions.rb#39
  def corrections; end

  # source://actionpack//lib/action_controller/metal/exceptions.rb#26
  def method_name; end

  # source://actionpack//lib/action_controller/metal/exceptions.rb#26
  def route_name; end

  # source://actionpack//lib/action_controller/metal/exceptions.rb#26
  def routes; end
end

# source://actionpack//lib/action_dispatch.rb#37
module ActionDispatch
  extend ::ActiveSupport::Autoload

  # source://actionpack//lib/action_dispatch.rb#99
  def test_app; end

  # source://actionpack//lib/action_dispatch.rb#99
  def test_app=(val); end

  class << self
    # source://actionpack//lib/action_dispatch.rb#99
    def test_app; end

    # source://actionpack//lib/action_dispatch.rb#99
    def test_app=(val); end
  end
end

# source://actionpack//lib/action_dispatch/middleware/actionable_exceptions.rb#8
class ActionDispatch::ActionableExceptions
  # source://actionpack//lib/action_dispatch/middleware/actionable_exceptions.rb#11
  def initialize(app); end

  # source://actionpack//lib/action_dispatch/middleware/actionable_exceptions.rb#15
  def call(env); end

  # source://actionpack//lib/action_dispatch/middleware/actionable_exceptions.rb#9
  def endpoint; end

  # source://actionpack//lib/action_dispatch/middleware/actionable_exceptions.rb#9
  def endpoint=(val); end

  private

  # source://actionpack//lib/action_dispatch/middleware/actionable_exceptions.rb#25
  def actionable_request?(request); end

  # source://actionpack//lib/action_dispatch/middleware/actionable_exceptions.rb#29
  def redirect_to(location); end

  class << self
    # source://actionpack//lib/action_dispatch/middleware/actionable_exceptions.rb#9
    def endpoint; end

    # source://actionpack//lib/action_dispatch/middleware/actionable_exceptions.rb#9
    def endpoint=(val); end
  end
end

# source://actionpack//lib/action_dispatch/testing/assertion_response.rb#7
class ActionDispatch::AssertionResponse
  # source://actionpack//lib/action_dispatch/testing/assertion_response.rb#20
  def initialize(code_or_name); end

  # source://actionpack//lib/action_dispatch/testing/assertion_response.rb#8
  def code; end

  # source://actionpack//lib/action_dispatch/testing/assertion_response.rb#33
  def code_and_name; end

  # source://actionpack//lib/action_dispatch/testing/assertion_response.rb#8
  def name; end

  private

  # source://actionpack//lib/action_dispatch/testing/assertion_response.rb#38
  def code_from_name(name); end

  # source://actionpack//lib/action_dispatch/testing/assertion_response.rb#42
  def name_from_code(code); end
end

# source://actionpack//lib/action_dispatch/testing/assertion_response.rb#10
ActionDispatch::AssertionResponse::GENERIC_RESPONSE_CODES = T.let(T.unsafe(nil), Hash)

# source://actionpack//lib/action_dispatch/testing/assertions/response.rb#4
module ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions

  # source://actionpack//lib/action_dispatch/testing/assertions.rb#13
  def html_document; end
end

# source://actionpack//lib/action_dispatch/testing/assertions/response.rb#6
module ActionDispatch::Assertions::ResponseAssertions
  # source://actionpack//lib/action_dispatch/testing/assertions/response.rb#53
  def assert_redirected_to(options = T.unsafe(nil), message = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/testing/assertions/response.rb#30
  def assert_response(type, message = T.unsafe(nil)); end

  private

  # source://actionpack//lib/action_dispatch/testing/assertions/response.rb#95
  def code_with_name(code_or_name); end

  # source://actionpack//lib/action_dispatch/testing/assertions/response.rb#79
  def generate_response_message(expected, actual = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/testing/assertions/response.rb#89
  def location_if_redirected; end

  # source://actionpack//lib/action_dispatch/testing/assertions/response.rb#70
  def normalize_argument_to_redirection(fragment); end

  # source://actionpack//lib/action_dispatch/testing/assertions/response.rb#66
  def parameterize(value); end

  # source://actionpack//lib/action_dispatch/testing/assertions/response.rb#84
  def response_body_if_short; end
end

# source://actionpack//lib/action_dispatch/testing/assertions/response.rb#7
ActionDispatch::Assertions::ResponseAssertions::RESPONSE_PREDICATES = T.let(T.unsafe(nil), Hash)

# source://actionpack//lib/action_dispatch/testing/assertions/routing.rb#11
module ActionDispatch::Assertions::RoutingAssertions
  # source://actionpack//lib/action_dispatch/testing/assertions/routing.rb#85
  def assert_generates(expected_path, options, defaults = T.unsafe(nil), extras = T.unsafe(nil), message = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/testing/assertions/routing.rb#47
  def assert_recognizes(expected_options, path, extras = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/testing/assertions/routing.rb#128
  def assert_routing(path, options, defaults = T.unsafe(nil), extras = T.unsafe(nil), message = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/testing/assertions/routing.rb#183
  def method_missing(selector, *args, **_arg2, &block); end

  # source://actionpack//lib/action_dispatch/testing/assertions/routing.rb#12
  def setup; end

  # source://actionpack//lib/action_dispatch/testing/assertions/routing.rb#153
  def with_routing; end

  private

  # source://actionpack//lib/action_dispatch/testing/assertions/routing.rb#228
  def fail_on(exception_class, message); end

  # source://actionpack//lib/action_dispatch/testing/assertions/routing.rb#194
  def recognized_request_for(path, extras = T.unsafe(nil), msg); end
end

# source://actionpack//lib/action_dispatch/middleware/callbacks.rb#5
class ActionDispatch::Callbacks
  include ::ActiveSupport::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker

  # source://actionpack//lib/action_dispatch/middleware/callbacks.rb#20
  def initialize(app); end

  # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#940
  def _call_callbacks; end

  # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#928
  def _run_call_callbacks(&block); end

  # source://actionpack//lib/action_dispatch/middleware/callbacks.rb#24
  def call(env); end

  class << self
    # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#932
    def _call_callbacks; end

    # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#936
    def _call_callbacks=(value); end

    # source://actionpack//lib/action_dispatch/middleware/callbacks.rb#15
    def after(*args, &block); end

    # source://actionpack//lib/action_dispatch/middleware/callbacks.rb#11
    def before(*args, &block); end
  end
end

# source://actionpack//lib/action_dispatch/http/content_security_policy.rb#24
class ActionDispatch::ContentSecurityPolicy
  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#169
  def initialize; end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#179
  def base_uri(*sources); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#197
  def block_all_mixed_content(enabled = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#286
  def build(context = T.unsafe(nil), nonce = T.unsafe(nil), nonce_directives = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#179
  def child_src(*sources); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#179
  def connect_src(*sources); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#179
  def default_src(*sources); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#167
  def directives; end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#179
  def font_src(*sources); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#179
  def form_action(*sources); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#179
  def frame_ancestors(*sources); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#179
  def frame_src(*sources); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#179
  def img_src(*sources); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#179
  def manifest_src(*sources); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#179
  def media_src(*sources); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#179
  def object_src(*sources); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#213
  def plugin_types(*types); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#179
  def prefetch_src(*sources); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#226
  def report_uri(uri); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#239
  def require_sri_for(*types); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#179
  def require_trusted_types_for(*sources); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#260
  def sandbox(*values); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#179
  def script_src(*sources); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#179
  def script_src_attr(*sources); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#179
  def script_src_elem(*sources); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#179
  def style_src(*sources); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#179
  def style_src_attr(*sources); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#179
  def style_src_elem(*sources); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#179
  def trusted_types(*sources); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#278
  def upgrade_insecure_requests(enabled = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#179
  def worker_src(*sources); end

  private

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#305
  def apply_mapping(source); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#292
  def apply_mappings(sources); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#327
  def build_directive(sources, context); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#311
  def build_directives(context, nonce, nonce_directives); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#174
  def initialize_copy(other); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#349
  def nonce_directive?(directive, nonce_directives); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#331
  def resolve_source(source, context); end
end

# source://actionpack//lib/action_dispatch/http/content_security_policy.rb#163
ActionDispatch::ContentSecurityPolicy::DEFAULT_NONCE_DIRECTIVES = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/http/content_security_policy.rb#138
ActionDispatch::ContentSecurityPolicy::DIRECTIVES = T.let(T.unsafe(nil), Hash)

# source://actionpack//lib/action_dispatch/http/content_security_policy.rb#119
ActionDispatch::ContentSecurityPolicy::MAPPINGS = T.let(T.unsafe(nil), Hash)

# source://actionpack//lib/action_dispatch/http/content_security_policy.rb#25
class ActionDispatch::ContentSecurityPolicy::Middleware
  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#30
  def initialize(app); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#34
  def call(env); end

  private

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#51
  def header_name(request); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#59
  def policy_present?(headers); end
end

# source://actionpack//lib/action_dispatch/http/content_security_policy.rb#26
ActionDispatch::ContentSecurityPolicy::Middleware::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/content_security_policy.rb#27
ActionDispatch::ContentSecurityPolicy::Middleware::POLICY = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/content_security_policy.rb#28
ActionDispatch::ContentSecurityPolicy::Middleware::POLICY_REPORT_ONLY = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/content_security_policy.rb#64
module ActionDispatch::ContentSecurityPolicy::Request
  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#71
  def content_security_policy; end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#75
  def content_security_policy=(policy); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#103
  def content_security_policy_nonce; end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#95
  def content_security_policy_nonce_directives; end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#99
  def content_security_policy_nonce_directives=(generator); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#87
  def content_security_policy_nonce_generator; end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#91
  def content_security_policy_nonce_generator=(generator); end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#79
  def content_security_policy_report_only; end

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#83
  def content_security_policy_report_only=(value); end

  private

  # source://actionpack//lib/action_dispatch/http/content_security_policy.rb#114
  def generate_content_security_policy_nonce; end
end

# source://actionpack//lib/action_dispatch/http/content_security_policy.rb#68
ActionDispatch::ContentSecurityPolicy::Request::NONCE = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/content_security_policy.rb#69
ActionDispatch::ContentSecurityPolicy::Request::NONCE_DIRECTIVES = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/content_security_policy.rb#67
ActionDispatch::ContentSecurityPolicy::Request::NONCE_GENERATOR = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/content_security_policy.rb#65
ActionDispatch::ContentSecurityPolicy::Request::POLICY = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/content_security_policy.rb#66
ActionDispatch::ContentSecurityPolicy::Request::POLICY_REPORT_ONLY = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#182
class ActionDispatch::Cookies
  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#697
  def initialize(app); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#701
  def call(env); end
end

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#188
ActionDispatch::Cookies::AUTHENTICATED_ENCRYPTED_COOKIE_SALT = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#485
class ActionDispatch::Cookies::AbstractCookieJar
  include ::ActionDispatch::Cookies::ChainedCookieJars

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#488
  def initialize(parent_jar); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#492
  def [](name); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#504
  def []=(name, options); end

  protected

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#516
  def request; end

  private

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#534
  def commit(name, options); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#527
  def cookie_metadata(name, options); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#519
  def expiry_options(options); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#533
  def parse(name, data, purpose: T.unsafe(nil)); end
end

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#194
ActionDispatch::Cookies::COOKIES_DIGEST = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#195
ActionDispatch::Cookies::COOKIES_ROTATIONS = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#196
ActionDispatch::Cookies::COOKIES_SAME_SITE_PROTECTION = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#193
ActionDispatch::Cookies::COOKIES_SERIALIZER = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#206
module ActionDispatch::Cookies::ChainedCookieJars
  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#252
  def encrypted; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#218
  def permanent; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#234
  def signed; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#258
  def signed_or_encrypted; end

  private

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#281
  def encrypted_cookie_cipher; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#275
  def prepare_upgrade_legacy_hmac_aes_cbc_cookies?; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#285
  def signed_cookie_digest; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#268
  def upgrade_legacy_hmac_aes_cbc_cookies?; end
end

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#290
class ActionDispatch::Cookies::CookieJar
  include ::ActionDispatch::Cookies::ChainedCookieJars
  include ::Enumerable

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#301
  def initialize(request); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#322
  def [](name); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#356
  def []=(name, options); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#410
  def always_write_cookie; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#410
  def always_write_cookie=(val); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#400
  def clear(options = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#311
  def commit!; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#309
  def committed?; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#379
  def delete(name, options = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#393
  def deleted?(name, options = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#317
  def each(&block); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#326
  def fetch(name, *args, &block); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#330
  def has_key?(name); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#330
  def key?(name); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#299
  def request; end

  def to_hash(*_arg0); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#350
  def to_header; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#338
  def update(other_hash); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#343
  def update_cookies_from_jar; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#404
  def write(headers); end

  private

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#413
  def escape(string); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#434
  def handle_options(options); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#417
  def make_set_cookie_header(header); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#430
  def write_cookie?(cookie); end

  class << self
    # source://actionpack//lib/action_dispatch/middleware/cookies.rb#410
    def always_write_cookie; end

    # source://actionpack//lib/action_dispatch/middleware/cookies.rb#410
    def always_write_cookie=(val); end

    # source://actionpack//lib/action_dispatch/middleware/cookies.rb#293
    def build(req, cookies); end
  end
end

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#203
class ActionDispatch::Cookies::CookieOverflow < ::StandardError; end

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#190
ActionDispatch::Cookies::ENCRYPTED_COOKIE_CIPHER = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#186
ActionDispatch::Cookies::ENCRYPTED_COOKIE_SALT = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#187
ActionDispatch::Cookies::ENCRYPTED_SIGNED_COOKIE_SALT = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#645
class ActionDispatch::Cookies::EncryptedKeyRotatingCookieJar < ::ActionDispatch::Cookies::AbstractCookieJar
  include ::ActionDispatch::Cookies::SerializedCookieJars

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#648
  def initialize(parent_jar); end

  private

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#690
  def commit(name, options); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#682
  def parse(name, encrypted_message, purpose: T.unsafe(nil)); end
end

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#184
ActionDispatch::Cookies::GENERATOR_KEY = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#183
ActionDispatch::Cookies::HTTP_HEADER = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#556
class ActionDispatch::Cookies::JsonSerializer
  class << self
    # source://actionpack//lib/action_dispatch/middleware/cookies.rb#561
    def dump(value); end

    # source://actionpack//lib/action_dispatch/middleware/cookies.rb#557
    def load(value); end
  end
end

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#200
ActionDispatch::Cookies::MAX_COOKIE_SIZE = T.let(T.unsafe(nil), Integer)

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#544
class ActionDispatch::Cookies::MarshalWithJsonFallback
  class << self
    # source://actionpack//lib/action_dispatch/middleware/cookies.rb#551
    def dump(value); end

    # source://actionpack//lib/action_dispatch/middleware/cookies.rb#545
    def load(value); end
  end
end

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#537
class ActionDispatch::Cookies::PermanentCookieJar < ::ActionDispatch::Cookies::AbstractCookieJar
  private

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#539
  def commit(name, options); end
end

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#192
ActionDispatch::Cookies::SECRET_KEY_BASE = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#191
ActionDispatch::Cookies::SIGNED_COOKIE_DIGEST = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#185
ActionDispatch::Cookies::SIGNED_COOKIE_SALT = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#566
module ActionDispatch::Cookies::SerializedCookieJars
  protected

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#579
  def deserialize(name); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#611
  def digest; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#571
  def needs_migration?(value); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#575
  def serialize(value); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#599
  def serializer; end
end

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#567
ActionDispatch::Cookies::SerializedCookieJars::MARSHAL_SIGNATURE = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#568
ActionDispatch::Cookies::SerializedCookieJars::SERIALIZER = ActiveSupport::MessageEncryptor::NullSerializer

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#616
class ActionDispatch::Cookies::SignedKeyRotatingCookieJar < ::ActionDispatch::Cookies::AbstractCookieJar
  include ::ActionDispatch::Cookies::SerializedCookieJars

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#619
  def initialize(parent_jar); end

  private

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#638
  def commit(name, options); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#632
  def parse(name, signed_message, purpose: T.unsafe(nil)); end
end

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#189
ActionDispatch::Cookies::USE_AUTHENTICATED_COOKIE_ENCRYPTION = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#197
ActionDispatch::Cookies::USE_COOKIES_WITH_METADATA = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/middleware/debug_exceptions.rb#11
class ActionDispatch::DebugExceptions
  # source://actionpack//lib/action_dispatch/middleware/debug_exceptions.rb#19
  def initialize(app, routes_app = T.unsafe(nil), response_format = T.unsafe(nil), interceptors = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/middleware/debug_exceptions.rb#26
  def call(env); end

  private

  # source://actionpack//lib/action_dispatch/middleware/debug_exceptions.rb#176
  def api_request?(content_type); end

  # source://actionpack//lib/action_dispatch/middleware/debug_exceptions.rb#114
  def create_template(request, wrapper); end

  # source://actionpack//lib/action_dispatch/middleware/debug_exceptions.rb#43
  def invoke_interceptors(request, exception); end

  # source://actionpack//lib/action_dispatch/middleware/debug_exceptions.rb#152
  def log_array(logger, lines); end

  # source://actionpack//lib/action_dispatch/middleware/debug_exceptions.rb#133
  def log_error(request, wrapper); end

  # source://actionpack//lib/action_dispatch/middleware/debug_exceptions.rb#180
  def log_rescued_responses?(request); end

  # source://actionpack//lib/action_dispatch/middleware/debug_exceptions.rb#162
  def logger(request); end

  # source://actionpack//lib/action_dispatch/middleware/debug_exceptions.rb#129
  def render(status, body, format); end

  # source://actionpack//lib/action_dispatch/middleware/debug_exceptions.rb#54
  def render_exception(request, exception); end

  # source://actionpack//lib/action_dispatch/middleware/debug_exceptions.rb#90
  def render_for_api_request(content_type, wrapper); end

  # source://actionpack//lib/action_dispatch/middleware/debug_exceptions.rb#76
  def render_for_browser_request(request, wrapper); end

  # source://actionpack//lib/action_dispatch/middleware/debug_exceptions.rb#170
  def routes_inspector(exception); end

  # source://actionpack//lib/action_dispatch/middleware/debug_exceptions.rb#166
  def stderr_logger; end

  class << self
    # source://actionpack//lib/action_dispatch/middleware/debug_exceptions.rb#12
    def interceptors; end

    # source://actionpack//lib/action_dispatch/middleware/debug_exceptions.rb#14
    def register_interceptor(object = T.unsafe(nil), &block); end
  end
end

# source://actionpack//lib/action_dispatch/middleware/debug_locks.rb#25
class ActionDispatch::DebugLocks
  # source://actionpack//lib/action_dispatch/middleware/debug_locks.rb#26
  def initialize(app, path = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/middleware/debug_locks.rb#31
  def call(env); end

  private

  # source://actionpack//lib/action_dispatch/middleware/debug_locks.rb#103
  def blocked_by?(victim, blocker, all_threads); end

  # source://actionpack//lib/action_dispatch/middleware/debug_locks.rb#45
  def render_details(req); end
end

# source://actionpack//lib/action_dispatch/middleware/debug_view.rb#9
class ActionDispatch::DebugView < ::ActionView::Base
  # source://actionpack//lib/action_dispatch/middleware/debug_view.rb#12
  def initialize(assigns); end

  # source://actionpack//lib/action_dispatch/middleware/debug_view.rb#18
  def compiled_method_container; end

  # source://actionpack//lib/action_dispatch/middleware/debug_view.rb#42
  def debug_hash(object); end

  # source://actionpack//lib/action_dispatch/middleware/debug_view.rb#34
  def debug_headers(headers); end

  # source://actionpack//lib/action_dispatch/middleware/debug_view.rb#22
  def debug_params(params); end

  # source://actionpack//lib/action_dispatch/middleware/debug_view.rb#60
  def params_valid?; end

  # source://actionpack//lib/action_dispatch/middleware/debug_view.rb#56
  def protect_against_forgery?; end

  # source://actionpack//lib/action_dispatch/middleware/debug_view.rb#46
  def render(*_arg0); end
end

# source://actionpack//lib/action_dispatch/middleware/debug_view.rb#10
ActionDispatch::DebugView::RESCUES_TEMPLATE_PATH = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#7
class ActionDispatch::ExceptionWrapper
  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#46
  def initialize(backtrace_cleaner, exception); end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#77
  def application_trace; end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#44
  def backtrace_cleaner; end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#44
  def exception; end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#71
  def exception_trace; end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#44
  def file; end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#81
  def framework_trace; end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#85
  def full_trace; end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#44
  def line_number; end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#121
  def rescue_response?; end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#8
  def rescue_responses; end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#8
  def rescue_responses=(val); end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#63
  def rescue_template; end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#26
  def rescue_templates; end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#26
  def rescue_templates=(val); end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#39
  def silent_exceptions; end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#39
  def silent_exceptions=(val); end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#125
  def source_extracts; end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#144
  def source_to_show_id; end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#67
  def status_code; end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#136
  def trace_to_show; end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#89
  def traces; end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#55
  def unwrapped_exception; end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#44
  def wrapped_causes; end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#35
  def wrapper_exceptions; end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#35
  def wrapper_exceptions=(val); end

  private

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#149
  def backtrace; end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#153
  def causes_for(exception); end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#163
  def clean_backtrace(*args); end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#190
  def expand_backtrace; end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#183
  def extract_file_and_line_number(trace); end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#171
  def source_fragment(path, line); end

  # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#159
  def wrapped_causes_for(exception, backtrace_cleaner); end

  class << self
    # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#8
    def rescue_responses; end

    # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#8
    def rescue_responses=(val); end

    # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#26
    def rescue_templates; end

    # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#26
    def rescue_templates=(val); end

    # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#39
    def silent_exceptions; end

    # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#39
    def silent_exceptions=(val); end

    # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#117
    def status_code_for_exception(class_name); end

    # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#35
    def wrapper_exceptions; end

    # source://actionpack//lib/action_dispatch/middleware/exception_wrapper.rb#35
    def wrapper_exceptions=(val); end
  end
end

# source://actionpack//lib/action_dispatch/middleware/executor.rb#6
class ActionDispatch::Executor
  # source://actionpack//lib/action_dispatch/middleware/executor.rb#7
  def initialize(app, executor); end

  # source://actionpack//lib/action_dispatch/middleware/executor.rb#11
  def call(env); end
end

# source://actionpack//lib/action_dispatch/middleware/static.rb#41
class ActionDispatch::FileHandler
  # source://actionpack//lib/action_dispatch/middleware/static.rb#49
  def initialize(root, index: T.unsafe(nil), headers: T.unsafe(nil), precompressed: T.unsafe(nil), compressible_content_types: T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/middleware/static.rb#63
  def attempt(env); end

  # source://actionpack//lib/action_dispatch/middleware/static.rb#59
  def call(env); end

  private

  # source://actionpack//lib/action_dispatch/middleware/static.rb#179
  def clean_path(path_info); end

  # source://actionpack//lib/action_dispatch/middleware/static.rb#143
  def compressible?(content_type); end

  # source://actionpack//lib/action_dispatch/middleware/static.rb#156
  def each_candidate_filepath(path_info); end

  # source://actionpack//lib/action_dispatch/middleware/static.rb#147
  def each_precompressed_filepath(filepath); end

  # source://actionpack//lib/action_dispatch/middleware/static.rb#138
  def file_readable?(path); end

  # source://actionpack//lib/action_dispatch/middleware/static.rb#98
  def find_file(path_info, accept_encoding:); end

  # source://actionpack//lib/action_dispatch/middleware/static.rb#74
  def serve(request, filepath, content_headers); end

  # source://actionpack//lib/action_dispatch/middleware/static.rb#106
  def try_files(filepath, content_type, accept_encoding:); end

  # source://actionpack//lib/action_dispatch/middleware/static.rb#116
  def try_precompressed_files(filepath, headers, accept_encoding:); end
end

# source://actionpack//lib/action_dispatch/middleware/static.rb#43
ActionDispatch::FileHandler::PRECOMPRESSED = T.let(T.unsafe(nil), Hash)

# source://actionpack//lib/action_dispatch/middleware/flash.rb#41
class ActionDispatch::Flash
  class << self
    # source://actionpack//lib/action_dispatch/middleware/flash.rb#293
    def new(app); end
  end
end

# source://actionpack//lib/action_dispatch/middleware/flash.rb#110
class ActionDispatch::Flash::FlashHash
  include ::Enumerable

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#140
  def initialize(flashes = T.unsafe(nil), discard = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#160
  def [](k); end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#154
  def []=(k, v); end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#261
  def alert; end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#266
  def alert=(message); end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#193
  def clear; end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#178
  def delete(key); end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#246
  def discard(k = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#198
  def each(&block); end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#189
  def empty?; end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#236
  def keep(k = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#174
  def key?(name); end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#170
  def keys; end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#164
  def merge!(h); end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#271
  def notice; end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#276
  def notice=(message); end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#228
  def now; end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#204
  def replace(h); end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#255
  def sweep; end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#185
  def to_hash; end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#134
  def to_session_value; end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#164
  def update(h); end

  protected

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#281
  def now_is_loaded?; end

  private

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#146
  def initialize_copy(other); end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#286
  def stringify_array(array); end

  class << self
    # source://actionpack//lib/action_dispatch/middleware/flash.rb#113
    def from_session_value(value); end
  end
end

# source://actionpack//lib/action_dispatch/middleware/flash.rb#81
class ActionDispatch::Flash::FlashNow
  # source://actionpack//lib/action_dispatch/middleware/flash.rb#84
  def initialize(flash); end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#95
  def [](k); end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#88
  def []=(k, v); end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#100
  def alert=(message); end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#82
  def flash; end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#82
  def flash=(_arg0); end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#105
  def notice=(message); end
end

# source://actionpack//lib/action_dispatch/middleware/flash.rb#42
ActionDispatch::Flash::KEY = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/middleware/flash.rb#44
module ActionDispatch::Flash::RequestMethods
  # source://actionpack//lib/action_dispatch/middleware/flash.rb#62
  def commit_flash; end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#48
  def flash; end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#54
  def flash=(flash); end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#58
  def flash_hash; end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#75
  def reset_session; end
end

# source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#18
class ActionDispatch::HostAuthorization
  # source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#122
  def initialize(app, hosts, exclude: T.unsafe(nil), response_app: T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#130
  def call(env); end

  private

  # source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#144
  def authorized?(request); end

  # source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#151
  def excluded?(request); end

  # source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#155
  def mark_as_authorized(request); end
end

# source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#19
ActionDispatch::HostAuthorization::ALLOWED_HOSTS_IN_DEVELOPMENT = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#83
class ActionDispatch::HostAuthorization::DefaultResponseApp
  # source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#86
  def call(env); end

  private

  # source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#117
  def available_logger(request); end

  # source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#109
  def log_error(request); end

  # source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#102
  def response(format, body); end

  # source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#95
  def response_body(request); end
end

# source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#84
ActionDispatch::HostAuthorization::DefaultResponseApp::RESPONSE_STATUS = T.let(T.unsafe(nil), Integer)

# source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#21
ActionDispatch::HostAuthorization::IPV4_HOSTNAME = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#22
ActionDispatch::HostAuthorization::IPV6_HOSTNAME = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#23
ActionDispatch::HostAuthorization::IPV6_HOSTNAME_WITH_PORT = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#20
ActionDispatch::HostAuthorization::PORT_REGEX = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#30
class ActionDispatch::HostAuthorization::Permissions
  # source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#31
  def initialize(hosts); end

  # source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#39
  def allows?(host); end

  # source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#35
  def empty?; end

  private

  # source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#78
  def extract_hostname(host); end

  # source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#56
  def sanitize_hosts(hosts); end

  # source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#66
  def sanitize_regexp(host); end

  # source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#70
  def sanitize_string(host); end
end

# source://actionpack//lib/action_dispatch/middleware/host_authorization.rb#24
ActionDispatch::HostAuthorization::VALID_IP_HOSTNAME = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch.rb#80
module ActionDispatch::Http
  extend ::ActiveSupport::Autoload
end

# source://actionpack//lib/action_dispatch/http/cache.rb#5
module ActionDispatch::Http::Cache; end

# source://actionpack//lib/action_dispatch/http/cache.rb#6
module ActionDispatch::Http::Cache::Request
  # source://actionpack//lib/action_dispatch/http/cache.rb#28
  def etag_matches?(etag); end

  # source://actionpack//lib/action_dispatch/http/cache.rb#38
  def fresh?(response); end

  # source://actionpack//lib/action_dispatch/http/cache.rb#10
  def if_modified_since; end

  # source://actionpack//lib/action_dispatch/http/cache.rb#16
  def if_none_match; end

  # source://actionpack//lib/action_dispatch/http/cache.rb#20
  def if_none_match_etags; end

  # source://actionpack//lib/action_dispatch/http/cache.rb#24
  def not_modified?(modified_at); end
end

# source://actionpack//lib/action_dispatch/http/cache.rb#7
ActionDispatch::Http::Cache::Request::HTTP_IF_MODIFIED_SINCE = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/cache.rb#8
ActionDispatch::Http::Cache::Request::HTTP_IF_NONE_MATCH = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/cache.rb#51
module ActionDispatch::Http::Cache::Response
  # source://actionpack//lib/action_dispatch/http/cache.rb#52
  def cache_control; end

  # source://actionpack//lib/action_dispatch/http/cache.rb#68
  def date; end

  # source://actionpack//lib/action_dispatch/http/cache.rb#78
  def date=(utc_time); end

  # source://actionpack//lib/action_dispatch/http/cache.rb#74
  def date?; end

  # source://actionpack//lib/action_dispatch/http/cache.rb#101
  def etag=(weak_validators); end

  # source://actionpack//lib/action_dispatch/http/cache.rb#113
  def etag?; end

  # source://actionpack//lib/action_dispatch/http/cache.rb#54
  def last_modified; end

  # source://actionpack//lib/action_dispatch/http/cache.rb#64
  def last_modified=(utc_time); end

  # source://actionpack//lib/action_dispatch/http/cache.rb#60
  def last_modified?; end

  # source://actionpack//lib/action_dispatch/http/cache.rb#109
  def strong_etag=(strong_validators); end

  # source://actionpack//lib/action_dispatch/http/cache.rb#121
  def strong_etag?; end

  # source://actionpack//lib/action_dispatch/http/cache.rb#105
  def weak_etag=(weak_validators); end

  # source://actionpack//lib/action_dispatch/http/cache.rb#116
  def weak_etag?; end

  private

  # source://actionpack//lib/action_dispatch/http/cache.rb#146
  def cache_control_headers; end

  # source://actionpack//lib/action_dispatch/http/cache.rb#138
  def cache_control_segments; end

  # source://actionpack//lib/action_dispatch/http/cache.rb#134
  def generate_strong_etag(validators); end

  # source://actionpack//lib/action_dispatch/http/cache.rb#130
  def generate_weak_etag(validators); end

  # source://actionpack//lib/action_dispatch/http/cache.rb#175
  def handle_conditional_get!; end

  # source://actionpack//lib/action_dispatch/http/cache.rb#185
  def merge_and_normalize_cache_control!(cache_control); end

  # source://actionpack//lib/action_dispatch/http/cache.rb#164
  def prepare_cache_control!; end
end

# source://actionpack//lib/action_dispatch/http/cache.rb#126
ActionDispatch::Http::Cache::Response::DATE = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/cache.rb#168
ActionDispatch::Http::Cache::Response::DEFAULT_CACHE_CONTROL = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/cache.rb#127
ActionDispatch::Http::Cache::Response::LAST_MODIFIED = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/cache.rb#173
ActionDispatch::Http::Cache::Response::MUST_REVALIDATE = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/cache.rb#170
ActionDispatch::Http::Cache::Response::NO_CACHE = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/cache.rb#169
ActionDispatch::Http::Cache::Response::NO_STORE = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/cache.rb#172
ActionDispatch::Http::Cache::Response::PRIVATE = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/cache.rb#171
ActionDispatch::Http::Cache::Response::PUBLIC = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/cache.rb#128
ActionDispatch::Http::Cache::Response::SPECIAL_KEYS = T.let(T.unsafe(nil), Set)

# source://actionpack//lib/action_dispatch/http/content_disposition.rb#5
class ActionDispatch::Http::ContentDisposition
  # source://actionpack//lib/action_dispatch/http/content_disposition.rb#12
  def initialize(disposition:, filename:); end

  # source://actionpack//lib/action_dispatch/http/content_disposition.rb#19
  def ascii_filename; end

  # source://actionpack//lib/action_dispatch/http/content_disposition.rb#10
  def disposition; end

  # source://actionpack//lib/action_dispatch/http/content_disposition.rb#10
  def filename; end

  # source://actionpack//lib/action_dispatch/http/content_disposition.rb#29
  def to_s; end

  # source://actionpack//lib/action_dispatch/http/content_disposition.rb#25
  def utf8_filename; end

  private

  # source://actionpack//lib/action_dispatch/http/content_disposition.rb#38
  def percent_escape(string, pattern); end

  class << self
    # source://actionpack//lib/action_dispatch/http/content_disposition.rb#6
    def format(disposition:, filename:); end
  end
end

# source://actionpack//lib/action_dispatch/http/content_disposition.rb#23
ActionDispatch::Http::ContentDisposition::RFC_5987_ESCAPED_CHAR = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch/http/content_disposition.rb#17
ActionDispatch::Http::ContentDisposition::TRADITIONAL_ESCAPED_CHAR = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch/http/filter_parameters.rb#34
module ActionDispatch::Http::FilterParameters
  # source://actionpack//lib/action_dispatch/http/filter_parameters.rb#39
  def initialize; end

  # source://actionpack//lib/action_dispatch/http/filter_parameters.rb#54
  def filtered_env; end

  # source://actionpack//lib/action_dispatch/http/filter_parameters.rb#47
  def filtered_parameters; end

  # source://actionpack//lib/action_dispatch/http/filter_parameters.rb#59
  def filtered_path; end

  private

  # source://actionpack//lib/action_dispatch/http/filter_parameters.rb#70
  def env_filter; end

  # source://actionpack//lib/action_dispatch/http/filter_parameters.rb#83
  def filtered_query_string; end

  # source://actionpack//lib/action_dispatch/http/filter_parameters.rb#64
  def parameter_filter; end

  # source://actionpack//lib/action_dispatch/http/filter_parameters.rb#77
  def parameter_filter_for(filters); end
end

# source://actionpack//lib/action_dispatch/http/filter_parameters.rb#35
ActionDispatch::Http::FilterParameters::ENV_MATCH = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/http/filter_parameters.rb#81
ActionDispatch::Http::FilterParameters::KV_RE = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/filter_parameters.rb#37
ActionDispatch::Http::FilterParameters::NULL_ENV_FILTER = T.let(T.unsafe(nil), ActiveSupport::ParameterFilter)

# source://actionpack//lib/action_dispatch/http/filter_parameters.rb#36
ActionDispatch::Http::FilterParameters::NULL_PARAM_FILTER = T.let(T.unsafe(nil), ActiveSupport::ParameterFilter)

# source://actionpack//lib/action_dispatch/http/filter_parameters.rb#82
ActionDispatch::Http::FilterParameters::PAIR_RE = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch/http/filter_redirect.rb#5
module ActionDispatch::Http::FilterRedirect
  # source://actionpack//lib/action_dispatch/http/filter_redirect.rb#8
  def filtered_location; end

  private

  # source://actionpack//lib/action_dispatch/http/filter_redirect.rb#25
  def location_filter_match?; end

  # source://actionpack//lib/action_dispatch/http/filter_redirect.rb#17
  def location_filters; end
end

# source://actionpack//lib/action_dispatch/http/filter_redirect.rb#6
ActionDispatch::Http::FilterRedirect::FILTERED = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/headers.rb#24
class ActionDispatch::Http::Headers
  include ::Enumerable

  # source://actionpack//lib/action_dispatch/http/headers.rb#54
  def initialize(request); end

  # source://actionpack//lib/action_dispatch/http/headers.rb#59
  def [](key); end

  # source://actionpack//lib/action_dispatch/http/headers.rb#64
  def []=(key, value); end

  # source://actionpack//lib/action_dispatch/http/headers.rb#69
  def add(key, value); end

  # source://actionpack//lib/action_dispatch/http/headers.rb#95
  def each(&block); end

  # source://actionpack//lib/action_dispatch/http/headers.rb#116
  def env; end

  # source://actionpack//lib/action_dispatch/http/headers.rb#87
  def fetch(key, default = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/http/headers.rb#73
  def include?(key); end

  # source://actionpack//lib/action_dispatch/http/headers.rb#73
  def key?(key); end

  # source://actionpack//lib/action_dispatch/http/headers.rb#101
  def merge(headers_or_env); end

  # source://actionpack//lib/action_dispatch/http/headers.rb#110
  def merge!(headers_or_env); end

  private

  # source://actionpack//lib/action_dispatch/http/headers.rb#121
  def env_name(key); end

  class << self
    # source://actionpack//lib/action_dispatch/http/headers.rb#50
    def from_hash(hash); end
  end
end

# source://actionpack//lib/action_dispatch/http/headers.rb#25
ActionDispatch::Http::Headers::CGI_VARIABLES = T.let(T.unsafe(nil), Set)

# source://actionpack//lib/action_dispatch/http/headers.rb#78
ActionDispatch::Http::Headers::DEFAULT = T.let(T.unsafe(nil), Object)

# source://actionpack//lib/action_dispatch/http/headers.rb#46
ActionDispatch::Http::Headers::HTTP_HEADER = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#7
module ActionDispatch::Http::MimeNegotiation
  extend ::ActiveSupport::Concern

  # source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#54
  def accepts; end

  # source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#23
  def content_mime_type; end

  # source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#36
  def content_type; end

  # source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#75
  def format(view_path = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#127
  def format=(extension); end

  # source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#79
  def formats; end

  # source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#146
  def formats=(extensions); end

  # source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#49
  def has_content_type?; end

  # source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#154
  def negotiate_mime(order); end

  # source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#166
  def should_apply_vary_header?; end

  # source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#112
  def variant; end

  # source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#102
  def variant=(variant); end

  private

  # source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#190
  def format_from_path_extension; end

  # source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#175
  def params_readable?; end

  # source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#186
  def use_accept_header; end

  # source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#181
  def valid_accept_header; end
end

# source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#173
ActionDispatch::Http::MimeNegotiation::BROWSER_LIKE_ACCEPTS = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#10
class ActionDispatch::Http::MimeNegotiation::InvalidType < ::Mime::Type::InvalidMimeType; end

# source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#12
ActionDispatch::Http::MimeNegotiation::RESCUABLE_MIME_FORMAT_ERRORS = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/http/parameters.rb#5
module ActionDispatch::Http::Parameters
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionDispatch::Http::Parameters::ClassMethods

  # source://actionpack//lib/action_dispatch/http/parameters.rb#50
  def parameters; end

  # source://actionpack//lib/action_dispatch/http/parameters.rb#50
  def params; end

  # source://actionpack//lib/action_dispatch/http/parameters.rb#82
  def path_parameters; end

  # source://actionpack//lib/action_dispatch/http/parameters.rb#65
  def path_parameters=(parameters); end

  private

  # source://actionpack//lib/action_dispatch/http/parameters.rb#100
  def log_parse_error_once; end

  # source://actionpack//lib/action_dispatch/http/parameters.rb#112
  def params_parsers; end

  # source://actionpack//lib/action_dispatch/http/parameters.rb#87
  def parse_formatted_parameters(parsers); end
end

# source://actionpack//lib/action_dispatch/http/parameters.rb#34
module ActionDispatch::Http::Parameters::ClassMethods
  # source://actionpack//lib/action_dispatch/http/parameters.rb#44
  def parameter_parsers=(parsers); end
end

# source://actionpack//lib/action_dispatch/http/parameters.rb#10
ActionDispatch::Http::Parameters::DEFAULT_PARSERS = T.let(T.unsafe(nil), Hash)

# source://actionpack//lib/action_dispatch/http/parameters.rb#8
ActionDispatch::Http::Parameters::PARAMETERS_KEY = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/parameters.rb#19
class ActionDispatch::Http::Parameters::ParseError < ::StandardError
  # source://actionpack//lib/action_dispatch/http/parameters.rb#20
  def initialize(message = T.unsafe(nil)); end
end

# source://actionpack//lib/action_dispatch/http/url.rb#7
module ActionDispatch::Http::URL
  # source://actionpack//lib/action_dispatch/http/url.rb#179
  def initialize; end

  # source://actionpack//lib/action_dispatch/http/url.rb#321
  def domain(tld_length = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/http/url.rb#226
  def host; end

  # source://actionpack//lib/action_dispatch/http/url.rb#242
  def host_with_port; end

  # source://actionpack//lib/action_dispatch/http/url.rb#292
  def optional_port; end

  # source://actionpack//lib/action_dispatch/http/url.rb#253
  def port; end

  # source://actionpack//lib/action_dispatch/http/url.rb#304
  def port_string; end

  # source://actionpack//lib/action_dispatch/http/url.rb#200
  def protocol; end

  # source://actionpack//lib/action_dispatch/http/url.rb#214
  def raw_host_with_port; end

  # source://actionpack//lib/action_dispatch/http/url.rb#12
  def secure_protocol; end

  # source://actionpack//lib/action_dispatch/http/url.rb#12
  def secure_protocol=(val); end

  # source://actionpack//lib/action_dispatch/http/url.rb#315
  def server_port; end

  # source://actionpack//lib/action_dispatch/http/url.rb#265
  def standard_port; end

  # source://actionpack//lib/action_dispatch/http/url.rb#280
  def standard_port?; end

  # source://actionpack//lib/action_dispatch/http/url.rb#337
  def subdomain(tld_length = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/http/url.rb#329
  def subdomains(tld_length = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/http/url.rb#13
  def tld_length; end

  # source://actionpack//lib/action_dispatch/http/url.rb#13
  def tld_length=(val); end

  # source://actionpack//lib/action_dispatch/http/url.rb#189
  def url; end

  class << self
    # source://actionpack//lib/action_dispatch/http/url.rb#22
    def extract_domain(host, tld_length); end

    # source://actionpack//lib/action_dispatch/http/url.rb#46
    def extract_subdomain(host, tld_length); end

    # source://actionpack//lib/action_dispatch/http/url.rb#32
    def extract_subdomains(host, tld_length); end

    # source://actionpack//lib/action_dispatch/http/url.rb#58
    def full_url_for(options); end

    # source://actionpack//lib/action_dispatch/http/url.rb#70
    def path_for(options); end

    # source://actionpack//lib/action_dispatch/http/url.rb#12
    def secure_protocol; end

    # source://actionpack//lib/action_dispatch/http/url.rb#12
    def secure_protocol=(val); end

    # source://actionpack//lib/action_dispatch/http/url.rb#13
    def tld_length; end

    # source://actionpack//lib/action_dispatch/http/url.rb#13
    def tld_length=(val); end

    # source://actionpack//lib/action_dispatch/http/url.rb#50
    def url_for(options); end

    private

    # source://actionpack//lib/action_dispatch/http/url.rb#90
    def add_anchor(path, anchor); end

    # source://actionpack//lib/action_dispatch/http/url.rb#83
    def add_params(path, params); end

    # source://actionpack//lib/action_dispatch/http/url.rb#105
    def build_host_url(host, port, protocol, options, path); end

    # source://actionpack//lib/action_dispatch/http/url.rb#96
    def extract_domain_from(host, tld_length); end

    # source://actionpack//lib/action_dispatch/http/url.rb#100
    def extract_subdomains_from(host, tld_length); end

    # source://actionpack//lib/action_dispatch/http/url.rb#129
    def named_host?(host); end

    # source://actionpack//lib/action_dispatch/http/url.rb#146
    def normalize_host(_host, options); end

    # source://actionpack//lib/action_dispatch/http/url.rb#166
    def normalize_port(port, protocol); end

    # source://actionpack//lib/action_dispatch/http/url.rb#133
    def normalize_protocol(protocol); end
  end
end

# source://actionpack//lib/action_dispatch/http/url.rb#9
ActionDispatch::Http::URL::HOST_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch/http/url.rb#8
ActionDispatch::Http::URL::IP_HOST_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch/http/url.rb#10
ActionDispatch::Http::URL::PROTOCOL_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch/http/upload.rb#13
class ActionDispatch::Http::UploadedFile
  # source://actionpack//lib/action_dispatch/http/upload.rb#27
  def initialize(hash); end

  # source://actionpack//lib/action_dispatch/http/upload.rb#58
  def close(unlink_now = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/http/upload.rb#18
  def content_type; end

  # source://actionpack//lib/action_dispatch/http/upload.rb#18
  def content_type=(_arg0); end

  # source://actionpack//lib/action_dispatch/http/upload.rb#83
  def eof?; end

  # source://actionpack//lib/action_dispatch/http/upload.rb#25
  def headers; end

  # source://actionpack//lib/action_dispatch/http/upload.rb#25
  def headers=(_arg0); end

  # source://actionpack//lib/action_dispatch/http/upload.rb#53
  def open; end

  # source://actionpack//lib/action_dispatch/http/upload.rb#15
  def original_filename; end

  # source://actionpack//lib/action_dispatch/http/upload.rb#15
  def original_filename=(_arg0); end

  # source://actionpack//lib/action_dispatch/http/upload.rb#63
  def path; end

  # source://actionpack//lib/action_dispatch/http/upload.rb#48
  def read(length = T.unsafe(nil), buffer = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/http/upload.rb#73
  def rewind; end

  # source://actionpack//lib/action_dispatch/http/upload.rb#78
  def size; end

  # source://actionpack//lib/action_dispatch/http/upload.rb#22
  def tempfile; end

  # source://actionpack//lib/action_dispatch/http/upload.rb#22
  def tempfile=(_arg0); end

  # source://actionpack//lib/action_dispatch/http/upload.rb#87
  def to_io; end

  # source://actionpack//lib/action_dispatch/http/upload.rb#68
  def to_path; end
end

# source://actionpack//lib/action_dispatch.rb#40
class ActionDispatch::IllegalStateError < ::StandardError; end

# source://actionpack//lib/action_dispatch/testing/integration.rb#11
module ActionDispatch::Integration; end

# source://actionpack//lib/action_dispatch/testing/integration.rb#12
module ActionDispatch::Integration::RequestHelpers
  # source://actionpack//lib/action_dispatch/testing/integration.rb#39
  def delete(path, **args); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#61
  def follow_redirect!(**args); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#15
  def get(path, **args); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#45
  def head(path, **args); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#51
  def options(path, **args); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#27
  def patch(path, **args); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#21
  def post(path, **args); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#33
  def put(path, **args); end
end

# source://actionpack//lib/action_dispatch/testing/integration.rb#316
module ActionDispatch::Integration::Runner
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions
  include ::ActionDispatch::Assertions

  # source://actionpack//lib/action_dispatch/testing/integration.rb#324
  def initialize(*args, &blk); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#321
  def app; end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#395
  def assertions; end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#399
  def assertions=(assertions); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#367
  def assigns(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#329
  def before_setup; end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#367
  def cookies(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#405
  def copy_session_variables!; end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#344
  def create_session(app); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#411
  def default_url_options; end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#415
  def default_url_options=(options); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#367
  def delete(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#367
  def follow_redirect!(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#367
  def get(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#367
  def head(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#334
  def integration_session; end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#387
  def open_session; end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#367
  def patch(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#367
  def post(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#367
  def put(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#356
  def remove!; end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#340
  def reset!; end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#322
  def root_session; end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#322
  def root_session=(_arg0); end

  private

  # source://actionpack//lib/action_dispatch/testing/integration.rb#425
  def method_missing(method, *args, **_arg2, &block); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#420
  def respond_to_missing?(method, _); end
end

# source://actionpack//lib/action_dispatch/testing/integration.rb#319
ActionDispatch::Integration::Runner::APP_SESSIONS = T.let(T.unsafe(nil), Hash)

# source://actionpack//lib/action_dispatch/testing/integration.rb#84
class ActionDispatch::Integration::Session
  include ::Minitest::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Integration::RequestHelpers
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::Routing::UrlFor

  # source://actionpack//lib/action_dispatch/testing/integration.rb#126
  def initialize(app); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#103
  def accept; end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#103
  def accept=(_arg0); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#90
  def body(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#112
  def controller; end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#107
  def cookies; end

  # source://actionpack//lib/action_dispatch/routing/url_for.rb#95
  def default_url_options; end

  # source://actionpack//lib/action_dispatch/routing/url_for.rb#95
  def default_url_options=(_arg0); end

  # source://actionpack//lib/action_dispatch/routing/url_for.rb#95
  def default_url_options?; end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#90
  def headers(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#94
  def host; end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#97
  def host!(_arg0); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#97
  def host=(_arg0); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#174
  def https!(flag = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#183
  def https?; end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#91
  def path(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#220
  def process(method, path, params: T.unsafe(nil), headers: T.unsafe(nil), env: T.unsafe(nil), xhr: T.unsafe(nil), as: T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#90
  def redirect?(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#100
  def remote_addr; end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#100
  def remote_addr=(_arg0); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#115
  def request; end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#121
  def request_count; end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#121
  def request_count=(_arg0); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#150
  def reset!; end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#118
  def response; end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#90
  def status(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#90
  def status_message(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#133
  def url_options; end

  private

  # source://actionpack//lib/action_dispatch/testing/integration.rb#300
  def _mock_session; end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#308
  def build_expanded_path(path); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#304
  def build_full_uri(path, env); end

  class << self
    # source://actionpack//lib/action_dispatch/routing/url_for.rb#95
    def default_url_options; end

    # source://actionpack//lib/action_dispatch/routing/url_for.rb#95
    def default_url_options=(value); end

    # source://actionpack//lib/action_dispatch/routing/url_for.rb#95
    def default_url_options?; end
  end
end

# source://actionpack//lib/action_dispatch/testing/integration.rb#85
ActionDispatch::Integration::Session::DEFAULT_HOST = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/testing/integration.rb#631
class ActionDispatch::IntegrationTest < ::ActiveSupport::TestCase
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Integration::Runner
  include ::ActionController::TemplateAssertions
  include ::ActionDispatch::IntegrationTest::Behavior
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::IntegrationTest::UrlOptions
  extend ::ActionDispatch::IntegrationTest::Behavior::ClassMethods
end

# source://actionpack//lib/action_dispatch/testing/integration.rb#641
module ActionDispatch::IntegrationTest::Behavior
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Integration::Runner
  include ::ActionController::TemplateAssertions
  extend ::ActiveSupport::Concern
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::IntegrationTest::UrlOptions

  mixes_in_class_methods ::ActionDispatch::IntegrationTest::Behavior::ClassMethods

  # source://actionpack//lib/action_dispatch/testing/integration.rb#672
  def app; end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#676
  def document_root_element; end
end

# source://actionpack//lib/action_dispatch/testing/integration.rb#654
module ActionDispatch::IntegrationTest::Behavior::ClassMethods
  # source://actionpack//lib/action_dispatch/testing/integration.rb#655
  def app; end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#663
  def app=(app); end

  # source://actionpack//lib/action_dispatch/testing/integration.rb#667
  def register_encoder(*args, **options); end
end

# source://actionpack//lib/action_dispatch/testing/integration.rb#634
module ActionDispatch::IntegrationTest::UrlOptions
  extend ::ActiveSupport::Concern

  # source://actionpack//lib/action_dispatch/testing/integration.rb#636
  def url_options; end
end

# source://actionpack//lib/action_dispatch/journey/router/utils.rb#4
module ActionDispatch::Journey; end

# source://actionpack//lib/action_dispatch/journey/nodes/node.rb#7
class ActionDispatch::Journey::Ast
  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#11
  def initialize(tree, formatted); end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#37
  def glob?; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#8
  def names; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#8
  def path_params; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#23
  def requirements=(requirements); end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#8
  def root; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#33
  def route=(route); end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#8
  def terminals; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#8
  def tree; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#8
  def wildcard_options; end

  private

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#42
  def stars; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#42
  def symbols; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#44
  def visit_tree(formatted); end
end

# source://actionpack//lib/action_dispatch/journey/visitors.rb#6
class ActionDispatch::Journey::Format
  # source://actionpack//lib/action_dispatch/journey/visitors.rb#22
  def initialize(parts); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#37
  def evaluate(hash); end

  class << self
    # source://actionpack//lib/action_dispatch/journey/visitors.rb#14
    def required_path(symbol); end

    # source://actionpack//lib/action_dispatch/journey/visitors.rb#18
    def required_segment(symbol); end
  end
end

# source://actionpack//lib/action_dispatch/journey/visitors.rb#7
ActionDispatch::Journey::Format::ESCAPE_PATH = T.let(T.unsafe(nil), Proc)

# source://actionpack//lib/action_dispatch/journey/visitors.rb#8
ActionDispatch::Journey::Format::ESCAPE_SEGMENT = T.let(T.unsafe(nil), Proc)

# source://actionpack//lib/action_dispatch/journey/visitors.rb#10
class ActionDispatch::Journey::Format::Parameter < ::Struct
  # source://actionpack//lib/action_dispatch/journey/visitors.rb#11
  def escape(value); end

  def escaper; end
  def escaper=(_); end
  def name; end
  def name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://actionpack//lib/action_dispatch/journey/formatter.rb#10
class ActionDispatch::Journey::Formatter
  # source://actionpack//lib/action_dispatch/journey/formatter.rb#13
  def initialize(routes); end

  # source://actionpack//lib/action_dispatch/journey/formatter.rb#97
  def clear; end

  # source://actionpack//lib/action_dispatch/journey/formatter.rb#59
  def generate(name, options, path_parameters); end

  # source://actionpack//lib/action_dispatch/journey/formatter.rb#11
  def routes; end

  private

  # source://actionpack//lib/action_dispatch/journey/formatter.rb#196
  def build_cache; end

  # source://actionpack//lib/action_dispatch/journey/formatter.rb#207
  def cache; end

  # source://actionpack//lib/action_dispatch/journey/formatter.rb#102
  def extract_parameterized_parts(route, options, recall); end

  # source://actionpack//lib/action_dispatch/journey/formatter.rb#129
  def match_route(name, options); end

  # source://actionpack//lib/action_dispatch/journey/formatter.rb#168
  def missing_keys(route, parts); end

  # source://actionpack//lib/action_dispatch/journey/formatter.rb#125
  def named_routes; end

  # source://actionpack//lib/action_dispatch/journey/formatter.rb#151
  def non_recursive(cache, options); end

  # source://actionpack//lib/action_dispatch/journey/formatter.rb#188
  def possibles(cache, options, depth = T.unsafe(nil)); end
end

# source://actionpack//lib/action_dispatch/journey/formatter.rb#32
class ActionDispatch::Journey::Formatter::MissingRoute
  # source://actionpack//lib/action_dispatch/journey/formatter.rb#35
  def initialize(constraints, missing_keys, unmatched_keys, routes, name); end

  # source://actionpack//lib/action_dispatch/journey/formatter.rb#33
  def constraints; end

  # source://actionpack//lib/action_dispatch/journey/formatter.rb#51
  def message; end

  # source://actionpack//lib/action_dispatch/journey/formatter.rb#33
  def missing_keys; end

  # source://actionpack//lib/action_dispatch/journey/formatter.rb#33
  def name; end

  # source://actionpack//lib/action_dispatch/journey/formatter.rb#47
  def params; end

  # source://actionpack//lib/action_dispatch/journey/formatter.rb#43
  def path(method_name); end

  # source://actionpack//lib/action_dispatch/journey/formatter.rb#33
  def routes; end

  # source://actionpack//lib/action_dispatch/journey/formatter.rb#33
  def unmatched_keys; end
end

# source://actionpack//lib/action_dispatch/journey/formatter.rb#18
class ActionDispatch::Journey::Formatter::RouteWithParams
  # source://actionpack//lib/action_dispatch/journey/formatter.rb#21
  def initialize(route, parameterized_parts, params); end

  # source://actionpack//lib/action_dispatch/journey/formatter.rb#19
  def params; end

  # source://actionpack//lib/action_dispatch/journey/formatter.rb#27
  def path(_); end
end

# source://actionpack//lib/action_dispatch/journey/gtg/transition_table.rb#7
module ActionDispatch::Journey::GTG; end

# source://actionpack//lib/action_dispatch/journey/gtg/builder.rb#8
class ActionDispatch::Journey::GTG::Builder
  # source://actionpack//lib/action_dispatch/journey/gtg/builder.rb#13
  def initialize(root); end

  # source://actionpack//lib/action_dispatch/journey/gtg/builder.rb#11
  def ast; end

  # source://actionpack//lib/action_dispatch/journey/gtg/builder.rb#11
  def endpoints; end

  # source://actionpack//lib/action_dispatch/journey/gtg/builder.rb#86
  def firstpos(node); end

  # source://actionpack//lib/action_dispatch/journey/gtg/builder.rb#107
  def lastpos(node); end

  # source://actionpack//lib/action_dispatch/journey/gtg/builder.rb#64
  def nullable?(node); end

  # source://actionpack//lib/action_dispatch/journey/gtg/builder.rb#11
  def root; end

  # source://actionpack//lib/action_dispatch/journey/gtg/builder.rb#19
  def transition_table; end

  private

  # source://actionpack//lib/action_dispatch/journey/gtg/builder.rb#129
  def build_followpos; end

  # source://actionpack//lib/action_dispatch/journey/gtg/builder.rb#142
  def symbol(edge); end
end

# source://actionpack//lib/action_dispatch/journey/gtg/builder.rb#9
ActionDispatch::Journey::GTG::Builder::DUMMY_END_NODE = T.let(T.unsafe(nil), ActionDispatch::Journey::Nodes::Dummy)

# source://actionpack//lib/action_dispatch/journey/gtg/simulator.rb#8
class ActionDispatch::Journey::GTG::MatchData
  # source://actionpack//lib/action_dispatch/journey/gtg/simulator.rb#11
  def initialize(memos); end

  # source://actionpack//lib/action_dispatch/journey/gtg/simulator.rb#9
  def memos; end
end

# source://actionpack//lib/action_dispatch/journey/gtg/simulator.rb#16
class ActionDispatch::Journey::GTG::Simulator
  # source://actionpack//lib/action_dispatch/journey/gtg/simulator.rb#21
  def initialize(transition_table); end

  # source://actionpack//lib/action_dispatch/journey/gtg/simulator.rb#25
  def memos(string); end

  # source://actionpack//lib/action_dispatch/journey/gtg/simulator.rb#19
  def tt; end
end

# source://actionpack//lib/action_dispatch/journey/gtg/simulator.rb#17
ActionDispatch::Journey::GTG::Simulator::INITIAL_STATE = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/journey/gtg/transition_table.rb#8
class ActionDispatch::Journey::GTG::TransitionTable
  include ::ActionDispatch::Journey::NFA::Dot

  # source://actionpack//lib/action_dispatch/journey/gtg/transition_table.rb#16
  def initialize; end

  # source://actionpack//lib/action_dispatch/journey/gtg/transition_table.rb#163
  def []=(from, to, sym); end

  # source://actionpack//lib/action_dispatch/journey/gtg/transition_table.rb#32
  def accepting?(state); end

  # source://actionpack//lib/action_dispatch/journey/gtg/transition_table.rb#28
  def accepting_states; end

  # source://actionpack//lib/action_dispatch/journey/gtg/transition_table.rb#24
  def add_accepting(state); end

  # source://actionpack//lib/action_dispatch/journey/gtg/transition_table.rb#36
  def add_memo(idx, memo); end

  # source://actionpack//lib/action_dispatch/journey/gtg/transition_table.rb#98
  def as_json(options = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/journey/gtg/transition_table.rb#44
  def eclosure(t); end

  # source://actionpack//lib/action_dispatch/journey/gtg/transition_table.rb#40
  def memo(idx); end

  # source://actionpack//lib/action_dispatch/journey/gtg/transition_table.rb#11
  def memos; end

  # source://actionpack//lib/action_dispatch/journey/gtg/transition_table.rb#48
  def move(t, full_string, start_index, end_index); end

  # source://actionpack//lib/action_dispatch/journey/gtg/transition_table.rb#180
  def states; end

  # source://actionpack//lib/action_dispatch/journey/gtg/transition_table.rb#115
  def to_svg; end

  # source://actionpack//lib/action_dispatch/journey/gtg/transition_table.rb#187
  def transitions; end

  # source://actionpack//lib/action_dispatch/journey/gtg/transition_table.rb#125
  def visualizer(paths, title = T.unsafe(nil)); end

  private

  # source://actionpack//lib/action_dispatch/journey/gtg/transition_table.rb#198
  def states_hash_for(sym); end
end

# source://actionpack//lib/action_dispatch/journey/gtg/transition_table.rb#13
ActionDispatch::Journey::GTG::TransitionTable::DEFAULT_EXP = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch/journey/gtg/transition_table.rb#14
ActionDispatch::Journey::GTG::TransitionTable::DEFAULT_EXP_ANCHORED = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch/journey/nfa/dot.rb#5
module ActionDispatch::Journey::NFA; end

# source://actionpack//lib/action_dispatch/journey/nfa/dot.rb#6
module ActionDispatch::Journey::NFA::Dot
  # source://actionpack//lib/action_dispatch/journey/nfa/dot.rb#7
  def to_dot; end
end

# source://actionpack//lib/action_dispatch/journey/nodes/node.rb#67
module ActionDispatch::Journey::Nodes; end

# source://actionpack//lib/action_dispatch/journey/nodes/node.rb#180
class ActionDispatch::Journey::Nodes::Binary < ::ActionDispatch::Journey::Nodes::Node
  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#183
  def initialize(left, right); end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#188
  def children; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#181
  def right; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#181
  def right=(_arg0); end
end

# source://actionpack//lib/action_dispatch/journey/nodes/node.rb#191
class ActionDispatch::Journey::Nodes::Cat < ::ActionDispatch::Journey::Nodes::Binary
  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#192
  def cat?; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#193
  def type; end
end

# source://actionpack//lib/action_dispatch/journey/nodes/node.rb#132
class ActionDispatch::Journey::Nodes::Dot < ::ActionDispatch::Journey::Nodes::Terminal
  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#133
  def type; end
end

# source://actionpack//lib/action_dispatch/journey/nodes/node.rb#120
class ActionDispatch::Journey::Nodes::Dummy < ::ActionDispatch::Journey::Nodes::Literal
  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#121
  def initialize(x = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#125
  def literal?; end
end

# source://actionpack//lib/action_dispatch/journey/nodes/node.rb#157
class ActionDispatch::Journey::Nodes::Group < ::ActionDispatch::Journey::Nodes::Unary
  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#159
  def group?; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#158
  def type; end
end

# source://actionpack//lib/action_dispatch/journey/nodes/node.rb#115
class ActionDispatch::Journey::Nodes::Literal < ::ActionDispatch::Journey::Nodes::Terminal
  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#116
  def literal?; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#117
  def type; end
end

# source://actionpack//lib/action_dispatch/journey/nodes/node.rb#68
class ActionDispatch::Journey::Nodes::Node
  include ::Enumerable

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#73
  def initialize(left); end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#106
  def cat?; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#78
  def each(&block); end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#107
  def group?; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#71
  def left; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#71
  def left=(_arg0); end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#103
  def literal?; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#71
  def memo; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#71
  def memo=(_arg0); end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#94
  def name; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#105
  def star?; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#102
  def symbol?; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#104
  def terminal?; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#86
  def to_dot; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#82
  def to_s; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#90
  def to_sym; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#98
  def type; end
end

# source://actionpack//lib/action_dispatch/journey/nodes/node.rb#196
class ActionDispatch::Journey::Nodes::Or < ::ActionDispatch::Journey::Nodes::Node
  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#199
  def initialize(children); end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#197
  def children; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#203
  def type; end
end

# source://actionpack//lib/action_dispatch/journey/nodes/node.rb#128
class ActionDispatch::Journey::Nodes::Slash < ::ActionDispatch::Journey::Nodes::Terminal
  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#129
  def type; end
end

# source://actionpack//lib/action_dispatch/journey/nodes/node.rb#162
class ActionDispatch::Journey::Nodes::Star < ::ActionDispatch::Journey::Nodes::Unary
  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#165
  def initialize(left); end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#175
  def name; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#163
  def regexp; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#163
  def regexp=(_arg0); end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#172
  def star?; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#173
  def type; end
end

# source://actionpack//lib/action_dispatch/journey/nodes/node.rb#136
class ActionDispatch::Journey::Nodes::Symbol < ::ActionDispatch::Journey::Nodes::Terminal
  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#143
  def initialize(left, regexp = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#139
  def name; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#137
  def regexp; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#137
  def regexp=(_arg0); end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#137
  def symbol; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#150
  def symbol?; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#149
  def type; end
end

# source://actionpack//lib/action_dispatch/journey/nodes/node.rb#141
ActionDispatch::Journey::Nodes::Symbol::DEFAULT_EXP = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch/journey/nodes/node.rb#142
ActionDispatch::Journey::Nodes::Symbol::GREEDY_EXP = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch/journey/nodes/node.rb#110
class ActionDispatch::Journey::Nodes::Terminal < ::ActionDispatch::Journey::Nodes::Node
  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#71
  def symbol; end

  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#112
  def terminal?; end
end

# source://actionpack//lib/action_dispatch/journey/nodes/node.rb#153
class ActionDispatch::Journey::Nodes::Unary < ::ActionDispatch::Journey::Nodes::Node
  # source://actionpack//lib/action_dispatch/journey/nodes/node.rb#154
  def children; end
end

# source://actionpack//lib/action_dispatch/journey/parser_extras.rb#9
class ActionDispatch::Journey::Parser < ::Racc::Parser
  include ::ActionDispatch::Journey::Nodes

  # source://actionpack//lib/action_dispatch/journey/parser_extras.rb#16
  def initialize; end

  # source://actionpack//lib/action_dispatch/journey/parser.rb#137
  def _reduce_1(val, _values); end

  # source://actionpack//lib/action_dispatch/journey/parser.rb#165
  def _reduce_10(val, _values); end

  # source://actionpack//lib/action_dispatch/journey/parser.rb#177
  def _reduce_15(val, _values); end

  # source://actionpack//lib/action_dispatch/journey/parser.rb#181
  def _reduce_16(val, _values); end

  # source://actionpack//lib/action_dispatch/journey/parser.rb#185
  def _reduce_17(val, _values); end

  # source://actionpack//lib/action_dispatch/journey/parser.rb#189
  def _reduce_18(val, _values); end

  # source://actionpack//lib/action_dispatch/journey/parser.rb#141
  def _reduce_2(val, _values); end

  # source://actionpack//lib/action_dispatch/journey/parser.rb#153
  def _reduce_7(val, _values); end

  # source://actionpack//lib/action_dispatch/journey/parser.rb#157
  def _reduce_8(val, _values); end

  # source://actionpack//lib/action_dispatch/journey/parser.rb#161
  def _reduce_9(val, _values); end

  # source://actionpack//lib/action_dispatch/journey/parser.rb#193
  def _reduce_none(val, _values); end

  # source://actionpack//lib/action_dispatch/journey/parser_extras.rb#25
  def next_token; end

  # source://actionpack//lib/action_dispatch/journey/parser_extras.rb#20
  def parse(string); end

  class << self
    # source://actionpack//lib/action_dispatch/journey/parser_extras.rb#12
    def parse(string); end
  end
end

# source://actionpack//lib/action_dispatch/journey/parser.rb#92
ActionDispatch::Journey::Parser::Racc_arg = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/journey/parser.rb#131
ActionDispatch::Journey::Parser::Racc_debug_parser = T.let(T.unsafe(nil), FalseClass)

# source://actionpack//lib/action_dispatch/journey/parser.rb#108
ActionDispatch::Journey::Parser::Racc_token_to_s_table = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/journey/path/pattern.rb#5
module ActionDispatch::Journey::Path; end

# source://actionpack//lib/action_dispatch/journey/path/pattern.rb#6
class ActionDispatch::Journey::Path::Pattern
  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#9
  def initialize(ast, requirements, separators, anchored); end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#156
  def =~(other); end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#7
  def anchored; end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#7
  def ast; end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#23
  def build_formatter; end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#27
  def eager_load!; end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#156
  def match(other); end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#162
  def match?(other); end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#7
  def names; end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#59
  def optional_names; end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#55
  def required_names; end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#7
  def requirements; end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#34
  def requirements_anchored?; end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#174
  def requirements_for_missing_keys_check; end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#166
  def source; end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#7
  def spec; end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#170
  def to_regexp; end

  private

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#185
  def offsets; end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#181
  def regexp_visitor; end
end

# source://actionpack//lib/action_dispatch/journey/path/pattern.rb#65
class ActionDispatch::Journey::Path::Pattern::AnchoredRegexp < ::ActionDispatch::Journey::Visitors::Visitor
  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#66
  def initialize(separator, matchers); end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#73
  def accept(node); end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#77
  def visit_CAT(node); end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#94
  def visit_DOT(node); end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#90
  def visit_GROUP(node); end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#94
  def visit_LITERAL(node); end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#108
  def visit_OR(node); end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#99
  def visit_SLASH(node); end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#103
  def visit_STAR(node); end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#81
  def visit_SYMBOL(node); end
end

# source://actionpack//lib/action_dispatch/journey/path/pattern.rb#121
class ActionDispatch::Journey::Path::Pattern::MatchData
  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#124
  def initialize(names, offsets, match); end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#138
  def [](x); end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#130
  def captures; end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#143
  def length; end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#134
  def named_captures; end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#122
  def names; end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#147
  def post_match; end

  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#151
  def to_s; end
end

# source://actionpack//lib/action_dispatch/journey/path/pattern.rb#114
class ActionDispatch::Journey::Path::Pattern::UnanchoredRegexp < ::ActionDispatch::Journey::Path::Pattern::AnchoredRegexp
  # source://actionpack//lib/action_dispatch/journey/path/pattern.rb#115
  def accept(node); end
end

# source://actionpack//lib/action_dispatch/journey/route.rb#6
class ActionDispatch::Journey::Route
  # source://actionpack//lib/action_dispatch/journey/route.rb#56
  def initialize(name:, path:, app: T.unsafe(nil), constraints: T.unsafe(nil), required_defaults: T.unsafe(nil), defaults: T.unsafe(nil), request_method_match: T.unsafe(nil), precedence: T.unsafe(nil), scope_options: T.unsafe(nil), internal: T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/journey/route.rb#7
  def app; end

  # source://actionpack//lib/action_dispatch/journey/route.rb#7
  def ast; end

  # source://actionpack//lib/action_dispatch/journey/route.rb#7
  def conditions; end

  # source://actionpack//lib/action_dispatch/journey/route.rb#7
  def constraints; end

  # source://actionpack//lib/action_dispatch/journey/route.rb#7
  def defaults; end

  # source://actionpack//lib/action_dispatch/journey/route.rb#141
  def dispatcher?; end

  # source://actionpack//lib/action_dispatch/journey/route.rb#77
  def eager_load!; end

  # source://actionpack//lib/action_dispatch/journey/route.rb#119
  def format(path_options); end

  # source://actionpack//lib/action_dispatch/journey/route.rb#137
  def glob?; end

  # source://actionpack//lib/action_dispatch/journey/route.rb#7
  def internal; end

  # source://actionpack//lib/action_dispatch/journey/route.rb#163
  def ip; end

  # source://actionpack//lib/action_dispatch/journey/route.rb#145
  def matches?(request); end

  # source://actionpack//lib/action_dispatch/journey/route.rb#7
  def name; end

  # source://actionpack//lib/action_dispatch/journey/route.rb#114
  def parts; end

  # source://actionpack//lib/action_dispatch/journey/route.rb#7
  def path; end

  # source://actionpack//lib/action_dispatch/journey/route.rb#7
  def precedence; end

  # source://actionpack//lib/action_dispatch/journey/route.rb#127
  def required_default?(key); end

  # source://actionpack//lib/action_dispatch/journey/route.rb#131
  def required_defaults; end

  # source://actionpack//lib/action_dispatch/journey/route.rb#102
  def required_keys; end

  # source://actionpack//lib/action_dispatch/journey/route.rb#123
  def required_parts; end

  # source://actionpack//lib/action_dispatch/journey/route.rb#92
  def requirements; end

  # source://actionpack//lib/action_dispatch/journey/route.rb#167
  def requires_matching_verb?; end

  # source://actionpack//lib/action_dispatch/journey/route.rb#7
  def scope_options; end

  # source://actionpack//lib/action_dispatch/journey/route.rb#106
  def score(supplied_keys); end

  # source://actionpack//lib/action_dispatch/journey/route.rb#114
  def segment_keys; end

  # source://actionpack//lib/action_dispatch/journey/route.rb#98
  def segments; end

  # source://actionpack//lib/action_dispatch/journey/route.rb#171
  def verb; end

  private

  # source://actionpack//lib/action_dispatch/journey/route.rb#180
  def match_verb(request); end

  # source://actionpack//lib/action_dispatch/journey/route.rb#176
  def verbs; end

  class << self
    # source://actionpack//lib/action_dispatch/journey/route.rb#47
    def verb_matcher(verb); end
  end
end

# source://actionpack//lib/action_dispatch/journey/route.rb#12
module ActionDispatch::Journey::Route::VerbMatchers; end

# source://actionpack//lib/action_dispatch/journey/route.rb#34
class ActionDispatch::Journey::Route::VerbMatchers::All
  class << self
    # source://actionpack//lib/action_dispatch/journey/route.rb#35
    def call(_); end

    # source://actionpack//lib/action_dispatch/journey/route.rb#36
    def verb; end
  end
end

# source://actionpack//lib/action_dispatch/journey/route.rb#17
class ActionDispatch::Journey::Route::VerbMatchers::DELETE
  class << self
    # source://actionpack//lib/action_dispatch/journey/route.rb#19
    def call(req); end

    # source://actionpack//lib/action_dispatch/journey/route.rb#18
    def verb; end
  end
end

# source://actionpack//lib/action_dispatch/journey/route.rb#17
class ActionDispatch::Journey::Route::VerbMatchers::GET
  class << self
    # source://actionpack//lib/action_dispatch/journey/route.rb#19
    def call(req); end

    # source://actionpack//lib/action_dispatch/journey/route.rb#18
    def verb; end
  end
end

# source://actionpack//lib/action_dispatch/journey/route.rb#17
class ActionDispatch::Journey::Route::VerbMatchers::HEAD
  class << self
    # source://actionpack//lib/action_dispatch/journey/route.rb#19
    def call(req); end

    # source://actionpack//lib/action_dispatch/journey/route.rb#18
    def verb; end
  end
end

# source://actionpack//lib/action_dispatch/journey/route.rb#17
class ActionDispatch::Journey::Route::VerbMatchers::LINK
  class << self
    # source://actionpack//lib/action_dispatch/journey/route.rb#19
    def call(req); end

    # source://actionpack//lib/action_dispatch/journey/route.rb#18
    def verb; end
  end
end

# source://actionpack//lib/action_dispatch/journey/route.rb#17
class ActionDispatch::Journey::Route::VerbMatchers::OPTIONS
  class << self
    # source://actionpack//lib/action_dispatch/journey/route.rb#19
    def call(req); end

    # source://actionpack//lib/action_dispatch/journey/route.rb#18
    def verb; end
  end
end

# source://actionpack//lib/action_dispatch/journey/route.rb#17
class ActionDispatch::Journey::Route::VerbMatchers::PATCH
  class << self
    # source://actionpack//lib/action_dispatch/journey/route.rb#19
    def call(req); end

    # source://actionpack//lib/action_dispatch/journey/route.rb#18
    def verb; end
  end
end

# source://actionpack//lib/action_dispatch/journey/route.rb#17
class ActionDispatch::Journey::Route::VerbMatchers::POST
  class << self
    # source://actionpack//lib/action_dispatch/journey/route.rb#19
    def call(req); end

    # source://actionpack//lib/action_dispatch/journey/route.rb#18
    def verb; end
  end
end

# source://actionpack//lib/action_dispatch/journey/route.rb#17
class ActionDispatch::Journey::Route::VerbMatchers::PUT
  class << self
    # source://actionpack//lib/action_dispatch/journey/route.rb#19
    def call(req); end

    # source://actionpack//lib/action_dispatch/journey/route.rb#18
    def verb; end
  end
end

# source://actionpack//lib/action_dispatch/journey/route.rb#17
class ActionDispatch::Journey::Route::VerbMatchers::TRACE
  class << self
    # source://actionpack//lib/action_dispatch/journey/route.rb#19
    def call(req); end

    # source://actionpack//lib/action_dispatch/journey/route.rb#18
    def verb; end
  end
end

# source://actionpack//lib/action_dispatch/journey/route.rb#17
class ActionDispatch::Journey::Route::VerbMatchers::UNLINK
  class << self
    # source://actionpack//lib/action_dispatch/journey/route.rb#19
    def call(req); end

    # source://actionpack//lib/action_dispatch/journey/route.rb#18
    def verb; end
  end
end

# source://actionpack//lib/action_dispatch/journey/route.rb#24
class ActionDispatch::Journey::Route::VerbMatchers::Unknown
  # source://actionpack//lib/action_dispatch/journey/route.rb#27
  def initialize(verb); end

  # source://actionpack//lib/action_dispatch/journey/route.rb#31
  def call(request); end

  # source://actionpack//lib/action_dispatch/journey/route.rb#25
  def verb; end
end

# source://actionpack//lib/action_dispatch/journey/route.rb#13
ActionDispatch::Journey::Route::VerbMatchers::VERBS = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/journey/route.rb#39
ActionDispatch::Journey::Route::VerbMatchers::VERB_TO_CLASS = T.let(T.unsafe(nil), Hash)

# source://actionpack//lib/action_dispatch/journey/router/utils.rb#5
class ActionDispatch::Journey::Router
  # source://actionpack//lib/action_dispatch/journey/router.rb#20
  def initialize(routes); end

  # source://actionpack//lib/action_dispatch/journey/router.rb#24
  def eager_load!; end

  # source://actionpack//lib/action_dispatch/journey/router.rb#65
  def recognize(rails_req); end

  # source://actionpack//lib/action_dispatch/journey/router.rb#18
  def routes; end

  # source://actionpack//lib/action_dispatch/journey/router.rb#18
  def routes=(_arg0); end

  # source://actionpack//lib/action_dispatch/journey/router.rb#31
  def serve(req); end

  # source://actionpack//lib/action_dispatch/journey/router.rb#78
  def visualizer; end

  private

  # source://actionpack//lib/action_dispatch/journey/router.rb#92
  def ast; end

  # source://actionpack//lib/action_dispatch/journey/router.rb#100
  def custom_routes; end

  # source://actionpack//lib/action_dispatch/journey/router.rb#104
  def filter_routes(path); end

  # source://actionpack//lib/action_dispatch/journey/router.rb#109
  def find_routes(req); end

  # source://actionpack//lib/action_dispatch/journey/router.rb#134
  def match_head_routes(routes, req); end

  # source://actionpack//lib/action_dispatch/journey/router.rb#86
  def partitioned_routes; end

  # source://actionpack//lib/action_dispatch/journey/router.rb#96
  def simulator; end
end

# source://actionpack//lib/action_dispatch/journey/router/utils.rb#6
class ActionDispatch::Journey::Router::Utils
  class << self
    # source://actionpack//lib/action_dispatch/journey/router/utils.rb#90
    def escape_fragment(fragment); end

    # source://actionpack//lib/action_dispatch/journey/router/utils.rb#82
    def escape_path(path); end

    # source://actionpack//lib/action_dispatch/journey/router/utils.rb#86
    def escape_segment(segment); end

    # source://actionpack//lib/action_dispatch/journey/router/utils.rb#17
    def normalize_path(path); end

    # source://actionpack//lib/action_dispatch/journey/router/utils.rb#98
    def unescape_uri(uri); end
  end
end

# source://actionpack//lib/action_dispatch/journey/router/utils.rb#80
ActionDispatch::Journey::Router::Utils::ENCODER = T.let(T.unsafe(nil), ActionDispatch::Journey::Router::Utils::UriEncoder)

# source://actionpack//lib/action_dispatch/journey/router/utils.rb#33
class ActionDispatch::Journey::Router::Utils::UriEncoder
  # source://actionpack//lib/action_dispatch/journey/router/utils.rb#51
  def escape_fragment(fragment); end

  # source://actionpack//lib/action_dispatch/journey/router/utils.rb#55
  def escape_path(path); end

  # source://actionpack//lib/action_dispatch/journey/router/utils.rb#59
  def escape_segment(segment); end

  # source://actionpack//lib/action_dispatch/journey/router/utils.rb#63
  def unescape_uri(uri); end

  private

  # source://actionpack//lib/action_dispatch/journey/router/utils.rb#69
  def escape(component, pattern); end

  # source://actionpack//lib/action_dispatch/journey/router/utils.rb#73
  def percent_encode(unsafe); end
end

# source://actionpack//lib/action_dispatch/journey/router/utils.rb#40
ActionDispatch::Journey::Router::Utils::UriEncoder::ALPHA = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/journey/router/utils.rb#38
ActionDispatch::Journey::Router::Utils::UriEncoder::DEC2HEX = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/journey/router/utils.rb#41
ActionDispatch::Journey::Router::Utils::UriEncoder::DIGIT = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/journey/router/utils.rb#37
ActionDispatch::Journey::Router::Utils::UriEncoder::EMPTY = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/journey/router/utils.rb#34
ActionDispatch::Journey::Router::Utils::UriEncoder::ENCODE = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/journey/router/utils.rb#45
ActionDispatch::Journey::Router::Utils::UriEncoder::ESCAPED = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch/journey/router/utils.rb#47
ActionDispatch::Journey::Router::Utils::UriEncoder::FRAGMENT = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch/journey/router/utils.rb#49
ActionDispatch::Journey::Router::Utils::UriEncoder::PATH = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch/journey/router/utils.rb#48
ActionDispatch::Journey::Router::Utils::UriEncoder::SEGMENT = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch/journey/router/utils.rb#43
ActionDispatch::Journey::Router::Utils::UriEncoder::SUB_DELIMS = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/journey/router/utils.rb#42
ActionDispatch::Journey::Router::Utils::UriEncoder::UNRESERVED = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/journey/router/utils.rb#35
ActionDispatch::Journey::Router::Utils::UriEncoder::US_ASCII = T.let(T.unsafe(nil), Encoding)

# source://actionpack//lib/action_dispatch/journey/router/utils.rb#36
ActionDispatch::Journey::Router::Utils::UriEncoder::UTF_8 = T.let(T.unsafe(nil), Encoding)

# source://actionpack//lib/action_dispatch/journey/routes.rb#7
class ActionDispatch::Journey::Routes
  include ::Enumerable

  # source://actionpack//lib/action_dispatch/journey/routes.rb#12
  def initialize; end

  # source://actionpack//lib/action_dispatch/journey/routes.rb#65
  def add_route(name, mapping); end

  # source://actionpack//lib/action_dispatch/journey/routes.rb#10
  def anchored_routes; end

  # source://actionpack//lib/action_dispatch/journey/routes.rb#51
  def ast; end

  # source://actionpack//lib/action_dispatch/journey/routes.rb#37
  def clear; end

  # source://actionpack//lib/action_dispatch/journey/routes.rb#10
  def custom_routes; end

  # source://actionpack//lib/action_dispatch/journey/routes.rb#33
  def each(&block); end

  # source://actionpack//lib/action_dispatch/journey/routes.rb#20
  def empty?; end

  # source://actionpack//lib/action_dispatch/journey/routes.rb#29
  def last; end

  # source://actionpack//lib/action_dispatch/journey/routes.rb#24
  def length; end

  # source://actionpack//lib/action_dispatch/journey/routes.rb#43
  def partition_route(route); end

  # source://actionpack//lib/action_dispatch/journey/routes.rb#10
  def routes; end

  # source://actionpack//lib/action_dispatch/journey/routes.rb#58
  def simulator; end

  # source://actionpack//lib/action_dispatch/journey/routes.rb#24
  def size; end

  private

  # source://actionpack//lib/action_dispatch/journey/routes.rb#74
  def clear_cache!; end
end

# source://actionpack//lib/action_dispatch/journey/scanner.rb#7
class ActionDispatch::Journey::Scanner
  # source://actionpack//lib/action_dispatch/journey/scanner.rb#8
  def initialize; end

  # source://actionpack//lib/action_dispatch/journey/scanner.rb#16
  def eos?; end

  # source://actionpack//lib/action_dispatch/journey/scanner.rb#28
  def next_token; end

  # source://actionpack//lib/action_dispatch/journey/scanner.rb#20
  def pos; end

  # source://actionpack//lib/action_dispatch/journey/scanner.rb#24
  def pre_match; end

  # source://actionpack//lib/action_dispatch/journey/scanner.rb#12
  def scan_setup(str); end

  private

  # source://actionpack//lib/action_dispatch/journey/scanner.rb#38
  def dedup_scan(regex); end

  # source://actionpack//lib/action_dispatch/journey/scanner.rb#43
  def scan; end
end

# source://actionpack//lib/action_dispatch/journey/visitors.rb#53
module ActionDispatch::Journey::Visitors; end

# source://actionpack//lib/action_dispatch/journey/visitors.rb#194
class ActionDispatch::Journey::Visitors::Dot < ::ActionDispatch::Journey::Visitors::FunctionalVisitor
  # source://actionpack//lib/action_dispatch/journey/visitors.rb#195
  def initialize; end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#200
  def accept(node, seed = T.unsafe(nil)); end

  private

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#215
  def binary(node, seed); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#222
  def nary(node, seed); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#254
  def terminal(node, seed); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#229
  def unary(node, seed); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#239
  def visit_CAT(node, seed); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#234
  def visit_GROUP(node, seed); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#249
  def visit_OR(node, seed); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#244
  def visit_STAR(node, seed); end
end

# source://actionpack//lib/action_dispatch/journey/visitors.rb#260
ActionDispatch::Journey::Visitors::Dot::INSTANCE = T.let(T.unsafe(nil), ActionDispatch::Journey::Visitors::Dot)

# source://actionpack//lib/action_dispatch/journey/visitors.rb#159
class ActionDispatch::Journey::Visitors::Each < ::ActionDispatch::Journey::Visitors::FunctionalVisitor
  # source://actionpack//lib/action_dispatch/journey/visitors.rb#160
  def visit(node, block); end
end

# source://actionpack//lib/action_dispatch/journey/visitors.rb#165
ActionDispatch::Journey::Visitors::Each::INSTANCE = T.let(T.unsafe(nil), ActionDispatch::Journey::Visitors::Each)

# source://actionpack//lib/action_dispatch/journey/visitors.rb#134
class ActionDispatch::Journey::Visitors::FormatBuilder < ::ActionDispatch::Journey::Visitors::Visitor
  # source://actionpack//lib/action_dispatch/journey/visitors.rb#135
  def accept(node); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#138
  def binary(node); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#136
  def terminal(node); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#142
  def visit_GROUP(n); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#144
  def visit_STAR(n); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#148
  def visit_SYMBOL(n); end
end

# source://actionpack//lib/action_dispatch/journey/visitors.rb#95
class ActionDispatch::Journey::Visitors::FunctionalVisitor
  # source://actionpack//lib/action_dispatch/journey/visitors.rb#98
  def accept(node, seed); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#106
  def binary(node, seed); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#111
  def nary(node, seed); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#122
  def terminal(node, seed); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#116
  def unary(node, seed); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#102
  def visit(node, seed); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#109
  def visit_CAT(n, seed); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#126
  def visit_DOT(n, seed); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#119
  def visit_GROUP(n, seed); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#123
  def visit_LITERAL(n, seed); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#114
  def visit_OR(n, seed); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#125
  def visit_SLASH(n, seed); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#120
  def visit_STAR(n, seed); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#124
  def visit_SYMBOL(n, seed); end
end

# source://actionpack//lib/action_dispatch/journey/visitors.rb#96
ActionDispatch::Journey::Visitors::FunctionalVisitor::DISPATCH_CACHE = T.let(T.unsafe(nil), Hash)

# source://actionpack//lib/action_dispatch/journey/visitors.rb#168
class ActionDispatch::Journey::Visitors::String < ::ActionDispatch::Journey::Visitors::FunctionalVisitor
  private

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#170
  def binary(node, seed); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#174
  def nary(node, seed); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#183
  def terminal(node, seed); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#187
  def visit_GROUP(node, seed); end
end

# source://actionpack//lib/action_dispatch/journey/visitors.rb#191
ActionDispatch::Journey::Visitors::String::INSTANCE = T.let(T.unsafe(nil), ActionDispatch::Journey::Visitors::String)

# source://actionpack//lib/action_dispatch/journey/visitors.rb#54
class ActionDispatch::Journey::Visitors::Visitor
  # source://actionpack//lib/action_dispatch/journey/visitors.rb#57
  def accept(node); end

  private

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#66
  def binary(node); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#72
  def nary(node); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#83
  def terminal(node); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#77
  def unary(node); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#62
  def visit(node); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#70
  def visit_CAT(n); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#87
  def visit_DOT(n); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#80
  def visit_GROUP(n); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#84
  def visit_LITERAL(n); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#75
  def visit_OR(n); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#86
  def visit_SLASH(n); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#81
  def visit_STAR(n); end

  # source://actionpack//lib/action_dispatch/journey/visitors.rb#85
  def visit_SYMBOL(n); end
end

# source://actionpack//lib/action_dispatch/journey/visitors.rb#55
ActionDispatch::Journey::Visitors::Visitor::DISPATCH_CACHE = T.let(T.unsafe(nil), Hash)

# source://actionpack//lib/action_dispatch/middleware/stack.rb#7
class ActionDispatch::MiddlewareStack
  include ::Enumerable

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#70
  def initialize(*args); end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#87
  def [](i); end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#160
  def build(app = T.unsafe(nil), &block); end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#125
  def delete(target); end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#133
  def delete!(target); end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#75
  def each(&block); end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#100
  def insert(index, klass, *args, **_arg3, &block); end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#108
  def insert_after(index, *args, **_arg2, &block); end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#100
  def insert_before(index, klass, *args, **_arg3, &block); end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#83
  def last; end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#68
  def middlewares; end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#68
  def middlewares=(_arg0); end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#137
  def move(target, source); end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#147
  def move_after(target, source); end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#137
  def move_before(target, source); end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#79
  def size; end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#114
  def swap(target, *args, **_arg2, &block); end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#91
  def unshift(klass, *args, **_arg2, &block); end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#155
  def use(klass, *args, **_arg2, &block); end

  private

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#172
  def assert_index(index, where); end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#178
  def build_middleware(klass, args, block); end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#182
  def index_of(klass); end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#96
  def initialize_copy(other); end
end

# source://actionpack//lib/action_dispatch/middleware/stack.rb#48
class ActionDispatch::MiddlewareStack::InstrumentationProxy
  # source://actionpack//lib/action_dispatch/middleware/stack.rb#51
  def initialize(middleware, class_name); end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#59
  def call(env); end
end

# source://actionpack//lib/action_dispatch/middleware/stack.rb#49
ActionDispatch::MiddlewareStack::InstrumentationProxy::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/middleware/stack.rb#8
class ActionDispatch::MiddlewareStack::Middleware
  # source://actionpack//lib/action_dispatch/middleware/stack.rb#11
  def initialize(klass, args, block); end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#19
  def ==(middleware); end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#9
  def args; end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#9
  def block; end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#36
  def build(app); end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#40
  def build_instrumented(app); end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#28
  def inspect; end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#9
  def klass; end

  # source://actionpack//lib/action_dispatch/middleware/stack.rb#17
  def name; end
end

# source://actionpack//lib/action_dispatch.rb#43
class ActionDispatch::MissingController < ::NameError; end

# source://actionpack//lib/action_dispatch/http/permissions_policy.rb#22
class ActionDispatch::PermissionsPolicy
  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#113
  def initialize; end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#123
  def accelerometer(*sources); end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#123
  def ambient_light_sensor(*sources); end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#123
  def autoplay(*sources); end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#132
  def build(context = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#123
  def camera(*sources); end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#111
  def directives; end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#123
  def encrypted_media(*sources); end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#123
  def fullscreen(*sources); end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#123
  def geolocation(*sources); end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#123
  def gyroscope(*sources); end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#123
  def magnetometer(*sources); end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#123
  def microphone(*sources); end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#123
  def midi(*sources); end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#123
  def payment(*sources); end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#123
  def picture_in_picture(*sources); end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#123
  def speaker(*sources); end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#123
  def usb(*sources); end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#123
  def vibrate(*sources); end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#123
  def vr(*sources); end

  private

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#150
  def apply_mapping(source); end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#137
  def apply_mappings(sources); end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#168
  def build_directive(sources, context); end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#156
  def build_directives(context); end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#118
  def initialize_copy(other); end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#172
  def resolve_source(source, context); end
end

# source://actionpack//lib/action_dispatch/http/permissions_policy.rb#89
ActionDispatch::PermissionsPolicy::DIRECTIVES = T.let(T.unsafe(nil), Hash)

# source://actionpack//lib/action_dispatch/http/permissions_policy.rb#82
ActionDispatch::PermissionsPolicy::MAPPINGS = T.let(T.unsafe(nil), Hash)

# source://actionpack//lib/action_dispatch/http/permissions_policy.rb#23
class ActionDispatch::PermissionsPolicy::Middleware
  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#32
  def initialize(app); end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#36
  def call(env); end

  private

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#55
  def html_response?(headers); end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#65
  def policy_empty?(policy); end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#61
  def policy_present?(headers); end
end

# source://actionpack//lib/action_dispatch/http/permissions_policy.rb#24
ActionDispatch::PermissionsPolicy::Middleware::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/permissions_policy.rb#30
ActionDispatch::PermissionsPolicy::Middleware::POLICY = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/permissions_policy.rb#70
module ActionDispatch::PermissionsPolicy::Request
  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#73
  def permissions_policy; end

  # source://actionpack//lib/action_dispatch/http/permissions_policy.rb#77
  def permissions_policy=(policy); end
end

# source://actionpack//lib/action_dispatch/http/permissions_policy.rb#71
ActionDispatch::PermissionsPolicy::Request::POLICY = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/middleware/public_exceptions.rb#14
class ActionDispatch::PublicExceptions
  # source://actionpack//lib/action_dispatch/middleware/public_exceptions.rb#17
  def initialize(public_path); end

  # source://actionpack//lib/action_dispatch/middleware/public_exceptions.rb#21
  def call(env); end

  # source://actionpack//lib/action_dispatch/middleware/public_exceptions.rb#15
  def public_path; end

  # source://actionpack//lib/action_dispatch/middleware/public_exceptions.rb#15
  def public_path=(_arg0); end

  private

  # source://actionpack//lib/action_dispatch/middleware/public_exceptions.rb#35
  def render(status, content_type, body); end

  # source://actionpack//lib/action_dispatch/middleware/public_exceptions.rb#44
  def render_format(status, content_type, body); end

  # source://actionpack//lib/action_dispatch/middleware/public_exceptions.rb#49
  def render_html(status); end
end

# source://actionpack//lib/action_dispatch/railtie.rb#7
class ActionDispatch::Railtie < ::Rails::Railtie; end

# source://actionpack//lib/action_dispatch/middleware/reloader.rb#10
class ActionDispatch::Reloader < ::ActionDispatch::Executor; end

# source://actionpack//lib/action_dispatch/middleware/remote_ip.rb#28
class ActionDispatch::RemoteIp
  # source://actionpack//lib/action_dispatch/middleware/remote_ip.rb#60
  def initialize(app, ip_spoofing_check = T.unsafe(nil), custom_proxies = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/middleware/remote_ip.rb#90
  def call(env); end

  # source://actionpack//lib/action_dispatch/middleware/remote_ip.rb#44
  def check_ip; end

  # source://actionpack//lib/action_dispatch/middleware/remote_ip.rb#44
  def proxies; end
end

# source://actionpack//lib/action_dispatch/middleware/remote_ip.rb#99
class ActionDispatch::RemoteIp::GetIp
  # source://actionpack//lib/action_dispatch/middleware/remote_ip.rb#100
  def initialize(req, check_ip, proxies); end

  # source://actionpack//lib/action_dispatch/middleware/remote_ip.rb#124
  def calculate_ip; end

  # source://actionpack//lib/action_dispatch/middleware/remote_ip.rb#167
  def to_s; end

  private

  # source://actionpack//lib/action_dispatch/middleware/remote_ip.rb#186
  def filter_proxies(ips); end

  # source://actionpack//lib/action_dispatch/middleware/remote_ip.rb#172
  def ips_from(header); end
end

# source://actionpack//lib/action_dispatch/middleware/remote_ip.rb#29
class ActionDispatch::RemoteIp::IpSpoofAttackError < ::StandardError; end

# source://actionpack//lib/action_dispatch/middleware/remote_ip.rb#35
ActionDispatch::RemoteIp::TRUSTED_PROXIES = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/http/request.rb#18
class ActionDispatch::Request
  include ::ActionDispatch::Flash::RequestMethods
  include ::Rack::Request::Helpers
  include ::ActionDispatch::Http::Cache::Request
  include ::ActionDispatch::Http::MimeNegotiation
  include ::ActionDispatch::Http::Parameters
  include ::ActionDispatch::Http::FilterParameters
  include ::ActionDispatch::Http::URL
  include ::ActionDispatch::ContentSecurityPolicy::Request
  include ::ActionDispatch::PermissionsPolicy::Request
  include ::Rack::Request::Env
  include ::ActionDispatch::RequestCookieMethods
  extend ::ActionDispatch::Http::Parameters::ClassMethods

  # source://actionpack//lib/action_dispatch/http/request.rb#60
  def initialize(env); end

  # source://actionpack//lib/action_dispatch/http/request.rb#372
  def GET; end

  # source://actionpack//lib/action_dispatch/http/request.rb#388
  def POST; end

  # source://actionpack//lib/action_dispatch/http/request.rb#50
  def accept; end

  # source://actionpack//lib/action_dispatch/http/request.rb#50
  def accept_charset; end

  # source://actionpack//lib/action_dispatch/http/request.rb#50
  def accept_encoding; end

  # source://actionpack//lib/action_dispatch/http/request.rb#50
  def accept_language; end

  # source://actionpack//lib/action_dispatch/http/request.rb#50
  def auth_type; end

  # source://actionpack//lib/action_dispatch/http/request.rb#404
  def authorization; end

  # source://actionpack//lib/action_dispatch/http/request.rb#334
  def body; end

  # source://actionpack//lib/action_dispatch/http/request.rb#355
  def body_stream; end

  # source://actionpack//lib/action_dispatch/http/request.rb#50
  def cache_control; end

  # source://actionpack//lib/action_dispatch/http/request.rb#50
  def client_ip; end

  # source://actionpack//lib/action_dispatch/http/request.rb#70
  def commit_cookie_jar!; end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#62
  def commit_flash; end

  # source://actionpack//lib/action_dispatch/http/request.rb#270
  def content_length; end

  # source://actionpack//lib/action_dispatch/http/request.rb#79
  def controller_class; end

  # source://actionpack//lib/action_dispatch/http/request.rb#85
  def controller_class_for(name); end

  # source://actionpack//lib/action_dispatch/http/request.rb#171
  def controller_instance; end

  # source://actionpack//lib/action_dispatch/http/request.rb#175
  def controller_instance=(controller); end

  # source://actionpack//lib/action_dispatch/http/request.rb#157
  def engine_script_name(_routes); end

  # source://actionpack//lib/action_dispatch/http/request.rb#161
  def engine_script_name=(name); end

  # source://actionpack//lib/action_dispatch/http/request.rb#351
  def form_data?; end

  # source://actionpack//lib/action_dispatch/http/request.rb#50
  def from; end

  # source://actionpack//lib/action_dispatch/http/request.rb#249
  def fullpath; end

  # source://actionpack//lib/action_dispatch/http/request.rb#50
  def gateway_interface; end

  # source://actionpack//lib/action_dispatch/http/request.rb#210
  def headers; end

  # source://actionpack//lib/action_dispatch/http/request.rb#179
  def http_auth_salt; end

  # source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#18
  def ignore_accept_header; end

  # source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#18
  def ignore_accept_header=(val); end

  # source://actionpack//lib/action_dispatch/http/request.rb#428
  def inspect; end

  # source://actionpack//lib/action_dispatch/http/request.rb#283
  def ip; end

  # source://actionpack//lib/action_dispatch/http/request.rb#106
  def key?(key); end

  # source://actionpack//lib/action_dispatch/http/request.rb#412
  def local?; end

  # source://actionpack//lib/action_dispatch/http/request.rb#421
  def logger; end

  # source://actionpack//lib/action_dispatch/http/request.rb#265
  def media_type; end

  # source://actionpack//lib/action_dispatch/http/request.rb#198
  def method; end

  # source://actionpack//lib/action_dispatch/http/request.rb#203
  def method_symbol; end

  # source://actionpack//lib/action_dispatch/http/request.rb#50
  def negotiate; end

  # source://actionpack//lib/action_dispatch/http/request.rb#50
  def origin; end

  # source://actionpack//lib/action_dispatch/http/request.rb#238
  def original_fullpath; end

  # source://actionpack//lib/action_dispatch/http/request.rb#50
  def original_script_name; end

  # source://actionpack//lib/action_dispatch/http/request.rb#257
  def original_url; end

  # source://actionpack//lib/action_dispatch/http/request.rb#50
  def path_translated; end

  # source://actionpack//lib/action_dispatch/http/request.rb#50
  def pragma; end

  # source://actionpack//lib/action_dispatch/http/request.rb#372
  def query_parameters; end

  # source://actionpack//lib/action_dispatch/http/request.rb#323
  def raw_post; end

  # source://rack/2.2.6.4/lib/rack/request.rb#157
  def raw_request_method; end

  # source://actionpack//lib/action_dispatch/http/request.rb#50
  def remote_addr; end

  # source://actionpack//lib/action_dispatch/http/request.rb#50
  def remote_host; end

  # source://actionpack//lib/action_dispatch/http/request.rb#50
  def remote_ident; end

  # source://actionpack//lib/action_dispatch/http/request.rb#289
  def remote_ip; end

  # source://actionpack//lib/action_dispatch/http/request.rb#293
  def remote_ip=(remote_ip); end

  # source://actionpack//lib/action_dispatch/http/request.rb#50
  def remote_user; end

  # source://actionpack//lib/action_dispatch/http/request.rb#306
  def request_id; end

  # source://actionpack//lib/action_dispatch/http/request.rb#310
  def request_id=(id); end

  # source://actionpack//lib/action_dispatch/http/request.rb#145
  def request_method; end

  # source://actionpack//lib/action_dispatch/http/request.rb#165
  def request_method=(request_method); end

  # source://actionpack//lib/action_dispatch/http/request.rb#191
  def request_method_symbol; end

  # source://actionpack//lib/action_dispatch/http/request.rb#388
  def request_parameters; end

  # source://actionpack//lib/action_dispatch/http/request.rb#416
  def request_parameters=(params); end

  # source://actionpack//lib/action_dispatch/middleware/flash.rb#75
  def reset_session; end

  # source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#19
  def return_only_media_type_on_content_type; end

  # source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#19
  def return_only_media_type_on_content_type=(val); end

  # source://actionpack//lib/action_dispatch/http/request.rb#149
  def routes; end

  # source://actionpack//lib/action_dispatch/http/request.rb#153
  def routes=(routes); end

  # source://actionpack//lib/action_dispatch/http/request.rb#225
  def send_early_hints(links); end

  # source://actionpack//lib/action_dispatch/http/request.rb#50
  def server_name; end

  # source://actionpack//lib/action_dispatch/http/request.rb#50
  def server_protocol; end

  # source://actionpack//lib/action_dispatch/http/request.rb#317
  def server_software; end

  # source://actionpack//lib/action_dispatch/http/request.rb#363
  def session=(session); end

  # source://actionpack//lib/action_dispatch/http/request.rb#367
  def session_options=(options); end

  # source://actionpack//lib/action_dispatch/http/request.rb#183
  def show_exceptions?; end

  # source://actionpack//lib/action_dispatch/http/request.rb#306
  def uuid; end

  # source://actionpack//lib/action_dispatch/http/request.rb#50
  def version; end

  # source://actionpack//lib/action_dispatch/http/request.rb#50
  def x_csrf_token; end

  # source://actionpack//lib/action_dispatch/http/request.rb#50
  def x_forwarded_for; end

  # source://actionpack//lib/action_dispatch/http/request.rb#50
  def x_forwarded_host; end

  # source://actionpack//lib/action_dispatch/http/request.rb#50
  def x_request_id; end

  # source://actionpack//lib/action_dispatch/http/request.rb#277
  def xhr?; end

  # source://actionpack//lib/action_dispatch/http/request.rb#277
  def xml_http_request?; end

  private

  # source://actionpack//lib/action_dispatch/http/request.rb#433
  def check_method(name); end

  # source://actionpack//lib/action_dispatch/http/request.rb#438
  def default_session; end

  class << self
    # source://actionpack//lib/action_dispatch/http/request.rb#56
    def empty; end

    # source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#18
    def ignore_accept_header; end

    # source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#18
    def ignore_accept_header=(val); end

    # source://actionpack//lib/action_dispatch/http/parameters.rb#28
    def parameter_parsers; end

    # source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#19
    def return_only_media_type_on_content_type; end

    # source://actionpack//lib/action_dispatch/http/mime_negotiation.rb#19
    def return_only_media_type_on_content_type=(val); end
  end
end

# source://actionpack//lib/action_dispatch/http/request.rb#298
ActionDispatch::Request::ACTION_DISPATCH_REQUEST_ID = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/request.rb#34
ActionDispatch::Request::ENV_METHODS = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/http/request.rb#128
ActionDispatch::Request::HTTP_METHODS = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/http/request.rb#130
ActionDispatch::Request::HTTP_METHOD_LOOKUP = T.let(T.unsafe(nil), Hash)

# source://actionpack//lib/action_dispatch/http/request.rb#32
ActionDispatch::Request::LOCALHOST = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch/http/request.rb#73
class ActionDispatch::Request::PASS_NOT_FOUND
  class << self
    # source://actionpack//lib/action_dispatch/http/request.rb#74
    def action(_); end

    # source://actionpack//lib/action_dispatch/http/request.rb#76
    def action_encoding_template(action); end

    # source://actionpack//lib/action_dispatch/http/request.rb#75
    def call(_); end
  end
end

# source://actionpack//lib/action_dispatch/http/request.rb#120
ActionDispatch::Request::RFC2518 = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/http/request.rb#119
ActionDispatch::Request::RFC2616 = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/http/request.rb#121
ActionDispatch::Request::RFC3253 = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/http/request.rb#122
ActionDispatch::Request::RFC3648 = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/http/request.rb#123
ActionDispatch::Request::RFC3744 = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/http/request.rb#125
ActionDispatch::Request::RFC4791 = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/http/request.rb#124
ActionDispatch::Request::RFC5323 = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/http/request.rb#126
ActionDispatch::Request::RFC5789 = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/request/session.rb#8
class ActionDispatch::Request::Session
  # source://actionpack//lib/action_dispatch/request/session.rb#74
  def initialize(by, req, enabled: T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/request/session.rb#110
  def [](key); end

  # source://actionpack//lib/action_dispatch/request/session.rb#150
  def []=(key, value); end

  # source://actionpack//lib/action_dispatch/request/session.rb#156
  def clear; end

  # source://actionpack//lib/action_dispatch/request/session.rb#184
  def delete(key); end

  # source://actionpack//lib/action_dispatch/request/session.rb#95
  def destroy; end

  # source://actionpack//lib/action_dispatch/request/session.rb#123
  def dig(*keys); end

  # source://actionpack//lib/action_dispatch/request/session.rb#240
  def each(&block); end

  # source://actionpack//lib/action_dispatch/request/session.rb#230
  def empty?; end

  # source://actionpack//lib/action_dispatch/request/session.rb#87
  def enabled?; end

  # source://actionpack//lib/action_dispatch/request/session.rb#220
  def exists?; end

  # source://actionpack//lib/action_dispatch/request/session.rb#203
  def fetch(key, default = T.unsafe(nil), &block); end

  # source://actionpack//lib/action_dispatch/request/session.rb#130
  def has_key?(key); end

  # source://actionpack//lib/action_dispatch/request/session.rb#83
  def id; end

  # source://actionpack//lib/action_dispatch/request/session.rb#130
  def include?(key); end

  # source://actionpack//lib/action_dispatch/request/session.rb#212
  def inspect; end

  # source://actionpack//lib/action_dispatch/request/session.rb#130
  def key?(key); end

  # source://actionpack//lib/action_dispatch/request/session.rb#138
  def keys; end

  # source://actionpack//lib/action_dispatch/request/session.rb#226
  def loaded?; end

  # source://actionpack//lib/action_dispatch/request/session.rb#235
  def merge!(other); end

  # source://actionpack//lib/action_dispatch/request/session.rb#91
  def options; end

  # source://actionpack//lib/action_dispatch/request/session.rb#162
  def to_h; end

  # source://actionpack//lib/action_dispatch/request/session.rb#162
  def to_hash; end

  # source://actionpack//lib/action_dispatch/request/session.rb#178
  def update(hash); end

  # source://actionpack//lib/action_dispatch/request/session.rb#144
  def values; end

  private

  # source://actionpack//lib/action_dispatch/request/session.rb#261
  def load!; end

  # source://actionpack//lib/action_dispatch/request/session.rb#257
  def load_for_delete!; end

  # source://actionpack//lib/action_dispatch/request/session.rb#245
  def load_for_read!; end

  # source://actionpack//lib/action_dispatch/request/session.rb#249
  def load_for_write!; end

  class << self
    # source://actionpack//lib/action_dispatch/request/session.rb#17
    def create(store, req, default_options); end

    # source://actionpack//lib/action_dispatch/request/session.rb#41
    def delete(req); end

    # source://actionpack//lib/action_dispatch/request/session.rb#27
    def disabled(req); end

    # source://actionpack//lib/action_dispatch/request/session.rb#33
    def find(req); end

    # source://actionpack//lib/action_dispatch/request/session.rb#37
    def set(req, session); end
  end
end

# source://actionpack//lib/action_dispatch/request/session.rb#9
class ActionDispatch::Request::Session::DisabledSessionError < ::StandardError; end

# source://actionpack//lib/action_dispatch/request/session.rb#10
ActionDispatch::Request::Session::ENV_SESSION_KEY = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/request/session.rb#11
ActionDispatch::Request::Session::ENV_SESSION_OPTIONS_KEY = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/request/session.rb#45
class ActionDispatch::Request::Session::Options
  # source://actionpack//lib/action_dispatch/request/session.rb#54
  def initialize(by, default_options); end

  # source://actionpack//lib/action_dispatch/request/session.rb#59
  def [](key); end

  # source://actionpack//lib/action_dispatch/request/session.rb#69
  def []=(k, v); end

  # source://actionpack//lib/action_dispatch/request/session.rb#63
  def id(req); end

  # source://actionpack//lib/action_dispatch/request/session.rb#70
  def to_hash; end

  # source://actionpack//lib/action_dispatch/request/session.rb#71
  def values_at(*args); end

  class << self
    # source://actionpack//lib/action_dispatch/request/session.rb#50
    def find(req); end

    # source://actionpack//lib/action_dispatch/request/session.rb#46
    def set(req, options); end
  end
end

# source://actionpack//lib/action_dispatch/request/session.rb#14
ActionDispatch::Request::Session::Unspecified = T.let(T.unsafe(nil), Object)

# source://actionpack//lib/action_dispatch/request/utils.rb#7
class ActionDispatch::Request::Utils
  # source://actionpack//lib/action_dispatch/request/utils.rb#8
  def perform_deep_munge; end

  # source://actionpack//lib/action_dispatch/request/utils.rb#8
  def perform_deep_munge=(val); end

  class << self
    # source://actionpack//lib/action_dispatch/request/utils.rb#29
    def check_param_encoding(params); end

    # source://actionpack//lib/action_dispatch/request/utils.rb#10
    def each_param_value(params, &block); end

    # source://actionpack//lib/action_dispatch/request/utils.rb#21
    def normalize_encode_params(params); end

    # source://actionpack//lib/action_dispatch/request/utils.rb#8
    def perform_deep_munge; end

    # source://actionpack//lib/action_dispatch/request/utils.rb#8
    def perform_deep_munge=(val); end

    # source://actionpack//lib/action_dispatch/request/utils.rb#44
    def set_binary_encoding(request, params, controller, action); end
  end
end

# source://actionpack//lib/action_dispatch/request/utils.rb#81
class ActionDispatch::Request::Utils::CustomParamEncoder
  class << self
    # source://actionpack//lib/action_dispatch/request/utils.rb#94
    def action_encoding_template(request, controller, action); end

    # source://actionpack//lib/action_dispatch/request/utils.rb#82
    def encode(request, params, controller, action); end
  end
end

# source://actionpack//lib/action_dispatch/request/utils.rb#73
class ActionDispatch::Request::Utils::NoNilParamEncoder < ::ActionDispatch::Request::Utils::ParamEncoder
  class << self
    # source://actionpack//lib/action_dispatch/request/utils.rb#74
    def handle_array(params); end
  end
end

# source://actionpack//lib/action_dispatch/request/utils.rb#48
class ActionDispatch::Request::Utils::ParamEncoder
  class << self
    # source://actionpack//lib/action_dispatch/request/utils.rb#67
    def handle_array(params); end

    # source://actionpack//lib/action_dispatch/request/utils.rb#50
    def normalize_encode_params(params); end
  end
end

# source://actionpack//lib/action_dispatch/middleware/cookies.rb#10
module ActionDispatch::RequestCookieMethods
  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#48
  def authenticated_encrypted_cookie_salt; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#11
  def cookie_jar; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#28
  def cookie_jar=(jar); end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#76
  def cookies_digest; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#80
  def cookies_rotations; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#72
  def cookies_same_site_protection; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#68
  def cookies_serializer; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#56
  def encrypted_cookie_cipher; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#40
  def encrypted_cookie_salt; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#44
  def encrypted_signed_cookie_salt; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#24
  def have_cookie_jar?; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#32
  def key_generator; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#64
  def secret_key_base; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#60
  def signed_cookie_digest; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#36
  def signed_cookie_salt; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#52
  def use_authenticated_cookie_encryption; end

  # source://actionpack//lib/action_dispatch/middleware/cookies.rb#84
  def use_cookies_with_metadata; end
end

# source://actionpack//lib/action_dispatch/testing/request_encoder.rb#4
class ActionDispatch::RequestEncoder
  # source://actionpack//lib/action_dispatch/testing/request_encoder.rb#16
  def initialize(mime_name, param_encoder, response_parser); end

  # source://actionpack//lib/action_dispatch/testing/request_encoder.rb#32
  def accept_header; end

  # source://actionpack//lib/action_dispatch/testing/request_encoder.rb#28
  def content_type; end

  # source://actionpack//lib/action_dispatch/testing/request_encoder.rb#36
  def encode_params(params); end

  # source://actionpack//lib/action_dispatch/testing/request_encoder.rb#14
  def response_parser; end

  class << self
    # source://actionpack//lib/action_dispatch/testing/request_encoder.rb#45
    def encoder(name); end

    # source://actionpack//lib/action_dispatch/testing/request_encoder.rb#40
    def parser(content_type); end

    # source://actionpack//lib/action_dispatch/testing/request_encoder.rb#49
    def register_encoder(mime_name, param_encoder: T.unsafe(nil), response_parser: T.unsafe(nil)); end
  end
end

# source://actionpack//lib/action_dispatch/testing/request_encoder.rb#5
class ActionDispatch::RequestEncoder::IdentityEncoder
  # source://actionpack//lib/action_dispatch/testing/request_encoder.rb#7
  def accept_header; end

  # source://actionpack//lib/action_dispatch/testing/request_encoder.rb#6
  def content_type; end

  # source://actionpack//lib/action_dispatch/testing/request_encoder.rb#8
  def encode_params(params); end

  # source://actionpack//lib/action_dispatch/testing/request_encoder.rb#9
  def response_parser; end
end

# source://actionpack//lib/action_dispatch/middleware/request_id.rb#17
class ActionDispatch::RequestId
  # source://actionpack//lib/action_dispatch/middleware/request_id.rb#18
  def initialize(app, header:); end

  # source://actionpack//lib/action_dispatch/middleware/request_id.rb#23
  def call(env); end

  private

  # source://actionpack//lib/action_dispatch/middleware/request_id.rb#38
  def internal_request_id; end

  # source://actionpack//lib/action_dispatch/middleware/request_id.rb#30
  def make_request_id(request_id); end
end

# source://actionpack//lib/action_dispatch/http/response.rb#36
class ActionDispatch::Response
  include ::Rack::Response::Helpers
  include ::ActionDispatch::Http::FilterRedirect
  include ::ActionDispatch::Http::Cache::Response
  include ::MonitorMixin

  # source://actionpack//lib/action_dispatch/http/response.rb#161
  def initialize(status = T.unsafe(nil), header = T.unsafe(nil), body = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/http/response.rb#71
  def [](*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_dispatch/http/response.rb#71
  def []=(*_arg0, **_arg1, &_arg2); end

  # source://rack/2.2.6.4/lib/rack/response.rb#229
  def _cache_control; end

  # source://rack/2.2.6.4/lib/rack/response.rb#233
  def _cache_control=(v); end

  # source://actionpack//lib/action_dispatch/http/response.rb#370
  def abort; end

  # source://actionpack//lib/action_dispatch/http/response.rb#183
  def await_commit; end

  # source://actionpack//lib/action_dispatch/http/response.rb#189
  def await_sent; end

  # source://actionpack//lib/action_dispatch/http/response.rb#304
  def body; end

  # source://actionpack//lib/action_dispatch/http/response.rb#313
  def body=(body); end

  # source://actionpack//lib/action_dispatch/http/response.rb#357
  def body_parts; end

  # source://actionpack//lib/action_dispatch/http/response.rb#274
  def charset; end

  # source://actionpack//lib/action_dispatch/http/response.rb#263
  def charset=(charset); end

  # source://actionpack//lib/action_dispatch/http/response.rb#366
  def close; end

  # source://actionpack//lib/action_dispatch/http/response.rb#285
  def code; end

  # source://actionpack//lib/action_dispatch/http/response.rb#193
  def commit!; end

  # source://actionpack//lib/action_dispatch/http/response.rb#217
  def committed?; end

  # source://actionpack//lib/action_dispatch/http/response.rb#243
  def content_type; end

  # source://actionpack//lib/action_dispatch/http/response.rb#233
  def content_type=(content_type); end

  # source://actionpack//lib/action_dispatch/http/response.rb#394
  def cookies; end

  # source://actionpack//lib/action_dispatch/http/response.rb#85
  def default_charset; end

  # source://actionpack//lib/action_dispatch/http/response.rb#85
  def default_charset=(val); end

  # source://actionpack//lib/action_dispatch/http/response.rb#86
  def default_headers; end

  # source://actionpack//lib/action_dispatch/http/response.rb#86
  def default_headers=(val); end

  # source://actionpack//lib/action_dispatch/http/response.rb#181
  def delete_header(key); end

  # source://actionpack//lib/action_dispatch/http/response.rb#73
  def each(&block); end

  # source://actionpack//lib/action_dispatch/http/response.rb#179
  def get_header(key); end

  # source://actionpack//lib/action_dispatch/http/response.rb#178
  def has_header?(key); end

  # source://actionpack//lib/action_dispatch/http/response.rb#67
  def header; end

  # source://actionpack//lib/action_dispatch/http/response.rb#67
  def headers; end

  # source://actionpack//lib/action_dispatch/http/response.rb#248
  def media_type; end

  # source://actionpack//lib/action_dispatch/http/response.rb#297
  def message; end

  # source://actionpack//lib/action_dispatch/http/response.rb#385
  def prepare!; end

  # source://rack/2.2.6.4/lib/rack/response.rb#204
  def redirect_url; end

  # source://actionpack//lib/action_dispatch/http/response.rb#61
  def request; end

  # source://actionpack//lib/action_dispatch/http/response.rb#61
  def request=(_arg0); end

  # source://actionpack//lib/action_dispatch/http/response.rb#353
  def reset_body!; end

  # source://actionpack//lib/action_dispatch/http/response.rb#280
  def response_code; end

  # source://actionpack//lib/action_dispatch/http/response.rb#348
  def send_file(path); end

  # source://actionpack//lib/action_dispatch/http/response.rb#201
  def sending!; end

  # source://actionpack//lib/action_dispatch/http/response.rb#216
  def sending?; end

  # source://actionpack//lib/action_dispatch/http/response.rb#252
  def sending_file=(v); end

  # source://actionpack//lib/action_dispatch/http/response.rb#209
  def sent!; end

  # source://actionpack//lib/action_dispatch/http/response.rb#218
  def sent?; end

  # source://actionpack//lib/action_dispatch/http/response.rb#180
  def set_header(key, v); end

  # source://actionpack//lib/action_dispatch/http/response.rb#64
  def status; end

  # source://actionpack//lib/action_dispatch/http/response.rb#221
  def status=(status); end

  # source://actionpack//lib/action_dispatch/http/response.rb#297
  def status_message; end

  # source://actionpack//lib/action_dispatch/http/response.rb#159
  def stream; end

  # source://actionpack//lib/action_dispatch/http/response.rb#385
  def to_a; end

  # source://actionpack//lib/action_dispatch/http/response.rb#308
  def write(string); end

  private

  # source://actionpack//lib/action_dispatch/http/response.rb#466
  def assign_default_content_type_and_charset!; end

  # source://actionpack//lib/action_dispatch/http/response.rb#438
  def before_committed; end

  # source://actionpack//lib/action_dispatch/http/response.rb#446
  def before_sending; end

  # source://actionpack//lib/action_dispatch/http/response.rb#458
  def build_buffer(response, body); end

  # source://actionpack//lib/action_dispatch/http/response.rb#510
  def handle_no_content!; end

  # source://actionpack//lib/action_dispatch/http/response.rb#462
  def munge_body_object(body); end

  # source://actionpack//lib/action_dispatch/http/response.rb#418
  def parse_content_type(content_type); end

  # source://actionpack//lib/action_dispatch/http/response.rb#428
  def parsed_content_type_header; end

  # source://actionpack//lib/action_dispatch/http/response.rb#517
  def rack_response(status, header); end

  # source://actionpack//lib/action_dispatch/http/response.rb#432
  def set_content_type(content_type, charset); end

  class << self
    # source://actionpack//lib/action_dispatch/http/response.rb#149
    def create(status = T.unsafe(nil), header = T.unsafe(nil), body = T.unsafe(nil), default_headers: T.unsafe(nil)); end

    # source://actionpack//lib/action_dispatch/http/response.rb#85
    def default_charset; end

    # source://actionpack//lib/action_dispatch/http/response.rb#85
    def default_charset=(val); end

    # source://actionpack//lib/action_dispatch/http/response.rb#86
    def default_headers; end

    # source://actionpack//lib/action_dispatch/http/response.rb#86
    def default_headers=(val); end

    # source://actionpack//lib/action_dispatch/http/response.rb#154
    def merge_default_headers(original, default); end
  end
end

# source://actionpack//lib/action_dispatch/http/response.rb#97
class ActionDispatch::Response::Buffer
  # source://actionpack//lib/action_dispatch/http/response.rb#98
  def initialize(response, buf); end

  # source://actionpack//lib/action_dispatch/http/response.rb#131
  def abort; end

  # source://actionpack//lib/action_dispatch/http/response.rb#105
  def body; end

  # source://actionpack//lib/action_dispatch/http/response.rb#134
  def close; end

  # source://actionpack//lib/action_dispatch/http/response.rb#139
  def closed?; end

  # source://actionpack//lib/action_dispatch/http/response.rb#121
  def each(&block); end

  # source://actionpack//lib/action_dispatch/http/response.rb#113
  def write(string); end

  private

  # source://actionpack//lib/action_dispatch/http/response.rb#144
  def each_chunk(&block); end
end

# source://actionpack//lib/action_dispatch/http/response.rb#80
ActionDispatch::Response::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/response.rb#412
ActionDispatch::Response::CONTENT_TYPE_PARSER = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch/http/response.rb#409
class ActionDispatch::Response::ContentTypeHeader < ::Struct
  def charset; end
  def charset=(_); end
  def mime_type; end
  def mime_type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://actionpack//lib/action_dispatch/http/response.rb#326
class ActionDispatch::Response::FileBody
  # source://actionpack//lib/action_dispatch/http/response.rb#329
  def initialize(path); end

  # source://actionpack//lib/action_dispatch/http/response.rb#333
  def body; end

  # source://actionpack//lib/action_dispatch/http/response.rb#338
  def each; end

  # source://actionpack//lib/action_dispatch/http/response.rb#327
  def to_path; end
end

# source://actionpack//lib/action_dispatch/http/response.rb#37
class ActionDispatch::Response::Header
  # source://actionpack//lib/action_dispatch/http/response.rb#38
  def initialize(response, header); end

  # source://actionpack//lib/action_dispatch/http/response.rb#43
  def []=(k, v); end

  # source://actionpack//lib/action_dispatch/http/response.rb#51
  def merge(other); end

  # source://actionpack//lib/action_dispatch/http/response.rb#55
  def to_hash; end
end

# source://actionpack//lib/action_dispatch/http/response.rb#82
ActionDispatch::Response::LOCATION = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/response.rb#83
ActionDispatch::Response::NO_CONTENT_CODES = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/http/response.rb#410
ActionDispatch::Response::NullContentTypeHeader = T.let(T.unsafe(nil), ActionDispatch::Response::ContentTypeHeader)

# source://actionpack//lib/action_dispatch/http/response.rb#474
class ActionDispatch::Response::RackBody
  # source://actionpack//lib/action_dispatch/http/response.rb#475
  def initialize(response); end

  # source://actionpack//lib/action_dispatch/http/response.rb#489
  def body; end

  # source://actionpack//lib/action_dispatch/http/response.rb#483
  def close; end

  # source://actionpack//lib/action_dispatch/http/response.rb#479
  def each(*args, &block); end

  # source://actionpack//lib/action_dispatch/http/response.rb#493
  def respond_to?(method, include_private = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/http/response.rb#505
  def to_ary; end

  # source://actionpack//lib/action_dispatch/http/response.rb#501
  def to_path; end
end

# source://actionpack//lib/action_dispatch/http/response.rb#81
ActionDispatch::Response::SET_COOKIE = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/routing.rb#248
module ActionDispatch::Routing
  extend ::ActiveSupport::Autoload
end

# source://actionpack//lib/action_dispatch/routing/inspector.rb#129
module ActionDispatch::Routing::ConsoleFormatter; end

# source://actionpack//lib/action_dispatch/routing/inspector.rb#130
class ActionDispatch::Routing::ConsoleFormatter::Base
  # source://actionpack//lib/action_dispatch/routing/inspector.rb#131
  def initialize; end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#145
  def header(routes); end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#148
  def no_routes(routes, filter); end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#135
  def result; end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#142
  def section(routes); end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#139
  def section_title(title); end
end

# source://actionpack//lib/action_dispatch/routing/inspector.rb#202
class ActionDispatch::Routing::ConsoleFormatter::Expanded < ::ActionDispatch::Routing::ConsoleFormatter::Base
  # source://actionpack//lib/action_dispatch/routing/inspector.rb#203
  def initialize(width: T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#212
  def section(routes); end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#208
  def section_title(title); end

  private

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#217
  def draw_expanded_section(routes); end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#229
  def route_header(index:); end
end

# source://actionpack//lib/action_dispatch/routing/inspector.rb#166
class ActionDispatch::Routing::ConsoleFormatter::Sheet < ::ActionDispatch::Routing::ConsoleFormatter::Base
  # source://actionpack//lib/action_dispatch/routing/inspector.rb#175
  def header(routes); end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#171
  def section(routes); end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#167
  def section_title(title); end

  private

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#189
  def draw_header(routes); end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#180
  def draw_section(routes); end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#195
  def widths(routes); end
end

# source://actionpack//lib/action_dispatch/routing/endpoint.rb#5
class ActionDispatch::Routing::Endpoint
  # source://actionpack//lib/action_dispatch/routing/endpoint.rb#9
  def app; end

  # source://actionpack//lib/action_dispatch/routing/endpoint.rb#6
  def dispatcher?; end

  # source://actionpack//lib/action_dispatch/routing/endpoint.rb#12
  def engine?; end

  # source://actionpack//lib/action_dispatch/routing/endpoint.rb#8
  def matches?(req); end

  # source://actionpack//lib/action_dispatch/routing/endpoint.rb#10
  def rack_app; end

  # source://actionpack//lib/action_dispatch/routing/endpoint.rb#7
  def redirect?; end
end

# source://actionpack//lib/action_dispatch/routing.rb#258
ActionDispatch::Routing::HTTP_METHODS = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/routing/inspector.rb#235
class ActionDispatch::Routing::HtmlTableFormatter
  # source://actionpack//lib/action_dispatch/routing/inspector.rb#236
  def initialize(view); end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#250
  def header(routes); end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#253
  def no_routes(*_arg0); end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#266
  def result; end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#245
  def section(routes); end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#241
  def section_title(title); end
end

# source://actionpack//lib/action_dispatch/routing/mapper.rb#12
class ActionDispatch::Routing::Mapper
  include ::ActionDispatch::Routing::Mapper::Base
  include ::ActionDispatch::Routing::Mapper::HttpHelpers
  include ::ActionDispatch::Routing::Redirection
  include ::ActionDispatch::Routing::Mapper::Scoping
  include ::ActionDispatch::Routing::Mapper::Concerns
  include ::ActionDispatch::Routing::Mapper::Resources
  include ::ActionDispatch::Routing::Mapper::CustomUrls

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#2279
  def initialize(set); end

  class << self
    # source://actionpack//lib/action_dispatch/routing/mapper.rb#381
    def normalize_name(name); end

    # source://actionpack//lib/action_dispatch/routing/mapper.rb#364
    def normalize_path(path); end
  end
end

# source://actionpack//lib/action_dispatch/routing/mapper.rb#385
module ActionDispatch::Routing::Mapper::Base
  # source://actionpack//lib/action_dispatch/routing/mapper.rb#618
  def default_url_options(options); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#618
  def default_url_options=(options); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#630
  def has_named_route?(name); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#566
  def match(path, options = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#588
  def mount(app, options = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#623
  def with_default_scope(scope, &block); end

  private

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#639
  def app_name(app, rails_app); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#648
  def define_generate_prefix(app, name); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#635
  def rails_app?(app); end
end

# source://actionpack//lib/action_dispatch/routing/mapper.rb#1991
module ActionDispatch::Routing::Mapper::Concerns
  # source://actionpack//lib/action_dispatch/routing/mapper.rb#2048
  def concern(name, callable = T.unsafe(nil), &block); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#2064
  def concerns(*args); end
end

# source://actionpack//lib/action_dispatch/routing/mapper.rb#15
class ActionDispatch::Routing::Mapper::Constraints < ::ActionDispatch::Routing::Endpoint
  # source://actionpack//lib/action_dispatch/routing/mapper.rb#21
  def initialize(app, constraints, strategy); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#16
  def app; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#16
  def constraints; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#36
  def dispatcher?; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#38
  def matches?(req); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#45
  def serve(req); end

  private

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#52
  def constraint_args(constraint, request); end
end

# source://actionpack//lib/action_dispatch/routing/mapper.rb#19
ActionDispatch::Routing::Mapper::Constraints::CALL = T.let(T.unsafe(nil), Proc)

# source://actionpack//lib/action_dispatch/routing/mapper.rb#18
ActionDispatch::Routing::Mapper::Constraints::SERVE = T.let(T.unsafe(nil), Proc)

# source://actionpack//lib/action_dispatch/routing/mapper.rb#2076
module ActionDispatch::Routing::Mapper::CustomUrls
  # source://actionpack//lib/action_dispatch/routing/mapper.rb#2124
  def direct(name, options = T.unsafe(nil), &block); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#2176
  def resolve(*args, &block); end
end

# source://actionpack//lib/action_dispatch/routing/mapper.rb#682
module ActionDispatch::Routing::Mapper::HttpHelpers
  # source://actionpack//lib/action_dispatch/routing/mapper.rb#719
  def delete(*args, &block); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#687
  def get(*args, &block); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#727
  def options(*args, &block); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#703
  def patch(*args, &block); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#695
  def post(*args, &block); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#711
  def put(*args, &block); end

  private

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#732
  def map_method(method, args, &block); end
end

# source://actionpack//lib/action_dispatch/routing/mapper.rb#69
class ActionDispatch::Routing::Mapper::Mapping
  # source://actionpack//lib/action_dispatch/routing/mapper.rb#118
  def initialize(set:, ast:, controller:, default_action:, to:, formatted:, via:, options_constraints:, anchor:, scope_params:, options:); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#176
  def application; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#73
  def ast; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#180
  def conditions; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#73
  def default_action; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#73
  def default_controller; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#73
  def defaults; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#169
  def make_route(name, precedence); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#73
  def path; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#73
  def required_defaults; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#73
  def requirements; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#73
  def scope_options; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#73
  def to; end

  private

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#316
  def add_controller_module(controller, modyoule); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#269
  def app(blocks); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#335
  def blocks(callable_constraint); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#184
  def build_conditions(current_conditions, request_class); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#281
  def check_controller_and_action(path_params, controller, action); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#296
  def check_part(name, part, path_params, hash); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#342
  def constraints(options, path_params); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#356
  def dispatcher(raise_on_name_error); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#199
  def intern(object); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#265
  def normalize_defaults(options); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#233
  def normalize_format(formatted); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#203
  def normalize_options!(options, path_params, modyoule); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#193
  def request_method; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#227
  def split_constraints(path_params, constraints); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#308
  def split_to(to); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#328
  def translate_controller(controller); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#249
  def verify_regexp_requirements(requirements, wildcard_options); end

  class << self
    # source://actionpack//lib/action_dispatch/routing/mapper.rb#76
    def build(scope, set, ast, controller, default_action, to, via, formatted, options_constraints, anchor, options); end

    # source://actionpack//lib/action_dispatch/routing/mapper.rb#90
    def check_via(via); end

    # source://actionpack//lib/action_dispatch/routing/mapper.rb#102
    def normalize_path(path, format); end

    # source://actionpack//lib/action_dispatch/routing/mapper.rb#114
    def optional_format?(path, format); end
  end
end

# source://actionpack//lib/action_dispatch/routing/mapper.rb#70
ActionDispatch::Routing::Mapper::Mapping::ANCHOR_CHARACTERS_REGEX = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch/routing/mapper.rb#167
ActionDispatch::Routing::Mapper::Mapping::JOINED_SEPARATORS = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/routing/mapper.rb#71
ActionDispatch::Routing::Mapper::Mapping::OPTIONAL_FORMAT_REGEX = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch/routing/mapper.rb#1122
module ActionDispatch::Routing::Mapper::Resources
  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1500
  def collection(&block); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1587
  def draw(name); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1609
  def match(path, *rest, &block); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1521
  def member(&block); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1568
  def namespace(path, options = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1547
  def nested(&block); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1537
  def new(&block); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1292
  def resource(*resources, &block); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1458
  def resources(*resources, &block); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1257
  def resources_path_names(options); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1656
  def root(path, options = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1576
  def shallow; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1583
  def shallow?; end

  private

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1720
  def action_options?(options); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1802
  def action_path(name); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1938
  def add_route(action, controller, options, _path, to, via, formatted, anchor, options_constraints); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1856
  def api_only?; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1715
  def apply_action_options(options); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1681
  def apply_common_behavior_for(method, resources, options, &block); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1778
  def canonical_action?(action); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1923
  def decomposed_match(path, controller, options, _path, to, via, formatted, anchor, options_constraints); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1908
  def get_to_from_path(path, to, action); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1867
  def map_match(paths, options); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1965
  def match_root_route(options); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1818
  def name_for_action(as, action); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1755
  def nested_options; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1736
  def nested_scope?; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1774
  def param_constraint; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1770
  def param_constraint?; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1677
  def parent_resource; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1792
  def path_for_action(action, path); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1860
  def path_scope(path); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1806
  def prefix_name_for_action(as, action); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1732
  def resource_method_scope?; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1747
  def resource_scope(resource, &block); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1728
  def resource_scope?; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1724
  def scope_action_options; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1844
  def set_member_mappings_for_resource; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1764
  def shallow_nesting_depth; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1782
  def shallow_scope; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1919
  def using_match_shorthand?(path); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1740
  def with_scope_level(kind); end
end

# source://actionpack//lib/action_dispatch/routing/mapper.rb#1127
ActionDispatch::Routing::Mapper::Resources::CANONICAL_ACTIONS = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/routing/mapper.rb#1126
ActionDispatch::Routing::Mapper::Resources::RESOURCE_OPTIONS = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/routing/mapper.rb#1129
class ActionDispatch::Routing::Mapper::Resources::Resource
  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1132
  def initialize(entities, api_only, shallow, options = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1157
  def actions; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1165
  def available_actions; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1189
  def collection_name; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1130
  def collection_scope; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1130
  def controller; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1149
  def default_actions; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1181
  def member_name; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1199
  def member_scope; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1173
  def name; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1209
  def nested_param; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1213
  def nested_scope; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1205
  def new_scope(new_path); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1130
  def param; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1130
  def path; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1177
  def plural; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1193
  def resource_scope; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1217
  def shallow?; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1199
  def shallow_scope; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1221
  def singleton?; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1181
  def singular; end
end

# source://actionpack//lib/action_dispatch/routing/mapper.rb#1224
class ActionDispatch::Routing::Mapper::Resources::SingletonResource < ::ActionDispatch::Routing::Mapper::Resources::Resource
  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1225
  def initialize(entities, api_only, shallow, options); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1244
  def collection_name; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1232
  def default_actions; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1244
  def member_name; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1130
  def member_scope; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1130
  def nested_scope; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1240
  def plural; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1254
  def singleton?; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1244
  def singular; end
end

# source://actionpack//lib/action_dispatch/routing/mapper.rb#1125
ActionDispatch::Routing::Mapper::Resources::VALID_ON_OPTIONS = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/routing/mapper.rb#2190
class ActionDispatch::Routing::Mapper::Scope
  include ::Enumerable

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#2200
  def initialize(hash, parent = T.unsafe(nil), scope_level = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#2259
  def [](key); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#2226
  def action_name(name_prefix, prefix, collection_name, member_name); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#2266
  def each; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#2274
  def frame; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#2206
  def nested?; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#2251
  def new(hash); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#2255
  def new_level(level); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#2210
  def null?; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#2247
  def options; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#2198
  def parent; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#2222
  def resource_method_scope?; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#2243
  def resource_scope?; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#2218
  def resources?; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#2214
  def root?; end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#2198
  def scope_level; end
end

# source://actionpack//lib/action_dispatch/routing/mapper.rb#2276
ActionDispatch::Routing::Mapper::Scope::NULL = T.let(T.unsafe(nil), ActionDispatch::Routing::Mapper::Scope)

# source://actionpack//lib/action_dispatch/routing/mapper.rb#2191
ActionDispatch::Routing::Mapper::Scope::OPTIONS = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/routing/mapper.rb#2196
ActionDispatch::Routing::Mapper::Scope::RESOURCE_METHOD_SCOPES = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/routing/mapper.rb#2195
ActionDispatch::Routing::Mapper::Scope::RESOURCE_SCOPES = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/routing/mapper.rb#794
module ActionDispatch::Routing::Mapper::Scoping
  # source://actionpack//lib/action_dispatch/routing/mapper.rb#999
  def constraints(constraints = T.unsafe(nil), &block); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#884
  def controller(controller); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1008
  def defaults(defaults = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#929
  def namespace(path, options = T.unsafe(nil), &block); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#825
  def scope(*args); end

  private

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1040
  def merge_action_scope(parent, child); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1024
  def merge_as_scope(parent, child); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1064
  def merge_blocks_scope(parent, child); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1056
  def merge_constraints_scope(parent, child); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1036
  def merge_controller_scope(parent, child); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1060
  def merge_defaults_scope(parent, child); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1048
  def merge_format_scope(parent, child); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1032
  def merge_module_scope(parent, child); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1070
  def merge_options_scope(parent, child); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1052
  def merge_path_names_scope(parent, child); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1016
  def merge_path_scope(parent, child); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1020
  def merge_shallow_path_scope(parent, child); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1028
  def merge_shallow_prefix_scope(parent, child); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1074
  def merge_shallow_scope(parent, child); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1078
  def merge_to_scope(parent, child); end

  # source://actionpack//lib/action_dispatch/routing/mapper.rb#1044
  def merge_via_scope(parent, child); end
end

# source://actionpack//lib/action_dispatch/routing/mapper.rb#877
ActionDispatch::Routing::Mapper::Scoping::POISON = T.let(T.unsafe(nil), Object)

# source://actionpack//lib/action_dispatch/routing/mapper.rb#13
ActionDispatch::Routing::Mapper::URL_OPTIONS = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/routing/redirection.rb#103
class ActionDispatch::Routing::OptionRedirect < ::ActionDispatch::Routing::Redirect
  # source://actionpack//lib/action_dispatch/routing/redirection.rb#132
  def inspect; end

  # source://actionpack//lib/action_dispatch/routing/redirection.rb#11
  def options; end

  # source://actionpack//lib/action_dispatch/routing/redirection.rb#106
  def path(params, request); end
end

# source://actionpack//lib/action_dispatch/routing/redirection.rb#78
class ActionDispatch::Routing::PathRedirect < ::ActionDispatch::Routing::Redirect
  # source://actionpack//lib/action_dispatch/routing/redirection.rb#93
  def inspect; end

  # source://actionpack//lib/action_dispatch/routing/redirection.rb#81
  def path(params, request); end

  private

  # source://actionpack//lib/action_dispatch/routing/redirection.rb#98
  def interpolation_required?(string, params); end
end

# source://actionpack//lib/action_dispatch/routing/redirection.rb#79
ActionDispatch::Routing::PathRedirect::URL_PARTS = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#57
module ActionDispatch::Routing::PolymorphicRoutes
  # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#153
  def edit_polymorphic_path(record_or_hash, options = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#149
  def edit_polymorphic_url(record_or_hash, options = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#153
  def new_polymorphic_path(record_or_hash, options = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#149
  def new_polymorphic_url(record_or_hash, options = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#124
  def polymorphic_path(record_or_hash_or_array, options = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#101
  def polymorphic_url(record_or_hash_or_array, options = T.unsafe(nil)); end

  private

  # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#168
  def polymorphic_mapping(record); end

  # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#164
  def polymorphic_path_for_action(action, record_or_hash, options); end

  # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#160
  def polymorphic_url_for_action(action, record_or_hash, options); end
end

# source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#176
class ActionDispatch::Routing::PolymorphicRoutes::HelperMethodBuilder
  # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#239
  def initialize(key_strategy, prefix, suffix); end

  # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#253
  def handle_class(klass); end

  # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#257
  def handle_class_call(target, klass); end

  # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#284
  def handle_list(list); end

  # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#261
  def handle_model(record); end

  # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#275
  def handle_model_call(target, record); end

  # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#245
  def handle_string(record); end

  # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#249
  def handle_string_call(target, str); end

  # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#237
  def prefix; end

  # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#237
  def suffix; end

  private

  # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#338
  def get_method_for_class(klass); end

  # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#343
  def get_method_for_string(str); end

  # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#330
  def polymorphic_mapping(target, record); end

  class << self
    # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#187
    def build(action, type); end

    # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#179
    def get(action, type); end

    # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#185
    def path; end

    # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#201
    def plural(prefix, suffix); end

    # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#205
    def polymorphic_method(recipient, record_or_hash_or_array, action, type, options); end

    # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#197
    def singular(prefix, suffix); end

    # source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#184
    def url; end
  end
end

# source://actionpack//lib/action_dispatch/routing/polymorphic_routes.rb#177
ActionDispatch::Routing::PolymorphicRoutes::HelperMethodBuilder::CACHE = T.let(T.unsafe(nil), Hash)

# source://actionpack//lib/action_dispatch/routing/redirection.rb#10
class ActionDispatch::Routing::Redirect < ::ActionDispatch::Routing::Endpoint
  # source://actionpack//lib/action_dispatch/routing/redirection.rb#13
  def initialize(status, block); end

  # source://actionpack//lib/action_dispatch/routing/redirection.rb#11
  def block; end

  # source://actionpack//lib/action_dispatch/routing/redirection.rb#20
  def call(env); end

  # source://actionpack//lib/action_dispatch/routing/redirection.rb#56
  def inspect; end

  # source://actionpack//lib/action_dispatch/routing/redirection.rb#52
  def path(params, request); end

  # source://actionpack//lib/action_dispatch/routing/redirection.rb#18
  def redirect?; end

  # source://actionpack//lib/action_dispatch/routing/redirection.rb#24
  def serve(req); end

  # source://actionpack//lib/action_dispatch/routing/redirection.rb#11
  def status; end

  private

  # source://actionpack//lib/action_dispatch/routing/redirection.rb#65
  def escape(params); end

  # source://actionpack//lib/action_dispatch/routing/redirection.rb#69
  def escape_fragment(params); end

  # source://actionpack//lib/action_dispatch/routing/redirection.rb#73
  def escape_path(params); end

  # source://actionpack//lib/action_dispatch/routing/redirection.rb#61
  def relative_path?(path); end
end

# source://actionpack//lib/action_dispatch/routing/redirection.rb#137
module ActionDispatch::Routing::Redirection
  # source://actionpack//lib/action_dispatch/routing/redirection.rb#190
  def redirect(*args, &block); end
end

# source://actionpack//lib/action_dispatch/routing/route_set.rb#14
class ActionDispatch::Routing::RouteSet
  # source://actionpack//lib/action_dispatch/routing/route_set.rb#366
  def initialize(config = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#615
  def add_polymorphic_mapping(klass, options, &block); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#584
  def add_route(mapping, name); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#619
  def add_url_helper(name, options, &block); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#395
  def api_only?; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#415
  def append(&block); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#849
  def call(env); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#439
  def clear!; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#336
  def default_scope; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#336
  def default_scope=(_arg0); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#338
  def default_url_options; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#338
  def default_url_options=(_arg0); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#461
  def define_mounted_helper(name, script_namer = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#337
  def disable_clear_and_finalize; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#337
  def disable_clear_and_finalize=(_arg0); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#408
  def draw(&block); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#338
  def draw_paths; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#338
  def draw_paths=(_arg0); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#385
  def eager_load!; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#580
  def empty?; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#339
  def env_key; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#760
  def extra_keys(options, recall = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#433
  def finalize!; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#792
  def find_relative_url_root(options); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#788
  def find_script_name(options); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#336
  def formatter; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#336
  def formatter=(_arg0); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#764
  def generate_extras(options, recall = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#488
  def generate_url_helpers(supports_path); end

  def inspect; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#457
  def mounted_helpers; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#336
  def named_routes; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#336
  def named_routes=(_arg0); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#784
  def optimize_routes_generation?; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#796
  def path_for(options, route_name = T.unsafe(nil), reserved = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#339
  def polymorphic_mappings; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#419
  def prepend(&block); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#855
  def recognize_path(path, environment = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#870
  def recognize_path_with_request(req, path, extras, raise_on_missing: T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#391
  def relative_url_root; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#399
  def request_class; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#337
  def resources_path_names; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#337
  def resources_path_names=(_arg0); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#336
  def router; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#336
  def router=(_arg0); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#336
  def routes; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#336
  def set; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#336
  def set=(_arg0); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#801
  def url_for(options, route_name = T.unsafe(nil), url_strategy = T.unsafe(nil), method_name = T.unsafe(nil), reserved = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#480
  def url_helpers(supports_path = T.unsafe(nil)); end

  private

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#423
  def eval_block(block); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#775
  def generate(route_name, options, recall = T.unsafe(nil), method_name = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#403
  def make_request(env); end

  class << self
    # source://actionpack//lib/action_dispatch/routing/route_set.rb#343
    def default_resources_path_names; end

    # source://actionpack//lib/action_dispatch/routing/route_set.rb#347
    def new_with_config(config); end
  end
end

# source://actionpack//lib/action_dispatch/routing/route_set.rb#362
class ActionDispatch::Routing::RouteSet::Config < ::Struct
  def api_only; end
  def api_only=(_); end
  def relative_url_root; end
  def relative_url_root=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://actionpack//lib/action_dispatch/routing/route_set.rb#623
class ActionDispatch::Routing::RouteSet::CustomUrlHelper
  # source://actionpack//lib/action_dispatch/routing/route_set.rb#626
  def initialize(name, defaults, &block); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#624
  def block; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#632
  def call(t, args, only_path = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#624
  def defaults; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#624
  def name; end

  private

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#644
  def eval_block(t, args, options); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#648
  def merge_defaults(options); end
end

# source://actionpack//lib/action_dispatch/routing/route_set.rb#364
ActionDispatch::Routing::RouteSet::DEFAULT_CONFIG = T.let(T.unsafe(nil), ActionDispatch::Routing::RouteSet::Config)

# source://actionpack//lib/action_dispatch/routing/route_set.rb#21
class ActionDispatch::Routing::RouteSet::Dispatcher < ::ActionDispatch::Routing::Endpoint
  # source://actionpack//lib/action_dispatch/routing/route_set.rb#22
  def initialize(raise_on_name_error); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#26
  def dispatcher?; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#28
  def serve(req); end

  private

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#42
  def controller(req); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#48
  def dispatch(controller, action, req, res); end
end

# source://actionpack//lib/action_dispatch/routing/route_set.rb#653
class ActionDispatch::Routing::RouteSet::Generator
  # source://actionpack//lib/action_dispatch/routing/route_set.rb#656
  def initialize(named_route, options, recall, set); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#668
  def controller; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#672
  def current_controller; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#743
  def different_controller?; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#739
  def generate; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#654
  def named_route; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#727
  def normalize_controller!; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#709
  def normalize_controller_action_id!; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#684
  def normalize_options!; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#654
  def options; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#654
  def recall; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#654
  def set; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#676
  def use_recall_for(key); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#717
  def use_relative_controller!; end

  private

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#749
  def named_route_exists?; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#753
  def segment_keys; end
end

# source://actionpack//lib/action_dispatch/routing/route_set.rb#448
module ActionDispatch::Routing::RouteSet::MountedHelpers
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionDispatch::Routing::UrlFor

  mixes_in_class_methods GeneratedClassMethods

  module GeneratedClassMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end

  module GeneratedInstanceMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end
end

# source://actionpack//lib/action_dispatch/routing/route_set.rb#66
class ActionDispatch::Routing::RouteSet::NamedRouteCollection
  include ::Enumerable

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#71
  def initialize; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#121
  def [](name); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#102
  def []=(name, route); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#102
  def add(name, route); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#149
  def add_url_helper(name, defaults, &block); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#88
  def clear; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#88
  def clear!; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#134
  def each(&block); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#121
  def get(name); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#84
  def helper_names; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#125
  def key?(name); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#143
  def length; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#139
  def names; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#68
  def path_helpers_module; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#79
  def route_defined?(name); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#68
  def url_helpers_module; end

  private

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#317
  def define_url_helper(mod, name, helper, url_strategy); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#68
  def routes; end
end

# source://actionpack//lib/action_dispatch/routing/route_set.rb#172
class ActionDispatch::Routing::RouteSet::NamedRouteCollection::UrlHelper
  # source://actionpack//lib/action_dispatch/routing/route_set.rb#255
  def initialize(route, options, route_name); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#262
  def call(t, method_name, args, inner_options, url_strategy); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#274
  def handle_positional_args(controller_options, inner_options, args, result, path_params); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#185
  def route_name; end

  class << self
    # source://actionpack//lib/action_dispatch/routing/route_set.rb#173
    def create(route, options, route_name); end

    # source://actionpack//lib/action_dispatch/routing/route_set.rb#181
    def optimize_helper?(route); end
  end
end

# source://actionpack//lib/action_dispatch/routing/route_set.rb#187
class ActionDispatch::Routing::RouteSet::NamedRouteCollection::UrlHelper::OptimizedUrlHelper < ::ActionDispatch::Routing::RouteSet::NamedRouteCollection::UrlHelper
  # source://actionpack//lib/action_dispatch/routing/route_set.rb#190
  def initialize(route, options, route_name); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#188
  def arg_size; end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#196
  def call(t, method_name, args, inner_options, url_strategy); end

  private

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#227
  def optimize_routes_generation?(t); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#219
  def optimized_helper(args); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#231
  def parameterize_args(args); end

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#242
  def raise_generation_error(args); end
end

# source://actionpack//lib/action_dispatch/routing/route_set.rb#333
ActionDispatch::Routing::RouteSet::PATH = T.let(T.unsafe(nil), Proc)

# source://actionpack//lib/action_dispatch/routing/route_set.rb#780
ActionDispatch::Routing::RouteSet::RESERVED_OPTIONS = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/routing/route_set.rb#53
class ActionDispatch::Routing::RouteSet::StaticDispatcher < ::ActionDispatch::Routing::RouteSet::Dispatcher
  # source://actionpack//lib/action_dispatch/routing/route_set.rb#54
  def initialize(controller_class); end

  private

  # source://actionpack//lib/action_dispatch/routing/route_set.rb#60
  def controller(_); end
end

# source://actionpack//lib/action_dispatch/routing/route_set.rb#334
ActionDispatch::Routing::RouteSet::UNKNOWN = T.let(T.unsafe(nil), Proc)

# source://actionpack//lib/action_dispatch/routing/inspector.rb#8
class ActionDispatch::Routing::RouteWrapper < ::SimpleDelegator
  # source://actionpack//lib/action_dispatch/routing/inspector.rb#41
  def action; end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#13
  def constraints; end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#37
  def controller; end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#9
  def endpoint; end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#49
  def engine?; end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#45
  def internal?; end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#25
  def name; end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#21
  def path; end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#17
  def rack_app; end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#29
  def reqs; end
end

# source://actionpack//lib/action_dispatch/routing/inspector.rb#58
class ActionDispatch::Routing::RoutesInspector
  # source://actionpack//lib/action_dispatch/routing/inspector.rb#59
  def initialize(routes); end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#64
  def format(formatter, filter = T.unsafe(nil)); end

  private

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#117
  def collect_engine_routes(route); end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#104
  def collect_routes(routes); end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#93
  def filter_routes(filter); end

  # source://actionpack//lib/action_dispatch/routing/inspector.rb#84
  def normalize_filter(filter); end
end

# source://actionpack//lib/action_dispatch/routing/routes_proxy.rb#7
class ActionDispatch::Routing::RoutesProxy
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::Routing::UrlFor

  # source://actionpack//lib/action_dispatch/routing/routes_proxy.rb#13
  def initialize(routes, scope, helpers, script_namer = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/routing/routes_proxy.rb#10
  def _routes; end

  # source://actionpack//lib/action_dispatch/routing/url_for.rb#95
  def default_url_options; end

  # source://actionpack//lib/action_dispatch/routing/url_for.rb#95
  def default_url_options=(_arg0); end

  # source://actionpack//lib/action_dispatch/routing/url_for.rb#95
  def default_url_options?; end

  # source://actionpack//lib/action_dispatch/routing/routes_proxy.rb#10
  def routes; end

  # source://actionpack//lib/action_dispatch/routing/routes_proxy.rb#10
  def routes=(_arg0); end

  # source://actionpack//lib/action_dispatch/routing/routes_proxy.rb#10
  def scope; end

  # source://actionpack//lib/action_dispatch/routing/routes_proxy.rb#10
  def scope=(_arg0); end

  # source://actionpack//lib/action_dispatch/routing/routes_proxy.rb#19
  def url_options; end

  private

  # source://actionpack//lib/action_dispatch/routing/routes_proxy.rb#58
  def merge_script_names(previous_script_name, new_script_name); end

  # source://actionpack//lib/action_dispatch/routing/routes_proxy.rb#30
  def method_missing(method, *args); end

  # source://actionpack//lib/action_dispatch/routing/routes_proxy.rb#26
  def respond_to_missing?(method, _); end

  class << self
    # source://actionpack//lib/action_dispatch/routing/url_for.rb#95
    def default_url_options; end

    # source://actionpack//lib/action_dispatch/routing/url_for.rb#95
    def default_url_options=(value); end

    # source://actionpack//lib/action_dispatch/routing/url_for.rb#95
    def default_url_options?; end
  end
end

# source://actionpack//lib/action_dispatch/routing.rb#257
ActionDispatch::Routing::SEPARATORS = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/routing/url_for.rb#87
module ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods

  # source://actionpack//lib/action_dispatch/routing/url_for.rb#106
  def initialize(*_arg0, **_arg1, &_arg2); end

  # source://actionpack//lib/action_dispatch/routing/url_for.rb#173
  def full_url_for(options = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/routing/url_for.rb#213
  def route_for(name, *args); end

  # source://actionpack//lib/action_dispatch/routing/url_for.rb#169
  def url_for(options = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/routing/url_for.rb#114
  def url_options; end

  protected

  # source://actionpack//lib/action_dispatch/routing/url_for.rb#218
  def optimize_routes_generation?; end

  private

  # source://actionpack//lib/action_dispatch/routing/url_for.rb#230
  def _routes_context; end

  # source://actionpack//lib/action_dispatch/routing/url_for.rb#223
  def _with_routes(routes); end

  module GeneratedClassMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end

  module GeneratedInstanceMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end
end

# source://actionpack//lib/action_dispatch/middleware/ssl.rb#49
class ActionDispatch::SSL
  # source://actionpack//lib/action_dispatch/middleware/ssl.rb#61
  def initialize(app, redirect: T.unsafe(nil), hsts: T.unsafe(nil), secure_cookies: T.unsafe(nil), ssl_default_redirect_status: T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/middleware/ssl.rb#73
  def call(env); end

  private

  # source://actionpack//lib/action_dispatch/middleware/ssl.rb#107
  def build_hsts_header(hsts); end

  # source://actionpack//lib/action_dispatch/middleware/ssl.rb#114
  def flag_cookies_as_secure!(headers); end

  # source://actionpack//lib/action_dispatch/middleware/ssl.rb#145
  def https_location_for(request); end

  # source://actionpack//lib/action_dispatch/middleware/ssl.rb#92
  def normalize_hsts_options(options); end

  # source://actionpack//lib/action_dispatch/middleware/ssl.rb#128
  def redirect_to_https(request); end

  # source://actionpack//lib/action_dispatch/middleware/ssl.rb#135
  def redirection_status(request); end

  # source://actionpack//lib/action_dispatch/middleware/ssl.rb#88
  def set_hsts_header!(headers); end

  class << self
    # source://actionpack//lib/action_dispatch/middleware/ssl.rb#57
    def default_hsts_options; end
  end
end

# source://actionpack//lib/action_dispatch/middleware/ssl.rb#53
ActionDispatch::SSL::HSTS_EXPIRES_IN = T.let(T.unsafe(nil), Integer)

# source://actionpack//lib/action_dispatch/middleware/ssl.rb#55
ActionDispatch::SSL::PERMANENT_REDIRECT_REQUEST_METHODS = T.let(T.unsafe(nil), Array)

# source://actionpack//lib/action_dispatch/middleware/server_timing.rb#6
class ActionDispatch::ServerTiming
  # source://actionpack//lib/action_dispatch/middleware/server_timing.rb#52
  def initialize(app); end

  # source://actionpack//lib/action_dispatch/middleware/server_timing.rb#58
  def call(env); end

  class << self
    # source://actionpack//lib/action_dispatch/middleware/server_timing.rb#48
    def unsubscribe; end
  end
end

# source://actionpack//lib/action_dispatch/middleware/server_timing.rb#7
ActionDispatch::ServerTiming::SERVER_TIMING_HEADER = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/middleware/server_timing.rb#9
class ActionDispatch::ServerTiming::Subscriber
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # source://actionpack//lib/action_dispatch/middleware/server_timing.rb#13
  def initialize; end

  # source://actionpack//lib/action_dispatch/middleware/server_timing.rb#17
  def call(event); end

  # source://actionpack//lib/action_dispatch/middleware/server_timing.rb#23
  def collect_events; end

  # source://actionpack//lib/action_dispatch/middleware/server_timing.rb#32
  def ensure_subscribed; end

  # source://actionpack//lib/action_dispatch/middleware/server_timing.rb#40
  def unsubscribe; end

  class << self
    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://actionpack//lib/action_dispatch/middleware/server_timing.rb#11
ActionDispatch::ServerTiming::Subscriber::KEY = T.let(T.unsafe(nil), Symbol)

# source://actionpack//lib/action_dispatch.rb#91
module ActionDispatch::Session; end

# source://actionpack//lib/action_dispatch/middleware/session/abstract_store.rb#90
class ActionDispatch::Session::AbstractSecureStore < ::Rack::Session::Abstract::PersistedSecure
  include ::ActionDispatch::Session::Compatibility
  include ::ActionDispatch::Session::StaleSessionCheck
  include ::ActionDispatch::Session::SessionObject

  # source://actionpack//lib/action_dispatch/middleware/session/abstract_store.rb#95
  def generate_sid; end

  private

  # source://actionpack//lib/action_dispatch/middleware/session/abstract_store.rb#100
  def set_cookie(request, response, cookie); end
end

# source://actionpack//lib/action_dispatch/middleware/session/abstract_store.rb#79
class ActionDispatch::Session::AbstractStore < ::Rack::Session::Abstract::Persisted
  include ::ActionDispatch::Session::Compatibility
  include ::ActionDispatch::Session::StaleSessionCheck
  include ::ActionDispatch::Session::SessionObject

  private

  # source://actionpack//lib/action_dispatch/middleware/session/abstract_store.rb#85
  def set_cookie(request, response, cookie); end
end

# source://actionpack//lib/action_dispatch/middleware/session/cache_store.rb#15
class ActionDispatch::Session::CacheStore < ::ActionDispatch::Session::AbstractSecureStore
  # source://actionpack//lib/action_dispatch/middleware/session/cache_store.rb#16
  def initialize(app, options = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/middleware/session/cache_store.rb#42
  def delete_session(env, sid, options); end

  # source://actionpack//lib/action_dispatch/middleware/session/cache_store.rb#23
  def find_session(env, sid); end

  # source://actionpack//lib/action_dispatch/middleware/session/cache_store.rb#31
  def write_session(env, sid, session, options); end

  private

  # source://actionpack//lib/action_dispatch/middleware/session/cache_store.rb#50
  def cache_key(id); end

  # source://actionpack//lib/action_dispatch/middleware/session/cache_store.rb#54
  def get_session_with_fallback(sid); end
end

# source://actionpack//lib/action_dispatch/middleware/session/abstract_store.rb#20
module ActionDispatch::Session::Compatibility
  # source://actionpack//lib/action_dispatch/middleware/session/abstract_store.rb#21
  def initialize(app, options = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/middleware/session/abstract_store.rb#26
  def generate_sid; end

  private

  # source://actionpack//lib/action_dispatch/middleware/session/abstract_store.rb#33
  def initialize_sid; end

  # source://actionpack//lib/action_dispatch/middleware/session/abstract_store.rb#38
  def make_request(env); end
end

# source://actionpack//lib/action_dispatch/middleware/session/cookie_store.rb#49
class ActionDispatch::Session::CookieStore < ::ActionDispatch::Session::AbstractSecureStore
  # source://actionpack//lib/action_dispatch/middleware/session/cookie_store.rb#59
  def initialize(app, options = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/middleware/session/cookie_store.rb#63
  def delete_session(req, session_id, options); end

  # source://actionpack//lib/action_dispatch/middleware/session/cookie_store.rb#70
  def load_session(req); end

  private

  # source://actionpack//lib/action_dispatch/middleware/session/cookie_store.rb#117
  def cookie_jar(request); end

  # source://actionpack//lib/action_dispatch/middleware/session/cookie_store.rb#79
  def extract_session_id(req); end

  # source://actionpack//lib/action_dispatch/middleware/session/cookie_store.rb#113
  def get_cookie(req); end

  # source://actionpack//lib/action_dispatch/middleware/session/cookie_store.rb#98
  def persistent_session_id!(data, sid = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/middleware/session/cookie_store.rb#109
  def set_cookie(request, session_id, cookie); end

  # source://actionpack//lib/action_dispatch/middleware/session/cookie_store.rb#86
  def unpacked_cookie_data(req); end

  # source://actionpack//lib/action_dispatch/middleware/session/cookie_store.rb#104
  def write_session(req, sid, session_data, options); end
end

# source://actionpack//lib/action_dispatch/middleware/session/cookie_store.rb#50
class ActionDispatch::Session::CookieStore::SessionId
  # source://actionpack//lib/action_dispatch/middleware/session/cookie_store.rb#53
  def initialize(session_id, cookie_value = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/middleware/session/cookie_store.rb#51
  def cookie_value; end
end

# source://actionpack//lib/action_dispatch/middleware/session/abstract_store.rb#69
module ActionDispatch::Session::SessionObject
  # source://actionpack//lib/action_dispatch/middleware/session/abstract_store.rb#74
  def loaded_session?(session); end

  # source://actionpack//lib/action_dispatch/middleware/session/abstract_store.rb#70
  def prepare_session(req); end
end

# source://actionpack//lib/action_dispatch/middleware/session/abstract_store.rb#11
class ActionDispatch::Session::SessionRestoreError < ::StandardError
  # source://actionpack//lib/action_dispatch/middleware/session/abstract_store.rb#12
  def initialize; end
end

# source://actionpack//lib/action_dispatch/middleware/session/abstract_store.rb#43
module ActionDispatch::Session::StaleSessionCheck
  # source://actionpack//lib/action_dispatch/middleware/session/abstract_store.rb#48
  def extract_session_id(env); end

  # source://actionpack//lib/action_dispatch/middleware/session/abstract_store.rb#44
  def load_session(env); end

  # source://actionpack//lib/action_dispatch/middleware/session/abstract_store.rb#52
  def stale_session_check!; end
end

# source://actionpack//lib/action_dispatch/middleware/show_exceptions.rb#18
class ActionDispatch::ShowExceptions
  # source://actionpack//lib/action_dispatch/middleware/show_exceptions.rb#19
  def initialize(app, exceptions_app); end

  # source://actionpack//lib/action_dispatch/middleware/show_exceptions.rb#24
  def call(env); end

  private

  # source://actionpack//lib/action_dispatch/middleware/show_exceptions.rb#58
  def fallback_to_html_format_if_invalid_mime_type(request); end

  # source://actionpack//lib/action_dispatch/middleware/show_exceptions.rb#67
  def pass_response(status); end

  # source://actionpack//lib/action_dispatch/middleware/show_exceptions.rb#36
  def render_exception(request, exception); end
end

# source://actionpack//lib/action_dispatch/middleware/static.rb#16
class ActionDispatch::Static
  # source://actionpack//lib/action_dispatch/middleware/static.rb#17
  def initialize(app, path, index: T.unsafe(nil), headers: T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/middleware/static.rb#22
  def call(env); end
end

# source://actionpack//lib/action_dispatch/testing/test_process.rb#7
module ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile

  # source://actionpack//lib/action_dispatch/testing/test_process.rb#30
  def assigns(key = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/testing/test_process.rb#44
  def cookies; end

  # source://actionpack//lib/action_dispatch/testing/test_process.rb#40
  def flash; end

  # source://actionpack//lib/action_dispatch/testing/test_process.rb#48
  def redirect_to_url; end

  # source://actionpack//lib/action_dispatch/testing/test_process.rb#36
  def session; end
end

# source://actionpack//lib/action_dispatch/testing/test_process.rb#8
module ActionDispatch::TestProcess::FixtureFile
  # source://actionpack//lib/action_dispatch/testing/test_process.rb#19
  def fixture_file_upload(path, mime_type = T.unsafe(nil), binary = T.unsafe(nil)); end
end

# source://actionpack//lib/action_dispatch/testing/test_request.rb#7
class ActionDispatch::TestRequest < ::ActionDispatch::Request
  # source://actionpack//lib/action_dispatch/testing/test_request.rb#66
  def accept=(mime_types); end

  # source://actionpack//lib/action_dispatch/testing/test_request.rb#46
  def action=(action_name); end

  # source://actionpack//lib/action_dispatch/testing/test_request.rb#30
  def host=(host); end

  # source://actionpack//lib/action_dispatch/testing/test_request.rb#50
  def if_modified_since=(last_modified); end

  # source://actionpack//lib/action_dispatch/testing/test_request.rb#54
  def if_none_match=(etag); end

  # source://actionpack//lib/action_dispatch/testing/test_request.rb#42
  def path=(path); end

  # source://actionpack//lib/action_dispatch/testing/test_request.rb#34
  def port=(number); end

  # source://actionpack//lib/action_dispatch/testing/test_request.rb#58
  def remote_addr=(addr); end

  # source://actionpack//lib/action_dispatch/testing/test_request.rb#26
  def request_method=(method); end

  # source://actionpack//lib/action_dispatch/testing/test_request.rb#38
  def request_uri=(uri); end

  # source://actionpack//lib/action_dispatch/testing/test_request.rb#62
  def user_agent=(user_agent); end

  class << self
    # source://actionpack//lib/action_dispatch/testing/test_request.rb#15
    def create(env = T.unsafe(nil)); end

    private

    # source://actionpack//lib/action_dispatch/testing/test_request.rb#21
    def default_env; end
  end
end

# source://actionpack//lib/action_dispatch/testing/test_request.rb#8
ActionDispatch::TestRequest::DEFAULT_ENV = T.let(T.unsafe(nil), Hash)

# source://actionpack//lib/action_dispatch/testing/test_response.rb#12
class ActionDispatch::TestResponse < ::ActionDispatch::Response
  # source://actionpack//lib/action_dispatch/testing/test_response.rb#35
  def parsed_body; end

  # source://actionpack//lib/action_dispatch/testing/test_response.rb#39
  def response_parser; end

  class << self
    # source://actionpack//lib/action_dispatch/testing/test_response.rb#13
    def from_response(response); end
  end
end

# source://actionpack//lib/action_pack/gem_version.rb#3
module ActionPack
  class << self
    # source://actionpack//lib/action_pack/gem_version.rb#5
    def gem_version; end

    # source://actionpack//lib/action_pack/version.rb#7
    def version; end
  end
end

# source://actionpack//lib/action_pack/gem_version.rb#9
module ActionPack::VERSION; end

# source://actionpack//lib/action_pack/gem_version.rb#10
ActionPack::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://actionpack//lib/action_pack/gem_version.rb#11
ActionPack::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://actionpack//lib/action_pack/gem_version.rb#13
ActionPack::VERSION::PRE = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_pack/gem_version.rb#15
ActionPack::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_pack/gem_version.rb#12
ActionPack::VERSION::TINY = T.let(T.unsafe(nil), Integer)

module ActionView::RoutingUrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::Routing::UrlFor
end

# source://actionpack//lib/action_dispatch/http/mime_type.rb#5
module Mime
  class << self
    # source://actionpack//lib/action_dispatch/http/mime_type.rb#40
    def [](type); end

    # source://actionpack//lib/action_dispatch/http/mime_type.rb#45
    def fetch(type, &block); end
  end
end

# source://actionpack//lib/action_dispatch/http/mime_type.rb#333
Mime::ALL = T.let(T.unsafe(nil), Mime::AllType)

# source://actionpack//lib/action_dispatch/http/mime_type.rb#319
class Mime::AllType < ::Mime::Type
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#322
  def initialize; end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#326
  def all?; end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#327
  def html?; end

  class << self
    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://actionpack//lib/action_dispatch/http/mime_type.rb#36
Mime::EXTENSION_LOOKUP = T.let(T.unsafe(nil), Hash)

# source://actionpack//lib/action_dispatch/http/mime_type.rb#37
Mime::LOOKUP = T.let(T.unsafe(nil), Hash)

# source://actionpack//lib/action_dispatch/http/mime_type.rb#6
class Mime::Mimes
  include ::Enumerable

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#11
  def initialize; end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#20
  def <<(type); end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#25
  def delete_if; end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#16
  def each(&block); end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#7
  def symbols; end
end

# source://actionpack//lib/action_dispatch/http/mime_type.rb#335
class Mime::NullType
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#338
  def nil?; end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#346
  def ref; end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#342
  def to_s; end

  private

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#353
  def method_missing(method, *args); end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#349
  def respond_to_missing?(method, _); end

  class << self
    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://actionpack//lib/action_dispatch/http/mime_type.rb#35
Mime::SET = T.let(T.unsafe(nil), Mime::Mimes)

# source://actionpack//lib/action_dispatch/http/mime_type.rb#64
class Mime::Type
  # source://actionpack//lib/action_dispatch/http/mime_type.rb#234
  def initialize(string, symbol = T.unsafe(nil), synonyms = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#267
  def ==(mime_type); end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#259
  def ===(list); end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#281
  def =~(mime_type); end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#297
  def all?; end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#274
  def eql?(other); end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#225
  def hash; end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#293
  def html?; end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#287
  def match?(mime_type); end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#255
  def ref; end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#65
  def symbol; end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#243
  def to_s; end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#247
  def to_str; end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#251
  def to_sym; end

  protected

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#300
  def string; end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#300
  def synonyms; end

  private

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#306
  def method_missing(method, *args); end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#314
  def respond_to_missing?(method, include_private = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#304
  def to_a; end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#303
  def to_ary; end

  class << self
    # source://actionpack//lib/action_dispatch/http/mime_type.rb#144
    def lookup(string); end

    # source://actionpack//lib/action_dispatch/http/mime_type.rb#148
    def lookup_by_extension(extension); end

    # source://actionpack//lib/action_dispatch/http/mime_type.rb#172
    def parse(accept_header); end

    # source://actionpack//lib/action_dispatch/http/mime_type.rb#206
    def parse_data_with_trailing_star(type); end

    # source://actionpack//lib/action_dispatch/http/mime_type.rb#197
    def parse_trailing_star(accept_header); end

    # source://actionpack//lib/action_dispatch/http/mime_type.rb#158
    def register(string, symbol, mime_type_synonyms = T.unsafe(nil), extension_synonyms = T.unsafe(nil), skip_lookup = T.unsafe(nil)); end

    # source://actionpack//lib/action_dispatch/http/mime_type.rb#154
    def register_alias(string, symbol, extension_synonyms = T.unsafe(nil)); end

    # source://actionpack//lib/action_dispatch/http/mime_type.rb#140
    def register_callback(&block); end

    # source://actionpack//lib/action_dispatch/http/mime_type.rb#215
    def unregister(symbol); end
  end
end

# source://actionpack//lib/action_dispatch/http/mime_type.rb#70
class Mime::Type::AcceptItem
  # source://actionpack//lib/action_dispatch/http/mime_type.rb#74
  def initialize(index, name, q = T.unsafe(nil)); end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#81
  def <=>(item); end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#71
  def index; end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#71
  def index=(_arg0); end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#71
  def name; end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#71
  def name=(_arg0); end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#71
  def q; end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#71
  def q=(_arg0); end

  # source://actionpack//lib/action_dispatch/http/mime_type.rb#71
  def to_s; end
end

# source://actionpack//lib/action_dispatch/http/mime_type.rb#88
class Mime::Type::AcceptList
  class << self
    # source://actionpack//lib/action_dispatch/http/mime_type.rb#131
    def find_item_by_name(array, name); end

    # source://actionpack//lib/action_dispatch/http/mime_type.rb#89
    def sort!(list); end
  end
end

# source://actionpack//lib/action_dispatch/http/mime_type.rb#232
class Mime::Type::InvalidMimeType < ::StandardError; end

# source://actionpack//lib/action_dispatch/http/mime_type.rb#227
Mime::Type::MIME_NAME = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/mime_type.rb#229
Mime::Type::MIME_PARAMETER = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/mime_type.rb#228
Mime::Type::MIME_PARAMETER_VALUE = T.let(T.unsafe(nil), String)

# source://actionpack//lib/action_dispatch/http/mime_type.rb#230
Mime::Type::MIME_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://actionpack//lib/action_dispatch.rb#33
module Rack
  class << self
    # source://rack/2.2.6.4/lib/rack/version.rb#26
    def release; end

    # source://rack/2.2.6.4/lib/rack/version.rb#19
    def version; end
  end
end
