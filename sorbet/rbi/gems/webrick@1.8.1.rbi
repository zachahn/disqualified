# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `webrick` gem.
# Please instead update this file by running `bin/tapioca gem webrick`.


# source://webrick//lib/webrick/accesslog.rb#30
module WEBrick::AccessLog
  private

  # source://webrick//lib/webrick/accesslog.rb#151
  def escape(data); end

  # source://webrick//lib/webrick/accesslog.rb#123
  def format(format_string, params); end

  # source://webrick//lib/webrick/accesslog.rb#95
  def setup_params(config, req, res); end

  class << self
    # source://webrick//lib/webrick/accesslog.rb#151
    def escape(data); end

    # source://webrick//lib/webrick/accesslog.rb#123
    def format(format_string, params); end

    # source://webrick//lib/webrick/accesslog.rb#95
    def setup_params(config, req, res); end
  end
end

# source://webrick//lib/webrick/log.rb#17
class WEBrick::BasicLog
  # source://webrick//lib/webrick/log.rb#50
  def initialize(log_file = T.unsafe(nil), level = T.unsafe(nil)); end

  # source://webrick//lib/webrick/log.rb#84
  def <<(obj); end

  # source://webrick//lib/webrick/log.rb#66
  def close; end

  # source://webrick//lib/webrick/log.rb#97
  def debug(msg); end

  # source://webrick//lib/webrick/log.rb#108
  def debug?; end

  # source://webrick//lib/webrick/log.rb#91
  def error(msg); end

  # source://webrick//lib/webrick/log.rb#102
  def error?; end

  # source://webrick//lib/webrick/log.rb#89
  def fatal(msg); end

  # source://webrick//lib/webrick/log.rb#100
  def fatal?; end

  # source://webrick//lib/webrick/log.rb#95
  def info(msg); end

  # source://webrick//lib/webrick/log.rb#106
  def info?; end

  # source://webrick//lib/webrick/log.rb#41
  def level; end

  # source://webrick//lib/webrick/log.rb#41
  def level=(_arg0); end

  # source://webrick//lib/webrick/log.rb#75
  def log(level, data); end

  # source://webrick//lib/webrick/log.rb#93
  def warn(msg); end

  # source://webrick//lib/webrick/log.rb#104
  def warn?; end

  private

  # source://webrick//lib/webrick/log.rb#119
  def format(arg); end
end

# source://webrick//lib/webrick/server.rb#56
class WEBrick::GenericServer
  # source://webrick//lib/webrick/server.rb#88
  def initialize(config = T.unsafe(nil), default = T.unsafe(nil)); end

  # source://webrick//lib/webrick/server.rb#121
  def [](key); end

  # source://webrick//lib/webrick/server.rb#66
  def config; end

  # source://webrick//lib/webrick/server.rb#129
  def listen(address, port); end

  # source://webrick//lib/webrick/server.rb#82
  def listeners; end

  # source://webrick//lib/webrick/server.rb#71
  def logger; end

  # source://webrick//lib/webrick/server.rb#244
  def run(sock); end

  # source://webrick//lib/webrick/server.rb#234
  def shutdown; end

  # source://webrick//lib/webrick/server.rb#154
  def start(&block); end

  # source://webrick//lib/webrick/server.rb#61
  def status; end

  # source://webrick//lib/webrick/server.rb#222
  def stop; end

  # source://webrick//lib/webrick/server.rb#77
  def tokens; end

  private

  # source://webrick//lib/webrick/server.rb#256
  def accept_client(svr); end

  # source://webrick//lib/webrick/server.rb#347
  def alarm_shutdown_pipe; end

  # source://webrick//lib/webrick/server.rb#334
  def call_callback(callback_name, *args); end

  # source://webrick//lib/webrick/server.rb#359
  def cleanup_listener; end

  # source://webrick//lib/webrick/server.rb#342
  def cleanup_shutdown_pipe(shutdown_pipe); end

  # source://webrick//lib/webrick/server.rb#338
  def setup_shutdown_pipe; end

  # source://webrick//lib/webrick/server.rb#288
  def start_thread(sock, &block); end
end

# source://webrick//lib/webrick/htmlutils.rb#13
module WEBrick::HTMLUtils
  private

  # source://webrick//lib/webrick/htmlutils.rb#18
  def escape(string); end

  class << self
    # source://webrick//lib/webrick/htmlutils.rb#18
    def escape(string); end
  end
end

# source://webrick//lib/webrick/httpauth/authenticator.rb#12
module WEBrick::HTTPAuth
  private

  # source://webrick//lib/webrick/httpauth.rb#57
  def _basic_auth(req, res, realm, req_field, res_field, err_type, block); end

  # source://webrick//lib/webrick/httpauth.rb#79
  def basic_auth(req, res, realm, &block); end

  # source://webrick//lib/webrick/httpauth.rb#91
  def proxy_basic_auth(req, res, realm, &block); end

  class << self
    # source://webrick//lib/webrick/httpauth.rb#57
    def _basic_auth(req, res, realm, req_field, res_field, err_type, block); end

    # source://webrick//lib/webrick/httpauth.rb#79
    def basic_auth(req, res, realm, &block); end

    # source://webrick//lib/webrick/httpauth.rb#91
    def proxy_basic_auth(req, res, realm, &block); end
  end
end

# source://webrick//lib/webrick/httpauth/authenticator.rb#18
module WEBrick::HTTPAuth::Authenticator
  # source://webrick//lib/webrick/httpauth/authenticator.rb#43
  def logger; end

  # source://webrick//lib/webrick/httpauth/authenticator.rb#33
  def realm; end

  # source://webrick//lib/webrick/httpauth/authenticator.rb#38
  def userdb; end

  private

  # source://webrick//lib/webrick/httpauth/authenticator.rb#52
  def check_init(config); end

  # source://webrick//lib/webrick/httpauth/authenticator.rb#72
  def check_scheme(req); end

  # source://webrick//lib/webrick/httpauth/authenticator.rb#91
  def error(fmt, *args); end

  # source://webrick//lib/webrick/httpauth/authenticator.rb#97
  def info(fmt, *args); end

  # source://webrick//lib/webrick/httpauth/authenticator.rb#85
  def log(meth, fmt, *args); end
end

# source://webrick//lib/webrick/httpauth/authenticator.rb#23
WEBrick::HTTPAuth::Authenticator::AuthException = WEBrick::HTTPStatus::Unauthorized

# source://webrick//lib/webrick/httpauth/basicauth.rb#35
class WEBrick::HTTPAuth::BasicAuth
  include ::WEBrick::HTTPAuth::Authenticator

  # source://webrick//lib/webrick/httpauth/basicauth.rb#61
  def initialize(config, default = T.unsafe(nil)); end

  # source://webrick//lib/webrick/httpauth/basicauth.rb#70
  def authenticate(req, res); end

  # source://webrick//lib/webrick/httpauth/basicauth.rb#103
  def challenge(req, res); end

  # source://webrick//lib/webrick/httpauth/basicauth.rb#48
  def logger; end

  # source://webrick//lib/webrick/httpauth/basicauth.rb#48
  def realm; end

  # source://webrick//lib/webrick/httpauth/basicauth.rb#48
  def userdb; end

  class << self
    # source://webrick//lib/webrick/httpauth/basicauth.rb#43
    def make_passwd(realm, user, pass); end
  end
end

# source://webrick//lib/webrick/httpauth/digestauth.rb#46
class WEBrick::HTTPAuth::DigestAuth
  include ::WEBrick::HTTPAuth::Authenticator

  # source://webrick//lib/webrick/httpauth/digestauth.rb#87
  def initialize(config, default = T.unsafe(nil)); end

  # source://webrick//lib/webrick/httpauth/digestauth.rb#59
  def algorithm; end

  # source://webrick//lib/webrick/httpauth/digestauth.rb#121
  def authenticate(req, res); end

  # source://webrick//lib/webrick/httpauth/digestauth.rb#134
  def challenge(req, res, stale = T.unsafe(nil)); end

  # source://webrick//lib/webrick/httpauth/digestauth.rb#64
  def qop; end

  private

  # source://webrick//lib/webrick/httpauth/digestauth.rb#163
  def _authenticate(req, res); end

  # source://webrick//lib/webrick/httpauth/digestauth.rb#306
  def check_nonce(req, auth_req); end

  # source://webrick//lib/webrick/httpauth/digestauth.rb#349
  def check_opaque(opaque_struct, req, auth_req); end

  # source://webrick//lib/webrick/httpauth/digestauth.rb#365
  def check_uri(req, auth_req); end

  # source://webrick//lib/webrick/httpauth/digestauth.rb#299
  def generate_next_nonce(req); end

  # source://webrick//lib/webrick/httpauth/digestauth.rb#332
  def generate_opaque(req); end

  # source://webrick//lib/webrick/httpauth/digestauth.rb#376
  def hexdigest(*args); end

  # source://webrick//lib/webrick/httpauth/digestauth.rb#291
  def split_param_value(string); end

  class << self
    # source://webrick//lib/webrick/httpauth/digestauth.rb#69
    def make_passwd(realm, user, pass); end
  end
end

# source://webrick//lib/webrick/httpauth/htdigest.rb#31
class WEBrick::HTTPAuth::Htdigest
  include ::WEBrick::HTTPAuth::UserDB

  # source://webrick//lib/webrick/httpauth/htdigest.rb#37
  def initialize(path); end

  # source://webrick//lib/webrick/httpauth/htdigest.rb#113
  def delete_passwd(realm, user); end

  # source://webrick//lib/webrick/httpauth/htdigest.rb#122
  def each; end

  # source://webrick//lib/webrick/httpauth/htdigest.rb#72
  def flush(output = T.unsafe(nil)); end

  # source://webrick//lib/webrick/httpauth/htdigest.rb#91
  def get_passwd(realm, user, reload_db); end

  # source://webrick//lib/webrick/httpauth/htdigest.rb#50
  def reload; end

  # source://webrick//lib/webrick/httpauth/htdigest.rb#101
  def set_passwd(realm, user, pass); end
end

# source://webrick//lib/webrick/httpauth/htgroup.rb#30
class WEBrick::HTTPAuth::Htgroup
  # source://webrick//lib/webrick/httpauth/htgroup.rb#35
  def initialize(path); end

  # source://webrick//lib/webrick/httpauth/htgroup.rb#92
  def add(group, members); end

  # source://webrick//lib/webrick/httpauth/htgroup.rb#64
  def flush(output = T.unsafe(nil)); end

  # source://webrick//lib/webrick/httpauth/htgroup.rb#84
  def members(group); end

  # source://webrick//lib/webrick/httpauth/htgroup.rb#46
  def reload; end
end

# source://webrick//lib/webrick/httpauth/htpasswd.rb#32
class WEBrick::HTTPAuth::Htpasswd
  include ::WEBrick::HTTPAuth::UserDB

  # source://webrick//lib/webrick/httpauth/htpasswd.rb#38
  def initialize(path, password_hash: T.unsafe(nil)); end

  # source://webrick//lib/webrick/httpauth/htpasswd.rb#144
  def delete_passwd(realm, user); end

  # source://webrick//lib/webrick/httpauth/htpasswd.rb#151
  def each; end

  # source://webrick//lib/webrick/httpauth/htpasswd.rb#103
  def flush(output = T.unsafe(nil)); end

  # source://webrick//lib/webrick/httpauth/htpasswd.rb#122
  def get_passwd(realm, user, reload_db); end

  # source://webrick//lib/webrick/httpauth/htpasswd.rb#68
  def reload; end

  # source://webrick//lib/webrick/httpauth/htpasswd.rb#130
  def set_passwd(realm, user, pass); end
end

# source://webrick//lib/webrick/httpauth/authenticator.rb#114
WEBrick::HTTPAuth::ProxyAuthenticator::AuthException = WEBrick::HTTPStatus::ProxyAuthenticationRequired

# source://webrick//lib/webrick/httpauth/basicauth.rb#112
class WEBrick::HTTPAuth::ProxyBasicAuth < ::WEBrick::HTTPAuth::BasicAuth
  include ::WEBrick::HTTPAuth::ProxyAuthenticator
end

# source://webrick//lib/webrick/httpauth/digestauth.rb#386
class WEBrick::HTTPAuth::ProxyDigestAuth < ::WEBrick::HTTPAuth::DigestAuth
  include ::WEBrick::HTTPAuth::ProxyAuthenticator

  private

  # source://webrick//lib/webrick/httpauth/digestauth.rb#390
  def check_uri(req, auth_req); end
end

# source://webrick//lib/webrick/httpauth/userdb.rb#18
module WEBrick::HTTPAuth::UserDB
  # source://webrick//lib/webrick/httpauth/userdb.rb#26
  def auth_type; end

  # source://webrick//lib/webrick/httpauth/userdb.rb#26
  def auth_type=(_arg0); end

  # source://webrick//lib/webrick/httpauth/userdb.rb#48
  def get_passwd(realm, user, reload_db = T.unsafe(nil)); end

  # source://webrick//lib/webrick/httpauth/userdb.rb#32
  def make_passwd(realm, user, pass); end

  # source://webrick//lib/webrick/httpauth/userdb.rb#40
  def set_passwd(realm, user, pass); end
end

# source://webrick//lib/webrick/httprequest.rb#25
class WEBrick::HTTPRequest
  # source://webrick//lib/webrick/httprequest.rb#153
  def initialize(config); end

  # source://webrick//lib/webrick/httprequest.rb#318
  def [](header_name); end

  # source://webrick//lib/webrick/httprequest.rb#100
  def accept; end

  # source://webrick//lib/webrick/httprequest.rb#105
  def accept_charset; end

  # source://webrick//lib/webrick/httprequest.rb#110
  def accept_encoding; end

  # source://webrick//lib/webrick/httprequest.rb#115
  def accept_language; end

  # source://webrick//lib/webrick/httprequest.rb#127
  def addr; end

  # source://webrick//lib/webrick/httprequest.rb#137
  def attributes; end

  # source://webrick//lib/webrick/httprequest.rb#255
  def body(&block); end

  # source://webrick//lib/webrick/httprequest.rb#265
  def body_reader; end

  # source://webrick//lib/webrick/httprequest.rb#304
  def content_length; end

  # source://webrick//lib/webrick/httprequest.rb#311
  def content_type; end

  # source://webrick//lib/webrick/httprequest.rb#245
  def continue; end

  # source://webrick//lib/webrick/httprequest.rb#95
  def cookies; end

  # source://webrick//lib/webrick/httprequest.rb#328
  def each; end

  # source://webrick//lib/webrick/httprequest.rb#390
  def fixup; end

  # source://webrick//lib/webrick/httprequest.rb#90
  def header; end

  # source://webrick//lib/webrick/httprequest.rb#340
  def host; end

  # source://webrick//lib/webrick/httprequest.rb#51
  def http_version; end

  # source://webrick//lib/webrick/httprequest.rb#142
  def keep_alive; end

  # source://webrick//lib/webrick/httprequest.rb#375
  def keep_alive?; end

  # source://webrick//lib/webrick/httprequest.rb#407
  def meta_vars; end

  # source://webrick//lib/webrick/httprequest.rb#193
  def parse(socket = T.unsafe(nil)); end

  # source://webrick//lib/webrick/httprequest.rb#63
  def path; end

  # source://webrick//lib/webrick/httprequest.rb#73
  def path_info; end

  # source://webrick//lib/webrick/httprequest.rb#73
  def path_info=(_arg0); end

  # source://webrick//lib/webrick/httprequest.rb#132
  def peeraddr; end

  # source://webrick//lib/webrick/httprequest.rb#347
  def port; end

  # source://webrick//lib/webrick/httprequest.rb#294
  def query; end

  # source://webrick//lib/webrick/httprequest.rb#78
  def query_string; end

  # source://webrick//lib/webrick/httprequest.rb#78
  def query_string=(_arg0); end

  # source://webrick//lib/webrick/httprequest.rb#85
  def raw_header; end

  # source://webrick//lib/webrick/httprequest.rb#278
  def readpartial(size, buf = T.unsafe(nil)); end

  # source://webrick//lib/webrick/httprequest.rb#361
  def remote_ip; end

  # source://webrick//lib/webrick/httprequest.rb#36
  def request_line; end

  # source://webrick//lib/webrick/httprequest.rb#41
  def request_method; end

  # source://webrick//lib/webrick/httprequest.rb#147
  def request_time; end

  # source://webrick//lib/webrick/httprequest.rb#58
  def request_uri; end

  # source://webrick//lib/webrick/httprequest.rb#68
  def script_name; end

  # source://webrick//lib/webrick/httprequest.rb#68
  def script_name=(_arg0); end

  # source://webrick//lib/webrick/httprequest.rb#354
  def server_name; end

  # source://webrick//lib/webrick/httprequest.rb#368
  def ssl?; end

  # source://webrick//lib/webrick/httprequest.rb#379
  def to_s; end

  # source://webrick//lib/webrick/httprequest.rb#46
  def unparsed_uri; end

  # source://webrick//lib/webrick/httprequest.rb#122
  def user; end

  # source://webrick//lib/webrick/httprequest.rb#122
  def user=(_arg0); end

  private

  # source://webrick//lib/webrick/httprequest.rb#566
  def _read_data(io, method, *arg); end

  # source://webrick//lib/webrick/httprequest.rb#506
  def parse_host_request_line(host); end

  # source://webrick//lib/webrick/httprequest.rb#586
  def parse_query; end

  # source://webrick//lib/webrick/httprequest.rb#484
  def parse_uri(str, scheme = T.unsafe(nil)); end

  # source://webrick//lib/webrick/httprequest.rb#511
  def read_body(socket, block); end

  # source://webrick//lib/webrick/httprequest.rb#535
  def read_chunk_size(socket); end

  # source://webrick//lib/webrick/httprequest.rb#546
  def read_chunked(socket, block); end

  # source://webrick//lib/webrick/httprequest.rb#582
  def read_data(io, size); end

  # source://webrick//lib/webrick/httprequest.rb#471
  def read_header(socket); end

  # source://webrick//lib/webrick/httprequest.rb#578
  def read_line(io, size = T.unsafe(nil)); end

  # source://webrick//lib/webrick/httprequest.rb#451
  def read_request_line(socket); end

  # source://webrick//lib/webrick/httprequest.rb#614
  def setup_forwarded_info; end
end

# source://webrick//lib/webrick/httprequest.rb#449
WEBrick::HTTPRequest::MAX_HEADER_LENGTH = T.let(T.unsafe(nil), Integer)

# source://webrick//lib/webrick/httpresponse.rb#24
class WEBrick::HTTPResponse
  # source://webrick//lib/webrick/httpresponse.rb#117
  def initialize(config); end

  # source://webrick//lib/webrick/httpresponse.rb#155
  def [](field); end

  # source://webrick//lib/webrick/httpresponse.rb#162
  def []=(field, value); end

  # source://webrick//lib/webrick/httpresponse.rb#70
  def body; end

  # source://webrick//lib/webrick/httpresponse.rb#70
  def body=(_arg0); end

  # source://webrick//lib/webrick/httpresponse.rb#214
  def chunked=(val); end

  # source://webrick//lib/webrick/httpresponse.rb#207
  def chunked?; end

  # source://webrick//lib/webrick/httpresponse.rb#101
  def config; end

  # source://webrick//lib/webrick/httpresponse.rb#170
  def content_length; end

  # source://webrick//lib/webrick/httpresponse.rb#179
  def content_length=(len); end

  # source://webrick//lib/webrick/httpresponse.rb#186
  def content_type; end

  # source://webrick//lib/webrick/httpresponse.rb#193
  def content_type=(type); end

  # source://webrick//lib/webrick/httpresponse.rb#46
  def cookies; end

  # source://webrick//lib/webrick/httpresponse.rb#200
  def each; end

  # source://webrick//lib/webrick/httpresponse.rb#91
  def filename; end

  # source://webrick//lib/webrick/httpresponse.rb#91
  def filename=(_arg0); end

  # source://webrick//lib/webrick/httpresponse.rb#41
  def header; end

  # source://webrick//lib/webrick/httpresponse.rb#31
  def http_version; end

  # source://webrick//lib/webrick/httpresponse.rb#96
  def keep_alive; end

  # source://webrick//lib/webrick/httpresponse.rb#96
  def keep_alive=(_arg0); end

  # source://webrick//lib/webrick/httpresponse.rb#221
  def keep_alive?; end

  # source://webrick//lib/webrick/httpresponse.rb#325
  def make_body_tempfile; end

  # source://webrick//lib/webrick/httpresponse.rb#51
  def reason_phrase; end

  # source://webrick//lib/webrick/httpresponse.rb#51
  def reason_phrase=(_arg0); end

  # source://webrick//lib/webrick/httpresponse.rb#343
  def remove_body_tempfile; end

  # source://webrick//lib/webrick/httpresponse.rb#85
  def request_http_version; end

  # source://webrick//lib/webrick/httpresponse.rb#85
  def request_http_version=(_arg0); end

  # source://webrick//lib/webrick/httpresponse.rb#75
  def request_method; end

  # source://webrick//lib/webrick/httpresponse.rb#75
  def request_method=(_arg0); end

  # source://webrick//lib/webrick/httpresponse.rb#80
  def request_uri; end

  # source://webrick//lib/webrick/httpresponse.rb#80
  def request_uri=(_arg0); end

  # source://webrick//lib/webrick/httpresponse.rb#378
  def send_body(socket); end

  # source://webrick//lib/webrick/httpresponse.rb#355
  def send_header(socket); end

  # source://webrick//lib/webrick/httpresponse.rb#238
  def send_response(socket); end

  # source://webrick//lib/webrick/httpresponse.rb#106
  def sent_size; end

  # source://webrick//lib/webrick/httpresponse.rb#405
  def set_error(ex, backtrace = T.unsafe(nil)); end

  # source://webrick//lib/webrick/httpresponse.rb#395
  def set_redirect(status, url); end

  # source://webrick//lib/webrick/httpresponse.rb#255
  def setup_header; end

  # source://webrick//lib/webrick/httpresponse.rb#36
  def status; end

  # source://webrick//lib/webrick/httpresponse.rb#147
  def status=(status); end

  # source://webrick//lib/webrick/httpresponse.rb#140
  def status_line; end

  # source://webrick//lib/webrick/httpresponse.rb#111
  def upgrade; end

  # source://webrick//lib/webrick/httpresponse.rb#229
  def upgrade!(protocol); end

  # source://webrick//lib/webrick/httpresponse.rb#111
  def upgrade=(_arg0); end

  private

  # source://webrick//lib/webrick/httpresponse.rb#581
  def _write_data(socket, data); end

  # source://webrick//lib/webrick/httpresponse.rb#432
  def check_header(header_value); end

  # source://webrick//lib/webrick/httpresponse.rb#443
  def error_body(backtrace, ex, host, port); end

  # source://webrick//lib/webrick/httpresponse.rb#473
  def send_body_io(socket); end

  # source://webrick//lib/webrick/httpresponse.rb#535
  def send_body_proc(socket); end

  # source://webrick//lib/webrick/httpresponse.rb#513
  def send_body_string(socket); end
end

# source://webrick//lib/webrick/httpresponse.rb#555
class WEBrick::HTTPResponse::ChunkedWrapper
  # source://webrick//lib/webrick/httpresponse.rb#556
  def initialize(socket, resp); end

  # source://webrick//lib/webrick/httpresponse.rb#574
  def <<(*buf); end

  # source://webrick//lib/webrick/httpresponse.rb#561
  def write(buf); end
end

# source://webrick//lib/webrick/httpserver.rb#27
class WEBrick::HTTPServer < ::WEBrick::GenericServer
  # source://webrick//lib/webrick/httpserver.rb#46
  def initialize(config = T.unsafe(nil), default = T.unsafe(nil)); end

  # source://webrick//lib/webrick/httpserver.rb#220
  def access_log(config, req, res); end

  # source://webrick//lib/webrick/httpserver.rb#230
  def create_request(with_webrick_config); end

  # source://webrick//lib/webrick/httpserver.rb#237
  def create_response(with_webrick_config); end

  # source://webrick//lib/webrick/httpserver.rb#147
  def do_OPTIONS(req, res); end

  # source://webrick//lib/webrick/httpserver.rb#207
  def lookup_server(req); end

  # source://webrick//lib/webrick/httpserver.rb#155
  def mount(dir, servlet, *options); end

  # source://webrick//lib/webrick/httpserver.rb#164
  def mount_proc(dir, proc = T.unsafe(nil), &block); end

  # source://webrick//lib/webrick/httpserver.rb#69
  def run(sock); end

  # source://webrick//lib/webrick/httpserver.rb#182
  def search_servlet(path); end

  # source://webrick//lib/webrick/httpserver.rb#125
  def service(req, res); end

  # source://webrick//lib/webrick/httpserver.rb#173
  def umount(dir); end

  # source://webrick//lib/webrick/httpserver.rb#173
  def unmount(dir); end

  # source://webrick//lib/webrick/httpserver.rb#193
  def virtual_host(server); end
end

# source://webrick//lib/webrick/httpserver.rb#247
class WEBrick::HTTPServer::MountTable
  # source://webrick//lib/webrick/httpserver.rb#248
  def initialize; end

  # source://webrick//lib/webrick/httpserver.rb#253
  def [](dir); end

  # source://webrick//lib/webrick/httpserver.rb#258
  def []=(dir, val); end

  # source://webrick//lib/webrick/httpserver.rb#265
  def delete(dir); end

  # source://webrick//lib/webrick/httpserver.rb#272
  def scan(path); end

  private

  # source://webrick//lib/webrick/httpserver.rb#279
  def compile; end

  # source://webrick//lib/webrick/httpserver.rb#287
  def normalize(dir); end
end

# source://webrick//lib/webrick/httpservlet/abstract.rb#76
class WEBrick::HTTPServlet::AbstractServlet
  # source://webrick//lib/webrick/httpservlet/abstract.rb#91
  def initialize(server, *options); end

  # source://webrick//lib/webrick/httpservlet/abstract.rb#115
  def do_GET(req, res); end

  # source://webrick//lib/webrick/httpservlet/abstract.rb#122
  def do_HEAD(req, res); end

  # source://webrick//lib/webrick/httpservlet/abstract.rb#129
  def do_OPTIONS(req, res); end

  # source://webrick//lib/webrick/httpservlet/abstract.rb#102
  def service(req, res); end

  private

  # source://webrick//lib/webrick/httpservlet/abstract.rb#140
  def redirect_to_directory_uri(req, res); end

  class << self
    # source://webrick//lib/webrick/httpservlet/abstract.rb#83
    def get_instance(server, *options); end
  end
end

# source://webrick//lib/webrick/httpservlet/cgihandler.rb#28
class WEBrick::HTTPServlet::CGIHandler < ::WEBrick::HTTPServlet::AbstractServlet
  # source://webrick//lib/webrick/httpservlet/cgihandler.rb#36
  def initialize(server, name); end

  # source://webrick//lib/webrick/httpservlet/cgihandler.rb#50
  def do_GET(req, res); end

  # source://webrick//lib/webrick/httpservlet/cgihandler.rb#50
  def do_POST(req, res); end
end

# source://webrick//lib/webrick/httpservlet/cgihandler.rb#31
WEBrick::HTTPServlet::CGIHandler::CGIRunnerArray = T.let(T.unsafe(nil), Array)

# source://webrick//lib/webrick/httpservlet/filehandler.rb#32
class WEBrick::HTTPServlet::DefaultFileHandler < ::WEBrick::HTTPServlet::AbstractServlet
  # source://webrick//lib/webrick/httpservlet/filehandler.rb#37
  def initialize(server, local_path); end

  # source://webrick//lib/webrick/httpservlet/filehandler.rb#44
  def do_GET(req, res); end

  # source://webrick//lib/webrick/httpservlet/filehandler.rb#118
  def make_partial_content(req, res, filename, filesize); end

  # source://webrick//lib/webrick/httpservlet/filehandler.rb#90
  def multipart_body(body, parts, boundary, mtype, filesize); end

  # source://webrick//lib/webrick/httpservlet/filehandler.rb#64
  def not_modified?(req, res, mtime, etag); end

  # source://webrick//lib/webrick/httpservlet/filehandler.rb#155
  def prepare_range(range, filesize); end
end

# source://webrick//lib/webrick/httpservlet/erbhandler.rb#36
class WEBrick::HTTPServlet::ERBHandler < ::WEBrick::HTTPServlet::AbstractServlet
  # source://webrick//lib/webrick/httpservlet/erbhandler.rb#42
  def initialize(server, name); end

  # source://webrick//lib/webrick/httpservlet/erbhandler.rb#50
  def do_GET(req, res); end

  # source://webrick//lib/webrick/httpservlet/erbhandler.rb#50
  def do_POST(req, res); end

  private

  # source://webrick//lib/webrick/httpservlet/erbhandler.rb#79
  def evaluate(erb, servlet_request, servlet_response); end
end

# source://webrick//lib/webrick/httpservlet/filehandler.rb#175
class WEBrick::HTTPServlet::FileHandler < ::WEBrick::HTTPServlet::AbstractServlet
  # source://webrick//lib/webrick/httpservlet/filehandler.rb#203
  def initialize(server, root, options = T.unsafe(nil), default = T.unsafe(nil)); end

  # source://webrick//lib/webrick/httpservlet/filehandler.rb#245
  def do_GET(req, res); end

  # source://webrick//lib/webrick/httpservlet/filehandler.rb#257
  def do_OPTIONS(req, res); end

  # source://webrick//lib/webrick/httpservlet/filehandler.rb#251
  def do_POST(req, res); end

  # source://webrick//lib/webrick/httpservlet/filehandler.rb#224
  def service(req, res); end

  # source://webrick//lib/webrick/httpservlet/filehandler.rb#215
  def set_filesystem_encoding(str); end

  private

  # source://webrick//lib/webrick/httpservlet/filehandler.rb#416
  def call_callback(callback_name, req, res); end

  # source://webrick//lib/webrick/httpservlet/filehandler.rb#369
  def check_filename(req, res, name); end

  # source://webrick//lib/webrick/httpservlet/filehandler.rb#309
  def exec_handler(req, res); end

  # source://webrick//lib/webrick/httpservlet/filehandler.rb#322
  def get_handler(req, res); end

  # source://webrick//lib/webrick/httpservlet/filehandler.rb#428
  def nondisclosure_name?(name); end

  # source://webrick//lib/webrick/httpservlet/filehandler.rb#286
  def prevent_directory_traversal(req, res); end

  # source://webrick//lib/webrick/httpservlet/filehandler.rb#394
  def search_file(req, res, basename); end

  # source://webrick//lib/webrick/httpservlet/filehandler.rb#385
  def search_index_file(req, res); end

  # source://webrick//lib/webrick/httpservlet/filehandler.rb#437
  def set_dir_list(req, res); end

  # source://webrick//lib/webrick/httpservlet/filehandler.rb#335
  def set_filename(req, res); end

  # source://webrick//lib/webrick/httpservlet/filehandler.rb#376
  def shift_path_info(req, res, path_info, base = T.unsafe(nil)); end

  # source://webrick//lib/webrick/httpservlet/filehandler.rb#277
  def trailing_pathsep?(path); end

  # source://webrick//lib/webrick/httpservlet/filehandler.rb#422
  def windows_ambiguous_name?(name); end

  class << self
    # source://webrick//lib/webrick/httpservlet/filehandler.rb#182
    def add_handler(suffix, handler); end

    # source://webrick//lib/webrick/httpservlet/filehandler.rb#189
    def remove_handler(suffix); end
  end
end

# source://webrick//lib/webrick/httpservlet/prochandler.rb#28
class WEBrick::HTTPServlet::ProcHandler < ::WEBrick::HTTPServlet::AbstractServlet
  # source://webrick//lib/webrick/httpservlet/prochandler.rb#34
  def initialize(proc); end

  # source://webrick//lib/webrick/httpservlet/prochandler.rb#38
  def do_GET(request, response); end

  # source://webrick//lib/webrick/httpservlet/prochandler.rb#38
  def do_POST(request, response); end

  # source://webrick//lib/webrick/httpservlet/prochandler.rb#38
  def do_PUT(request, response); end

  # source://webrick//lib/webrick/httpservlet/prochandler.rb#30
  def get_instance(server, *options); end
end

# source://webrick//lib/webrick/httpstatus.rb#21
module WEBrick::HTTPStatus
  private

  # source://webrick//lib/webrick/httpstatus.rb#170
  def client_error?(code); end

  # source://webrick//lib/webrick/httpstatus.rb#164
  def error?(code); end

  # source://webrick//lib/webrick/httpstatus.rb#146
  def info?(code); end

  # source://webrick//lib/webrick/httpstatus.rb#140
  def reason_phrase(code); end

  # source://webrick//lib/webrick/httpstatus.rb#158
  def redirect?(code); end

  # source://webrick//lib/webrick/httpstatus.rb#176
  def server_error?(code); end

  # source://webrick//lib/webrick/httpstatus.rb#152
  def success?(code); end

  class << self
    # source://webrick//lib/webrick/httpstatus.rb#186
    def [](code); end

    # source://webrick//lib/webrick/httpstatus.rb#170
    def client_error?(code); end

    # source://webrick//lib/webrick/httpstatus.rb#164
    def error?(code); end

    # source://webrick//lib/webrick/httpstatus.rb#146
    def info?(code); end

    # source://webrick//lib/webrick/httpstatus.rb#140
    def reason_phrase(code); end

    # source://webrick//lib/webrick/httpstatus.rb#158
    def redirect?(code); end

    # source://webrick//lib/webrick/httpstatus.rb#176
    def server_error?(code); end

    # source://webrick//lib/webrick/httpstatus.rb#152
    def success?(code); end
  end
end

# source://webrick//lib/webrick/httpstatus.rb#25
class WEBrick::HTTPStatus::Status < ::StandardError
  # source://webrick//lib/webrick/httpstatus.rb#31
  def code; end

  # source://webrick//lib/webrick/httpstatus.rb#34
  def reason_phrase; end

  # source://webrick//lib/webrick/httpstatus.rb#31
  def to_i; end

  class << self
    # source://webrick//lib/webrick/httpstatus.rb#27
    def code; end

    # source://webrick//lib/webrick/httpstatus.rb#27
    def reason_phrase; end
  end
end

# source://webrick//lib/webrick/httputils.rb#25
module WEBrick::HTTPUtils
  private

  # source://webrick//lib/webrick/httputils.rb#454
  def _escape(str, regex); end

  # source://webrick//lib/webrick/httputils.rb#452
  def _make_regex(str); end

  # source://webrick//lib/webrick/httputils.rb#453
  def _make_regex!(str); end

  # source://webrick//lib/webrick/httputils.rb#460
  def _unescape(str, regex); end

  # source://webrick//lib/webrick/httputils.rb#234
  def dequote(str); end

  # source://webrick//lib/webrick/httputils.rb#478
  def escape(str); end

  # source://webrick//lib/webrick/httputils.rb#519
  def escape8bit(str); end

  # source://webrick//lib/webrick/httputils.rb#492
  def escape_form(str); end

  # source://webrick//lib/webrick/httputils.rb#508
  def escape_path(str); end

  # source://webrick//lib/webrick/httputils.rb#123
  def load_mime_types(file); end

  # source://webrick//lib/webrick/httputils.rb#145
  def mime_type(filename, mime_tab); end

  # source://webrick//lib/webrick/httputils.rb#31
  def normalize_path(path); end

  # source://webrick//lib/webrick/httputils.rb#406
  def parse_form_data(io, boundary); end

  # source://webrick//lib/webrick/httputils.rb#156
  def parse_header(raw); end

  # source://webrick//lib/webrick/httputils.rb#382
  def parse_query(str); end

  # source://webrick//lib/webrick/httputils.rb#213
  def parse_qvalues(value); end

  # source://webrick//lib/webrick/httputils.rb#195
  def parse_range_header(ranges_specifier); end

  # source://webrick//lib/webrick/httputils.rb#244
  def quote(str); end

  # source://webrick//lib/webrick/httputils.rb#186
  def split_header_value(str); end

  # source://webrick//lib/webrick/httputils.rb#485
  def unescape(str); end

  # source://webrick//lib/webrick/httputils.rb#501
  def unescape_form(str); end

  class << self
    # source://webrick//lib/webrick/httputils.rb#454
    def _escape(str, regex); end

    # source://webrick//lib/webrick/httputils.rb#452
    def _make_regex(str); end

    # source://webrick//lib/webrick/httputils.rb#453
    def _make_regex!(str); end

    # source://webrick//lib/webrick/httputils.rb#460
    def _unescape(str, regex); end

    # source://webrick//lib/webrick/httputils.rb#234
    def dequote(str); end

    # source://webrick//lib/webrick/httputils.rb#478
    def escape(str); end

    # source://webrick//lib/webrick/httputils.rb#519
    def escape8bit(str); end

    # source://webrick//lib/webrick/httputils.rb#492
    def escape_form(str); end

    # source://webrick//lib/webrick/httputils.rb#508
    def escape_path(str); end

    # source://webrick//lib/webrick/httputils.rb#123
    def load_mime_types(file); end

    # source://webrick//lib/webrick/httputils.rb#145
    def mime_type(filename, mime_tab); end

    # source://webrick//lib/webrick/httputils.rb#31
    def normalize_path(path); end

    # source://webrick//lib/webrick/httputils.rb#406
    def parse_form_data(io, boundary); end

    # source://webrick//lib/webrick/httputils.rb#156
    def parse_header(raw); end

    # source://webrick//lib/webrick/httputils.rb#382
    def parse_query(str); end

    # source://webrick//lib/webrick/httputils.rb#213
    def parse_qvalues(value); end

    # source://webrick//lib/webrick/httputils.rb#195
    def parse_range_header(ranges_specifier); end

    # source://webrick//lib/webrick/httputils.rb#244
    def quote(str); end

    # source://webrick//lib/webrick/httputils.rb#186
    def split_header_value(str); end

    # source://webrick//lib/webrick/httputils.rb#485
    def unescape(str); end

    # source://webrick//lib/webrick/httputils.rb#501
    def unescape_form(str); end
  end
end

# source://webrick//lib/webrick/httputils.rb#253
class WEBrick::HTTPUtils::FormData < ::String
  # source://webrick//lib/webrick/httputils.rb#278
  def initialize(*args); end

  # source://webrick//lib/webrick/httputils.rb#311
  def <<(str); end

  # source://webrick//lib/webrick/httputils.rb#297
  def [](*key); end

  # source://webrick//lib/webrick/httputils.rb#331
  def append_data(data); end

  # source://webrick//lib/webrick/httputils.rb#346
  def each_data; end

  # source://webrick//lib/webrick/httputils.rb#265
  def filename; end

  # source://webrick//lib/webrick/httputils.rb#265
  def filename=(_arg0); end

  # source://webrick//lib/webrick/httputils.rb#358
  def list; end

  # source://webrick//lib/webrick/httputils.rb#260
  def name; end

  # source://webrick//lib/webrick/httputils.rb#260
  def name=(_arg0); end

  # source://webrick//lib/webrick/httputils.rb#267
  def next_data=(_arg0); end

  # source://webrick//lib/webrick/httputils.rb#358
  def to_ary; end

  # source://webrick//lib/webrick/httputils.rb#374
  def to_s; end

  protected

  # source://webrick//lib/webrick/httputils.rb#267
  def next_data; end
end

# source://webrick//lib/webrick/utils.rb#17
module WEBrick::Utils
  private

  # source://webrick//lib/webrick/utils.rb#56
  def create_listeners(address, port); end

  # source://webrick//lib/webrick/utils.rb#47
  def getservername; end

  # source://webrick//lib/webrick/utils.rb#79
  def random_string(len); end

  # source://webrick//lib/webrick/utils.rb#27
  def set_close_on_exec(io); end

  # source://webrick//lib/webrick/utils.rb#20
  def set_non_blocking(io); end

  # source://webrick//lib/webrick/utils.rb#34
  def su(user); end

  # source://webrick//lib/webrick/utils.rb#253
  def timeout(seconds, exception = T.unsafe(nil)); end

  class << self
    # source://webrick//lib/webrick/utils.rb#56
    def create_listeners(address, port); end

    # source://webrick//lib/webrick/utils.rb#47
    def getservername; end

    # source://webrick//lib/webrick/utils.rb#79
    def random_string(len); end

    # source://webrick//lib/webrick/utils.rb#27
    def set_close_on_exec(io); end

    # source://webrick//lib/webrick/utils.rb#20
    def set_non_blocking(io); end

    # source://webrick//lib/webrick/utils.rb#34
    def su(user); end

    # source://webrick//lib/webrick/utils.rb#253
    def timeout(seconds, exception = T.unsafe(nil)); end
  end
end

# source://webrick//lib/webrick/utils.rb#118
class WEBrick::Utils::TimeoutHandler
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # source://webrick//lib/webrick/utils.rb#148
  def initialize; end

  # source://webrick//lib/webrick/utils.rb#226
  def cancel(thread, id); end

  # source://webrick//lib/webrick/utils.rb#203
  def interrupt(thread, id, exception); end

  # source://webrick//lib/webrick/utils.rb#214
  def register(thread, time, exception); end

  # source://webrick//lib/webrick/utils.rb#240
  def terminate; end

  private

  # source://webrick//lib/webrick/utils.rb#158
  def watch; end

  # source://webrick//lib/webrick/utils.rb#193
  def watcher; end

  class << self
    # source://webrick//lib/webrick/utils.rb#137
    def cancel(id); end

    # source://webrick//lib/webrick/utils.rb#130
    def register(seconds, exception); end

    # source://webrick//lib/webrick/utils.rb#141
    def terminate; end
  end
end
