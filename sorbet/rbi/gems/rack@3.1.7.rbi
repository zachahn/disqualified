# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rack` gem.
# Please instead update this file by running `bin/tapioca gem rack`.


# source://rack//lib/rack/version.rb#14
module Rack
  class << self
    # source://rack//lib/rack/version.rb#18
    def release; end
  end
end

# source://rack//lib/rack.rb#60
module Rack::Auth; end

# source://rack//lib/rack/auth/abstract/handler.rb#11
class Rack::Auth::AbstractHandler
  # source://rack//lib/rack/auth/abstract/handler.rb#15
  def initialize(app, realm = T.unsafe(nil), &authenticator); end

  # source://rack//lib/rack/auth/abstract/handler.rb#13
  def realm; end

  # source://rack//lib/rack/auth/abstract/handler.rb#13
  def realm=(_arg0); end

  private

  # source://rack//lib/rack/auth/abstract/handler.rb#31
  def bad_request; end

  # source://rack//lib/rack/auth/abstract/handler.rb#22
  def unauthorized(www_authenticate = T.unsafe(nil)); end
end

# source://rack//lib/rack/auth/abstract/request.rb#7
class Rack::Auth::AbstractRequest
  # source://rack//lib/rack/auth/abstract/request.rb#9
  def initialize(env); end

  # source://rack//lib/rack/auth/abstract/request.rb#33
  def params; end

  # source://rack//lib/rack/auth/abstract/request.rb#25
  def parts; end

  # source://rack//lib/rack/auth/abstract/request.rb#17
  def provided?; end

  # source://rack//lib/rack/auth/abstract/request.rb#13
  def request; end

  # source://rack//lib/rack/auth/abstract/request.rb#29
  def scheme; end

  # source://rack//lib/rack/auth/abstract/request.rb#21
  def valid?; end

  private

  # source://rack//lib/rack/auth/abstract/request.rb#42
  def authorization_key; end
end

# source://rack//lib/rack/auth/abstract/request.rb#40
Rack::Auth::AbstractRequest::AUTHORIZATION_KEYS = T.let(T.unsafe(nil), Array)

# source://rack//lib/rack/auth/basic.rb#13
class Rack::Auth::Basic < ::Rack::Auth::AbstractHandler
  # source://rack//lib/rack/auth/basic.rb#15
  def call(env); end

  private

  # source://rack//lib/rack/auth/basic.rb#34
  def challenge; end

  # source://rack//lib/rack/auth/basic.rb#38
  def valid?(auth); end
end

# source://rack//lib/rack/auth/basic.rb#42
class Rack::Auth::Basic::Request < ::Rack::Auth::AbstractRequest
  # source://rack//lib/rack/auth/basic.rb#43
  def basic?; end

  # source://rack//lib/rack/auth/basic.rb#47
  def credentials; end

  # source://rack//lib/rack/auth/basic.rb#51
  def username; end
end

# source://rack//lib/rack/builder.rb#6
Rack::BUILDER_TOPLEVEL_BINDING = T.let(T.unsafe(nil), Proc)

# source://rack//lib/rack/bad_request.rb#6
module Rack::BadRequest; end

# source://rack//lib/rack/body_proxy.rb#7
class Rack::BodyProxy
  # source://rack//lib/rack/body_proxy.rb#10
  def initialize(body, &block); end

  # source://rack//lib/rack/body_proxy.rb#28
  def close; end

  # source://rack//lib/rack/body_proxy.rb#40
  def closed?; end

  # source://rack//lib/rack/body_proxy.rb#45
  def method_missing(method_name, *args, **_arg2, &block); end

  private

  # source://rack//lib/rack/body_proxy.rb#17
  def respond_to_missing?(method_name, include_all = T.unsafe(nil)); end
end

# source://rack//lib/rack/builder.rb#36
class Rack::Builder
  # source://rack//lib/rack/builder.rb#116
  def initialize(default_app = T.unsafe(nil), **options, &block); end

  # source://rack//lib/rack/builder.rb#276
  def call(env); end

  # source://rack//lib/rack/builder.rb#259
  def freeze_app; end

  # source://rack//lib/rack/builder.rb#252
  def map(path, &block); end

  # source://rack//lib/rack/builder.rb#132
  def options; end

  # source://rack//lib/rack/builder.rb#193
  def run(app = T.unsafe(nil), &block); end

  # source://rack//lib/rack/builder.rb#264
  def to_app; end

  # source://rack//lib/rack/builder.rb#159
  def use(middleware, *args, **_arg2, &block); end

  # source://rack//lib/rack/builder.rb#209
  def warmup(prc = T.unsafe(nil), &block); end

  private

  # source://rack//lib/rack/builder.rb#284
  def generate_map(default_app, mapping); end

  class << self
    # source://rack//lib/rack/builder.rb#136
    def app(default_app = T.unsafe(nil), &block); end

    # source://rack//lib/rack/builder.rb#87
    def load_file(path, **options); end

    # source://rack//lib/rack/builder.rb#102
    def new_from_string(builder_script, path = T.unsafe(nil), **options); end

    # source://rack//lib/rack/builder.rb#65
    def parse_file(path, **options); end
  end
end

# source://rack//lib/rack/builder.rb#39
Rack::Builder::UTF_8_BOM = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#19
Rack::CACHE_CONTROL = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#35
Rack::CONNECT = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#20
Rack::CONTENT_LENGTH = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#21
Rack::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/cascade.rb#11
class Rack::Cascade
  # source://rack//lib/rack/cascade.rb#21
  def initialize(apps, cascade_for = T.unsafe(nil)); end

  # source://rack//lib/rack/cascade.rb#56
  def <<(app); end

  # source://rack//lib/rack/cascade.rb#56
  def add(app); end

  # source://rack//lib/rack/cascade.rb#13
  def apps; end

  # source://rack//lib/rack/cascade.rb#32
  def call(env); end

  # source://rack//lib/rack/cascade.rb#61
  def include?(app); end
end

# source://rack//lib/rack/common_logger.rb#13
class Rack::CommonLogger
  # source://rack//lib/rack/common_logger.rb#29
  def initialize(app, logger = T.unsafe(nil)); end

  # source://rack//lib/rack/common_logger.rb#41
  def call(env); end

  private

  # source://rack//lib/rack/common_logger.rb#83
  def extract_content_length(headers); end

  # source://rack//lib/rack/common_logger.rb#52
  def log(env, status, response_headers, began_at); end
end

# source://rack//lib/rack/common_logger.rb#23
Rack::CommonLogger::FORMAT = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/conditional_get.rb#21
class Rack::ConditionalGet
  # source://rack//lib/rack/conditional_get.rb#22
  def initialize(app); end

  # source://rack//lib/rack/conditional_get.rb#28
  def call(env); end

  private

  # source://rack//lib/rack/conditional_get.rb#62
  def etag_matches?(none_match, headers); end

  # source://rack//lib/rack/conditional_get.rb#51
  def fresh?(env, headers); end

  # source://rack//lib/rack/conditional_get.rb#68
  def modified_since?(modified_since, headers); end

  # source://rack//lib/rack/conditional_get.rb#75
  def to_rfc2822(since); end
end

# source://rack//lib/rack/config.rb#11
class Rack::Config
  # source://rack//lib/rack/config.rb#12
  def initialize(app, &block); end

  # source://rack//lib/rack/config.rb#17
  def call(env); end
end

# source://rack//lib/rack/content_length.rb#12
class Rack::ContentLength
  include ::Rack::Utils

  # source://rack//lib/rack/content_length.rb#15
  def initialize(app); end

  # source://rack//lib/rack/content_length.rb#19
  def call(env); end
end

# source://rack//lib/rack/content_type.rb#15
class Rack::ContentType
  include ::Rack::Utils

  # source://rack//lib/rack/content_type.rb#18
  def initialize(app, content_type = T.unsafe(nil)); end

  # source://rack//lib/rack/content_type.rb#23
  def call(env); end
end

# source://rack//lib/rack/constants.rb#32
Rack::DELETE = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/deflater.rb#28
class Rack::Deflater
  # source://rack//lib/rack/deflater.rb#39
  def initialize(app, options = T.unsafe(nil)); end

  # source://rack//lib/rack/deflater.rb#46
  def call(env); end

  private

  # source://rack//lib/rack/deflater.rb#136
  def should_deflate?(env, status, headers, body); end
end

# source://rack//lib/rack/deflater.rb#83
class Rack::Deflater::GzipStream
  # source://rack//lib/rack/deflater.rb#92
  def initialize(body, mtime, sync); end

  # source://rack//lib/rack/deflater.rb#128
  def close; end

  # source://rack//lib/rack/deflater.rb#99
  def each(&block); end

  # source://rack//lib/rack/deflater.rb#123
  def write(data); end
end

# source://rack//lib/rack/deflater.rb#85
Rack::Deflater::GzipStream::BUFFER_LENGTH = T.let(T.unsafe(nil), Integer)

# source://rack//lib/rack/directory.rb#19
class Rack::Directory
  # source://rack//lib/rack/directory.rb#83
  def initialize(root, app = T.unsafe(nil)); end

  # source://rack//lib/rack/directory.rb#89
  def call(env); end

  # source://rack//lib/rack/directory.rb#109
  def check_bad_request(path_info); end

  # source://rack//lib/rack/directory.rb#119
  def check_forbidden(path_info); end

  # source://rack//lib/rack/directory.rb#181
  def entity_not_found(path_info); end

  # source://rack//lib/rack/directory.rb#197
  def filesize_format(int); end

  # source://rack//lib/rack/directory.rb#96
  def get(env); end

  # source://rack//lib/rack/directory.rb#130
  def list_directory(path_info, path, script_name); end

  # source://rack//lib/rack/directory.rb#171
  def list_path(env, path, path_info, script_name); end

  # source://rack//lib/rack/directory.rb#80
  def root; end

  # source://rack//lib/rack/directory.rb#163
  def stat(path); end
end

# source://rack//lib/rack/directory.rb#20
Rack::Directory::DIR_FILE = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/directory.rb#43
Rack::Directory::DIR_PAGE_FOOTER = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/directory.rb#21
Rack::Directory::DIR_PAGE_HEADER = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/directory.rb#51
class Rack::Directory::DirectoryBody < ::Struct
  # source://rack//lib/rack/directory.rb#53
  def each; end

  private

  # source://rack//lib/rack/directory.rb#73
  def DIR_FILE_escape(htmls); end
end

# source://rack//lib/rack/directory.rb#189
Rack::Directory::FILESIZE_FORMAT = T.let(T.unsafe(nil), Array)

# source://rack//lib/rack/constants.rb#22
Rack::ETAG = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/etag.rb#18
class Rack::ETag
  # source://rack//lib/rack/etag.rb#22
  def initialize(app, no_cache_control = T.unsafe(nil), cache_control = T.unsafe(nil)); end

  # source://rack//lib/rack/etag.rb#28
  def call(env); end

  private

  # source://rack//lib/rack/etag.rb#58
  def digest_body(body); end

  # source://rack//lib/rack/etag.rb#50
  def etag_status?(status); end

  # source://rack//lib/rack/etag.rb#54
  def skip_caching?(headers); end
end

# source://rack//lib/rack/etag.rb#20
Rack::ETag::DEFAULT_CACHE_CONTROL = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/etag.rb#19
Rack::ETag::ETAG_STRING = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#23
Rack::EXPIRES = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/events.rb#61
class Rack::Events
  # source://rack//lib/rack/events.rb#106
  def initialize(app, handlers); end

  # source://rack//lib/rack/events.rb#111
  def call(env); end

  private

  # source://rack//lib/rack/events.rb#149
  def make_request(env); end

  # source://rack//lib/rack/events.rb#153
  def make_response(status, headers, body); end

  # source://rack//lib/rack/events.rb#137
  def on_commit(request, response); end

  # source://rack//lib/rack/events.rb#133
  def on_error(request, response, e); end

  # source://rack//lib/rack/events.rb#145
  def on_finish(request, response); end

  # source://rack//lib/rack/events.rb#141
  def on_start(request, response); end
end

# source://rack//lib/rack/events.rb#62
module Rack::Events::Abstract
  # source://rack//lib/rack/events.rb#66
  def on_commit(req, res); end

  # source://rack//lib/rack/events.rb#75
  def on_error(req, res, e); end

  # source://rack//lib/rack/events.rb#72
  def on_finish(req, res); end

  # source://rack//lib/rack/events.rb#69
  def on_send(req, res); end

  # source://rack//lib/rack/events.rb#63
  def on_start(req, res); end
end

# source://rack//lib/rack/events.rb#95
class Rack::Events::BufferedResponse < ::Rack::Response::Raw
  # source://rack//lib/rack/events.rb#98
  def initialize(status, headers, body); end

  # source://rack//lib/rack/events.rb#96
  def body; end

  # source://rack//lib/rack/events.rb#103
  def to_a; end
end

# source://rack//lib/rack/events.rb#79
class Rack::Events::EventedBodyProxy < ::Rack::BodyProxy
  # source://rack//lib/rack/events.rb#82
  def initialize(body, request, response, handlers, &block); end

  # source://rack//lib/rack/events.rb#89
  def each; end

  # source://rack//lib/rack/events.rb#80
  def request; end

  # source://rack//lib/rack/events.rb#80
  def response; end
end

# source://rack//lib/rack/files.rb#20
class Rack::Files
  # source://rack//lib/rack/files.rb#27
  def initialize(root, headers = T.unsafe(nil), default_mime = T.unsafe(nil)); end

  # source://rack//lib/rack/files.rb#34
  def call(env); end

  # source://rack//lib/rack/files.rb#39
  def get(env); end

  # source://rack//lib/rack/files.rb#25
  def root; end

  # source://rack//lib/rack/files.rb#68
  def serving(request, path); end

  private

  # source://rack//lib/rack/files.rb#190
  def fail(status, body, headers = T.unsafe(nil)); end

  # source://rack//lib/rack/files.rb#209
  def filesize(path); end

  # source://rack//lib/rack/files.rb#205
  def mime_type(path, default_mime); end
end

# source://rack//lib/rack/files.rb#21
Rack::Files::ALLOWED_VERBS = T.let(T.unsafe(nil), Array)

# source://rack//lib/rack/files.rb#22
Rack::Files::ALLOW_HEADER = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/files.rb#121
class Rack::Files::BaseIterator
  # source://rack//lib/rack/files.rb#124
  def initialize(path, ranges, options); end

  # source://rack//lib/rack/files.rb#144
  def bytesize; end

  # source://rack//lib/rack/files.rb#153
  def close; end

  # source://rack//lib/rack/files.rb#130
  def each; end

  # source://rack//lib/rack/files.rb#122
  def options; end

  # source://rack//lib/rack/files.rb#122
  def path; end

  # source://rack//lib/rack/files.rb#122
  def ranges; end

  private

  # source://rack//lib/rack/files.rb#171
  def each_range_part(file, range); end

  # source://rack//lib/rack/files.rb#157
  def multipart?; end

  # source://rack//lib/rack/files.rb#161
  def multipart_heading(range); end
end

# source://rack//lib/rack/files.rb#184
class Rack::Files::Iterator < ::Rack::Files::BaseIterator
  # source://rack//lib/rack/files.rb#122
  def to_path; end
end

# source://rack//lib/rack/files.rb#23
Rack::Files::MULTIPART_BOUNDARY = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/recursive.rb#14
class Rack::ForwardRequest < ::Exception
  # source://rack//lib/rack/recursive.rb#17
  def initialize(url, env = T.unsafe(nil)); end

  # source://rack//lib/rack/recursive.rb#15
  def env; end

  # source://rack//lib/rack/recursive.rb#15
  def url; end
end

# source://rack//lib/rack/constants.rb#28
Rack::GET = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#33
Rack::HEAD = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#7
Rack::HTTPS = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#16
Rack::HTTP_COOKIE = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#5
Rack::HTTP_HOST = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#6
Rack::HTTP_PORT = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/head.rb#9
class Rack::Head
  # source://rack//lib/rack/head.rb#10
  def initialize(app); end

  # source://rack//lib/rack/head.rb#14
  def call(env); end
end

# source://rack//lib/rack/headers.rb#8
class Rack::Headers < ::Hash
  # source://rack//lib/rack/headers.rb#110
  def [](key); end

  # source://rack//lib/rack/headers.rb#114
  def []=(key, value); end

  # source://rack//lib/rack/headers.rb#119
  def assoc(key); end

  # source://rack//lib/rack/headers.rb#123
  def compare_by_identity; end

  # source://rack//lib/rack/headers.rb#127
  def delete(key); end

  # source://rack//lib/rack/headers.rb#131
  def dig(key, *a); end

  # source://rack//lib/rack/headers.rb#227
  def except(*a); end

  # source://rack//lib/rack/headers.rb#135
  def fetch(key, *default, &block); end

  # source://rack//lib/rack/headers.rb#140
  def fetch_values(*a); end

  # source://rack//lib/rack/headers.rb#144
  def has_key?(key); end

  # source://rack//lib/rack/headers.rb#144
  def include?(key); end

  # source://rack//lib/rack/headers.rb#151
  def invert; end

  # source://rack//lib/rack/headers.rb#144
  def key?(key); end

  # source://rack//lib/rack/headers.rb#144
  def member?(key); end

  # source://rack//lib/rack/headers.rb#157
  def merge(hash, &block); end

  # source://rack//lib/rack/headers.rb#186
  def merge!(hash, &block); end

  # source://rack//lib/rack/headers.rb#161
  def reject(&block); end

  # source://rack//lib/rack/headers.rb#167
  def replace(hash); end

  # source://rack//lib/rack/headers.rb#172
  def select(&block); end

  # source://rack//lib/rack/headers.rb#205
  def slice(*a); end

  # source://rack//lib/rack/headers.rb#114
  def store(key, value); end

  # source://rack//lib/rack/headers.rb#178
  def to_proc; end

  # source://rack//lib/rack/headers.rb#211
  def transform_keys(&block); end

  # source://rack//lib/rack/headers.rb#215
  def transform_keys!; end

  # source://rack//lib/rack/headers.rb#182
  def transform_values(&block); end

  # source://rack//lib/rack/headers.rb#186
  def update(hash, &block); end

  # source://rack//lib/rack/headers.rb#198
  def values_at(*keys); end

  private

  # source://rack//lib/rack/headers.rb#234
  def downcase_key(key); end

  class << self
    # source://rack//lib/rack/headers.rb#91
    def [](*items); end
  end
end

# source://rack//lib/rack/headers.rb#9
Rack::Headers::KNOWN_HEADERS = T.let(T.unsafe(nil), Hash)

# source://rack//lib/rack/constants.rb#36
Rack::LINK = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/lint.rb#13
class Rack::Lint
  # source://rack//lib/rack/lint.rb#19
  def initialize(app); end

  # source://rack//lib/rack/lint.rb#40
  def call(env = T.unsafe(nil)); end
end

# source://rack//lib/rack/lint.rb#25
class Rack::Lint::LintError < ::RuntimeError; end

# source://rack//lib/rack/lint.rb#15
Rack::Lint::REQUEST_PATH_ABSOLUTE_FORM = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/lint.rb#17
Rack::Lint::REQUEST_PATH_ASTERISK_FORM = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/lint.rb#16
Rack::Lint::REQUEST_PATH_AUTHORITY_FORM = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/lint.rb#14
Rack::Lint::REQUEST_PATH_ORIGIN_FORM = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/lint.rb#44
class Rack::Lint::Wrapper
  # source://rack//lib/rack/lint.rb#45
  def initialize(app, env); end

  # source://rack//lib/rack/lint.rb#939
  def call(stream); end

  # source://rack//lib/rack/lint.rb#757
  def check_content_length_header(status, headers); end

  # source://rack//lib/rack/lint.rb#741
  def check_content_type_header(status, headers); end

  # source://rack//lib/rack/lint.rb#657
  def check_early_hints(env); end

  # source://rack//lib/rack/lint.rb#101
  def check_environment(env); end

  # source://rack//lib/rack/lint.rb#531
  def check_error_stream(error); end

  # source://rack//lib/rack/lint.rb#731
  def check_header_value(key, value); end

  # source://rack//lib/rack/lint.rb#691
  def check_headers(headers); end

  # source://rack//lib/rack/lint.rb#591
  def check_hijack(env); end

  # source://rack//lib/rack/lint.rb#619
  def check_hijack_response(headers, env); end

  # source://rack//lib/rack/lint.rb#427
  def check_input_stream(input); end

  # source://rack//lib/rack/lint.rb#785
  def check_rack_protocol_header(status, headers); end

  # source://rack//lib/rack/lint.rb#680
  def check_status(status); end

  # source://rack//lib/rack/lint.rb#831
  def close; end

  # source://rack//lib/rack/lint.rb#865
  def each; end

  # source://rack//lib/rack/lint.rb#910
  def respond_to?(name, *_arg1); end

  # source://rack//lib/rack/lint.rb#60
  def response; end

  # source://rack//lib/rack/lint.rb#926
  def to_ary; end

  # source://rack//lib/rack/lint.rb#906
  def to_path; end

  # source://rack//lib/rack/lint.rb#770
  def verify_content_length(size); end

  # source://rack//lib/rack/lint.rb#847
  def verify_to_path; end
end

# source://rack//lib/rack/lint.rb#904
Rack::Lint::Wrapper::BODY_METHODS = T.let(T.unsafe(nil), Hash)

# source://rack//lib/rack/lint.rb#540
class Rack::Lint::Wrapper::ErrorWrapper
  # source://rack//lib/rack/lint.rb#541
  def initialize(error); end

  # source://rack//lib/rack/lint.rb#563
  def close(*args); end

  # source://rack//lib/rack/lint.rb#558
  def flush; end

  # source://rack//lib/rack/lint.rb#546
  def puts(str); end

  # source://rack//lib/rack/lint.rb#551
  def write(str); end
end

# source://rack//lib/rack/lint.rb#445
class Rack::Lint::Wrapper::InputWrapper
  # source://rack//lib/rack/lint.rb#446
  def initialize(input); end

  # source://rack//lib/rack/lint.rb#523
  def close(*args); end

  # source://rack//lib/rack/lint.rb#511
  def each(*args); end

  # source://rack//lib/rack/lint.rb#452
  def gets(*args); end

  # source://rack//lib/rack/lint.rb#478
  def read(*args); end
end

# source://rack//lib/rack/lint.rb#959
class Rack::Lint::Wrapper::StreamWrapper
  extend ::Forwardable

  # source://rack//lib/rack/lint.rb#974
  def initialize(stream); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def <<(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def close(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def close_read(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def close_write(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def closed?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def flush(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def read(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def write(*args, **_arg1, &block); end
end

# source://rack//lib/rack/lint.rb#967
Rack::Lint::Wrapper::StreamWrapper::REQUIRED_METHODS = T.let(T.unsafe(nil), Array)

# source://rack//lib/rack/lock.rb#8
class Rack::Lock
  # source://rack//lib/rack/lock.rb#9
  def initialize(app, mutex = T.unsafe(nil)); end

  # source://rack//lib/rack/lock.rb#13
  def call(env); end

  private

  # source://rack//lib/rack/lock.rb#25
  def unlock; end
end

# source://rack//lib/rack/logger.rb#10
class Rack::Logger
  # source://rack//lib/rack/logger.rb#11
  def initialize(app, level = T.unsafe(nil)); end

  # source://rack//lib/rack/logger.rb#15
  def call(env); end
end

# source://rack//lib/rack/media_type.rb#6
class Rack::MediaType
  class << self
    # source://rack//lib/rack/media_type.rb#30
    def params(content_type); end

    # source://rack//lib/rack/media_type.rb#16
    def type(content_type); end

    private

    # source://rack//lib/rack/media_type.rb#43
    def strip_doublequotes(str); end
  end
end

# source://rack//lib/rack/media_type.rb#7
Rack::MediaType::SPLIT_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/method_override.rb#8
class Rack::MethodOverride
  # source://rack//lib/rack/method_override.rb#15
  def initialize(app); end

  # source://rack//lib/rack/method_override.rb#19
  def call(env); end

  # source://rack//lib/rack/method_override.rb#31
  def method_override(env); end

  private

  # source://rack//lib/rack/method_override.rb#44
  def allowed_methods; end

  # source://rack//lib/rack/method_override.rb#48
  def method_override_param(req); end
end

# source://rack//lib/rack/method_override.rb#13
Rack::MethodOverride::ALLOWED_METHODS = T.let(T.unsafe(nil), Array)

# source://rack//lib/rack/method_override.rb#9
Rack::MethodOverride::HTTP_METHODS = T.let(T.unsafe(nil), Array)

# source://rack//lib/rack/method_override.rb#12
Rack::MethodOverride::HTTP_METHOD_OVERRIDE_HEADER = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/method_override.rb#11
Rack::MethodOverride::METHOD_OVERRIDE_PARAM_KEY = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/mime.rb#4
module Rack::Mime
  private

  # source://rack//lib/rack/mime.rb#30
  def match?(value, matcher); end

  # source://rack//lib/rack/mime.rb#18
  def mime_type(ext, fallback = T.unsafe(nil)); end

  class << self
    # source://rack//lib/rack/mime.rb#30
    def match?(value, matcher); end

    # source://rack//lib/rack/mime.rb#18
    def mime_type(ext, fallback = T.unsafe(nil)); end
  end
end

# source://rack//lib/rack/mime.rb#51
Rack::Mime::MIME_TYPES = T.let(T.unsafe(nil), Hash)

# source://rack//lib/rack/mock_request.rb#23
class Rack::MockRequest
  # source://rack//lib/rack/mock_request.rb#44
  def initialize(app); end

  # source://rack//lib/rack/mock_request.rb#57
  def delete(uri, opts = T.unsafe(nil)); end

  # source://rack//lib/rack/mock_request.rb#49
  def get(uri, opts = T.unsafe(nil)); end

  # source://rack//lib/rack/mock_request.rb#59
  def head(uri, opts = T.unsafe(nil)); end

  # source://rack//lib/rack/mock_request.rb#61
  def options(uri, opts = T.unsafe(nil)); end

  # source://rack//lib/rack/mock_request.rb#55
  def patch(uri, opts = T.unsafe(nil)); end

  # source://rack//lib/rack/mock_request.rb#51
  def post(uri, opts = T.unsafe(nil)); end

  # source://rack//lib/rack/mock_request.rb#53
  def put(uri, opts = T.unsafe(nil)); end

  # source://rack//lib/rack/mock_request.rb#66
  def request(method = T.unsafe(nil), uri = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # source://rack//lib/rack/mock_request.rb#98
    def env_for(uri = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://rack//lib/rack/mock_request.rb#84
    def parse_uri_rfc2396(uri); end
  end
end

# source://rack//lib/rack/mock_request.rb#27
class Rack::MockRequest::FatalWarner
  # source://rack//lib/rack/mock_request.rb#36
  def flush; end

  # source://rack//lib/rack/mock_request.rb#28
  def puts(warning); end

  # source://rack//lib/rack/mock_request.rb#39
  def string; end

  # source://rack//lib/rack/mock_request.rb#32
  def write(warning); end
end

# source://rack//lib/rack/mock_request.rb#24
class Rack::MockRequest::FatalWarning < ::RuntimeError; end

# source://rack//lib/rack/mock_response.rb#13
class Rack::MockResponse < ::Rack::Response
  # source://rack//lib/rack/mock_response.rb#24
  def initialize(status, headers, body, errors = T.unsafe(nil)); end

  # source://rack//lib/rack/mock_response.rb#39
  def =~(other); end

  # source://rack//lib/rack/mock_response.rb#47
  def body; end

  # source://rack//lib/rack/mock_response.rb#73
  def cookie(name); end

  # source://rack//lib/rack/mock_response.rb#19
  def cookies; end

  # source://rack//lib/rack/mock_response.rb#69
  def empty?; end

  # source://rack//lib/rack/mock_response.rb#22
  def errors; end

  # source://rack//lib/rack/mock_response.rb#22
  def errors=(_arg0); end

  # source://rack//lib/rack/mock_response.rb#43
  def match(other); end

  # source://rack//lib/rack/mock_response.rb#19
  def original_headers; end

  private

  # source://rack//lib/rack/mock_response.rb#100
  def identify_cookie_attributes(cookie_filling); end

  # source://rack//lib/rack/mock_response.rb#79
  def parse_cookies_from_header; end

  class << self
    def [](*_arg0); end
  end
end

# source://rack//lib/rack/multipart/parser.rb#9
module Rack::Multipart
  class << self
    # source://rack//lib/rack/multipart.rb#72
    def build_multipart(params, first = T.unsafe(nil)); end

    # source://rack//lib/rack/multipart.rb#68
    def extract_multipart(request, params = T.unsafe(nil)); end

    # source://rack//lib/rack/multipart.rb#48
    def parse_multipart(env, params = T.unsafe(nil)); end
  end
end

# source://rack//lib/rack/multipart/parser.rb#26
class Rack::Multipart::BoundaryTooLongError < ::StandardError
  include ::Rack::BadRequest
end

# source://rack//lib/rack/multipart/parser.rb#33
Rack::Multipart::EOL = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/multipart/parser.rb#20
class Rack::Multipart::EmptyContentError < ::EOFError
  include ::Rack::BadRequest
end

# source://rack//lib/rack/multipart/parser.rb#31
Rack::Multipart::Error = Rack::Multipart::BoundaryTooLongError

# source://rack//lib/rack/multipart/generator.rb#7
class Rack::Multipart::Generator
  # source://rack//lib/rack/multipart/generator.rb#8
  def initialize(params, first = T.unsafe(nil)); end

  # source://rack//lib/rack/multipart/generator.rb#16
  def dump; end

  private

  # source://rack//lib/rack/multipart/generator.rb#89
  def content_for_other(file, name); end

  # source://rack//lib/rack/multipart/generator.rb#77
  def content_for_tempfile(io, file, name); end

  # source://rack//lib/rack/multipart/generator.rb#52
  def flattened_params; end

  # source://rack//lib/rack/multipart/generator.rb#37
  def multipart?; end
end

# source://rack//lib/rack/multipart/parser.rb#34
Rack::Multipart::MULTIPART = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/multipart.rb#16
Rack::Multipart::MULTIPART_BOUNDARY = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/multipart/parser.rb#36
Rack::Multipart::MULTIPART_CONTENT_DISPOSITION = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/multipart/parser.rb#37
Rack::Multipart::MULTIPART_CONTENT_ID = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/multipart/parser.rb#35
Rack::Multipart::MULTIPART_CONTENT_TYPE = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/multipart.rb#18
class Rack::Multipart::MissingInputError < ::StandardError
  include ::Rack::BadRequest
end

# source://rack//lib/rack/multipart/parser.rb#10
class Rack::Multipart::MultipartPartLimitError < ::Errno::EMFILE
  include ::Rack::BadRequest
end

# source://rack//lib/rack/multipart/parser.rb#14
class Rack::Multipart::MultipartTotalPartLimitError < ::StandardError
  include ::Rack::BadRequest
end

# source://rack//lib/rack/multipart.rb#25
class Rack::Multipart::ParamList
  # source://rack//lib/rack/multipart.rb#34
  def initialize; end

  # source://rack//lib/rack/multipart.rb#38
  def <<(pair); end

  # source://rack//lib/rack/multipart.rb#42
  def to_params_hash; end

  class << self
    # source://rack//lib/rack/multipart.rb#26
    def make_params; end

    # source://rack//lib/rack/multipart.rb#30
    def normalize_params(params, key, value); end
  end
end

# source://rack//lib/rack/multipart/parser.rb#39
class Rack::Multipart::Parser
  # source://rack//lib/rack/multipart/parser.rb#200
  def initialize(boundary, tempfile, bufsize, query_parser); end

  # source://rack//lib/rack/multipart/parser.rb#217
  def parse(io); end

  # source://rack//lib/rack/multipart/parser.rb#240
  def result; end

  # source://rack//lib/rack/multipart/parser.rb#198
  def state; end

  private

  # source://rack//lib/rack/multipart/parser.rb#434
  def consume_boundary; end

  # source://rack//lib/rack/multipart/parser.rb#252
  def dequote(str); end

  # source://rack//lib/rack/multipart/parser.rb#489
  def find_encoding(enc); end

  # source://rack//lib/rack/multipart/parser.rb#294
  def handle_consume_token; end

  # source://rack//lib/rack/multipart/parser.rb#495
  def handle_empty_content!(content); end

  # source://rack//lib/rack/multipart/parser.rb#271
  def handle_fast_forward; end

  # source://rack//lib/rack/multipart/parser.rb#411
  def handle_mime_body; end

  # source://rack//lib/rack/multipart/parser.rb#306
  def handle_mime_head; end

  # source://rack//lib/rack/multipart/parser.rb#443
  def normalize_filename(filename); end

  # source://rack//lib/rack/multipart/parser.rb#258
  def read_data(io, outbuf); end

  # source://rack//lib/rack/multipart/parser.rb#456
  def tag_multipart_encoding(filename, content_type, name, body); end

  class << self
    # source://rack//lib/rack/multipart/parser.rb#87
    def parse(io, content_length, content_type, tmpfile, bufsize, qp); end

    # source://rack//lib/rack/multipart/parser.rb#80
    def parse_boundary(content_type); end
  end
end

# source://rack//lib/rack/multipart/parser.rb#40
Rack::Multipart::Parser::BUFSIZE = T.let(T.unsafe(nil), Integer)

# source://rack//lib/rack/multipart/parser.rb#48
class Rack::Multipart::Parser::BoundedIO
  # source://rack//lib/rack/multipart/parser.rb#49
  def initialize(io, content_length); end

  # source://rack//lib/rack/multipart/parser.rb#55
  def read(size, outbuf = T.unsafe(nil)); end
end

# source://rack//lib/rack/multipart/parser.rb#453
Rack::Multipart::Parser::CHARSET = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/multipart/parser.rb#305
Rack::Multipart::Parser::CONTENT_DISPOSITION_MAX_BYTES = T.let(T.unsafe(nil), Integer)

# source://rack//lib/rack/multipart/parser.rb#304
Rack::Multipart::Parser::CONTENT_DISPOSITION_MAX_PARAMS = T.let(T.unsafe(nil), Integer)

# source://rack//lib/rack/multipart/parser.rb#107
class Rack::Multipart::Parser::Collector
  include ::Enumerable

  # source://rack//lib/rack/multipart/parser.rb#143
  def initialize(tempfile); end

  # source://rack//lib/rack/multipart/parser.rb#149
  def each; end

  # source://rack//lib/rack/multipart/parser.rb#169
  def on_mime_body(mime_index, content); end

  # source://rack//lib/rack/multipart/parser.rb#173
  def on_mime_finish(mime_index); end

  # source://rack//lib/rack/multipart/parser.rb#153
  def on_mime_head(mime_index, head, filename, content_type, name); end

  private

  # source://rack//lib/rack/multipart/parser.rb#178
  def check_part_limits; end
end

# source://rack//lib/rack/multipart/parser.rb#131
class Rack::Multipart::Parser::Collector::BufferPart < ::Rack::Multipart::Parser::Collector::MimePart
  # source://rack//lib/rack/multipart/parser.rb#133
  def close; end

  # source://rack//lib/rack/multipart/parser.rb#132
  def file?; end
end

# source://rack//lib/rack/multipart/parser.rb#108
class Rack::Multipart::Parser::Collector::MimePart < ::Struct
  # source://rack//lib/rack/multipart/parser.rb#109
  def get_data; end
end

# source://rack//lib/rack/multipart/parser.rb#136
class Rack::Multipart::Parser::Collector::TempfilePart < ::Rack::Multipart::Parser::Collector::MimePart
  # source://rack//lib/rack/multipart/parser.rb#138
  def close; end

  # source://rack//lib/rack/multipart/parser.rb#137
  def file?; end
end

# source://rack//lib/rack/multipart/parser.rb#78
Rack::Multipart::Parser::EMPTY = T.let(T.unsafe(nil), Rack::Multipart::Parser::MultipartInfo)

# source://rack//lib/rack/multipart/parser.rb#77
class Rack::Multipart::Parser::MultipartInfo < ::Struct
  def params; end
  def params=(_); end
  def tmp_files; end
  def tmp_files=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rack//lib/rack/multipart/parser.rb#42
Rack::Multipart::Parser::TEMPFILE_FACTORY = T.let(T.unsafe(nil), Proc)

# source://rack//lib/rack/multipart/parser.rb#41
Rack::Multipart::Parser::TEXT_PLAIN = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/multipart/uploaded_file.rb#8
class Rack::Multipart::UploadedFile
  # source://rack//lib/rack/multipart/uploaded_file.rb#16
  def initialize(filepath = T.unsafe(nil), ct = T.unsafe(nil), bin = T.unsafe(nil), path: T.unsafe(nil), content_type: T.unsafe(nil), binary: T.unsafe(nil), filename: T.unsafe(nil), io: T.unsafe(nil)); end

  # source://rack//lib/rack/multipart/uploaded_file.rb#14
  def content_type; end

  # source://rack//lib/rack/multipart/uploaded_file.rb#14
  def content_type=(_arg0); end

  # source://rack//lib/rack/multipart/uploaded_file.rb#31
  def local_path; end

  # source://rack//lib/rack/multipart/uploaded_file.rb#40
  def method_missing(method_name, *args, &block); end

  # source://rack//lib/rack/multipart/uploaded_file.rb#11
  def original_filename; end

  # source://rack//lib/rack/multipart/uploaded_file.rb#31
  def path; end

  # source://rack//lib/rack/multipart/uploaded_file.rb#36
  def respond_to?(*args); end
end

# source://rack//lib/rack/null_logger.rb#6
class Rack::NullLogger
  # source://rack//lib/rack/null_logger.rb#7
  def initialize(app); end

  # source://rack//lib/rack/null_logger.rb#45
  def <<(msg); end

  # source://rack//lib/rack/null_logger.rb#43
  def add(severity, message = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  # source://rack//lib/rack/null_logger.rb#11
  def call(env); end

  # source://rack//lib/rack/null_logger.rb#42
  def close; end

  # source://rack//lib/rack/null_logger.rb#34
  def datetime_format; end

  # source://rack//lib/rack/null_logger.rb#39
  def datetime_format=(datetime_format); end

  # source://rack//lib/rack/null_logger.rb#17
  def debug(progname = T.unsafe(nil), &block); end

  # source://rack//lib/rack/null_logger.rb#27
  def debug!; end

  # source://rack//lib/rack/null_logger.rb#23
  def debug?; end

  # source://rack//lib/rack/null_logger.rb#19
  def error(progname = T.unsafe(nil), &block); end

  # source://rack//lib/rack/null_logger.rb#28
  def error!; end

  # source://rack//lib/rack/null_logger.rb#25
  def error?; end

  # source://rack//lib/rack/null_logger.rb#20
  def fatal(progname = T.unsafe(nil), &block); end

  # source://rack//lib/rack/null_logger.rb#29
  def fatal!; end

  # source://rack//lib/rack/null_logger.rb#26
  def fatal?; end

  # source://rack//lib/rack/null_logger.rb#35
  def formatter; end

  # source://rack//lib/rack/null_logger.rb#40
  def formatter=(formatter); end

  # source://rack//lib/rack/null_logger.rb#16
  def info(progname = T.unsafe(nil), &block); end

  # source://rack//lib/rack/null_logger.rb#30
  def info!; end

  # source://rack//lib/rack/null_logger.rb#22
  def info?; end

  # source://rack//lib/rack/null_logger.rb#32
  def level; end

  # source://rack//lib/rack/null_logger.rb#37
  def level=(level); end

  # source://rack//lib/rack/null_logger.rb#44
  def log(severity, message = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  # source://rack//lib/rack/null_logger.rb#33
  def progname; end

  # source://rack//lib/rack/null_logger.rb#38
  def progname=(progname); end

  # source://rack//lib/rack/null_logger.rb#46
  def reopen(logdev = T.unsafe(nil)); end

  # source://rack//lib/rack/null_logger.rb#36
  def sev_threshold; end

  # source://rack//lib/rack/null_logger.rb#41
  def sev_threshold=(sev_threshold); end

  # source://rack//lib/rack/null_logger.rb#21
  def unknown(progname = T.unsafe(nil), &block); end

  # source://rack//lib/rack/null_logger.rb#18
  def warn(progname = T.unsafe(nil), &block); end

  # source://rack//lib/rack/null_logger.rb#31
  def warn!; end

  # source://rack//lib/rack/null_logger.rb#24
  def warn?; end
end

# source://rack//lib/rack/constants.rb#34
Rack::OPTIONS = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#31
Rack::PATCH = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#8
Rack::PATH_INFO = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#29
Rack::POST = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#30
Rack::PUT = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#12
Rack::QUERY_STRING = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/query_parser.rb#7
class Rack::QueryParser
  # source://rack//lib/rack/query_parser.rb#36
  def initialize(params_class, param_depth_limit); end

  # source://rack//lib/rack/query_parser.rb#166
  def make_params; end

  # source://rack//lib/rack/query_parser.rb#170
  def new_depth_limit(param_depth_limit); end

  # source://rack//lib/rack/query_parser.rb#94
  def normalize_params(params, name, v, _depth = T.unsafe(nil)); end

  # source://rack//lib/rack/query_parser.rb#34
  def param_depth_limit; end

  # source://rack//lib/rack/query_parser.rb#73
  def parse_nested_query(qs, separator = T.unsafe(nil)); end

  # source://rack//lib/rack/query_parser.rb#45
  def parse_query(qs, separator = T.unsafe(nil), &unescaper); end

  private

  # source://rack//lib/rack/query_parser.rb#98
  def _normalize_params(params, name, v, depth); end

  # source://rack//lib/rack/query_parser.rb#180
  def params_hash_has_key?(hash, key); end

  # source://rack//lib/rack/query_parser.rb#176
  def params_hash_type?(obj); end

  # source://rack//lib/rack/query_parser.rb#192
  def unescape(string, encoding = T.unsafe(nil)); end

  class << self
    # source://rack//lib/rack/query_parser.rb#30
    def make_default(param_depth_limit); end
  end
end

# source://rack//lib/rack/query_parser.rb#9
Rack::QueryParser::COMMON_SEP = T.let(T.unsafe(nil), Hash)

# source://rack//lib/rack/query_parser.rb#8
Rack::QueryParser::DEFAULT_SEP = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/query_parser.rb#20
class Rack::QueryParser::InvalidParameterError < ::ArgumentError
  include ::Rack::BadRequest
end

# source://rack//lib/rack/query_parser.rb#13
class Rack::QueryParser::ParameterTypeError < ::TypeError
  include ::Rack::BadRequest
end

# source://rack//lib/rack/query_parser.rb#196
class Rack::QueryParser::Params < ::Hash
  def to_params_hash; end
end

# source://rack//lib/rack/query_parser.rb#26
class Rack::QueryParser::ParamsTooDeepError < ::RangeError
  include ::Rack::BadRequest
end

# source://rack//lib/rack/constants.rb#43
Rack::RACK_EARLY_HINTS = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#44
Rack::RACK_ERRORS = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#51
Rack::RACK_HIJACK = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#46
Rack::RACK_INPUT = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#52
Rack::RACK_IS_HIJACK = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#45
Rack::RACK_LOGGER = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#66
Rack::RACK_METHODOVERRIDE_ORIGINAL_METHOD = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#54
Rack::RACK_MULTIPART_BUFFER_SIZE = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#55
Rack::RACK_MULTIPART_TEMPFILE_FACTORY = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#53
Rack::RACK_RECURSIVE_INCLUDE = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#62
Rack::RACK_REQUEST_COOKIE_HASH = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#63
Rack::RACK_REQUEST_COOKIE_STRING = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#61
Rack::RACK_REQUEST_FORM_ERROR = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#58
Rack::RACK_REQUEST_FORM_HASH = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#57
Rack::RACK_REQUEST_FORM_INPUT = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#59
Rack::RACK_REQUEST_FORM_PAIRS = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#60
Rack::RACK_REQUEST_FORM_VARS = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#64
Rack::RACK_REQUEST_QUERY_HASH = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#65
Rack::RACK_REQUEST_QUERY_STRING = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#56
Rack::RACK_RESPONSE_FINISHED = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#47
Rack::RACK_SESSION = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#48
Rack::RACK_SESSION_OPTIONS = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#49
Rack::RACK_SHOWSTATUS_DETAIL = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#42
Rack::RACK_TEMPFILES = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#50
Rack::RACK_URL_SCHEME = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#41
Rack::RACK_VERSION = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/version.rb#15
Rack::RELEASE = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#9
Rack::REQUEST_METHOD = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#10
Rack::REQUEST_PATH = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/recursive.rb#36
class Rack::Recursive
  # source://rack//lib/rack/recursive.rb#37
  def initialize(app); end

  # source://rack//lib/rack/recursive.rb#45
  def _call(env); end

  # source://rack//lib/rack/recursive.rb#41
  def call(env); end

  # source://rack//lib/rack/recursive.rb#52
  def include(env, path); end
end

# source://rack//lib/rack/reloader.rb#24
class Rack::Reloader
  # source://rack//lib/rack/reloader.rb#25
  def initialize(app, cooldown = T.unsafe(nil), backend = T.unsafe(nil)); end

  # source://rack//lib/rack/reloader.rb#36
  def call(env); end

  # source://rack//lib/rack/reloader.rb#50
  def reload!(stderr = T.unsafe(nil)); end

  # source://rack//lib/rack/reloader.rb#58
  def safe_load(file, mtime, stderr = T.unsafe(nil)); end
end

# source://rack//lib/rack/reloader.rb#68
module Rack::Reloader::Stat
  # source://rack//lib/rack/reloader.rb#88
  def figure_path(file, paths); end

  # source://rack//lib/rack/reloader.rb#69
  def rotation; end

  # source://rack//lib/rack/reloader.rb#103
  def safe_stat(file); end
end

# source://rack//lib/rack/request.rb#16
class Rack::Request
  include ::Rack::Request::Env
  include ::Rack::Request::Helpers

  # source://rack//lib/rack/request.rb#62
  def initialize(env); end

  # source://rack//lib/rack/request.rb#76
  def delete_param(k); end

  # source://rack//lib/rack/request.rb#67
  def params; end

  # source://rack//lib/rack/request.rb#67
  def query; end

  # source://rack//lib/rack/request.rb#71
  def update_param(k, v); end

  # source://yard/0.9.36/lib/yard/server/rack_adapter.rb#94
  def version_supplied; end

  # source://yard/0.9.36/lib/yard/server/rack_adapter.rb#94
  def version_supplied=(_arg0); end

  # source://yard/0.9.36/lib/yard/server/rack_adapter.rb#96
  def xhr?; end

  class << self
    # source://rack//lib/rack/request.rb#31
    def forwarded_priority; end

    # source://rack//lib/rack/request.rb#31
    def forwarded_priority=(_arg0); end

    # source://rack//lib/rack/request.rb#18
    def ip_filter; end

    # source://rack//lib/rack/request.rb#18
    def ip_filter=(_arg0); end

    # source://rack//lib/rack/request.rb#40
    def x_forwarded_proto_priority; end

    # source://rack//lib/rack/request.rb#40
    def x_forwarded_proto_priority=(_arg0); end
  end
end

# source://rack//lib/rack/request.rb#60
Rack::Request::ALLOWED_SCHEMES = T.let(T.unsafe(nil), Array)

# source://rack//lib/rack/request.rb#82
module Rack::Request::Env
  # source://rack//lib/rack/request.rb#86
  def initialize(env); end

  # source://rack//lib/rack/request.rb#129
  def add_header(key, v); end

  # source://rack//lib/rack/request.rb#140
  def delete_header(name); end

  # source://rack//lib/rack/request.rb#111
  def each_header(&block); end

  # source://rack//lib/rack/request.rb#84
  def env; end

  # source://rack//lib/rack/request.rb#106
  def fetch_header(name, &block); end

  # source://rack//lib/rack/request.rb#100
  def get_header(name); end

  # source://rack//lib/rack/request.rb#95
  def has_header?(name); end

  # source://rack//lib/rack/request.rb#116
  def set_header(name, v); end

  private

  # source://rack//lib/rack/request.rb#144
  def initialize_copy(other); end
end

# source://rack//lib/rack/request.rb#149
module Rack::Request::Helpers
  # source://rack//lib/rack/request.rb#484
  def GET; end

  # source://rack//lib/rack/request.rb#503
  def POST; end

  # source://rack//lib/rack/request.rb#607
  def accept_encoding; end

  # source://rack//lib/rack/request.rb#611
  def accept_language; end

  # source://rack//lib/rack/request.rb#266
  def authority; end

  # source://rack//lib/rack/request.rb#590
  def base_url; end

  # source://rack//lib/rack/request.rb#190
  def body; end

  # source://rack//lib/rack/request.rb#458
  def content_charset; end

  # source://rack//lib/rack/request.rb#199
  def content_length; end

  # source://rack//lib/rack/request.rb#308
  def content_type; end

  # source://rack//lib/rack/request.rb#293
  def cookies; end

  # source://rack//lib/rack/request.rb#220
  def delete?; end

  # source://rack//lib/rack/request.rb#585
  def delete_param(k); end

  # source://rack//lib/rack/request.rb#470
  def form_data?; end

  # source://rack//lib/rack/request.rb#393
  def forwarded_authority; end

  # source://rack//lib/rack/request.rb#353
  def forwarded_for; end

  # source://rack//lib/rack/request.rb#374
  def forwarded_port; end

  # source://rack//lib/rack/request.rb#603
  def fullpath; end

  # source://rack//lib/rack/request.rb#223
  def get?; end

  # source://rack//lib/rack/request.rb#226
  def head?; end

  # source://rack//lib/rack/request.rb#333
  def host; end

  # source://rack//lib/rack/request.rb#318
  def host_authority; end

  # source://rack//lib/rack/request.rb#322
  def host_with_port(authority = T.unsafe(nil)); end

  # source://rack//lib/rack/request.rb#341
  def hostname; end

  # source://rack//lib/rack/request.rb#414
  def ip; end

  # source://rack//lib/rack/request.rb#232
  def link?; end

  # source://rack//lib/rack/request.rb#200
  def logger; end

  # source://rack//lib/rack/request.rb#441
  def media_type; end

  # source://rack//lib/rack/request.rb#450
  def media_type_params; end

  # source://rack//lib/rack/request.rb#229
  def options?; end

  # source://rack//lib/rack/request.rb#556
  def params; end

  # source://rack//lib/rack/request.rb#479
  def parseable_data?; end

  # source://rack//lib/rack/request.rb#235
  def patch?; end

  # source://rack//lib/rack/request.rb#599
  def path; end

  # source://rack//lib/rack/request.rb#194
  def path_info; end

  # source://rack//lib/rack/request.rb#195
  def path_info=(s); end

  # source://rack//lib/rack/request.rb#345
  def port; end

  # source://rack//lib/rack/request.rb#238
  def post?; end

  # source://rack//lib/rack/request.rb#241
  def put?; end

  # source://rack//lib/rack/request.rb#198
  def query_string; end

  # source://rack//lib/rack/request.rb#204
  def referer; end

  # source://rack//lib/rack/request.rb#204
  def referrer; end

  # source://rack//lib/rack/request.rb#197
  def request_method; end

  # source://rack//lib/rack/request.rb#249
  def scheme; end

  # source://rack//lib/rack/request.rb#191
  def script_name; end

  # source://rack//lib/rack/request.rb#192
  def script_name=(s); end

  # source://rack//lib/rack/request.rb#272
  def server_authority; end

  # source://rack//lib/rack/request.rb#285
  def server_name; end

  # source://rack//lib/rack/request.rb#289
  def server_port; end

  # source://rack//lib/rack/request.rb#207
  def session; end

  # source://rack//lib/rack/request.rb#213
  def session_options; end

  # source://rack//lib/rack/request.rb#410
  def ssl?; end

  # source://rack//lib/rack/request.rb#244
  def trace?; end

  # source://rack//lib/rack/request.rb#615
  def trusted_proxy?(ip); end

  # source://rack//lib/rack/request.rb#247
  def unlink?; end

  # source://rack//lib/rack/request.rb#565
  def update_param(k, v); end

  # source://rack//lib/rack/request.rb#595
  def url; end

  # source://rack//lib/rack/request.rb#201
  def user_agent; end

  # source://rack//lib/rack/request.rb#620
  def values_at(*keys); end

  # source://rack//lib/rack/request.rb#313
  def xhr?; end

  private

  # source://rack//lib/rack/request.rb#776
  def allowed_scheme(header); end

  # source://rack//lib/rack/request.rb#628
  def default_session; end

  # source://rack//lib/rack/request.rb#684
  def expand_param_pairs(pairs, query_parser = T.unsafe(nil)); end

  # source://rack//lib/rack/request.rb#780
  def forwarded_priority; end

  # source://rack//lib/rack/request.rb#752
  def forwarded_scheme; end

  # source://rack//lib/rack/request.rb#668
  def get_http_forwarded(token); end

  # source://rack//lib/rack/request.rb#644
  def parse_http_accept_header(header); end

  # source://rack//lib/rack/request.rb#680
  def parse_multipart; end

  # source://rack//lib/rack/request.rb#676
  def parse_query(qs, d = T.unsafe(nil)); end

  # source://rack//lib/rack/request.rb#672
  def query_parser; end

  # source://rack//lib/rack/request.rb#743
  def reject_trusted_ip_addresses(ip_addresses); end

  # source://rack//lib/rack/request.rb#737
  def split_authority(authority); end

  # source://rack//lib/rack/request.rb#694
  def split_header(value); end

  # source://rack//lib/rack/request.rb#631
  def wrap_ipv6(host); end

  # source://rack//lib/rack/request.rb#784
  def x_forwarded_proto_priority; end
end

# source://rack//lib/rack/request.rb#722
Rack::Request::Helpers::AUTHORITY = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/request.rb#168
Rack::Request::Helpers::DEFAULT_PORTS = T.let(T.unsafe(nil), Hash)

# source://rack//lib/rack/request.rb#153
Rack::Request::Helpers::FORM_DATA_MEDIA_TYPES = T.let(T.unsafe(nil), Array)

# source://rack//lib/rack/request.rb#747
Rack::Request::Helpers::FORWARDED_SCHEME_HEADERS = T.let(T.unsafe(nil), Hash)

# source://rack//lib/rack/request.rb#176
Rack::Request::Helpers::HTTP_FORWARDED = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/request.rb#171
Rack::Request::Helpers::HTTP_X_FORWARDED_FOR = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/request.rb#174
Rack::Request::Helpers::HTTP_X_FORWARDED_HOST = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/request.rb#185
Rack::Request::Helpers::HTTP_X_FORWARDED_PORT = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/request.rb#182
Rack::Request::Helpers::HTTP_X_FORWARDED_PROTO = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/request.rb#179
Rack::Request::Helpers::HTTP_X_FORWARDED_SCHEME = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/request.rb#188
Rack::Request::Helpers::HTTP_X_FORWARDED_SSL = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/request.rb#161
Rack::Request::Helpers::PARSEABLE_DATA_MEDIA_TYPES = T.let(T.unsafe(nil), Array)

# source://rack//lib/rack/response.rb#23
class Rack::Response
  include ::Rack::Response::Helpers

  # source://rack//lib/rack/response.rb#54
  def initialize(body = T.unsafe(nil), status = T.unsafe(nil), headers = T.unsafe(nil)); end

  # source://rack//lib/rack/response.rb#164
  def [](key); end

  # source://rack//lib/rack/response.rb#168
  def []=(key, value); end

  # source://rack//lib/rack/response.rb#31
  def body; end

  # source://rack//lib/rack/response.rb#31
  def body=(_arg0); end

  # source://rack//lib/rack/response.rb#95
  def chunked?; end

  # source://rack//lib/rack/response.rb#152
  def close; end

  # source://rack//lib/rack/response.rb#172
  def delete_header(key); end

  # source://rack//lib/rack/response.rb#130
  def each(&callback); end

  # source://rack//lib/rack/response.rb#156
  def empty?; end

  # source://rack//lib/rack/response.rb#107
  def finish(&block); end

  # source://rack//lib/rack/response.rb#164
  def get_header(key); end

  # source://rack//lib/rack/response.rb#160
  def has_header?(key); end

  # source://rack//lib/rack/response.rb#32
  def headers; end

  # source://rack//lib/rack/response.rb#31
  def length; end

  # source://rack//lib/rack/response.rb#31
  def length=(_arg0); end

  # source://rack//lib/rack/response.rb#99
  def no_entity_body?; end

  # source://rack//lib/rack/response.rb#90
  def redirect(target, status = T.unsafe(nil)); end

  # source://rack//lib/rack/response.rb#168
  def set_header(key, value); end

  # source://rack//lib/rack/response.rb#31
  def status; end

  # source://rack//lib/rack/response.rb#31
  def status=(_arg0); end

  # source://rack//lib/rack/response.rb#107
  def to_a(&block); end

  # source://rack//lib/rack/response.rb#146
  def write(chunk); end

  class << self
    # source://rack//lib/rack/response.rb#24
    def [](status, headers, body); end
  end
end

# source://rack//lib/rack/response.rb#28
Rack::Response::CHUNKED = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/response.rb#180
module Rack::Response::Helpers
  # source://rack//lib/rack/response.rb#191
  def accepted?; end

  # source://rack//lib/rack/response.rb#219
  def add_header(key, value); end

  # source://rack//lib/rack/response.rb#194
  def bad_request?; end

  # source://rack//lib/rack/response.rb#307
  def cache!(duration = T.unsafe(nil), directive: T.unsafe(nil)); end

  # source://rack//lib/rack/response.rb#290
  def cache_control; end

  # source://rack//lib/rack/response.rb#294
  def cache_control=(value); end

  # source://rack//lib/rack/response.rb#186
  def client_error?; end

  # source://rack//lib/rack/response.rb#257
  def content_length; end

  # source://rack//lib/rack/response.rb#240
  def content_type; end

  # source://rack//lib/rack/response.rb#245
  def content_type=(content_type); end

  # source://rack//lib/rack/response.rb#190
  def created?; end

  # source://rack//lib/rack/response.rb#274
  def delete_cookie(key, value = T.unsafe(nil)); end

  # source://rack//lib/rack/response.rb#299
  def do_not_cache!; end

  # source://rack//lib/rack/response.rb#314
  def etag; end

  # source://rack//lib/rack/response.rb#318
  def etag=(value); end

  # source://rack//lib/rack/response.rb#196
  def forbidden?; end

  # source://rack//lib/rack/response.rb#206
  def include?(header); end

  # source://rack//lib/rack/response.rb#183
  def informational?; end

  # source://rack//lib/rack/response.rb#181
  def invalid?; end

  # source://rack//lib/rack/response.rb#262
  def location; end

  # source://rack//lib/rack/response.rb#266
  def location=(location); end

  # source://rack//lib/rack/response.rb#249
  def media_type; end

  # source://rack//lib/rack/response.rb#253
  def media_type_params; end

  # source://rack//lib/rack/response.rb#198
  def method_not_allowed?; end

  # source://rack//lib/rack/response.rb#193
  def moved_permanently?; end

  # source://rack//lib/rack/response.rb#192
  def no_content?; end

  # source://rack//lib/rack/response.rb#199
  def not_acceptable?; end

  # source://rack//lib/rack/response.rb#197
  def not_found?; end

  # source://rack//lib/rack/response.rb#189
  def ok?; end

  # source://rack//lib/rack/response.rb#201
  def precondition_failed?; end

  # source://rack//lib/rack/response.rb#204
  def redirect?; end

  # source://rack//lib/rack/response.rb#185
  def redirection?; end

  # source://rack//lib/rack/response.rb#200
  def request_timeout?; end

  # source://rack//lib/rack/response.rb#187
  def server_error?; end

  # source://rack//lib/rack/response.rb#270
  def set_cookie(key, value); end

  # source://rack//lib/rack/response.rb#282
  def set_cookie_header; end

  # source://rack//lib/rack/response.rb#286
  def set_cookie_header=(value); end

  # source://rack//lib/rack/response.rb#184
  def successful?; end

  # source://rack//lib/rack/response.rb#195
  def unauthorized?; end

  # source://rack//lib/rack/response.rb#202
  def unprocessable?; end

  protected

  # source://rack//lib/rack/response.rb#359
  def append(chunk); end

  # source://rack//lib/rack/response.rb#332
  def buffered_body!; end
end

# source://rack//lib/rack/response.rb#375
class Rack::Response::Raw
  include ::Rack::Response::Helpers

  # source://rack//lib/rack/response.rb#381
  def initialize(status, headers); end

  # source://rack//lib/rack/response.rb#398
  def delete_header(key); end

  # source://rack//lib/rack/response.rb#390
  def get_header(key); end

  # source://rack//lib/rack/response.rb#386
  def has_header?(key); end

  # source://rack//lib/rack/response.rb#378
  def headers; end

  # source://rack//lib/rack/response.rb#394
  def set_header(key, value); end

  # source://rack//lib/rack/response.rb#379
  def status; end

  # source://rack//lib/rack/response.rb#379
  def status=(_arg0); end
end

# source://rack//lib/rack/response.rb#29
Rack::Response::STATUS_WITH_NO_ENTITY_BODY = T.let(T.unsafe(nil), Hash)

# source://rack//lib/rack/rewindable_input.rb#14
class Rack::RewindableInput
  # source://rack//lib/rack/rewindable_input.rb#29
  def initialize(io); end

  # source://rack//lib/rack/rewindable_input.rb#65
  def close; end

  # source://rack//lib/rack/rewindable_input.rb#45
  def each(&block); end

  # source://rack//lib/rack/rewindable_input.rb#35
  def gets; end

  # source://rack//lib/rack/rewindable_input.rb#40
  def read(*args); end

  # source://rack//lib/rack/rewindable_input.rb#50
  def rewind; end

  # source://rack//lib/rack/rewindable_input.rb#55
  def size; end

  private

  # source://rack//lib/rack/rewindable_input.rb#109
  def filesystem_has_posix_semantics?; end

  # source://rack//lib/rack/rewindable_input.rb#78
  def make_rewindable; end
end

# source://rack//lib/rack/rewindable_input.rb#18
class Rack::RewindableInput::Middleware
  # source://rack//lib/rack/rewindable_input.rb#19
  def initialize(app); end

  # source://rack//lib/rack/rewindable_input.rb#23
  def call(env); end
end

# source://rack//lib/rack/runtime.rb#12
class Rack::Runtime
  # source://rack//lib/rack/runtime.rb#16
  def initialize(app, name = T.unsafe(nil)); end

  # source://rack//lib/rack/runtime.rb#22
  def call(env); end
end

# source://rack//lib/rack/runtime.rb#13
Rack::Runtime::FORMAT_STRING = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/runtime.rb#14
Rack::Runtime::HEADER_NAME = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#11
Rack::SCRIPT_NAME = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#14
Rack::SERVER_NAME = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#15
Rack::SERVER_PORT = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#13
Rack::SERVER_PROTOCOL = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#24
Rack::SET_COOKIE = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/sendfile.rb#104
class Rack::Sendfile
  # source://rack//lib/rack/sendfile.rb#105
  def initialize(app, variation = T.unsafe(nil), mappings = T.unsafe(nil)); end

  # source://rack//lib/rack/sendfile.rb#113
  def call(env); end

  private

  # source://rack//lib/rack/sendfile.rb#154
  def map_accel_path(env, path); end

  # source://rack//lib/rack/sendfile.rb#148
  def variation(env); end
end

# source://rack//lib/rack/show_exceptions.rb#18
class Rack::ShowExceptions
  # source://rack//lib/rack/show_exceptions.rb#26
  def initialize(app); end

  # source://rack//lib/rack/show_exceptions.rb#30
  def call(env); end

  # source://rack//lib/rack/show_exceptions.rb#65
  def dump_exception(exception); end

  # source://rack//lib/rack/show_exceptions.rb#116
  def h(obj); end

  # source://rack//lib/rack/show_exceptions.rb#56
  def prefers_plaintext?(env); end

  # source://rack//lib/rack/show_exceptions.rb#76
  def pretty(env, exception); end

  # source://rack//lib/rack/show_exceptions.rb#112
  def template; end

  private

  # source://rack//lib/rack/show_exceptions.rb#60
  def accepts_html?(env); end
end

# source://rack//lib/rack/show_exceptions.rb#19
Rack::ShowExceptions::CONTEXT = T.let(T.unsafe(nil), Integer)

# source://rack//lib/rack/show_exceptions.rb#21
class Rack::ShowExceptions::Frame < ::Struct
  def context_line; end
  def context_line=(_); end
  def filename; end
  def filename=(_); end
  def function; end
  def function=(_); end
  def lineno; end
  def lineno=(_); end
  def post_context; end
  def post_context=(_); end
  def post_context_lineno; end
  def post_context_lineno=(_); end
  def pre_context; end
  def pre_context=(_); end
  def pre_context_lineno; end
  def pre_context_lineno=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rack//lib/rack/show_exceptions.rb#131
Rack::ShowExceptions::TEMPLATE = T.let(T.unsafe(nil), ERB)

# source://rack//lib/rack/show_status.rb#18
class Rack::ShowStatus
  # source://rack//lib/rack/show_status.rb#19
  def initialize(app); end

  # source://rack//lib/rack/show_status.rb#24
  def call(env); end

  # source://rack//lib/rack/show_status.rb#54
  def h(obj); end
end

# source://rack//lib/rack/show_status.rb#69
Rack::ShowStatus::TEMPLATE = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/static.rb#92
class Rack::Static
  # source://rack//lib/rack/static.rb#93
  def initialize(app, options = T.unsafe(nil)); end

  # source://rack//lib/rack/static.rb#109
  def add_index_root?(path); end

  # source://rack//lib/rack/static.rb#166
  def applicable_rules(path); end

  # source://rack//lib/rack/static.rb#125
  def call(env); end

  # source://rack//lib/rack/static.rb#121
  def can_serve(path); end

  # source://rack//lib/rack/static.rb#113
  def overwrite_file_path(path); end

  # source://rack//lib/rack/static.rb#117
  def route_file(path); end
end

# source://rack//lib/rack/constants.rb#38
Rack::TRACE = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/constants.rb#25
Rack::TRANSFER_ENCODING = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/tempfile_reaper.rb#11
class Rack::TempfileReaper
  # source://rack//lib/rack/tempfile_reaper.rb#12
  def initialize(app); end

  # source://rack//lib/rack/tempfile_reaper.rb#16
  def call(env); end
end

# source://rack//lib/rack/constants.rb#37
Rack::UNLINK = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/urlmap.rb#20
class Rack::URLMap
  # source://rack//lib/rack/urlmap.rb#21
  def initialize(map = T.unsafe(nil)); end

  # source://rack//lib/rack/urlmap.rb#48
  def call(env); end

  # source://rack//lib/rack/urlmap.rb#25
  def remap(map); end

  private

  # source://rack//lib/rack/urlmap.rb#87
  def casecmp?(v1, v2); end
end

# source://rack//lib/rack/utils.rb#20
module Rack::Utils
  private

  # source://rack//lib/rack/utils.rb#166
  def best_q_match(q_value_header, available_mimes); end

  # source://rack//lib/rack/utils.rb#119
  def build_nested_query(value, prefix = T.unsafe(nil)); end

  # source://rack//lib/rack/utils.rb#109
  def build_query(params); end

  # source://rack//lib/rack/utils.rb#408
  def byte_ranges(env, size); end

  # source://rack//lib/rack/utils.rb#608
  def clean_path_info(path_info); end

  # source://rack//lib/rack/utils.rb#90
  def clock_time; end

  # source://rack//lib/rack/utils.rb#366
  def delete_cookie_header!(headers, key, value = T.unsafe(nil)); end

  # source://rack//lib/rack/utils.rb#362
  def delete_set_cookie_header(key, value = T.unsafe(nil)); end

  # source://rack//lib/rack/utils.rb#390
  def delete_set_cookie_header!(header, key, value = T.unsafe(nil)); end

  # source://rack//lib/rack/utils.rb#39
  def escape(s); end

  # source://rack//lib/rack/utils.rb#261
  def escape_cookie_key(key); end

  def escape_html(_arg0); end

  # source://rack//lib/rack/utils.rb#45
  def escape_path(s); end

  # source://rack//lib/rack/utils.rb#148
  def forwarded_values(forwarded_header); end

  # source://rack//lib/rack/utils.rb#412
  def get_byte_ranges(http_range, size); end

  # source://rack//lib/rack/utils.rb#252
  def parse_cookies(env); end

  # source://rack//lib/rack/utils.rb#233
  def parse_cookies_header(value); end

  # source://rack//lib/rack/utils.rb#105
  def parse_nested_query(qs, d = T.unsafe(nil)); end

  # source://rack//lib/rack/utils.rb#101
  def parse_query(qs, d = T.unsafe(nil), &unescaper); end

  # source://rack//lib/rack/utils.rb#137
  def q_values(q_value_header); end

  # source://rack//lib/rack/utils.rb#401
  def rfc2822(time); end

  # source://rack//lib/rack/utils.rb#454
  def secure_compare(a, b); end

  # source://rack//lib/rack/utils.rb#191
  def select_best_encoding(available_encodings, accept_encoding); end

  # source://rack//lib/rack/utils.rb#293
  def set_cookie_header(key, value); end

  # source://rack//lib/rack/utils.rb#336
  def set_cookie_header!(headers, key, value); end

  # source://rack//lib/rack/utils.rb#588
  def status_code(status); end

  # source://rack//lib/rack/utils.rb#57
  def unescape(s, encoding = T.unsafe(nil)); end

  # source://rack//lib/rack/utils.rb#51
  def unescape_path(s); end

  # source://rack//lib/rack/utils.rb#625
  def valid_path?(path); end

  class << self
    # source://rack//lib/rack/utils.rb#166
    def best_q_match(q_value_header, available_mimes); end

    # source://rack//lib/rack/utils.rb#119
    def build_nested_query(value, prefix = T.unsafe(nil)); end

    # source://rack//lib/rack/utils.rb#109
    def build_query(params); end

    # source://rack//lib/rack/utils.rb#408
    def byte_ranges(env, size); end

    # source://rack//lib/rack/utils.rb#608
    def clean_path_info(path_info); end

    # source://rack//lib/rack/utils.rb#90
    def clock_time; end

    # source://rack//lib/rack/utils.rb#29
    def default_query_parser; end

    # source://rack//lib/rack/utils.rb#29
    def default_query_parser=(_arg0); end

    # source://rack//lib/rack/utils.rb#366
    def delete_cookie_header!(headers, key, value = T.unsafe(nil)); end

    # source://rack//lib/rack/utils.rb#362
    def delete_set_cookie_header(key, value = T.unsafe(nil)); end

    # source://rack//lib/rack/utils.rb#390
    def delete_set_cookie_header!(header, key, value = T.unsafe(nil)); end

    # source://rack//lib/rack/utils.rb#39
    def escape(s); end

    # source://rack//lib/rack/utils.rb#261
    def escape_cookie_key(key); end

    def escape_html(_arg0); end

    # source://rack//lib/rack/utils.rb#45
    def escape_path(s); end

    # source://rack//lib/rack/utils.rb#148
    def forwarded_values(forwarded_header); end

    # source://rack//lib/rack/utils.rb#412
    def get_byte_ranges(http_range, size); end

    # source://rack//lib/rack/utils.rb#64
    def multipart_file_limit; end

    # source://rack//lib/rack/utils.rb#64
    def multipart_file_limit=(_arg0); end

    # source://rack//lib/rack/utils.rb#64
    def multipart_part_limit; end

    # source://rack//lib/rack/utils.rb#64
    def multipart_part_limit=(_arg0); end

    # source://rack//lib/rack/utils.rb#62
    def multipart_total_part_limit; end

    # source://rack//lib/rack/utils.rb#62
    def multipart_total_part_limit=(_arg0); end

    # source://rack//lib/rack/utils.rb#81
    def param_depth_limit; end

    # source://rack//lib/rack/utils.rb#85
    def param_depth_limit=(v); end

    # source://rack//lib/rack/utils.rb#252
    def parse_cookies(env); end

    # source://rack//lib/rack/utils.rb#233
    def parse_cookies_header(value); end

    # source://rack//lib/rack/utils.rb#105
    def parse_nested_query(qs, d = T.unsafe(nil)); end

    # source://rack//lib/rack/utils.rb#101
    def parse_query(qs, d = T.unsafe(nil), &unescaper); end

    # source://rack//lib/rack/utils.rb#137
    def q_values(q_value_header); end

    # source://rack//lib/rack/utils.rb#401
    def rfc2822(time); end

    # source://rack//lib/rack/utils.rb#454
    def secure_compare(a, b); end

    # source://rack//lib/rack/utils.rb#191
    def select_best_encoding(available_encodings, accept_encoding); end

    # source://rack//lib/rack/utils.rb#293
    def set_cookie_header(key, value); end

    # source://rack//lib/rack/utils.rb#336
    def set_cookie_header!(headers, key, value); end

    # source://rack//lib/rack/utils.rb#588
    def status_code(status); end

    # source://rack//lib/rack/utils.rb#57
    def unescape(s, encoding = T.unsafe(nil)); end

    # source://rack//lib/rack/utils.rb#51
    def unescape_path(s); end

    # source://rack//lib/rack/utils.rb#625
    def valid_path?(path); end
  end
end

# source://rack//lib/rack/utils.rb#25
Rack::Utils::COMMON_SEP = T.let(T.unsafe(nil), Hash)

# source://rack//lib/rack/utils.rb#477
class Rack::Utils::Context
  # source://rack//lib/rack/utils.rb#480
  def initialize(app_f, app_r); end

  # source://rack//lib/rack/utils.rb#478
  def app; end

  # source://rack//lib/rack/utils.rb#485
  def call(env); end

  # source://rack//lib/rack/utils.rb#493
  def context(env, app = T.unsafe(nil)); end

  # source://rack//lib/rack/utils.rb#478
  def for; end

  # source://rack//lib/rack/utils.rb#489
  def recontext(app); end
end

# source://rack//lib/rack/utils.rb#24
Rack::Utils::DEFAULT_SEP = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/utils.rb#504
Rack::Utils::HTTP_STATUS_CODES = T.let(T.unsafe(nil), Hash)

# source://rack//lib/rack/utils.rb#22
Rack::Utils::InvalidParameterError = Rack::QueryParser::InvalidParameterError

# source://rack//lib/rack/utils.rb#26
Rack::Utils::KeySpaceConstrainedParams = Rack::QueryParser::Params

# source://rack//lib/rack/utils.rb#623
Rack::Utils::NULL_BYTE = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/utils.rb#574
Rack::Utils::OBSOLETE_SYMBOLS_TO_STATUS_CODES = T.let(T.unsafe(nil), Hash)

# source://rack//lib/rack/utils.rb#582
Rack::Utils::OBSOLETE_SYMBOL_MAPPINGS = T.let(T.unsafe(nil), Hash)

# source://rack//lib/rack/utils.rb#606
Rack::Utils::PATH_SEPS = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/utils.rb#21
Rack::Utils::ParameterTypeError = Rack::QueryParser::ParameterTypeError

# source://rack//lib/rack/utils.rb#23
Rack::Utils::ParamsTooDeepError = Rack::QueryParser::ParamsTooDeepError

# source://rack//lib/rack/utils.rb#568
Rack::Utils::STATUS_WITH_NO_ENTITY_BODY = T.let(T.unsafe(nil), Hash)

# source://rack//lib/rack/utils.rb#570
Rack::Utils::SYMBOL_TO_STATUS_CODE = T.let(T.unsafe(nil), Hash)

# source://rack//lib/rack/utils.rb#258
Rack::Utils::VALID_COOKIE_KEY = T.let(T.unsafe(nil), Regexp)
