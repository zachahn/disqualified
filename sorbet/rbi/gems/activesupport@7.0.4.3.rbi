# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activesupport` gem.
# Please instead update this file by running `bin/tapioca gem activesupport`.

# source://activesupport//lib/active_support/lazy_load_hooks.rb#3
module ActiveSupport
  extend ::ActiveSupport::LazyLoadHooks
  extend ::ActiveSupport::Autoload

  # source://activesupport//lib/active_support/json/decoding.rb#9
  def parse_json_times; end

  # source://activesupport//lib/active_support/json/decoding.rb#9
  def parse_json_times=(val); end

  # source://activesupport//lib/active_support.rb#94
  def test_order; end

  # source://activesupport//lib/active_support.rb#94
  def test_order=(val); end

  # source://activesupport//lib/active_support.rb#95
  def test_parallelization_threshold; end

  # source://activesupport//lib/active_support.rb#95
  def test_parallelization_threshold=(val); end

  class << self
    # source://activesupport//lib/active_support.rb#99
    def cache_format_version; end

    # source://activesupport//lib/active_support.rb#103
    def cache_format_version=(value); end

    # source://activesupport//lib/active_support.rb#88
    def eager_load!; end

    # source://activesupport//lib/active_support.rb#97
    def error_reporter; end

    # source://activesupport//lib/active_support.rb#97
    def error_reporter=(_arg0); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def escape_html_entities_in_json(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def escape_html_entities_in_json=(arg); end

    # source://activesupport//lib/active_support/gem_version.rb#5
    def gem_version; end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def json_encoder(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def json_encoder=(arg); end

    # source://activesupport//lib/active_support/json/decoding.rb#9
    def parse_json_times; end

    # source://activesupport//lib/active_support/json/decoding.rb#9
    def parse_json_times=(val); end

    # source://activesupport//lib/active_support.rb#94
    def test_order; end

    # source://activesupport//lib/active_support.rb#94
    def test_order=(val); end

    # source://activesupport//lib/active_support.rb#95
    def test_parallelization_threshold; end

    # source://activesupport//lib/active_support.rb#95
    def test_parallelization_threshold=(val); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def time_precision(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def time_precision=(arg); end

    # source://activesupport//lib/active_support.rb#107
    def to_time_preserves_timezone; end

    # source://activesupport//lib/active_support.rb#111
    def to_time_preserves_timezone=(value); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def use_standard_json_time_format(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def use_standard_json_time_format=(arg); end

    # source://activesupport//lib/active_support.rb#115
    def utc_to_local_returns_utc_offset_times; end

    # source://activesupport//lib/active_support.rb#119
    def utc_to_local_returns_utc_offset_times=(value); end

    # source://activesupport//lib/active_support/version.rb#7
    def version; end
  end
end

# source://activesupport//lib/active_support/actionable_error.rb#9
module ActiveSupport::ActionableError
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::ActionableError::ClassMethods

  class << self
    # source://activesupport//lib/active_support/actionable_error.rb#18
    def actions(error); end

    # source://activesupport//lib/active_support/actionable_error.rb#27
    def dispatch(error, name); end
  end

  module GeneratedClassMethods
    def _actions; end
    def _actions=(value); end
    def _actions?; end
  end

  module GeneratedInstanceMethods
    def _actions; end
    def _actions=(value); end
    def _actions?; end
  end
end

# source://activesupport//lib/active_support/actionable_error.rb#33
module ActiveSupport::ActionableError::ClassMethods
  # source://activesupport//lib/active_support/actionable_error.rb#43
  def action(name, &block); end
end

# source://activesupport//lib/active_support/actionable_error.rb#12
class ActiveSupport::ActionableError::NonActionable < ::StandardError; end

# source://activesupport//lib/active_support/array_inquirer.rb#12
class ActiveSupport::ArrayInquirer < ::Array
  # source://activesupport//lib/active_support/array_inquirer.rb#25
  def any?(*candidates); end

  private

  # source://activesupport//lib/active_support/array_inquirer.rb#40
  def method_missing(name, *args); end

  # source://activesupport//lib/active_support/array_inquirer.rb#36
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/dependencies/autoload.rb#27
module ActiveSupport::Autoload
  # source://activesupport//lib/active_support/dependencies/autoload.rb#37
  def autoload(const_name, path = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/dependencies/autoload.rb#57
  def autoload_at(path); end

  # source://activesupport//lib/active_support/dependencies/autoload.rb#50
  def autoload_under(path); end

  # source://activesupport//lib/active_support/dependencies/autoload.rb#75
  def autoloads; end

  # source://activesupport//lib/active_support/dependencies/autoload.rb#64
  def eager_autoload; end

  # source://activesupport//lib/active_support/dependencies/autoload.rb#71
  def eager_load!; end

  class << self
    # source://activesupport//lib/active_support/dependencies/autoload.rb#28
    def extended(base); end
  end
end

# source://activesupport//lib/active_support/backtrace_cleaner.rb#31
class ActiveSupport::BacktraceCleaner
  # source://activesupport//lib/active_support/backtrace_cleaner.rb#32
  def initialize; end

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#60
  def add_filter(&block); end

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#69
  def add_silencer(&block); end

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#41
  def clean(backtrace, kind = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#41
  def filter(backtrace, kind = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#83
  def remove_filters!; end

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#76
  def remove_silencers!; end

  private

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#90
  def add_gem_filter; end

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#99
  def add_gem_silencer; end

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#103
  def add_stdlib_silencer; end

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#107
  def filter_backtrace(backtrace); end

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#123
  def noise(backtrace); end

  # source://activesupport//lib/active_support/backtrace_cleaner.rb#115
  def silence(backtrace); end
end

# source://activesupport//lib/active_support/backtrace_cleaner.rb#88
ActiveSupport::BacktraceCleaner::FORMATTED_GEMS_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/benchmarkable.rb#7
module ActiveSupport::Benchmarkable
  # source://activesupport//lib/active_support/benchmarkable.rb#37
  def benchmark(message = T.unsafe(nil), options = T.unsafe(nil), &block); end
end

# source://activesupport//lib/active_support/core_ext/big_decimal/conversions.rb#7
module ActiveSupport::BigDecimalWithDefaultFormat
  # source://activesupport//lib/active_support/core_ext/big_decimal/conversions.rb#8
  def to_s(format = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/cache.rb#16
module ActiveSupport::Cache
  class << self
    # source://activesupport//lib/active_support/cache.rb#100
    def expand_cache_key(key, namespace = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/cache.rb#41
    def format_version; end

    # source://activesupport//lib/active_support/cache.rb#41
    def format_version=(_arg0); end

    # source://activesupport//lib/active_support/cache.rb#68
    def lookup_store(store = T.unsafe(nil), *parameters); end

    private

    # source://activesupport//lib/active_support/cache.rb#112
    def retrieve_cache_key(key); end

    # source://activesupport//lib/active_support/cache.rb#124
    def retrieve_store_class(store); end
  end
end

# source://activesupport//lib/active_support/cache.rb#833
module ActiveSupport::Cache::Coders
  class << self
    # source://activesupport//lib/active_support/cache.rb#839
    def [](version); end
  end
end

# source://activesupport//lib/active_support/cache.rb#851
module ActiveSupport::Cache::Coders::Loader
  extend ::ActiveSupport::Cache::Coders::Loader

  # source://activesupport//lib/active_support/cache.rb#854
  def load(payload); end
end

# source://activesupport//lib/active_support/cache.rb#834
ActiveSupport::Cache::Coders::MARK_61 = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/cache.rb#836
ActiveSupport::Cache::Coders::MARK_70_COMPRESSED = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/cache.rb#835
ActiveSupport::Cache::Coders::MARK_70_UNCOMPRESSED = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/cache.rb#874
module ActiveSupport::Cache::Coders::Rails61Coder
  include ::ActiveSupport::Cache::Coders::Loader
  extend ::ActiveSupport::Cache::Coders::Loader
  extend ::ActiveSupport::Cache::Coders::Rails61Coder

  # source://activesupport//lib/active_support/cache.rb#878
  def dump(entry); end

  # source://activesupport//lib/active_support/cache.rb#882
  def dump_compressed(entry, threshold); end
end

# source://activesupport//lib/active_support/cache.rb#887
module ActiveSupport::Cache::Coders::Rails70Coder
  include ::ActiveSupport::Cache::Coders::Loader
  extend ::ActiveSupport::Cache::Coders::Loader
  extend ::ActiveSupport::Cache::Coders::Rails70Coder

  # source://activesupport//lib/active_support/cache.rb#891
  def dump(entry); end

  # source://activesupport//lib/active_support/cache.rb#895
  def dump_compressed(entry, threshold); end
end

# source://activesupport//lib/active_support/cache.rb#27
ActiveSupport::Cache::DEFAULT_COMPRESS_LIMIT = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/cache.rb#916
class ActiveSupport::Cache::Entry
  # source://activesupport//lib/active_support/cache.rb#927
  def initialize(value, compressed: T.unsafe(nil), version: T.unsafe(nil), expires_in: T.unsafe(nil), expires_at: T.unsafe(nil), **_arg5); end

  # source://activesupport//lib/active_support/cache.rb#963
  def bytesize; end

  # source://activesupport//lib/active_support/cache.rb#978
  def compressed(compress_threshold); end

  # source://activesupport//lib/active_support/cache.rb#974
  def compressed?; end

  # source://activesupport//lib/active_support/cache.rb#1008
  def dup_value!; end

  # source://activesupport//lib/active_support/cache.rb#945
  def expired?; end

  # source://activesupport//lib/active_support/cache.rb#949
  def expires_at; end

  # source://activesupport//lib/active_support/cache.rb#953
  def expires_at=(value); end

  # source://activesupport//lib/active_support/cache.rb#1002
  def local?; end

  # source://activesupport//lib/active_support/cache.rb#939
  def mismatched?(version); end

  # source://activesupport//lib/active_support/cache.rb#1018
  def pack; end

  # source://activesupport//lib/active_support/cache.rb#935
  def value; end

  # source://activesupport//lib/active_support/cache.rb#923
  def version; end

  private

  # source://activesupport//lib/active_support/cache.rb#1025
  def uncompress(value); end

  class << self
    # source://activesupport//lib/active_support/cache.rb#918
    def unpack(members); end
  end
end

# source://activesupport//lib/active_support/cache/file_store.rb#13
class ActiveSupport::Cache::FileStore < ::ActiveSupport::Cache::Store
  # source://activesupport//lib/active_support/cache/file_store.rb#21
  def initialize(cache_path, **options); end

  # source://activesupport//lib/active_support/cache/file_store.rb#14
  def cache_path; end

  # source://activesupport//lib/active_support/cache/file_store.rb#41
  def cleanup(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/file_store.rb#34
  def clear(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/file_store.rb#57
  def decrement(name, amount = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/file_store.rb#61
  def delete_matched(matcher, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/file_store.rb#51
  def increment(name, amount = T.unsafe(nil), options = T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/cache/file_store.rb#160
  def delete_empty_directories(dir); end

  # source://activesupport//lib/active_support/cache/file_store.rb#98
  def delete_entry(key, **options); end

  # source://activesupport//lib/active_support/cache/file_store.rb#169
  def ensure_cache_path(path); end

  # source://activesupport//lib/active_support/cache/file_store.rb#154
  def file_path_key(path); end

  # source://activesupport//lib/active_support/cache/file_store.rb#113
  def lock_file(file_name, &block); end

  # source://activesupport//lib/active_support/cache/file_store.rb#187
  def modify_value(name, amount, options); end

  # source://activesupport//lib/active_support/cache/file_store.rb#127
  def normalize_key(key, options); end

  # source://activesupport//lib/active_support/cache/file_store.rb#73
  def read_entry(key, **options); end

  # source://activesupport//lib/active_support/cache/file_store.rb#80
  def read_serialized_entry(key, **_arg1); end

  # source://activesupport//lib/active_support/cache/file_store.rb#173
  def search_dir(dir, &callback); end

  # source://activesupport//lib/active_support/cache/file_store.rb#87
  def write_entry(key, entry, **options); end

  # source://activesupport//lib/active_support/cache/file_store.rb#91
  def write_serialized_entry(key, payload, **options); end

  class << self
    # source://activesupport//lib/active_support/cache/file_store.rb#27
    def supports_cache_versioning?; end
  end
end

# source://activesupport//lib/active_support/cache/file_store.rb#16
ActiveSupport::Cache::FileStore::DIR_FORMATTER = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/cache/file_store.rb#17
ActiveSupport::Cache::FileStore::FILENAME_MAX_SIZE = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/cache/file_store.rb#18
ActiveSupport::Cache::FileStore::FILEPATH_MAX_SIZE = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/cache/file_store.rb#19
ActiveSupport::Cache::FileStore::GITKEEP_FILES = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/cache/memory_store.rb#26
class ActiveSupport::Cache::MemoryStore < ::ActiveSupport::Cache::Store
  # source://activesupport//lib/active_support/cache/memory_store.rb#48
  def initialize(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#75
  def cleanup(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#67
  def clear(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#117
  def decrement(name, amount = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#122
  def delete_matched(matcher, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#112
  def increment(name, amount = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#133
  def inspect; end

  # source://activesupport//lib/active_support/cache/memory_store.rb#88
  def prune(target_size, max_time = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#107
  def pruning?; end

  # source://activesupport//lib/active_support/cache/memory_store.rb#139
  def synchronize(&block); end

  private

  # source://activesupport//lib/active_support/cache/memory_store.rb#150
  def cached_size(key, payload); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#146
  def default_coder; end

  # source://activesupport//lib/active_support/cache/memory_store.rb#183
  def delete_entry(key, **options); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#191
  def modify_value(name, amount, options); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#154
  def read_entry(key, **options); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#166
  def write_entry(key, entry, **options); end

  class << self
    # source://activesupport//lib/active_support/cache/memory_store.rb#62
    def supports_cache_versioning?; end
  end
end

# source://activesupport//lib/active_support/cache/memory_store.rb#27
module ActiveSupport::Cache::MemoryStore::DupCoder
  extend ::ActiveSupport::Cache::MemoryStore::DupCoder

  # source://activesupport//lib/active_support/cache/memory_store.rb#30
  def dump(entry); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#35
  def dump_compressed(entry, threshold); end

  # source://activesupport//lib/active_support/cache/memory_store.rb#41
  def load(entry); end
end

# source://activesupport//lib/active_support/cache/memory_store.rb#144
ActiveSupport::Cache::MemoryStore::PER_ENTRY_OVERHEAD = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/cache.rb#817
module ActiveSupport::Cache::NullCoder
  extend ::ActiveSupport::Cache::NullCoder

  # source://activesupport//lib/active_support/cache.rb#820
  def dump(entry); end

  # source://activesupport//lib/active_support/cache.rb#824
  def dump_compressed(entry, threshold); end

  # source://activesupport//lib/active_support/cache.rb#828
  def load(payload); end
end

# source://activesupport//lib/active_support/cache/null_store.rb#12
class ActiveSupport::Cache::NullStore < ::ActiveSupport::Cache::Store
  include ::ActiveSupport::Cache::Strategy::LocalCache

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#81
  def cleanup(**options); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#75
  def clear(**options); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#100
  def decrement(name, amount = T.unsafe(nil), **options); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#87
  def delete_matched(matcher, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#93
  def increment(name, amount = T.unsafe(nil), **options); end

  private

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#147
  def delete_entry(key, **_arg1); end

  # source://activesupport//lib/active_support/cache/null_store.rb#36
  def read_entry(key, **s); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#108
  def read_serialized_entry(key, raw: T.unsafe(nil), **options); end

  # source://activesupport//lib/active_support/cache/null_store.rb#43
  def write_entry(key, entry, **_arg2); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#138
  def write_serialized_entry(key, payload, **_arg2); end

  class << self
    # source://activesupport//lib/active_support/cache/null_store.rb#16
    def supports_cache_versioning?; end
  end
end

# source://activesupport//lib/active_support/cache.rb#30
ActiveSupport::Cache::OPTION_ALIASES = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/cache.rb#175
class ActiveSupport::Cache::Store
  # source://activesupport//lib/active_support/cache.rb#211
  def initialize(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#582
  def cleanup(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#592
  def clear(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#573
  def decrement(name, amount = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#514
  def delete(name, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#555
  def delete_matched(matcher, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#525
  def delete_multi(names, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#537
  def exist?(name, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#321
  def fetch(name, options = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/cache.rb#447
  def fetch_multi(*names); end

  # source://activesupport//lib/active_support/cache.rb#564
  def increment(name, amount = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#176
  def logger; end

  # source://activesupport//lib/active_support/cache.rb#176
  def logger=(val); end

  # source://activesupport//lib/active_support/cache.rb#227
  def mute; end

  # source://activesupport//lib/active_support/cache.rb#546
  def new_entry(value, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#178
  def options; end

  # source://activesupport//lib/active_support/cache.rb#362
  def read(name, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#395
  def read_multi(*names); end

  # source://activesupport//lib/active_support/cache.rb#178
  def silence; end

  # source://activesupport//lib/active_support/cache.rb#221
  def silence!; end

  # source://activesupport//lib/active_support/cache.rb#178
  def silence?; end

  # source://activesupport//lib/active_support/cache.rb#502
  def write(name, value, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#407
  def write_multi(hash, options = T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/cache.rb#597
  def default_coder; end

  # source://activesupport//lib/active_support/cache.rb#674
  def delete_entry(key, **options); end

  # source://activesupport//lib/active_support/cache.rb#680
  def delete_multi_entries(entries, **options); end

  # source://activesupport//lib/active_support/cache.rb#641
  def deserialize_entry(payload); end

  # source://activesupport//lib/active_support/cache.rb#747
  def expanded_key(key); end

  # source://activesupport//lib/active_support/cache.rb#768
  def expanded_version(key); end

  # source://activesupport//lib/active_support/cache.rb#802
  def get_entry_value(entry, name, options); end

  # source://activesupport//lib/active_support/cache.rb#786
  def handle_expired_entry(entry, key, options); end

  # source://activesupport//lib/active_support/cache.rb#776
  def instrument(operation, key, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#605
  def key_matcher(pattern, options); end

  # source://activesupport//lib/active_support/cache.rb#685
  def merged_options(call_options); end

  # source://activesupport//lib/active_support/cache.rb#725
  def namespace_key(key, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#712
  def normalize_key(key, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#699
  def normalize_options(options); end

  # source://activesupport//lib/active_support/cache.rb#764
  def normalize_version(key, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache.rb#622
  def read_entry(key, **options); end

  # source://activesupport//lib/active_support/cache.rb#647
  def read_multi_entries(names, **options); end

  # source://activesupport//lib/active_support/cache.rb#807
  def save_block_result_to_cache(name, options); end

  # source://activesupport//lib/active_support/cache.rb#632
  def serialize_entry(entry, **options); end

  # source://activesupport//lib/active_support/cache.rb#628
  def write_entry(key, entry, **options); end

  # source://activesupport//lib/active_support/cache.rb#666
  def write_multi_entries(hash, **options); end

  class << self
    # source://activesupport//lib/active_support/cache.rb#176
    def logger; end

    # source://activesupport//lib/active_support/cache.rb#176
    def logger=(val); end

    private

    # source://activesupport//lib/active_support/cache.rb#190
    def ensure_connection_pool_added!; end

    # source://activesupport//lib/active_support/cache.rb#183
    def retrieve_pool_options(options); end
  end
end

# source://activesupport//lib/active_support/cache.rb#34
module ActiveSupport::Cache::Strategy; end

# source://activesupport//lib/active_support/cache/strategy/local_cache.rb#11
module ActiveSupport::Cache::Strategy::LocalCache
  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#81
  def cleanup(**options); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#75
  def clear(**options); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#100
  def decrement(name, amount = T.unsafe(nil), **options); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#87
  def delete_matched(matcher, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#93
  def increment(name, amount = T.unsafe(nil), **options); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#69
  def middleware; end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#63
  def with_local_cache(&block); end

  private

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#170
  def bypass_local_cache(&block); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#147
  def delete_entry(key, **_arg1); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#166
  def local_cache; end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#162
  def local_cache_key; end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#122
  def read_multi_entries(keys, **options); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#108
  def read_serialized_entry(key, raw: T.unsafe(nil), **options); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#174
  def use_temporary_local_cache(temporary_cache); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#152
  def write_cache_value(name, value, **options); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#138
  def write_serialized_entry(key, payload, **_arg2); end
end

# source://activesupport//lib/active_support/cache/strategy/local_cache.rb#15
module ActiveSupport::Cache::Strategy::LocalCache::LocalCacheRegistry
  extend ::ActiveSupport::Cache::Strategy::LocalCache::LocalCacheRegistry

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#18
  def cache_for(local_cache_key); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#23
  def set_cache_for(local_cache_key, value); end
end

# source://activesupport//lib/active_support/cache/strategy/local_cache.rb#31
class ActiveSupport::Cache::Strategy::LocalCache::LocalStore
  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#32
  def initialize; end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#36
  def clear(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#53
  def delete_entry(key); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#57
  def fetch_entry(key); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#40
  def read_entry(key); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#44
  def read_multi_entries(keys); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache.rb#48
  def write_entry(key, entry); end
end

# source://activesupport//lib/active_support/cache/strategy/local_cache_middleware.rb#13
class ActiveSupport::Cache::Strategy::LocalCache::Middleware
  # source://activesupport//lib/active_support/cache/strategy/local_cache_middleware.rb#16
  def initialize(name, local_cache_key); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache_middleware.rb#27
  def call(env); end

  # source://activesupport//lib/active_support/cache/strategy/local_cache_middleware.rb#14
  def local_cache_key; end

  # source://activesupport//lib/active_support/cache/strategy/local_cache_middleware.rb#14
  def name; end

  # source://activesupport//lib/active_support/cache/strategy/local_cache_middleware.rb#22
  def new(app); end
end

# source://activesupport//lib/active_support/cache.rb#25
ActiveSupport::Cache::UNIVERSAL_OPTIONS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/key_generator.rb#47
class ActiveSupport::CachingKeyGenerator
  # source://activesupport//lib/active_support/key_generator.rb#48
  def initialize(key_generator); end

  # source://activesupport//lib/active_support/key_generator.rb#54
  def generate_key(*args); end
end

# source://activesupport//lib/active_support/callbacks.rb#63
module ActiveSupport::Callbacks
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker

  # source://activesupport//lib/active_support/callbacks.rb#95
  def run_callbacks(kind); end

  private

  # source://activesupport//lib/active_support/callbacks.rb#147
  def halted_callback_hook(filter, name); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

# source://activesupport//lib/active_support/callbacks.rb#71
ActiveSupport::Callbacks::CALLBACK_FILTER_TYPES = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/callbacks.rb#375
module ActiveSupport::Callbacks::CallTemplate
  class << self
    # source://activesupport//lib/active_support/callbacks.rb#533
    def build(filter, callback); end
  end
end

# source://activesupport//lib/active_support/callbacks.rb#434
class ActiveSupport::Callbacks::CallTemplate::InstanceExec0
  # source://activesupport//lib/active_support/callbacks.rb#435
  def initialize(block); end

  # source://activesupport//lib/active_support/callbacks.rb#439
  def expand(target, value, block); end

  # source://activesupport//lib/active_support/callbacks.rb#449
  def inverted_lambda; end

  # source://activesupport//lib/active_support/callbacks.rb#443
  def make_lambda; end
end

# source://activesupport//lib/active_support/callbacks.rb#456
class ActiveSupport::Callbacks::CallTemplate::InstanceExec1
  # source://activesupport//lib/active_support/callbacks.rb#457
  def initialize(block); end

  # source://activesupport//lib/active_support/callbacks.rb#461
  def expand(target, value, block); end

  # source://activesupport//lib/active_support/callbacks.rb#471
  def inverted_lambda; end

  # source://activesupport//lib/active_support/callbacks.rb#465
  def make_lambda; end
end

# source://activesupport//lib/active_support/callbacks.rb#478
class ActiveSupport::Callbacks::CallTemplate::InstanceExec2
  # source://activesupport//lib/active_support/callbacks.rb#479
  def initialize(block); end

  # source://activesupport//lib/active_support/callbacks.rb#483
  def expand(target, value, block); end

  # source://activesupport//lib/active_support/callbacks.rb#495
  def inverted_lambda; end

  # source://activesupport//lib/active_support/callbacks.rb#488
  def make_lambda; end
end

# source://activesupport//lib/active_support/callbacks.rb#376
class ActiveSupport::Callbacks::CallTemplate::MethodCall
  # source://activesupport//lib/active_support/callbacks.rb#377
  def initialize(method); end

  # source://activesupport//lib/active_support/callbacks.rb#394
  def expand(target, value, block); end

  # source://activesupport//lib/active_support/callbacks.rb#404
  def inverted_lambda; end

  # source://activesupport//lib/active_support/callbacks.rb#398
  def make_lambda; end
end

# source://activesupport//lib/active_support/callbacks.rb#411
class ActiveSupport::Callbacks::CallTemplate::ObjectCall
  # source://activesupport//lib/active_support/callbacks.rb#412
  def initialize(target, method); end

  # source://activesupport//lib/active_support/callbacks.rb#417
  def expand(target, value, block); end

  # source://activesupport//lib/active_support/callbacks.rb#427
  def inverted_lambda; end

  # source://activesupport//lib/active_support/callbacks.rb#421
  def make_lambda; end
end

# source://activesupport//lib/active_support/callbacks.rb#503
class ActiveSupport::Callbacks::CallTemplate::ProcCall
  # source://activesupport//lib/active_support/callbacks.rb#504
  def initialize(target); end

  # source://activesupport//lib/active_support/callbacks.rb#508
  def expand(target, value, block); end

  # source://activesupport//lib/active_support/callbacks.rb#518
  def inverted_lambda; end

  # source://activesupport//lib/active_support/callbacks.rb#512
  def make_lambda; end
end

# source://activesupport//lib/active_support/callbacks.rb#280
class ActiveSupport::Callbacks::Callback
  # source://activesupport//lib/active_support/callbacks.rb#295
  def initialize(name, filter, kind, options, chain_config); end

  # source://activesupport//lib/active_support/callbacks.rb#330
  def apply(callback_sequence); end

  # source://activesupport//lib/active_support/callbacks.rb#293
  def chain_config; end

  # source://activesupport//lib/active_support/callbacks.rb#344
  def current_scopes; end

  # source://activesupport//lib/active_support/callbacks.rb#320
  def duplicates?(other); end

  # source://activesupport//lib/active_support/callbacks.rb#293
  def filter; end

  # source://activesupport//lib/active_support/callbacks.rb#292
  def kind; end

  # source://activesupport//lib/active_support/callbacks.rb#292
  def kind=(_arg0); end

  # source://activesupport//lib/active_support/callbacks.rb#316
  def matches?(_kind, _filter); end

  # source://activesupport//lib/active_support/callbacks.rb#304
  def merge_conditional_options(chain, if_option:, unless_option:); end

  # source://activesupport//lib/active_support/callbacks.rb#292
  def name; end

  # source://activesupport//lib/active_support/callbacks.rb#292
  def name=(_arg0); end

  private

  # source://activesupport//lib/active_support/callbacks.rb#352
  def check_conditionals(conditionals); end

  # source://activesupport//lib/active_support/callbacks.rb#367
  def conditions_lambdas; end

  class << self
    # source://activesupport//lib/active_support/callbacks.rb#281
    def build(chain, filter, kind, options); end
  end
end

# source://activesupport//lib/active_support/callbacks.rb#349
ActiveSupport::Callbacks::Callback::EMPTY_ARRAY = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/callbacks.rb#603
class ActiveSupport::Callbacks::CallbackChain
  include ::Enumerable

  # source://activesupport//lib/active_support/callbacks.rb#608
  def initialize(name, config); end

  # source://activesupport//lib/active_support/callbacks.rb#654
  def append(*callbacks); end

  # source://activesupport//lib/active_support/callbacks.rb#633
  def clear; end

  # source://activesupport//lib/active_support/callbacks.rb#645
  def compile; end

  # source://activesupport//lib/active_support/callbacks.rb#606
  def config; end

  # source://activesupport//lib/active_support/callbacks.rb#628
  def delete(o); end

  # source://activesupport//lib/active_support/callbacks.rb#619
  def each(&block); end

  # source://activesupport//lib/active_support/callbacks.rb#621
  def empty?; end

  # source://activesupport//lib/active_support/callbacks.rb#620
  def index(o); end

  # source://activesupport//lib/active_support/callbacks.rb#623
  def insert(index, o); end

  # source://activesupport//lib/active_support/callbacks.rb#606
  def name; end

  # source://activesupport//lib/active_support/callbacks.rb#658
  def prepend(*callbacks); end

  protected

  # source://activesupport//lib/active_support/callbacks.rb#663
  def chain; end

  private

  # source://activesupport//lib/active_support/callbacks.rb#666
  def append_one(callback); end

  # source://activesupport//lib/active_support/callbacks.rb#683
  def default_terminator; end

  # source://activesupport//lib/active_support/callbacks.rb#639
  def initialize_copy(other); end

  # source://activesupport//lib/active_support/callbacks.rb#672
  def prepend_one(callback); end

  # source://activesupport//lib/active_support/callbacks.rb#678
  def remove_duplicates(callback); end
end

# source://activesupport//lib/active_support/callbacks.rb#556
class ActiveSupport::Callbacks::CallbackSequence
  # source://activesupport//lib/active_support/callbacks.rb#557
  def initialize(nested = T.unsafe(nil), call_template = T.unsafe(nil), user_conditions = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/callbacks.rb#571
  def after(&after); end

  # source://activesupport//lib/active_support/callbacks.rb#576
  def around(call_template, user_conditions); end

  # source://activesupport//lib/active_support/callbacks.rb#566
  def before(&before); end

  # source://activesupport//lib/active_support/callbacks.rb#590
  def expand_call_template(arg, block); end

  # source://activesupport//lib/active_support/callbacks.rb#586
  def final?; end

  # source://activesupport//lib/active_support/callbacks.rb#598
  def invoke_after(arg); end

  # source://activesupport//lib/active_support/callbacks.rb#594
  def invoke_before(arg); end

  # source://activesupport//lib/active_support/callbacks.rb#584
  def nested; end

  # source://activesupport//lib/active_support/callbacks.rb#580
  def skip?(arg); end
end

# source://activesupport//lib/active_support/callbacks.rb#695
module ActiveSupport::Callbacks::ClassMethods
  # source://activesupport//lib/active_support/callbacks.rb#705
  def __update_callbacks(name); end

  # source://activesupport//lib/active_support/callbacks.rb#917
  def define_callbacks(*names); end

  # source://activesupport//lib/active_support/callbacks.rb#696
  def normalize_callback_params(filters, block); end

  # source://activesupport//lib/active_support/callbacks.rb#827
  def reset_callbacks(name); end

  # source://activesupport//lib/active_support/callbacks.rb#756
  def set_callback(name, *filter_list, &block); end

  # source://activesupport//lib/active_support/callbacks.rb#802
  def skip_callback(name, *filter_list, &block); end

  protected

  # source://activesupport//lib/active_support/callbacks.rb#948
  def get_callbacks(name); end

  # source://activesupport//lib/active_support/callbacks.rb#952
  def set_callbacks(name, callbacks); end
end

# source://activesupport//lib/active_support/callbacks.rb#150
module ActiveSupport::Callbacks::Conditionals; end

# source://activesupport//lib/active_support/callbacks.rb#151
class ActiveSupport::Callbacks::Conditionals::Value
  # source://activesupport//lib/active_support/callbacks.rb#152
  def initialize(&block); end

  # source://activesupport//lib/active_support/callbacks.rb#155
  def call(target, value); end
end

# source://activesupport//lib/active_support/callbacks.rb#159
module ActiveSupport::Callbacks::Filters; end

# source://activesupport//lib/active_support/callbacks.rb#212
class ActiveSupport::Callbacks::Filters::After
  class << self
    # source://activesupport//lib/active_support/callbacks.rb#213
    def build(callback_sequence, user_callback, user_conditions, chain_config); end

    private

    # source://activesupport//lib/active_support/callbacks.rb#255
    def conditional(callback_sequence, user_callback, user_conditions); end

    # source://activesupport//lib/active_support/callbacks.rb#244
    def halting(callback_sequence, user_callback); end

    # source://activesupport//lib/active_support/callbacks.rb#229
    def halting_and_conditional(callback_sequence, user_callback, user_conditions); end

    # source://activesupport//lib/active_support/callbacks.rb#269
    def simple(callback_sequence, user_callback); end
  end
end

# source://activesupport//lib/active_support/callbacks.rb#162
class ActiveSupport::Callbacks::Filters::Before
  class << self
    # source://activesupport//lib/active_support/callbacks.rb#163
    def build(callback_sequence, user_callback, user_conditions, chain_config, filter, name); end

    private

    # source://activesupport//lib/active_support/callbacks.rb#192
    def halting(callback_sequence, user_callback, halted_lambda, filter, name); end

    # source://activesupport//lib/active_support/callbacks.rb#173
    def halting_and_conditional(callback_sequence, user_callback, user_conditions, halted_lambda, filter, name); end
  end
end

# source://activesupport//lib/active_support/callbacks.rb#160
class ActiveSupport::Callbacks::Filters::Environment < ::Struct
  def halted; end
  def halted=(_); end
  def target; end
  def target=(_); end
  def value; end
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activesupport//lib/active_support/code_generator.rb#4
class ActiveSupport::CodeGenerator
  # source://activesupport//lib/active_support/code_generator.rb#48
  def initialize(owner, path, line); end

  # source://activesupport//lib/active_support/code_generator.rb#55
  def define_cached_method(name, namespace:, as: T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/code_generator.rb#59
  def execute; end

  class << self
    # source://activesupport//lib/active_support/code_generator.rb#36
    def batch(owner, path, line); end
  end
end

# source://activesupport//lib/active_support/code_generator.rb#5
class ActiveSupport::CodeGenerator::MethodSet
  # source://activesupport//lib/active_support/code_generator.rb#8
  def initialize(namespace); end

  # source://activesupport//lib/active_support/code_generator.rb#25
  def apply(owner, path, line); end

  # source://activesupport//lib/active_support/code_generator.rb#14
  def define_cached_method(name, as: T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/code_generator.rb#6
ActiveSupport::CodeGenerator::MethodSet::METHOD_CACHES = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/core_ext/range/compare_range.rb#4
module ActiveSupport::CompareWithRange
  # source://activesupport//lib/active_support/core_ext/range/compare_range.rb#16
  def ===(value); end

  # source://activesupport//lib/active_support/core_ext/range/compare_range.rb#41
  def include?(value); end
end

# source://activesupport//lib/active_support/concern.rb#110
module ActiveSupport::Concern
  # source://activesupport//lib/active_support/concern.rb#127
  def append_features(base); end

  # source://activesupport//lib/active_support/concern.rb#207
  def class_methods(&class_methods_module_definition); end

  # source://activesupport//lib/active_support/concern.rb#156
  def included(base = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/concern.rb#140
  def prepend_features(base); end

  # source://activesupport//lib/active_support/concern.rb#173
  def prepended(base = T.unsafe(nil), &block); end

  class << self
    # source://activesupport//lib/active_support/concern.rb#123
    def extended(base); end
  end
end

# source://activesupport//lib/active_support/concern.rb#111
class ActiveSupport::Concern::MultipleIncludedBlocks < ::StandardError
  # source://activesupport//lib/active_support/concern.rb#112
  def initialize; end
end

# source://activesupport//lib/active_support/concern.rb#117
class ActiveSupport::Concern::MultiplePrependBlocks < ::StandardError
  # source://activesupport//lib/active_support/concern.rb#118
  def initialize; end
end

# source://activesupport//lib/active_support/concurrency/share_lock.rb#7
module ActiveSupport::Concurrency; end

# source://activesupport//lib/active_support/concurrency/load_interlock_aware_monitor.rb#9
class ActiveSupport::Concurrency::LoadInterlockAwareMonitor < ::Monitor
  # source://activesupport//lib/active_support/concurrency/load_interlock_aware_monitor.rb#15
  def mon_enter; end

  # source://activesupport//lib/active_support/concurrency/load_interlock_aware_monitor.rb#20
  def synchronize(&block); end
end

# source://activesupport//lib/active_support/concurrency/load_interlock_aware_monitor.rb#11
ActiveSupport::Concurrency::LoadInterlockAwareMonitor::EXCEPTION_IMMEDIATE = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/concurrency/load_interlock_aware_monitor.rb#10
ActiveSupport::Concurrency::LoadInterlockAwareMonitor::EXCEPTION_NEVER = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/concurrency/share_lock.rb#11
class ActiveSupport::Concurrency::ShareLock
  include ::MonitorMixin

  # source://activesupport//lib/active_support/concurrency/share_lock.rb#50
  def initialize; end

  # source://activesupport//lib/active_support/concurrency/share_lock.rb#148
  def exclusive(purpose: T.unsafe(nil), compatible: T.unsafe(nil), after_compatible: T.unsafe(nil), no_wait: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/concurrency/share_lock.rb#18
  def raw_state; end

  # source://activesupport//lib/active_support/concurrency/share_lock.rb#159
  def sharing; end

  # source://activesupport//lib/active_support/concurrency/share_lock.rb#76
  def start_exclusive(purpose: T.unsafe(nil), compatible: T.unsafe(nil), no_wait: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/concurrency/share_lock.rb#114
  def start_sharing; end

  # source://activesupport//lib/active_support/concurrency/share_lock.rb#96
  def stop_exclusive(compatible: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/concurrency/share_lock.rb#131
  def stop_sharing; end

  # source://activesupport//lib/active_support/concurrency/share_lock.rb#171
  def yield_shares(purpose: T.unsafe(nil), compatible: T.unsafe(nil), block_share: T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/concurrency/share_lock.rb#204
  def busy_for_exclusive?(purpose); end

  # source://activesupport//lib/active_support/concurrency/share_lock.rb#209
  def busy_for_sharing?(purpose); end

  # source://activesupport//lib/active_support/concurrency/share_lock.rb#214
  def eligible_waiters?(compatible); end

  # source://activesupport//lib/active_support/concurrency/share_lock.rb#218
  def wait_for(method, &block); end
end

# source://activesupport//lib/active_support/configurable.rb#9
module ActiveSupport::Configurable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveSupport::Configurable::ClassMethods

  # source://activesupport//lib/active_support/configurable.rb#145
  def config; end
end

# source://activesupport//lib/active_support/configurable.rb#27
module ActiveSupport::Configurable::ClassMethods
  # source://activesupport//lib/active_support/configurable.rb#28
  def config; end

  # source://activesupport//lib/active_support/configurable.rb#37
  def configure; end

  private

  # source://activesupport//lib/active_support/configurable.rb#109
  def config_accessor(*names, instance_reader: T.unsafe(nil), instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/configurable.rb#12
class ActiveSupport::Configurable::Configuration < ::ActiveSupport::InheritableOptions
  # source://activesupport//lib/active_support/configurable.rb#13
  def compile_methods!; end

  class << self
    # source://activesupport//lib/active_support/configurable.rb#18
    def compile_methods!(keys); end
  end
end

# source://activesupport//lib/active_support/configuration_file.rb#9
class ActiveSupport::ConfigurationFile
  # source://activesupport//lib/active_support/configuration_file.rb#12
  def initialize(content_path); end

  # source://activesupport//lib/active_support/configuration_file.rb#21
  def parse(context: T.unsafe(nil), **options); end

  private

  # source://activesupport//lib/active_support/configuration_file.rb#35
  def read(content_path); end

  # source://activesupport//lib/active_support/configuration_file.rb#46
  def render(context); end

  class << self
    # source://activesupport//lib/active_support/configuration_file.rb#17
    def parse(content_path, **options); end
  end
end

# source://activesupport//lib/active_support/configuration_file.rb#10
class ActiveSupport::ConfigurationFile::FormatError < ::StandardError; end

# source://activesupport//lib/active_support/current_attributes.rb#89
class ActiveSupport::CurrentAttributes
  include ::ActiveSupport::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker

  # source://activesupport//lib/active_support/current_attributes.rb#188
  def initialize; end

  # source://activesupport//lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport//lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport//lib/active_support/callbacks.rb#940
  def _reset_callbacks; end

  # source://activesupport//lib/active_support/callbacks.rb#928
  def _run_reset_callbacks(&block); end

  # source://activesupport//lib/active_support/current_attributes.rb#186
  def attributes; end

  # source://activesupport//lib/active_support/current_attributes.rb#186
  def attributes=(_arg0); end

  # source://activesupport//lib/active_support/current_attributes.rb#211
  def reset; end

  # source://activesupport//lib/active_support/current_attributes.rb#202
  def set(set_attributes); end

  private

  # source://activesupport//lib/active_support/current_attributes.rb#218
  def assign_attributes(new_attributes); end

  # source://activesupport//lib/active_support/current_attributes.rb#222
  def compute_attributes(keys); end

  class << self
    # source://activesupport//lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport//lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport//lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport//lib/active_support/callbacks.rb#932
    def _reset_callbacks; end

    # source://activesupport//lib/active_support/callbacks.rb#936
    def _reset_callbacks=(value); end

    # source://activesupport//lib/active_support/current_attributes.rb#142
    def after_reset(&block); end

    # source://activesupport//lib/active_support/current_attributes.rb#100
    def attribute(*names); end

    # source://activesupport//lib/active_support/current_attributes.rb#137
    def before_reset(&block); end

    # source://activesupport//lib/active_support/current_attributes.rb#153
    def clear_all; end

    # source://activesupport//lib/active_support/current_attributes.rb#95
    def instance; end

    # source://activesupport//lib/active_support/current_attributes.rb#147
    def reset(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/current_attributes.rb#149
    def reset_all; end

    # source://activesupport//lib/active_support/current_attributes.rb#142
    def resets(&block); end

    # source://activesupport//lib/active_support/current_attributes.rb#147
    def set(*_arg0, **_arg1, &_arg2); end

    private

    # source://activesupport//lib/active_support/current_attributes.rb#163
    def current_instances; end

    # source://activesupport//lib/active_support/current_attributes.rb#167
    def current_instances_key; end

    # source://activesupport//lib/active_support/current_attributes.rb#159
    def generated_attribute_methods; end

    # source://activesupport//lib/active_support/current_attributes.rb#171
    def method_missing(name, *args, **_arg2, &block); end

    # source://activesupport//lib/active_support/current_attributes.rb#181
    def respond_to_missing?(name, _); end
  end
end

# source://activesupport//lib/active_support/dependencies/interlock.rb#6
module ActiveSupport::Dependencies
  class << self
    # source://activesupport//lib/active_support/dependencies.rb#62
    def _autoloaded_tracked_classes; end

    # source://activesupport//lib/active_support/dependencies.rb#62
    def _autoloaded_tracked_classes=(_arg0); end

    # source://activesupport//lib/active_support/dependencies.rb#56
    def _eager_load_paths; end

    # source://activesupport//lib/active_support/dependencies.rb#56
    def _eager_load_paths=(_arg0); end

    # source://activesupport//lib/active_support/dependencies.rb#49
    def autoload_once_paths; end

    # source://activesupport//lib/active_support/dependencies.rb#49
    def autoload_once_paths=(_arg0); end

    # source://activesupport//lib/active_support/dependencies.rb#43
    def autoload_paths; end

    # source://activesupport//lib/active_support/dependencies.rb#43
    def autoload_paths=(_arg0); end

    # source://activesupport//lib/active_support/dependencies.rb#69
    def autoloader; end

    # source://activesupport//lib/active_support/dependencies.rb#69
    def autoloader=(_arg0); end

    # source://activesupport//lib/active_support/dependencies.rb#76
    def clear; end

    # source://activesupport//lib/active_support/dependencies.rb#94
    def eager_load?(path); end

    # source://activesupport//lib/active_support/dependencies.rb#10
    def interlock; end

    # source://activesupport//lib/active_support/dependencies.rb#10
    def interlock=(_arg0); end

    # source://activesupport//lib/active_support/dependencies.rb#24
    def load_interlock(&block); end

    # source://activesupport//lib/active_support/dependencies.rb#17
    def run_interlock(&block); end

    # source://activesupport//lib/active_support/dependencies.rb#84
    def search_for_file(relpath); end

    # source://activesupport//lib/active_support/dependencies.rb#31
    def unload_interlock(&block); end
  end
end

# source://activesupport//lib/active_support/dependencies/interlock.rb#7
class ActiveSupport::Dependencies::Interlock
  # source://activesupport//lib/active_support/dependencies/interlock.rb#8
  def initialize; end

  # source://activesupport//lib/active_support/dependencies/interlock.rb#32
  def done_running; end

  # source://activesupport//lib/active_support/dependencies/interlock.rb#24
  def done_unloading; end

  # source://activesupport//lib/active_support/dependencies/interlock.rb#12
  def loading(&block); end

  # source://activesupport//lib/active_support/dependencies/interlock.rb#40
  def permit_concurrent_loads(&block); end

  # source://activesupport//lib/active_support/dependencies/interlock.rb#44
  def raw_state(&block); end

  # source://activesupport//lib/active_support/dependencies/interlock.rb#36
  def running(&block); end

  # source://activesupport//lib/active_support/dependencies/interlock.rb#28
  def start_running; end

  # source://activesupport//lib/active_support/dependencies/interlock.rb#20
  def start_unloading; end

  # source://activesupport//lib/active_support/dependencies/interlock.rb#16
  def unloading(&block); end
end

# source://activesupport//lib/active_support/dependencies/require_dependency.rb#3
module ActiveSupport::Dependencies::RequireDependency
  # source://activesupport//lib/active_support/dependencies/require_dependency.rb#11
  def require_dependency(filename); end
end

# source://activesupport//lib/active_support/core_ext/numeric/deprecated_conversions.rb#4
module ActiveSupport::DeprecatedNumericWithFormat
  # source://activesupport//lib/active_support/core_ext/numeric/deprecated_conversions.rb#5
  def to_s(format = T.unsafe(nil), options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/range/deprecated_conversions.rb#4
module ActiveSupport::DeprecatedRangeWithFormat
  # source://activesupport//lib/active_support/deprecation/method_wrappers.rb#63
  def to_default_s(*args, **_arg1, &block); end

  # source://activesupport//lib/active_support/core_ext/range/deprecated_conversions.rb#6
  def to_s(format = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/range/deprecated_conversions.rb#5
ActiveSupport::DeprecatedRangeWithFormat::NOT_SET = T.let(T.unsafe(nil), Object)

# source://activesupport//lib/active_support/deprecation.rb#8
class ActiveSupport::Deprecation
  include ::Singleton
  include ::ActiveSupport::Deprecation::InstanceDelegator
  include ::ActiveSupport::Deprecation::Behavior
  include ::ActiveSupport::Deprecation::Reporting
  include ::ActiveSupport::Deprecation::Disallowed
  include ::ActiveSupport::Deprecation::MethodWrapper
  extend ::Singleton::SingletonClassMethods
  extend ::ActiveSupport::Deprecation::InstanceDelegator::ClassMethods
  extend ::ActiveSupport::Deprecation::InstanceDelegator::OverrideDelegators

  # source://activesupport//lib/active_support/deprecation.rb#41
  def initialize(deprecation_horizon = T.unsafe(nil), gem_name = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/deprecation.rb#35
  def deprecation_horizon; end

  # source://activesupport//lib/active_support/deprecation.rb#35
  def deprecation_horizon=(_arg0); end

  class << self
    # source://activesupport//lib/active_support/deprecation/instance_delegator.rb#21
    def allow(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/deprecation/instance_delegator.rb#21
    def behavior(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/deprecation/instance_delegator.rb#21
    def behavior=(arg); end

    # source://activesupport//lib/active_support/deprecation/instance_delegator.rb#21
    def debug(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/deprecation/instance_delegator.rb#21
    def debug=(arg); end

    # source://activesupport//lib/active_support/deprecation/instance_delegator.rb#21
    def deprecate_methods(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/deprecation/instance_delegator.rb#21
    def deprecation_horizon(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/deprecation/instance_delegator.rb#21
    def deprecation_horizon=(arg); end

    # source://activesupport//lib/active_support/deprecation/instance_delegator.rb#31
    def deprecation_warning(deprecated_method_name, message = T.unsafe(nil), caller_backtrace = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/deprecation/instance_delegator.rb#21
    def disallowed_behavior(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/deprecation/instance_delegator.rb#21
    def disallowed_behavior=(arg); end

    # source://activesupport//lib/active_support/deprecation/instance_delegator.rb#21
    def disallowed_warnings(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/deprecation/instance_delegator.rb#21
    def disallowed_warnings=(arg); end

    # source://activesupport//lib/active_support/deprecation/instance_delegator.rb#21
    def gem_name(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/deprecation/instance_delegator.rb#21
    def gem_name=(arg); end

    def new(*_arg0); end

    # source://activesupport//lib/active_support/deprecation/instance_delegator.rb#21
    def silence(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/deprecation/instance_delegator.rb#21
    def silenced(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/deprecation/instance_delegator.rb#21
    def silenced=(arg); end

    # source://activesupport//lib/active_support/deprecation/instance_delegator.rb#26
    def warn(message = T.unsafe(nil), callstack = T.unsafe(nil)); end

    private

    def allocate; end
  end
end

# source://activesupport//lib/active_support/deprecation/behaviors.rb#61
module ActiveSupport::Deprecation::Behavior
  # source://activesupport//lib/active_support/deprecation/behaviors.rb#66
  def behavior; end

  # source://activesupport//lib/active_support/deprecation/behaviors.rb#99
  def behavior=(behavior); end

  # source://activesupport//lib/active_support/deprecation/behaviors.rb#63
  def debug; end

  # source://activesupport//lib/active_support/deprecation/behaviors.rb#63
  def debug=(_arg0); end

  # source://activesupport//lib/active_support/deprecation/behaviors.rb#71
  def disallowed_behavior; end

  # source://activesupport//lib/active_support/deprecation/behaviors.rb#107
  def disallowed_behavior=(behavior); end

  private

  # source://activesupport//lib/active_support/deprecation/behaviors.rb#112
  def arity_coerce(behavior); end
end

# source://activesupport//lib/active_support/deprecation/behaviors.rb#13
ActiveSupport::Deprecation::DEFAULT_BEHAVIORS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/deprecation/constant_accessor.rb#28
module ActiveSupport::Deprecation::DeprecatedConstantAccessor
  class << self
    # source://activesupport//lib/active_support/deprecation/constant_accessor.rb#29
    def included(base); end
  end
end

# source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#123
class ActiveSupport::Deprecation::DeprecatedConstantProxy < ::Module
  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#131
  def initialize(old_const, new_const, deprecator = T.unsafe(nil), message: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#157
  def class; end

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#150
  def hash(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#144
  def inspect; end

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#150
  def instance_methods(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#150
  def name(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#150
  def respond_to?(*_arg0, **_arg1, &_arg2); end

  private

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#166
  def const_missing(name); end

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#171
  def method_missing(called, *args, &block); end

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#162
  def target; end

  class << self
    # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#124
    def new(*args, **options, &block); end
  end
end

# source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#88
class ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy < ::ActiveSupport::Deprecation::DeprecationProxy
  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#89
  def initialize(instance, method, var = T.unsafe(nil), deprecator = T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#97
  def target; end

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#101
  def warn(callstack, called, args); end
end

# source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#39
class ActiveSupport::Deprecation::DeprecatedObjectProxy < ::ActiveSupport::Deprecation::DeprecationProxy
  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#40
  def initialize(object, message, deprecator = T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#47
  def target; end

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#51
  def warn(callstack, called, args); end
end

# source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#5
class ActiveSupport::Deprecation::DeprecationProxy
  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#17
  def inspect; end

  private

  # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#22
  def method_missing(called, *args, &block); end

  class << self
    # source://activesupport//lib/active_support/deprecation/proxy_wrappers.rb#6
    def new(*args, &block); end
  end
end

# source://activesupport//lib/active_support/deprecation/disallowed.rb#5
module ActiveSupport::Deprecation::Disallowed
  # source://activesupport//lib/active_support/deprecation/disallowed.rb#21
  def disallowed_warnings; end

  # source://activesupport//lib/active_support/deprecation/disallowed.rb#17
  def disallowed_warnings=(_arg0); end

  private

  # source://activesupport//lib/active_support/deprecation/disallowed.rb#26
  def deprecation_disallowed?(message); end

  # source://activesupport//lib/active_support/deprecation/disallowed.rb#40
  def explicitly_allowed?(message); end
end

# source://activesupport//lib/active_support/deprecation/instance_delegator.rb#7
module ActiveSupport::Deprecation::InstanceDelegator
  mixes_in_class_methods ::ActiveSupport::Deprecation::InstanceDelegator::ClassMethods
  mixes_in_class_methods ::ActiveSupport::Deprecation::InstanceDelegator::OverrideDelegators

  class << self
    # source://activesupport//lib/active_support/deprecation/instance_delegator.rb#8
    def included(base); end
  end
end

# source://activesupport//lib/active_support/deprecation/instance_delegator.rb#14
module ActiveSupport::Deprecation::InstanceDelegator::ClassMethods
  # source://activesupport//lib/active_support/deprecation/instance_delegator.rb#15
  def include(included_module); end

  # source://activesupport//lib/active_support/deprecation/instance_delegator.rb#20
  def method_added(method_name); end
end

# source://activesupport//lib/active_support/deprecation/instance_delegator.rb#25
module ActiveSupport::Deprecation::InstanceDelegator::OverrideDelegators
  # source://activesupport//lib/active_support/deprecation/instance_delegator.rb#31
  def deprecation_warning(deprecated_method_name, message = T.unsafe(nil), caller_backtrace = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/deprecation/instance_delegator.rb#26
  def warn(message = T.unsafe(nil), callstack = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/deprecation/method_wrappers.rb#8
module ActiveSupport::Deprecation::MethodWrapper
  # source://activesupport//lib/active_support/deprecation/method_wrappers.rb#52
  def deprecate_methods(target_module, *method_names); end
end

# source://activesupport//lib/active_support/deprecation/reporting.rb#7
module ActiveSupport::Deprecation::Reporting
  # source://activesupport//lib/active_support/deprecation/reporting.rb#72
  def allow(allowed_warnings = T.unsafe(nil), if: T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/deprecation/reporting.rb#86
  def deprecation_warning(deprecated_method_name, message = T.unsafe(nil), caller_backtrace = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/deprecation/reporting.rb#11
  def gem_name; end

  # source://activesupport//lib/active_support/deprecation/reporting.rb#11
  def gem_name=(_arg0); end

  # source://activesupport//lib/active_support/deprecation/reporting.rb#40
  def silence(&block); end

  # source://activesupport//lib/active_support/deprecation/reporting.rb#82
  def silenced; end

  # source://activesupport//lib/active_support/deprecation/reporting.rb#9
  def silenced=(_arg0); end

  # source://activesupport//lib/active_support/deprecation/reporting.rb#18
  def warn(message = T.unsafe(nil), callstack = T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/deprecation/reporting.rb#137
  def _extract_callstack(callstack); end

  # source://activesupport//lib/active_support/deprecation/reporting.rb#102
  def deprecated_method_warning(method_name, message = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/deprecation/reporting.rb#116
  def deprecation_caller_message(callstack); end

  # source://activesupport//lib/active_support/deprecation/reporting.rb#111
  def deprecation_message(callstack, message = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/deprecation/reporting.rb#127
  def extract_callstack(callstack); end

  # source://activesupport//lib/active_support/deprecation/reporting.rb#152
  def ignored_callstack(path); end
end

# source://activesupport//lib/active_support/deprecation/reporting.rb#150
ActiveSupport::Deprecation::Reporting::RAILS_GEM_ROOT = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/deprecation/behaviors.rb#8
class ActiveSupport::DeprecationException < ::StandardError; end

# source://activesupport//lib/active_support/descendants_tracker.rb#9
module ActiveSupport::DescendantsTracker
  # source://activesupport//lib/active_support/descendants_tracker.rb#88
  def descendants; end

  # source://activesupport//lib/active_support/descendants_tracker.rb#92
  def direct_descendants; end

  # source://activesupport//lib/active_support/descendants_tracker.rb#82
  def subclasses; end

  class << self
    # source://activesupport//lib/active_support/descendants_tracker.rb#66
    def clear(classes); end

    # source://activesupport//lib/active_support/descendants_tracker.rb#62
    def descendants(klass); end

    # source://activesupport//lib/active_support/descendants_tracker.rb#11
    def direct_descendants(klass); end

    # source://activesupport//lib/active_support/descendants_tracker.rb#50
    def disable_clear!; end

    # source://activesupport//lib/active_support/descendants_tracker.rb#77
    def native?; end

    # source://activesupport//lib/active_support/descendants_tracker.rb#58
    def subclasses(klass); end
  end
end

# source://activesupport//lib/active_support/digest.rb#6
class ActiveSupport::Digest
  class << self
    # source://activesupport//lib/active_support/digest.rb#8
    def hash_digest_class; end

    # source://activesupport//lib/active_support/digest.rb#12
    def hash_digest_class=(klass); end

    # source://activesupport//lib/active_support/digest.rb#17
    def hexdigest(arg); end
  end
end

# source://activesupport//lib/active_support/duration.rb#13
class ActiveSupport::Duration
  # source://activesupport//lib/active_support/duration.rb#223
  def initialize(value, parts, variable = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#306
  def %(other); end

  # source://activesupport//lib/active_support/duration.rb#281
  def *(other); end

  # source://activesupport//lib/active_support/duration.rb#262
  def +(other); end

  # source://activesupport//lib/active_support/duration.rb#320
  def +@; end

  # source://activesupport//lib/active_support/duration.rb#276
  def -(other); end

  # source://activesupport//lib/active_support/duration.rb#316
  def -@; end

  # source://activesupport//lib/active_support/duration.rb#292
  def /(other); end

  # source://activesupport//lib/active_support/duration.rb#252
  def <=>(other); end

  # source://activesupport//lib/active_support/duration.rb#335
  def ==(other); end

  # source://activesupport//lib/active_support/duration.rb#475
  def _parts; end

  # source://activesupport//lib/active_support/duration.rb#430
  def after(time = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#438
  def ago(time = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#453
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#438
  def before(time = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#239
  def coerce(other); end

  # source://activesupport//lib/active_support/duration.rb#461
  def encode_with(coder); end

  # source://activesupport//lib/active_support/duration.rb#420
  def eql?(other); end

  # source://activesupport//lib/active_support/duration.rb#430
  def from_now(time = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#424
  def hash; end

  # source://activesupport//lib/active_support/duration.rb#393
  def in_days; end

  # source://activesupport//lib/active_support/duration.rb#386
  def in_hours; end

  # source://activesupport//lib/active_support/duration.rb#379
  def in_minutes; end

  # source://activesupport//lib/active_support/duration.rb#407
  def in_months; end

  # source://activesupport//lib/active_support/duration.rb#371
  def in_seconds; end

  # source://activesupport//lib/active_support/duration.rb#400
  def in_weeks; end

  # source://activesupport//lib/active_support/duration.rb#414
  def in_years; end

  # source://activesupport//lib/active_support/duration.rb#457
  def init_with(coder); end

  # source://activesupport//lib/active_support/duration.rb#444
  def inspect; end

  # source://activesupport//lib/active_support/duration.rb#329
  def instance_of?(klass); end

  # source://activesupport//lib/active_support/duration.rb#324
  def is_a?(klass); end

  # source://activesupport//lib/active_support/duration.rb#467
  def iso8601(precision: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#324
  def kind_of?(klass); end

  # source://activesupport//lib/active_support/duration.rb#235
  def parts; end

  # source://activesupport//lib/active_support/duration.rb#430
  def since(time = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#371
  def to_i; end

  # source://activesupport//lib/active_support/duration.rb#347
  def to_s; end

  # source://activesupport//lib/active_support/duration.rb#438
  def until(time = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#132
  def value; end

  # source://activesupport//lib/active_support/duration.rb#471
  def variable?; end

  private

  # source://activesupport//lib/active_support/duration.rb#506
  def method_missing(method, *args, &block); end

  # source://activesupport//lib/active_support/duration.rb#510
  def raise_type_error(other); end

  # source://activesupport//lib/active_support/duration.rb#502
  def respond_to_missing?(method, _); end

  # source://activesupport//lib/active_support/duration.rb#480
  def sum(sign, time = T.unsafe(nil)); end

  class << self
    # source://activesupport//lib/active_support/duration.rb#148
    def ===(other); end

    # source://activesupport//lib/active_support/duration.rb#188
    def build(value); end

    # source://activesupport//lib/active_support/duration.rb#166
    def days(value); end

    # source://activesupport//lib/active_support/duration.rb#162
    def hours(value); end

    # source://activesupport//lib/active_support/duration.rb#158
    def minutes(value); end

    # source://activesupport//lib/active_support/duration.rb#174
    def months(value); end

    # source://activesupport//lib/active_support/duration.rb#143
    def parse(iso8601duration); end

    # source://activesupport//lib/active_support/duration.rb#154
    def seconds(value); end

    # source://activesupport//lib/active_support/duration.rb#170
    def weeks(value); end

    # source://activesupport//lib/active_support/duration.rb#178
    def years(value); end

    private

    # source://activesupport//lib/active_support/duration.rb#216
    def calculate_total_seconds(parts); end
  end
end

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#12
class ActiveSupport::Duration::ISO8601Parser
  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#34
  def initialize(string); end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#32
  def mode; end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#32
  def mode=(_arg0); end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#41
  def parse!; end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#31
  def parts; end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#31
  def scanner; end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#32
  def sign; end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#32
  def sign=(_arg0); end

  private

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#83
  def finished?; end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#88
  def number; end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#96
  def raise_parsing_error(reason = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#92
  def scan(pattern); end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#101
  def validate!; end
end

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#17
ActiveSupport::Duration::ISO8601Parser::COMMA = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#22
ActiveSupport::Duration::ISO8601Parser::DATE_COMPONENT = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#28
ActiveSupport::Duration::ISO8601Parser::DATE_COMPONENTS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#20
ActiveSupport::Duration::ISO8601Parser::DATE_MARKER = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#25
ActiveSupport::Duration::ISO8601Parser::DATE_TO_PART = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#16
ActiveSupport::Duration::ISO8601Parser::PERIOD = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#15
ActiveSupport::Duration::ISO8601Parser::PERIOD_OR_COMMA = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#13
class ActiveSupport::Duration::ISO8601Parser::ParsingError < ::ArgumentError; end

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#19
ActiveSupport::Duration::ISO8601Parser::SIGN_MARKER = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#23
ActiveSupport::Duration::ISO8601Parser::TIME_COMPONENT = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#29
ActiveSupport::Duration::ISO8601Parser::TIME_COMPONENTS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#21
ActiveSupport::Duration::ISO8601Parser::TIME_MARKER = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#26
ActiveSupport::Duration::ISO8601Parser::TIME_TO_PART = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/duration/iso8601_serializer.rb#8
class ActiveSupport::Duration::ISO8601Serializer
  # source://activesupport//lib/active_support/duration/iso8601_serializer.rb#11
  def initialize(duration, precision: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration/iso8601_serializer.rb#17
  def serialize; end

  private

  # source://activesupport//lib/active_support/duration/iso8601_serializer.rb#58
  def format_seconds(seconds); end

  # source://activesupport//lib/active_support/duration/iso8601_serializer.rb#41
  def normalize; end

  # source://activesupport//lib/active_support/duration/iso8601_serializer.rb#54
  def week_mixed_with_date?(parts); end
end

# source://activesupport//lib/active_support/duration/iso8601_serializer.rb#9
ActiveSupport::Duration::ISO8601Serializer::DATE_COMPONENTS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/duration.rb#129
ActiveSupport::Duration::PARTS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/duration.rb#119
ActiveSupport::Duration::PARTS_IN_SECONDS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/duration.rb#114
ActiveSupport::Duration::SECONDS_PER_DAY = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/duration.rb#113
ActiveSupport::Duration::SECONDS_PER_HOUR = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/duration.rb#112
ActiveSupport::Duration::SECONDS_PER_MINUTE = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/duration.rb#116
ActiveSupport::Duration::SECONDS_PER_MONTH = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/duration.rb#115
ActiveSupport::Duration::SECONDS_PER_WEEK = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/duration.rb#117
ActiveSupport::Duration::SECONDS_PER_YEAR = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/duration.rb#14
class ActiveSupport::Duration::Scalar < ::Numeric
  # source://activesupport//lib/active_support/duration.rb#18
  def initialize(value); end

  # source://activesupport//lib/active_support/duration.rb#84
  def %(other); end

  # source://activesupport//lib/active_support/duration.rb#65
  def *(other); end

  # source://activesupport//lib/active_support/duration.rb#40
  def +(other); end

  # source://activesupport//lib/active_support/duration.rb#52
  def -(other); end

  # source://activesupport//lib/active_support/duration.rb#26
  def -@; end

  # source://activesupport//lib/active_support/duration.rb#76
  def /(other); end

  # source://activesupport//lib/active_support/duration.rb#30
  def <=>(other); end

  # source://activesupport//lib/active_support/duration.rb#22
  def coerce(other); end

  # source://activesupport//lib/active_support/duration.rb#16
  def to_f(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/duration.rb#16
  def to_i(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/duration.rb#16
  def to_s(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/duration.rb#15
  def value; end

  # source://activesupport//lib/active_support/duration.rb#92
  def variable?; end

  private

  # source://activesupport//lib/active_support/duration.rb#97
  def calculate(op, other); end

  # source://activesupport//lib/active_support/duration.rb#107
  def raise_type_error(other); end
end

# source://activesupport//lib/active_support/duration.rb#130
ActiveSupport::Duration::VARIABLE_PARTS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/core_ext/range/each.rb#6
module ActiveSupport::EachTimeWithZone
  # source://activesupport//lib/active_support/core_ext/range/each.rb#7
  def each(&block); end

  # source://activesupport//lib/active_support/core_ext/range/each.rb#12
  def step(n = T.unsafe(nil), &block); end

  private

  # source://activesupport//lib/active_support/core_ext/range/each.rb#18
  def ensure_iteration_allowed; end
end

# source://activesupport//lib/active_support/encrypted_configuration.rb#10
class ActiveSupport::EncryptedConfiguration < ::ActiveSupport::EncryptedFile
  # source://activesupport//lib/active_support/encrypted_configuration.rb#14
  def initialize(config_path:, key_path:, env_key:, raise_if_missing_key:); end

  # source://activesupport//lib/active_support/encrypted_configuration.rb#11
  def [](*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/encrypted_configuration.rb#32
  def config; end

  # source://activesupport//lib/active_support/encrypted_configuration.rb#11
  def fetch(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/core_ext/module/delegation.rb#302
  def method_missing(method, *args, **_arg2, &block); end

  # source://activesupport//lib/active_support/encrypted_configuration.rb#20
  def read; end

  # source://activesupport//lib/active_support/encrypted_configuration.rb#26
  def write(contents); end

  private

  # source://activesupport//lib/active_support/encrypted_configuration.rb#37
  def deep_transform(hash); end

  # source://activesupport//lib/active_support/encrypted_configuration.rb#51
  def deserialize(config); end

  # source://activesupport//lib/active_support/encrypted_configuration.rb#47
  def options; end

  # source://activesupport//lib/active_support/core_ext/module/delegation.rb#294
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/encrypted_file.rb#8
class ActiveSupport::EncryptedFile
  # source://activesupport//lib/active_support/encrypted_file.rb#42
  def initialize(content_path:, key_path:, env_key:, raise_if_missing_key:); end

  # source://activesupport//lib/active_support/encrypted_file.rb#77
  def change(&block); end

  # source://activesupport//lib/active_support/encrypted_file.rb#40
  def content_path; end

  # source://activesupport//lib/active_support/encrypted_file.rb#40
  def env_key; end

  # source://activesupport//lib/active_support/encrypted_file.rb#52
  def key; end

  # source://activesupport//lib/active_support/encrypted_file.rb#40
  def key_path; end

  # source://activesupport//lib/active_support/encrypted_file.rb#40
  def raise_if_missing_key; end

  # source://activesupport//lib/active_support/encrypted_file.rb#64
  def read; end

  # source://activesupport//lib/active_support/encrypted_file.rb#72
  def write(contents); end

  private

  # source://activesupport//lib/active_support/encrypted_file.rb#125
  def check_key_length; end

  # source://activesupport//lib/active_support/encrypted_file.rb#103
  def decrypt(contents); end

  # source://activesupport//lib/active_support/encrypted_file.rb#98
  def encrypt(contents); end

  # source://activesupport//lib/active_support/encrypted_file.rb#107
  def encryptor; end

  # source://activesupport//lib/active_support/encrypted_file.rb#121
  def handle_missing_key; end

  # source://activesupport//lib/active_support/encrypted_file.rb#112
  def read_env_key; end

  # source://activesupport//lib/active_support/encrypted_file.rb#116
  def read_key_file; end

  # source://activesupport//lib/active_support/encrypted_file.rb#83
  def writing(contents); end

  class << self
    # source://activesupport//lib/active_support/encrypted_file.rb#35
    def expected_key_length; end

    # source://activesupport//lib/active_support/encrypted_file.rb#31
    def generate_key; end
  end
end

# source://activesupport//lib/active_support/encrypted_file.rb#29
ActiveSupport::EncryptedFile::CIPHER = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/encrypted_file.rb#23
class ActiveSupport::EncryptedFile::InvalidKeyLengthError < ::RuntimeError
  # source://activesupport//lib/active_support/encrypted_file.rb#24
  def initialize; end
end

# source://activesupport//lib/active_support/encrypted_file.rb#9
class ActiveSupport::EncryptedFile::MissingContentError < ::RuntimeError
  # source://activesupport//lib/active_support/encrypted_file.rb#10
  def initialize(content_path); end
end

# source://activesupport//lib/active_support/encrypted_file.rb#15
class ActiveSupport::EncryptedFile::MissingKeyError < ::RuntimeError
  # source://activesupport//lib/active_support/encrypted_file.rb#16
  def initialize(key_path:, env_key:); end
end

# source://activesupport//lib/active_support/core_ext/enumerable.rb#4
module ActiveSupport::EnumerableCoreExt; end

# source://activesupport//lib/active_support/core_ext/enumerable.rb#5
module ActiveSupport::EnumerableCoreExt::Constants
  private

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#7
  def const_missing(name); end
end

# source://activesupport//lib/active_support/core_ext/enumerable.rb#25
ActiveSupport::EnumerableCoreExt::SoleItemExpectedError = Enumerable::SoleItemExpectedError

# source://activesupport//lib/active_support/environment_inquirer.rb#6
class ActiveSupport::EnvironmentInquirer < ::ActiveSupport::StringInquirer
  # source://activesupport//lib/active_support/environment_inquirer.rb#8
  def initialize(env); end

  def development?; end
  def production?; end
  def test?; end
end

# source://activesupport//lib/active_support/environment_inquirer.rb#7
ActiveSupport::EnvironmentInquirer::DEFAULT_ENVIRONMENTS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/error_reporter.rb#41
class ActiveSupport::ErrorReporter
  # source://activesupport//lib/active_support/error_reporter.rb#46
  def initialize(*subscribers, logger: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/error_reporter.rb#57
  def handle(error_class = T.unsafe(nil), severity: T.unsafe(nil), context: T.unsafe(nil), fallback: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/error_reporter.rb#44
  def logger; end

  # source://activesupport//lib/active_support/error_reporter.rb#44
  def logger=(_arg0); end

  # source://activesupport//lib/active_support/error_reporter.rb#64
  def record(error_class = T.unsafe(nil), severity: T.unsafe(nil), context: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/error_reporter.rb#95
  def report(error, handled:, severity: T.unsafe(nil), context: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/error_reporter.rb#88
  def set_context(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/error_reporter.rb#76
  def subscribe(subscriber); end
end

# source://activesupport//lib/active_support/error_reporter.rb#42
ActiveSupport::ErrorReporter::SEVERITIES = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/execution_context.rb#4
module ActiveSupport::ExecutionContext
  class << self
    # source://activesupport//lib/active_support/execution_context.rb#34
    def []=(key, value); end

    # source://activesupport//lib/active_support/execution_context.rb#7
    def after_change(&block); end

    # source://activesupport//lib/active_support/execution_context.rb#43
    def clear; end

    # source://activesupport//lib/active_support/execution_context.rb#13
    def set(**options); end

    # source://activesupport//lib/active_support/execution_context.rb#39
    def to_h; end

    private

    # source://activesupport//lib/active_support/execution_context.rb#48
    def store; end
  end
end

# source://activesupport//lib/active_support/execution_wrapper.rb#8
class ActiveSupport::ExecutionWrapper
  include ::ActiveSupport::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker

  # source://activesupport//lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport//lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport//lib/active_support/callbacks.rb#940
  def _complete_callbacks; end

  # source://activesupport//lib/active_support/callbacks.rb#940
  def _run_callbacks; end

  # source://activesupport//lib/active_support/callbacks.rb#928
  def _run_complete_callbacks(&block); end

  # source://activesupport//lib/active_support/callbacks.rb#928
  def _run_run_callbacks(&block); end

  # source://activesupport//lib/active_support/execution_wrapper.rb#142
  def complete; end

  # source://activesupport//lib/active_support/execution_wrapper.rb#136
  def complete!; end

  # source://activesupport//lib/active_support/execution_wrapper.rb#128
  def run; end

  # source://activesupport//lib/active_support/execution_wrapper.rb#123
  def run!; end

  private

  # source://activesupport//lib/active_support/execution_wrapper.rb#147
  def hook_state; end

  class << self
    # source://activesupport//lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport//lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport//lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport//lib/active_support/callbacks.rb#932
    def _complete_callbacks; end

    # source://activesupport//lib/active_support/callbacks.rb#936
    def _complete_callbacks=(value); end

    # source://activesupport//lib/active_support/callbacks.rb#932
    def _run_callbacks; end

    # source://activesupport//lib/active_support/callbacks.rb#936
    def _run_callbacks=(value); end

    # source://activesupport//lib/active_support/execution_wrapper.rb#119
    def active?; end

    # source://activesupport//lib/active_support/execution_wrapper.rb#115
    def active_key; end

    # source://activesupport//lib/active_support/execution_wrapper.rb#111
    def error_reporter; end

    # source://activesupport//lib/active_support/execution_wrapper.rb#101
    def perform; end

    # source://activesupport//lib/active_support/execution_wrapper.rb#51
    def register_hook(hook, outer: T.unsafe(nil)); end

    # source://activesupport//lib/active_support/execution_wrapper.rb#67
    def run!(reset: T.unsafe(nil)); end

    # source://activesupport//lib/active_support/execution_wrapper.rb#22
    def to_complete(*args, &block); end

    # source://activesupport//lib/active_support/execution_wrapper.rb#18
    def to_run(*args, &block); end

    # source://activesupport//lib/active_support/execution_wrapper.rb#87
    def wrap; end
  end
end

# source://activesupport//lib/active_support/execution_wrapper.rb#33
class ActiveSupport::ExecutionWrapper::CompleteHook < ::Struct
  # source://activesupport//lib/active_support/execution_wrapper.rb#34
  def after(target); end

  # source://activesupport//lib/active_support/execution_wrapper.rb#34
  def before(target); end

  def hook; end
  def hook=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activesupport//lib/active_support/execution_wrapper.rb#11
ActiveSupport::ExecutionWrapper::Null = T.let(T.unsafe(nil), Object)

# source://activesupport//lib/active_support/execution_wrapper.rb#26
class ActiveSupport::ExecutionWrapper::RunHook < ::Struct
  # source://activesupport//lib/active_support/execution_wrapper.rb#27
  def before(target); end

  def hook; end
  def hook=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activesupport//lib/active_support/executor.rb#6
class ActiveSupport::Executor < ::ActiveSupport::ExecutionWrapper; end

# source://activesupport//lib/active_support/file_update_checker.rb#33
class ActiveSupport::FileUpdateChecker
  # source://activesupport//lib/active_support/file_update_checker.rb#42
  def initialize(files, dirs = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/file_update_checker.rb#80
  def execute; end

  # source://activesupport//lib/active_support/file_update_checker.rb#90
  def execute_if_updated; end

  # source://activesupport//lib/active_support/file_update_checker.rb#61
  def updated?; end

  private

  # source://activesupport//lib/active_support/file_update_checker.rb#156
  def compile_ext(array); end

  # source://activesupport//lib/active_support/file_update_checker.rb#142
  def compile_glob(hash); end

  # source://activesupport//lib/active_support/file_update_checker.rb#152
  def escape(key); end

  # source://activesupport//lib/active_support/file_update_checker.rb#120
  def max_mtime(paths); end

  # source://activesupport//lib/active_support/file_update_checker.rb#109
  def updated_at(paths); end

  # source://activesupport//lib/active_support/file_update_checker.rb#101
  def watched; end
end

# source://activesupport//lib/active_support/fork_tracker.rb#4
module ActiveSupport::ForkTracker
  class << self
    # source://activesupport//lib/active_support/fork_tracker.rb#59
    def after_fork(&block); end

    # source://activesupport//lib/active_support/fork_tracker.rb#40
    def check!; end

    # source://activesupport//lib/active_support/fork_tracker.rb#48
    def hook!; end

    # source://activesupport//lib/active_support/fork_tracker.rb#64
    def unregister(callback); end
  end
end

# source://activesupport//lib/active_support/fork_tracker.rb#15
module ActiveSupport::ForkTracker::CoreExt
  # source://activesupport//lib/active_support/fork_tracker.rb#16
  def fork(*_arg0, **_arg1, &_arg2); end
end

# source://activesupport//lib/active_support/fork_tracker.rb#31
module ActiveSupport::ForkTracker::CoreExtPrivate
  include ::ActiveSupport::ForkTracker::CoreExt

  private

  # source://activesupport//lib/active_support/fork_tracker.rb#16
  def fork(*_arg0, **_arg1, &_arg2); end
end

# source://activesupport//lib/active_support/fork_tracker.rb#5
module ActiveSupport::ForkTracker::ModernCoreExt
  # source://activesupport//lib/active_support/fork_tracker.rb#6
  def _fork; end
end

# source://activesupport//lib/active_support/gzip.rb#15
module ActiveSupport::Gzip
  class << self
    # source://activesupport//lib/active_support/gzip.rb#30
    def compress(source, level = T.unsafe(nil), strategy = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/gzip.rb#25
    def decompress(source); end
  end
end

# source://activesupport//lib/active_support/gzip.rb#16
class ActiveSupport::Gzip::Stream < ::StringIO
  # source://activesupport//lib/active_support/gzip.rb#17
  def initialize(*_arg0); end

  # source://activesupport//lib/active_support/gzip.rb#21
  def close; end
end

# source://activesupport//lib/active_support/hash_with_indifferent_access.rb#53
class ActiveSupport::HashWithIndifferentAccess < ::Hash
  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#68
  def initialize(constructor = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#166
  def [](key); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#96
  def []=(key, value); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#179
  def assoc(key); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#357
  def compact; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#311
  def deep_stringify_keys; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#309
  def deep_stringify_keys!; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#316
  def deep_symbolize_keys; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#221
  def default(*args); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#295
  def delete(key); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#206
  def dig(*args); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#256
  def dup; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#303
  def except(*keys); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#56
  def extractable_options?; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#193
  def fetch(key, *extras); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#244
  def fetch_values(*indices, &block); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#149
  def has_key?(key); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#149
  def include?(key); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#149
  def key?(key); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#149
  def member?(key); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#265
  def merge(*hashes, &block); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#130
  def merge!(*other_hashes, &block); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#64
  def nested_under_indifferent_access; end

  def regular_update(*_arg0); end
  def regular_writer(_arg0, _arg1); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#324
  def reject(*args, &block); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#290
  def replace(other_hash); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#275
  def reverse_merge(other_hash); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#281
  def reverse_merge!(other_hash); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#319
  def select(*args, &block); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#347
  def slice(*keys); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#352
  def slice!(*keys); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#96
  def store(key, value); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#310
  def stringify_keys; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#308
  def stringify_keys!; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#314
  def symbolize_keys; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#362
  def to_hash; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#314
  def to_options; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#317
  def to_options!; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#334
  def transform_keys(*args, &block); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#339
  def transform_keys!; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#329
  def transform_values(*args, &block); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#130
  def update(*other_hashes, &block); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#231
  def values_at(*keys); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#275
  def with_defaults(other_hash); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#281
  def with_defaults!(other_hash); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#60
  def with_indifferent_access; end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#303
  def without(*keys); end

  private

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#374
  def convert_key(key); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#383
  def convert_value(value, conversion: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#400
  def set_defaults(target); end

  # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#408
  def update_with_single_argument(other_hash, block); end

  class << self
    # source://activesupport//lib/active_support/hash_with_indifferent_access.rb#83
    def [](*args); end
  end
end

# source://activesupport//lib/active_support/html_safe_translation.rb#4
module ActiveSupport::HtmlSafeTranslation
  extend ::ActiveSupport::HtmlSafeTranslation

  # source://activesupport//lib/active_support/html_safe_translation.rb#7
  def translate(key, **options); end

  private

  # source://activesupport//lib/active_support/html_safe_translation.rb#22
  def html_escape_translation_options(options); end

  # source://activesupport//lib/active_support/html_safe_translation.rb#35
  def html_safe_translation(translation); end

  # source://activesupport//lib/active_support/html_safe_translation.rb#18
  def html_safe_translation_key?(key); end

  # source://activesupport//lib/active_support/html_safe_translation.rb#30
  def i18n_option?(name); end
end

# source://activesupport//lib/active_support/inflector/inflections.rb#7
module ActiveSupport::Inflector
  extend ::ActiveSupport::Inflector

  # source://activesupport//lib/active_support/inflector/methods.rb#69
  def camelize(term, uppercase_first_letter = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#208
  def classify(table_name); end

  # source://activesupport//lib/active_support/inflector/methods.rb#279
  def constantize(camel_cased_word); end

  # source://activesupport//lib/active_support/inflector/methods.rb#216
  def dasherize(underscored_word); end

  # source://activesupport//lib/active_support/inflector/methods.rb#246
  def deconstantize(path); end

  # source://activesupport//lib/active_support/inflector/methods.rb#228
  def demodulize(path); end

  # source://activesupport//lib/active_support/inflector/methods.rb#257
  def foreign_key(class_name, separate_class_name_and_id_with_underscore = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#132
  def humanize(lower_case_and_underscored_word, capitalize: T.unsafe(nil), keep_id_suffix: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#263
  def inflections(locale = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#324
  def ordinal(number); end

  # source://activesupport//lib/active_support/inflector/methods.rb#337
  def ordinalize(number); end

  # source://activesupport//lib/active_support/inflector/transliterate.rb#121
  def parameterize(string, separator: T.unsafe(nil), preserve_case: T.unsafe(nil), locale: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#32
  def pluralize(word, locale = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#305
  def safe_constantize(camel_cased_word); end

  # source://activesupport//lib/active_support/inflector/methods.rb#49
  def singularize(word, locale = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#194
  def tableize(class_name); end

  # source://activesupport//lib/active_support/inflector/methods.rb#182
  def titleize(word, keep_id_suffix: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/transliterate.rb#64
  def transliterate(string, replacement = T.unsafe(nil), locale: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#96
  def underscore(camel_cased_word); end

  # source://activesupport//lib/active_support/inflector/methods.rb#163
  def upcase_first(string); end

  private

  # source://activesupport//lib/active_support/inflector/methods.rb#366
  def apply_inflections(word, rules, locale = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#347
  def const_regexp(camel_cased_word); end
end

# source://activesupport//lib/active_support/inflector/transliterate.rb#8
ActiveSupport::Inflector::ALLOWED_ENCODINGS_FOR_TRANSLITERATE = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/inflector/inflections.rb#28
class ActiveSupport::Inflector::Inflections
  # source://activesupport//lib/active_support/inflector/inflections.rb#78
  def initialize; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#140
  def acronym(word); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#74
  def acronyms; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#76
  def acronyms_camelize_regex; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#76
  def acronyms_underscore_regex; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#229
  def clear(scope = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#218
  def human(rule, replacement); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#74
  def humans; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#172
  def irregular(singular, plural); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#149
  def plural(rule, replacement); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#74
  def plurals; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#159
  def singular(rule, replacement); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#74
  def singulars; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#206
  def uncountable(*words); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#74
  def uncountables; end

  private

  # source://activesupport//lib/active_support/inflector/inflections.rb#248
  def define_acronym_regex_patterns; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#84
  def initialize_dup(orig); end

  class << self
    # source://activesupport//lib/active_support/inflector/inflections.rb#63
    def instance(locale = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/inflector/inflections.rb#67
    def instance_or_fallback(locale); end
  end
end

# source://activesupport//lib/active_support/inflector/inflections.rb#31
class ActiveSupport::Inflector::Inflections::Uncountables < ::Array
  # source://activesupport//lib/active_support/inflector/inflections.rb#32
  def initialize; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#42
  def <<(*word); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#46
  def add(words); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#37
  def delete(entry); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#53
  def uncountable?(str); end

  private

  # source://activesupport//lib/active_support/inflector/inflections.rb#58
  def to_regex(string); end
end

# source://activesupport//lib/active_support/ordered_options.rb#79
class ActiveSupport::InheritableOptions < ::ActiveSupport::OrderedOptions
  # source://activesupport//lib/active_support/ordered_options.rb#80
  def initialize(parent = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/ordered_options.rb#91
  def inheritable_copy; end
end

# source://activesupport//lib/active_support/isolated_execution_state.rb#6
module ActiveSupport::IsolatedExecutionState
  class << self
    # source://activesupport//lib/active_support/isolated_execution_state.rb#32
    def [](key); end

    # source://activesupport//lib/active_support/isolated_execution_state.rb#36
    def []=(key, value); end

    # source://activesupport//lib/active_support/isolated_execution_state.rb#48
    def clear; end

    # source://activesupport//lib/active_support/isolated_execution_state.rb#44
    def delete(key); end

    # source://activesupport//lib/active_support/isolated_execution_state.rb#13
    def isolation_level; end

    # source://activesupport//lib/active_support/isolated_execution_state.rb#15
    def isolation_level=(level); end

    # source://activesupport//lib/active_support/isolated_execution_state.rb#40
    def key?(key); end

    # source://activesupport//lib/active_support/isolated_execution_state.rb#52
    def share_with(other); end

    # source://activesupport//lib/active_support/isolated_execution_state.rb#28
    def unique_id; end

    private

    # source://activesupport//lib/active_support/isolated_execution_state.rb#61
    def current; end

    # source://activesupport//lib/active_support/isolated_execution_state.rb#65
    def current_fiber; end

    # source://activesupport//lib/active_support/isolated_execution_state.rb#61
    def current_thread; end
  end
end

# source://activesupport//lib/active_support/json/decoding.rb#11
module ActiveSupport::JSON
  class << self
    # source://activesupport//lib/active_support/json/decoding.rb#22
    def decode(json); end

    # source://activesupport//lib/active_support/json/encoding.rb#21
    def encode(value, options = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/json/decoding.rb#42
    def parse_error; end

    private

    # source://activesupport//lib/active_support/json/decoding.rb#47
    def convert_dates_from(data); end
  end
end

# source://activesupport//lib/active_support/json/decoding.rb#14
ActiveSupport::JSON::DATETIME_REGEX = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/json/decoding.rb#13
ActiveSupport::JSON::DATE_REGEX = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/json/encoding.rb#25
module ActiveSupport::JSON::Encoding
  class << self
    # source://activesupport//lib/active_support/json/encoding.rb#121
    def escape_html_entities_in_json; end

    # source://activesupport//lib/active_support/json/encoding.rb#121
    def escape_html_entities_in_json=(_arg0); end

    # source://activesupport//lib/active_support/json/encoding.rb#129
    def json_encoder; end

    # source://activesupport//lib/active_support/json/encoding.rb#129
    def json_encoder=(_arg0); end

    # source://activesupport//lib/active_support/json/encoding.rb#125
    def time_precision; end

    # source://activesupport//lib/active_support/json/encoding.rb#125
    def time_precision=(_arg0); end

    # source://activesupport//lib/active_support/json/encoding.rb#117
    def use_standard_json_time_format; end

    # source://activesupport//lib/active_support/json/encoding.rb#117
    def use_standard_json_time_format=(_arg0); end
  end
end

# source://activesupport//lib/active_support/json/encoding.rb#26
class ActiveSupport::JSON::Encoding::JSONGemEncoder
  # source://activesupport//lib/active_support/json/encoding.rb#29
  def initialize(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/json/encoding.rb#34
  def encode(value); end

  # source://activesupport//lib/active_support/json/encoding.rb#27
  def options; end

  private

  # source://activesupport//lib/active_support/json/encoding.rb#89
  def jsonify(value); end

  # source://activesupport//lib/active_support/json/encoding.rb#109
  def stringify(jsonified); end
end

# source://activesupport//lib/active_support/json/encoding.rb#42
ActiveSupport::JSON::Encoding::JSONGemEncoder::ESCAPED_CHARS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/json/encoding.rb#51
ActiveSupport::JSON::Encoding::JSONGemEncoder::ESCAPE_REGEX_WITHOUT_HTML_ENTITIES = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/json/encoding.rb#50
ActiveSupport::JSON::Encoding::JSONGemEncoder::ESCAPE_REGEX_WITH_HTML_ENTITIES = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/json/encoding.rb#54
class ActiveSupport::JSON::Encoding::JSONGemEncoder::EscapedString < ::String
  # source://activesupport//lib/active_support/json/encoding.rb#55
  def to_json(*_arg0); end

  # source://activesupport//lib/active_support/json/encoding.rb#67
  def to_s; end
end

# source://activesupport//lib/active_support/key_generator.rb#11
class ActiveSupport::KeyGenerator
  # source://activesupport//lib/active_support/key_generator.rb#26
  def initialize(secret, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/key_generator.rb#39
  def generate_key(salt, key_size = T.unsafe(nil)); end

  class << self
    # source://activesupport//lib/active_support/key_generator.rb#21
    def hash_digest_class; end

    # source://activesupport//lib/active_support/key_generator.rb#13
    def hash_digest_class=(klass); end
  end
end

# source://activesupport//lib/active_support/lazy_load_hooks.rb#41
module ActiveSupport::LazyLoadHooks
  # source://activesupport//lib/active_support/lazy_load_hooks.rb#58
  def on_load(name, options = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/lazy_load_hooks.rb#73
  def run_load_hooks(name, base = T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/lazy_load_hooks.rb#89
  def execute_hook(name, base, options, block); end

  # source://activesupport//lib/active_support/lazy_load_hooks.rb#81
  def with_execution_control(name, block, once); end

  class << self
    # source://activesupport//lib/active_support/lazy_load_hooks.rb#42
    def extended(base); end
  end
end

# source://activesupport//lib/active_support/log_subscriber.rb#65
class ActiveSupport::LogSubscriber < ::ActiveSupport::Subscriber
  # source://activesupport//lib/active_support/log_subscriber.rb#80
  def colorize_logging; end

  # source://activesupport//lib/active_support/log_subscriber.rb#80
  def colorize_logging=(val); end

  # source://activesupport//lib/active_support/log_subscriber.rb#129
  def debug(progname = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/log_subscriber.rb#129
  def error(progname = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/log_subscriber.rb#129
  def fatal(progname = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/log_subscriber.rb#114
  def finish(name, id, payload); end

  # source://activesupport//lib/active_support/log_subscriber.rb#129
  def info(progname = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/log_subscriber.rb#106
  def logger; end

  # source://activesupport//lib/active_support/log_subscriber.rb#120
  def publish_event(event); end

  # source://activesupport//lib/active_support/log_subscriber.rb#110
  def start(name, id, payload); end

  # source://activesupport//lib/active_support/log_subscriber.rb#129
  def unknown(progname = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/log_subscriber.rb#129
  def warn(progname = T.unsafe(nil), &block); end

  private

  # source://activesupport//lib/active_support/log_subscriber.rb#139
  def color(text, color, bold = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/log_subscriber.rb#146
  def log_exception(name, e); end

  class << self
    # source://activesupport//lib/active_support/log_subscriber.rb#80
    def colorize_logging; end

    # source://activesupport//lib/active_support/log_subscriber.rb#80
    def colorize_logging=(val); end

    # source://activesupport//lib/active_support/log_subscriber.rb#96
    def flush_all!; end

    # source://activesupport//lib/active_support/log_subscriber.rb#91
    def log_subscribers; end

    # source://activesupport//lib/active_support/log_subscriber.rb#83
    def logger; end

    # source://activesupport//lib/active_support/log_subscriber.rb#89
    def logger=(_arg0); end

    private

    # source://activesupport//lib/active_support/log_subscriber.rb#101
    def fetch_public_methods(subscriber, inherit_all); end
  end
end

# source://activesupport//lib/active_support/log_subscriber.rb#71
ActiveSupport::LogSubscriber::BLACK = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/log_subscriber.rb#75
ActiveSupport::LogSubscriber::BLUE = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/log_subscriber.rb#68
ActiveSupport::LogSubscriber::BOLD = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/log_subscriber.rb#67
ActiveSupport::LogSubscriber::CLEAR = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/log_subscriber.rb#77
ActiveSupport::LogSubscriber::CYAN = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/log_subscriber.rb#73
ActiveSupport::LogSubscriber::GREEN = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/log_subscriber.rb#76
ActiveSupport::LogSubscriber::MAGENTA = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/log_subscriber.rb#72
ActiveSupport::LogSubscriber::RED = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/log_subscriber.rb#78
ActiveSupport::LogSubscriber::WHITE = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/log_subscriber.rb#74
ActiveSupport::LogSubscriber::YELLOW = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/logger.rb#8
class ActiveSupport::Logger < ::Logger
  include ::ActiveSupport::LoggerSilence
  include ::ActiveSupport::LoggerThreadSafeLevel

  # source://activesupport//lib/active_support/logger.rb#80
  def initialize(*args, **kwargs); end

  # source://activesupport//lib/active_support/logger_silence.rb#12
  def silencer; end

  # source://activesupport//lib/active_support/logger_silence.rb#12
  def silencer=(val); end

  class << self
    # source://activesupport//lib/active_support/logger.rb#23
    def broadcast(logger); end

    # source://activesupport//lib/active_support/logger.rb#16
    def logger_outputs_to?(logger, *sources); end

    # source://activesupport//lib/active_support/logger_silence.rb#12
    def silencer; end

    # source://activesupport//lib/active_support/logger_silence.rb#12
    def silencer=(val); end
  end
end

# source://activesupport//lib/active_support/logger.rb#86
class ActiveSupport::Logger::SimpleFormatter < ::Logger::Formatter
  # source://activesupport//lib/active_support/logger.rb#88
  def call(severity, timestamp, progname, msg); end
end

# source://activesupport//lib/active_support/logger_silence.rb#8
module ActiveSupport::LoggerSilence
  extend ::ActiveSupport::Concern
  include ::ActiveSupport::LoggerThreadSafeLevel

  # source://activesupport//lib/active_support/logger_silence.rb#17
  def silence(severity = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/logger_thread_safe_level.rb#9
module ActiveSupport::LoggerThreadSafeLevel
  extend ::ActiveSupport::Concern

  # source://activesupport//lib/active_support/logger_thread_safe_level.rb#50
  def add(severity, message = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/logger_thread_safe_level.rb#14
  def debug?; end

  # source://activesupport//lib/active_support/logger_thread_safe_level.rb#14
  def error?; end

  # source://activesupport//lib/active_support/logger_thread_safe_level.rb#14
  def fatal?; end

  # source://activesupport//lib/active_support/logger_thread_safe_level.rb#14
  def info?; end

  # source://activesupport//lib/active_support/logger_thread_safe_level.rb#36
  def level; end

  # source://activesupport//lib/active_support/logger_thread_safe_level.rb#20
  def local_level; end

  # source://activesupport//lib/active_support/logger_thread_safe_level.rb#24
  def local_level=(level); end

  # source://activesupport//lib/active_support/logger_thread_safe_level.rb#41
  def log_at(level); end

  # source://activesupport//lib/active_support/logger_thread_safe_level.rb#14
  def unknown?; end

  # source://activesupport//lib/active_support/logger_thread_safe_level.rb#14
  def warn?; end
end

# source://activesupport//lib/active_support/message_encryptor.rb#87
class ActiveSupport::MessageEncryptor
  include ::ActiveSupport::Messages::Rotator
  include ::ActiveSupport::Messages::Rotator::Encryptor

  # source://activesupport//lib/active_support/messages/rotator.rb#6
  def initialize(*secrets, on_rotation: T.unsafe(nil), **options); end

  # source://activesupport//lib/active_support/messages/rotator.rb#21
  def decrypt_and_verify(*args, on_rotation: T.unsafe(nil), **options); end

  # source://activesupport//lib/active_support/message_encryptor.rb#153
  def encrypt_and_sign(value, expires_at: T.unsafe(nil), expires_in: T.unsafe(nil), purpose: T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/message_encryptor.rb#186
  def _decrypt(encrypted_message, purpose); end

  # source://activesupport//lib/active_support/message_encryptor.rb#169
  def _encrypt(value, **metadata_options); end

  # source://activesupport//lib/active_support/message_encryptor.rb#218
  def aead_mode?; end

  # source://activesupport//lib/active_support/message_encryptor.rb#212
  def new_cipher; end

  # source://activesupport//lib/active_support/message_encryptor.rb#222
  def resolve_verifier; end

  # source://activesupport//lib/active_support/message_encryptor.rb#216
  def verifier; end

  class << self
    # source://activesupport//lib/active_support/message_encryptor.rb#93
    def default_cipher; end

    # source://activesupport//lib/active_support/message_encryptor.rb#164
    def key_len(cipher = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/message_encryptor.rb#90
    def use_authenticated_message_encryption; end

    # source://activesupport//lib/active_support/message_encryptor.rb#90
    def use_authenticated_message_encryption=(val); end
  end
end

# source://activesupport//lib/active_support/message_encryptor.rb#122
class ActiveSupport::MessageEncryptor::InvalidMessage < ::StandardError; end

# source://activesupport//lib/active_support/message_encryptor.rb#102
module ActiveSupport::MessageEncryptor::NullSerializer
  class << self
    # source://activesupport//lib/active_support/message_encryptor.rb#107
    def dump(value); end

    # source://activesupport//lib/active_support/message_encryptor.rb#103
    def load(value); end
  end
end

# source://activesupport//lib/active_support/message_encryptor.rb#112
module ActiveSupport::MessageEncryptor::NullVerifier
  class << self
    # source://activesupport//lib/active_support/message_encryptor.rb#117
    def generate(value); end

    # source://activesupport//lib/active_support/message_encryptor.rb#113
    def verify(value); end
  end
end

# source://activesupport//lib/active_support/message_encryptor.rb#123
ActiveSupport::MessageEncryptor::OpenSSLCipherError = OpenSSL::Cipher::CipherError

# source://activesupport//lib/active_support/message_verifier.rb#102
class ActiveSupport::MessageVerifier
  include ::ActiveSupport::Messages::Rotator
  include ::ActiveSupport::Messages::Rotator::Verifier

  # source://activesupport//lib/active_support/messages/rotator.rb#6
  def initialize(*secrets, on_rotation: T.unsafe(nil), **options); end

  # source://activesupport//lib/active_support/message_verifier.rb#188
  def generate(value, expires_at: T.unsafe(nil), expires_in: T.unsafe(nil), purpose: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/message_verifier.rb#126
  def valid_message?(signed_message); end

  # source://activesupport//lib/active_support/messages/rotator.rb#36
  def verified(*args, on_rotation: T.unsafe(nil), **options); end

  # source://activesupport//lib/active_support/message_verifier.rb#177
  def verify(*args, **options); end

  private

  # source://activesupport//lib/active_support/message_verifier.rb#198
  def decode(data); end

  # source://activesupport//lib/active_support/message_verifier.rb#206
  def digest_length_in_hex; end

  # source://activesupport//lib/active_support/message_verifier.rb#233
  def digest_matches_data?(digest, data); end

  # source://activesupport//lib/active_support/message_verifier.rb#194
  def encode(data); end

  # source://activesupport//lib/active_support/message_verifier.rb#202
  def generate_digest(data); end

  # source://activesupport//lib/active_support/message_verifier.rb#221
  def get_data_and_digest_from(signed_message); end

  # source://activesupport//lib/active_support/message_verifier.rb#214
  def separator_index_for(signed_message); end
end

# source://activesupport//lib/active_support/message_verifier.rb#105
class ActiveSupport::MessageVerifier::InvalidSignature < ::StandardError; end

# source://activesupport//lib/active_support/message_verifier.rb#107
ActiveSupport::MessageVerifier::SEPARATOR = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/message_verifier.rb#108
ActiveSupport::MessageVerifier::SEPARATOR_LENGTH = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/messages/metadata.rb#6
module ActiveSupport::Messages; end

# source://activesupport//lib/active_support/messages/metadata.rb#7
class ActiveSupport::Messages::Metadata
  # source://activesupport//lib/active_support/messages/metadata.rb#8
  def initialize(message, expires_at = T.unsafe(nil), purpose = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/messages/metadata.rb#13
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/messages/metadata.rb#58
  def verify(purpose); end

  private

  # source://activesupport//lib/active_support/messages/metadata.rb#67
  def fresh?; end

  # source://activesupport//lib/active_support/messages/metadata.rb#63
  def match?(purpose); end

  # source://activesupport//lib/active_support/messages/metadata.rb#71
  def parse_expires_at(expires_at); end

  class << self
    # source://activesupport//lib/active_support/messages/metadata.rb#26
    def verify(message, purpose); end

    # source://activesupport//lib/active_support/messages/metadata.rb#18
    def wrap(message, expires_at: T.unsafe(nil), expires_in: T.unsafe(nil), purpose: T.unsafe(nil)); end

    private

    # source://activesupport//lib/active_support/messages/metadata.rb#53
    def decode(message); end

    # source://activesupport//lib/active_support/messages/metadata.rb#49
    def encode(message); end

    # source://activesupport//lib/active_support/messages/metadata.rb#39
    def extract_metadata(message); end

    # source://activesupport//lib/active_support/messages/metadata.rb#31
    def pick_expiry(expires_at, expires_in); end
  end
end

# source://activesupport//lib/active_support/messages/rotation_configuration.rb#5
class ActiveSupport::Messages::RotationConfiguration
  # source://activesupport//lib/active_support/messages/rotation_configuration.rb#8
  def initialize; end

  # source://activesupport//lib/active_support/messages/rotation_configuration.rb#6
  def encrypted; end

  # source://activesupport//lib/active_support/messages/rotation_configuration.rb#12
  def rotate(kind, *args, **options); end

  # source://activesupport//lib/active_support/messages/rotation_configuration.rb#6
  def signed; end
end

# source://activesupport//lib/active_support/messages/rotator.rb#5
module ActiveSupport::Messages::Rotator
  # source://activesupport//lib/active_support/messages/rotator.rb#6
  def initialize(*secrets, on_rotation: T.unsafe(nil), **options); end

  # source://activesupport//lib/active_support/messages/rotator.rb#14
  def rotate(*secrets, **options); end

  private

  # source://activesupport//lib/active_support/messages/rotator.rb#47
  def run_rotations(on_rotation); end
end

# source://activesupport//lib/active_support/messages/rotator.rb#18
module ActiveSupport::Messages::Rotator::Encryptor
  include ::ActiveSupport::Messages::Rotator

  # source://activesupport//lib/active_support/messages/rotator.rb#21
  def decrypt_and_verify(*args, on_rotation: T.unsafe(nil), **options); end

  private

  # source://activesupport//lib/active_support/messages/rotator.rb#28
  def build_rotation(secret = T.unsafe(nil), sign_secret = T.unsafe(nil), options); end
end

# source://activesupport//lib/active_support/messages/rotator.rb#33
module ActiveSupport::Messages::Rotator::Verifier
  include ::ActiveSupport::Messages::Rotator

  # source://activesupport//lib/active_support/messages/rotator.rb#36
  def verified(*args, on_rotation: T.unsafe(nil), **options); end

  private

  # source://activesupport//lib/active_support/messages/rotator.rb#41
  def build_rotation(secret = T.unsafe(nil), options); end
end

# source://activesupport//lib/active_support/multibyte.rb#4
module ActiveSupport::Multibyte
  class << self
    # source://activesupport//lib/active_support/multibyte.rb#19
    def proxy_class; end

    # source://activesupport//lib/active_support/multibyte.rb#14
    def proxy_class=(klass); end
  end
end

# source://activesupport//lib/active_support/multibyte/chars.rb#45
class ActiveSupport::Multibyte::Chars
  include ::Comparable

  # source://activesupport//lib/active_support/multibyte/chars.rb#54
  def initialize(string); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#51
  def <=>(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#51
  def =~(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#51
  def acts_like_string?(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#159
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#138
  def compose; end

  # source://activesupport//lib/active_support/multibyte/chars.rb#130
  def decompose; end

  # source://activesupport//lib/active_support/multibyte/chars.rb#146
  def grapheme_length; end

  # source://activesupport//lib/active_support/multibyte/chars.rb#113
  def limit(limit); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#51
  def match?(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#60
  def method_missing(method, *args, &block); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#104
  def reverse; end

  # source://activesupport//lib/active_support/multibyte/chars.rb#164
  def reverse!(*args); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#94
  def slice!(*args); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#81
  def split(*args); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#155
  def tidy_bytes(force = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#164
  def tidy_bytes!(*args); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#121
  def titlecase; end

  # source://activesupport//lib/active_support/multibyte/chars.rb#121
  def titleize; end

  # source://activesupport//lib/active_support/multibyte/chars.rb#47
  def to_s; end

  # source://activesupport//lib/active_support/multibyte/chars.rb#47
  def to_str; end

  # source://activesupport//lib/active_support/multibyte/chars.rb#47
  def wrapped_string; end

  private

  # source://activesupport//lib/active_support/multibyte/chars.rb#171
  def chars(string); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#72
  def respond_to_missing?(method, include_private); end
end

# source://activesupport//lib/active_support/multibyte/unicode.rb#5
module ActiveSupport::Multibyte::Unicode
  extend ::ActiveSupport::Multibyte::Unicode

  # source://activesupport//lib/active_support/multibyte/unicode.rb#21
  def compose(codepoints); end

  # source://activesupport//lib/active_support/multibyte/unicode.rb#12
  def decompose(type, codepoints); end

  # source://activesupport//lib/active_support/multibyte/unicode.rb#32
  def tidy_bytes(string, force = T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/multibyte/unicode.rb#65
  def recode_windows1252_chars(string); end
end

# source://activesupport//lib/active_support/multibyte/unicode.rb#9
ActiveSupport::Multibyte::Unicode::UNICODE_VERSION = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/notifications/instrumenter.rb#6
module ActiveSupport::Notifications
  class << self
    # source://activesupport//lib/active_support/notifications.rb#204
    def instrument(name, payload = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/notifications.rb#268
    def instrumenter; end

    # source://activesupport//lib/active_support/notifications.rb#253
    def monotonic_subscribe(pattern = T.unsafe(nil), callback = T.unsafe(nil), &block); end

    # source://activesupport//lib/active_support/notifications.rb#194
    def notifier; end

    # source://activesupport//lib/active_support/notifications.rb#194
    def notifier=(_arg0); end

    # source://activesupport//lib/active_support/notifications.rb#196
    def publish(name, *args); end

    # source://activesupport//lib/active_support/notifications.rb#200
    def publish_event(event); end

    # source://activesupport//lib/active_support/notifications.rb#243
    def subscribe(pattern = T.unsafe(nil), callback = T.unsafe(nil), &block); end

    # source://activesupport//lib/active_support/notifications.rb#257
    def subscribed(callback, pattern = T.unsafe(nil), monotonic: T.unsafe(nil), &block); end

    # source://activesupport//lib/active_support/notifications.rb#264
    def unsubscribe(subscriber_or_name); end

    private

    # source://activesupport//lib/active_support/notifications.rb#273
    def registry; end
  end
end

# source://activesupport//lib/active_support/notifications/instrumenter.rb#58
class ActiveSupport::Notifications::Event
  # source://activesupport//lib/active_support/notifications/instrumenter.rb#62
  def initialize(name, start, ending, transaction_id, payload); end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#136
  def <<(event); end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#116
  def allocations; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#59
  def children; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#104
  def cpu_time; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#132
  def duration; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#59
  def end; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#96
  def finish!; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#110
  def idle_time; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#59
  def name; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#140
  def parent_of?(event); end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#60
  def payload; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#60
  def payload=(_arg0); end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#75
  def record; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#89
  def start!; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#59
  def time; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#59
  def transaction_id; end

  private

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#145
  def now; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#162
  def now_allocations; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#152
  def now_cpu; end
end

# source://activesupport//lib/active_support/notifications/fanout.rb#24
class ActiveSupport::Notifications::Fanout
  include ::Mutex_m

  # source://activesupport//lib/active_support/notifications/fanout.rb#27
  def initialize; end

  # source://activesupport//lib/active_support/notifications/fanout.rb#75
  def finish(name, id, payload, listeners = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#87
  def iterate_guarding_exceptions(listeners); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#108
  def listeners_for(name); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#117
  def listening?(name); end

  # source://mutex_m/0.1.2/mutex_m.rb#93
  def lock; end

  # source://mutex_m/0.1.2/mutex_m.rb#83
  def locked?; end

  # source://activesupport//lib/active_support/notifications/fanout.rb#79
  def publish(name, *args); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#83
  def publish_event(event); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#71
  def start(name, id, payload); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#34
  def subscribe(pattern = T.unsafe(nil), callable = T.unsafe(nil), monotonic: T.unsafe(nil), &block); end

  # source://mutex_m/0.1.2/mutex_m.rb#78
  def synchronize(&block); end

  # source://mutex_m/0.1.2/mutex_m.rb#88
  def try_lock; end

  # source://mutex_m/0.1.2/mutex_m.rb#98
  def unlock; end

  # source://activesupport//lib/active_support/notifications/fanout.rb#51
  def unsubscribe(subscriber_or_name); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#122
  def wait; end
end

# source://activesupport//lib/active_support/notifications/fanout.rb#125
module ActiveSupport::Notifications::Fanout::Subscribers
  class << self
    # source://activesupport//lib/active_support/notifications/fanout.rb#126
    def new(pattern, listener, monotonic); end
  end
end

# source://activesupport//lib/active_support/notifications/fanout.rb#257
class ActiveSupport::Notifications::Fanout::Subscribers::EventObject < ::ActiveSupport::Notifications::Fanout::Subscribers::Evented
  # source://activesupport//lib/active_support/notifications/fanout.rb#265
  def finish(name, id, payload); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#273
  def publish_event(event); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#258
  def start(name, id, payload); end

  private

  # source://activesupport//lib/active_support/notifications/fanout.rb#278
  def build_event(name, id, payload); end
end

# source://activesupport//lib/active_support/notifications/fanout.rb#182
class ActiveSupport::Notifications::Fanout::Subscribers::Evented
  # source://activesupport//lib/active_support/notifications/fanout.rb#185
  def initialize(pattern, delegate); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#210
  def finish(name, id, payload); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#183
  def pattern; end

  # source://activesupport//lib/active_support/notifications/fanout.rb#192
  def publish(name, *args); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#198
  def publish_event(event); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#206
  def start(name, id, payload); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#214
  def subscribed_to?(name); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#218
  def unsubscribe!(name); end
end

# source://activesupport//lib/active_support/notifications/fanout.rb#145
class ActiveSupport::Notifications::Fanout::Subscribers::Matcher
  # source://activesupport//lib/active_support/notifications/fanout.rb#158
  def initialize(pattern); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#167
  def ===(name); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#146
  def exclusions; end

  # source://activesupport//lib/active_support/notifications/fanout.rb#146
  def pattern; end

  # source://activesupport//lib/active_support/notifications/fanout.rb#163
  def unsubscribe!(name); end

  class << self
    # source://activesupport//lib/active_support/notifications/fanout.rb#148
    def wrap(pattern); end
  end
end

# source://activesupport//lib/active_support/notifications/fanout.rb#171
class ActiveSupport::Notifications::Fanout::Subscribers::Matcher::AllMessages
  # source://activesupport//lib/active_support/notifications/fanout.rb#172
  def ===(name); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#176
  def unsubscribe!(*_arg0); end
end

# source://activesupport//lib/active_support/notifications/fanout.rb#240
class ActiveSupport::Notifications::Fanout::Subscribers::MonotonicTimed < ::ActiveSupport::Notifications::Fanout::Subscribers::Evented
  # source://activesupport//lib/active_support/notifications/fanout.rb#250
  def finish(name, id, payload); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#241
  def publish(name, *args); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#245
  def start(name, id, payload); end
end

# source://activesupport//lib/active_support/notifications/fanout.rb#223
class ActiveSupport::Notifications::Fanout::Subscribers::Timed < ::ActiveSupport::Notifications::Fanout::Subscribers::Evented
  # source://activesupport//lib/active_support/notifications/fanout.rb#233
  def finish(name, id, payload); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#224
  def publish(name, *args); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#228
  def start(name, id, payload); end
end

# source://activesupport//lib/active_support/notifications/fanout.rb#10
class ActiveSupport::Notifications::InstrumentationSubscriberError < ::RuntimeError
  # source://activesupport//lib/active_support/notifications/fanout.rb#13
  def initialize(exceptions); end

  # source://activesupport//lib/active_support/notifications/fanout.rb#11
  def exceptions; end
end

# source://activesupport//lib/active_support/notifications/instrumenter.rb#8
class ActiveSupport::Notifications::Instrumenter
  # source://activesupport//lib/active_support/notifications/instrumenter.rb#11
  def initialize(notifier); end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#44
  def finish(name, payload); end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#48
  def finish_with_state(listeners_state, name, payload); end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#9
  def id; end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#20
  def instrument(name, payload = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#34
  def new_event(name, payload = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#39
  def start(name, payload); end

  private

  # source://activesupport//lib/active_support/notifications/instrumenter.rb#53
  def unique_id; end
end

# source://activesupport//lib/active_support/number_helper.rb#4
module ActiveSupport::NumberHelper
  extend ::ActiveSupport::Autoload
  extend ::ActiveSupport::NumberHelper

  # source://activesupport//lib/active_support/number_helper.rb#114
  def number_to_currency(number, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/number_helper.rb#189
  def number_to_delimited(number, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/number_helper.rb#391
  def number_to_human(number, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/number_helper.rb#283
  def number_to_human_size(number, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/number_helper.rb#154
  def number_to_percentage(number, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/number_helper.rb#53
  def number_to_phone(number, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/number_helper.rb#236
  def number_to_rounded(number, options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/number_helper/number_converter.rb#11
class ActiveSupport::NumberHelper::NumberConverter
  # source://activesupport//lib/active_support/number_helper/number_converter.rb#123
  def initialize(number, options); end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#128
  def execute; end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#13
  def namespace; end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#13
  def namespace=(_arg0); end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#13
  def namespace?; end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#18
  def number; end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#18
  def opts; end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#16
  def validate_float; end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#16
  def validate_float=(_arg0); end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#16
  def validate_float?; end

  private

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#147
  def default_format_options; end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#172
  def default_value(key); end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#143
  def format_options; end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#153
  def i18n_format_options; end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#139
  def options; end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#168
  def translate_in_locale(key, **i18n_options); end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#164
  def translate_number_value_with_default(key, **i18n_options); end

  # source://activesupport//lib/active_support/number_helper/number_converter.rb#176
  def valid_float?; end

  class << self
    # source://activesupport//lib/active_support/number_helper/number_converter.rb#119
    def convert(number, options); end

    # source://activesupport//lib/active_support/number_helper/number_converter.rb#13
    def namespace; end

    # source://activesupport//lib/active_support/number_helper/number_converter.rb#13
    def namespace=(value); end

    # source://activesupport//lib/active_support/number_helper/number_converter.rb#13
    def namespace?; end

    # source://activesupport//lib/active_support/number_helper/number_converter.rb#16
    def validate_float; end

    # source://activesupport//lib/active_support/number_helper/number_converter.rb#16
    def validate_float=(value); end

    # source://activesupport//lib/active_support/number_helper/number_converter.rb#16
    def validate_float?; end
  end
end

# source://activesupport//lib/active_support/number_helper/number_converter.rb#20
ActiveSupport::NumberHelper::NumberConverter::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/number_helper/number_to_currency_converter.rb#7
class ActiveSupport::NumberHelper::NumberToCurrencyConverter < ::ActiveSupport::NumberHelper::NumberConverter
  # source://activesupport//lib/active_support/number_helper/number_to_currency_converter.rb#10
  def convert; end

  private

  # source://activesupport//lib/active_support/number_helper/number_to_currency_converter.rb#38
  def i18n_opts; end

  # source://activesupport//lib/active_support/number_helper/number_to_currency_converter.rb#29
  def options; end

  class << self
    # source://activesupport//lib/active_support/number_helper/number_converter.rb#13
    def namespace; end
  end
end

# source://activesupport//lib/active_support/number_helper/number_to_delimited_converter.rb#7
class ActiveSupport::NumberHelper::NumberToDelimitedConverter < ::ActiveSupport::NumberHelper::NumberConverter
  # source://activesupport//lib/active_support/number_helper/number_to_delimited_converter.rb#12
  def convert; end

  private

  # source://activesupport//lib/active_support/number_helper/number_to_delimited_converter.rb#25
  def delimiter_pattern; end

  # source://activesupport//lib/active_support/number_helper/number_to_delimited_converter.rb#17
  def parts; end

  class << self
    # source://activesupport//lib/active_support/number_helper/number_converter.rb#16
    def validate_float; end
  end
end

# source://activesupport//lib/active_support/number_helper/number_to_delimited_converter.rb#10
ActiveSupport::NumberHelper::NumberToDelimitedConverter::DEFAULT_DELIMITER_REGEX = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/number_helper/number_to_human_converter.rb#7
class ActiveSupport::NumberHelper::NumberToHumanConverter < ::ActiveSupport::NumberHelper::NumberConverter
  # source://activesupport//lib/active_support/number_helper/number_to_human_converter.rb#15
  def convert; end

  private

  # source://activesupport//lib/active_support/number_helper/number_to_human_converter.rb#50
  def calculate_exponent(units); end

  # source://activesupport//lib/active_support/number_helper/number_to_human_converter.rb#38
  def determine_unit(units, exponent); end

  # source://activesupport//lib/active_support/number_helper/number_to_human_converter.rb#34
  def format; end

  # source://activesupport//lib/active_support/number_helper/number_to_human_converter.rb#55
  def unit_exponents(units); end

  class << self
    # source://activesupport//lib/active_support/number_helper/number_converter.rb#13
    def namespace; end

    # source://activesupport//lib/active_support/number_helper/number_converter.rb#16
    def validate_float; end
  end
end

# source://activesupport//lib/active_support/number_helper/number_to_human_converter.rb#8
ActiveSupport::NumberHelper::NumberToHumanConverter::DECIMAL_UNITS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/number_helper/number_to_human_converter.rb#10
ActiveSupport::NumberHelper::NumberToHumanConverter::INVERTED_DECIMAL_UNITS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/number_helper/number_to_human_size_converter.rb#7
class ActiveSupport::NumberHelper::NumberToHumanSizeConverter < ::ActiveSupport::NumberHelper::NumberConverter
  # source://activesupport//lib/active_support/number_helper/number_to_human_size_converter.rb#13
  def convert; end

  private

  # source://activesupport//lib/active_support/number_helper/number_to_human_size_converter.rb#55
  def base; end

  # source://activesupport//lib/active_support/number_helper/number_to_human_size_converter.rb#31
  def conversion_format; end

  # source://activesupport//lib/active_support/number_helper/number_to_human_size_converter.rb#44
  def exponent; end

  # source://activesupport//lib/active_support/number_helper/number_to_human_size_converter.rb#51
  def smaller_than_base?; end

  # source://activesupport//lib/active_support/number_helper/number_to_human_size_converter.rb#39
  def storage_unit_key; end

  # source://activesupport//lib/active_support/number_helper/number_to_human_size_converter.rb#35
  def unit; end

  class << self
    # source://activesupport//lib/active_support/number_helper/number_converter.rb#13
    def namespace; end

    # source://activesupport//lib/active_support/number_helper/number_converter.rb#16
    def validate_float; end
  end
end

# source://activesupport//lib/active_support/number_helper/number_to_human_size_converter.rb#8
ActiveSupport::NumberHelper::NumberToHumanSizeConverter::STORAGE_UNITS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/number_helper/number_to_percentage_converter.rb#7
class ActiveSupport::NumberHelper::NumberToPercentageConverter < ::ActiveSupport::NumberHelper::NumberConverter
  # source://activesupport//lib/active_support/number_helper/number_to_percentage_converter.rb#10
  def convert; end

  class << self
    # source://activesupport//lib/active_support/number_helper/number_converter.rb#13
    def namespace; end
  end
end

# source://activesupport//lib/active_support/number_helper/number_to_phone_converter.rb#7
class ActiveSupport::NumberHelper::NumberToPhoneConverter < ::ActiveSupport::NumberHelper::NumberConverter
  # source://activesupport//lib/active_support/number_helper/number_to_phone_converter.rb#8
  def convert; end

  private

  # source://activesupport//lib/active_support/number_helper/number_to_phone_converter.rb#15
  def convert_to_phone_number(number); end

  # source://activesupport//lib/active_support/number_helper/number_to_phone_converter.rb#23
  def convert_with_area_code(number); end

  # source://activesupport//lib/active_support/number_helper/number_to_phone_converter.rb#30
  def convert_without_area_code(number); end

  # source://activesupport//lib/active_support/number_helper/number_to_phone_converter.rb#46
  def country_code(code); end

  # source://activesupport//lib/active_support/number_helper/number_to_phone_converter.rb#42
  def delimiter; end

  # source://activesupport//lib/active_support/number_helper/number_to_phone_converter.rb#50
  def phone_ext(ext); end

  # source://activesupport//lib/active_support/number_helper/number_to_phone_converter.rb#54
  def regexp_pattern(default_pattern); end

  # source://activesupport//lib/active_support/number_helper/number_to_phone_converter.rb#38
  def start_with_delimiter?(number); end
end

# source://activesupport//lib/active_support/number_helper/number_to_rounded_converter.rb#7
class ActiveSupport::NumberHelper::NumberToRoundedConverter < ::ActiveSupport::NumberHelper::NumberConverter
  # source://activesupport//lib/active_support/number_helper/number_to_rounded_converter.rb#11
  def convert; end

  private

  # source://activesupport//lib/active_support/number_helper/number_to_rounded_converter.rb#49
  def format_number(number); end

  # source://activesupport//lib/active_support/number_helper/number_to_rounded_converter.rb#45
  def strip_insignificant_zeros; end

  class << self
    # source://activesupport//lib/active_support/number_helper/number_converter.rb#13
    def namespace; end

    # source://activesupport//lib/active_support/number_helper/number_converter.rb#16
    def validate_float; end
  end
end

# source://activesupport//lib/active_support/number_helper/rounding_helper.rb#5
class ActiveSupport::NumberHelper::RoundingHelper
  # source://activesupport//lib/active_support/number_helper/rounding_helper.rb#8
  def initialize(options); end

  # source://activesupport//lib/active_support/number_helper/rounding_helper.rb#20
  def digit_count(number); end

  # source://activesupport//lib/active_support/number_helper/rounding_helper.rb#6
  def options; end

  # source://activesupport//lib/active_support/number_helper/rounding_helper.rb#12
  def round(number); end

  private

  # source://activesupport//lib/active_support/number_helper/rounding_helper.rb#37
  def absolute_precision(number); end

  # source://activesupport//lib/active_support/number_helper/rounding_helper.rb#26
  def convert_to_decimal(number); end
end

# source://activesupport//lib/active_support/core_ext/numeric/conversions.rb#7
module ActiveSupport::NumericWithFormat
  # source://activesupport//lib/active_support/core_ext/numeric/conversions.rb#111
  def to_formatted_s(format = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/numeric/conversions.rb#111
  def to_fs(format = T.unsafe(nil), options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/option_merger.rb#6
class ActiveSupport::OptionMerger
  # source://activesupport//lib/active_support/option_merger.rb#11
  def initialize(context, options); end

  private

  # source://activesupport//lib/active_support/option_merger.rb#16
  def method_missing(method, *arguments, &block); end

  # source://activesupport//lib/active_support/option_merger.rb#34
  def respond_to_missing?(*arguments); end
end

# source://activesupport//lib/active_support/ordered_hash.rb#24
class ActiveSupport::OrderedHash < ::Hash
  # source://activesupport//lib/active_support/ordered_hash.rb#29
  def encode_with(coder); end

  # source://activesupport//lib/active_support/ordered_hash.rb#46
  def extractable_options?; end

  # source://activesupport//lib/active_support/ordered_hash.rb#41
  def nested_under_indifferent_access; end

  # source://activesupport//lib/active_support/ordered_hash.rb#37
  def reject(*args, &block); end

  # source://activesupport//lib/active_support/ordered_hash.rb#33
  def select(*args, &block); end

  # source://activesupport//lib/active_support/ordered_hash.rb#25
  def to_yaml_type; end
end

# source://activesupport//lib/active_support/ordered_options.rb#31
class ActiveSupport::OrderedOptions < ::Hash
  # source://activesupport//lib/active_support/ordered_options.rb#39
  def [](key); end

  # source://activesupport//lib/active_support/ordered_options.rb#35
  def []=(key, value); end

  # source://activesupport//lib/active_support/ordered_options.rb#62
  def extractable_options?; end

  # source://activesupport//lib/active_support/ordered_options.rb#66
  def inspect; end

  # source://activesupport//lib/active_support/ordered_options.rb#43
  def method_missing(name, *args); end

  protected

  def _get(_arg0); end

  private

  # source://activesupport//lib/active_support/ordered_options.rb#58
  def respond_to_missing?(name, include_private); end
end

# source://activesupport//lib/active_support/parameter_filter.rb#32
class ActiveSupport::ParameterFilter
  # source://activesupport//lib/active_support/parameter_filter.rb#42
  def initialize(filters = T.unsafe(nil), mask: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/parameter_filter.rb#48
  def filter(params); end

  # source://activesupport//lib/active_support/parameter_filter.rb#53
  def filter_param(key, value); end

  private

  # source://activesupport//lib/active_support/parameter_filter.rb#58
  def compiled_filter; end
end

# source://activesupport//lib/active_support/parameter_filter.rb#62
class ActiveSupport::ParameterFilter::CompiledFilter
  # source://activesupport//lib/active_support/parameter_filter.rb#96
  def initialize(regexps, deep_regexps, blocks, mask:); end

  # source://activesupport//lib/active_support/parameter_filter.rb#94
  def blocks; end

  # source://activesupport//lib/active_support/parameter_filter.rb#103
  def call(params, parents = T.unsafe(nil), original_params = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/parameter_filter.rb#94
  def deep_regexps; end

  # source://activesupport//lib/active_support/parameter_filter.rb#94
  def regexps; end

  # source://activesupport//lib/active_support/parameter_filter.rb#113
  def value_for_key(key, value, parents = T.unsafe(nil), original_params = T.unsafe(nil)); end

  class << self
    # source://activesupport//lib/active_support/parameter_filter.rb#63
    def compile(filters, mask:); end
  end
end

# source://activesupport//lib/active_support/parameter_filter.rb#33
ActiveSupport::ParameterFilter::FILTERED = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/per_thread_registry.rb#41
module ActiveSupport::PerThreadRegistry
  # source://activesupport//lib/active_support/per_thread_registry.rb#50
  def instance; end

  private

  # source://activesupport//lib/active_support/per_thread_registry.rb#55
  def method_missing(name, *args, **_arg2, &block); end

  class << self
    # source://activesupport//lib/active_support/per_thread_registry.rb#42
    def extended(object); end
  end
end

# source://activesupport//lib/active_support/proxy_object.rb#6
class ActiveSupport::ProxyObject < ::BasicObject
  # source://activesupport//lib/active_support/proxy_object.rb#11
  def raise(*args); end
end

# source://activesupport//lib/active_support/railtie.rb#7
class ActiveSupport::Railtie < ::Rails::Railtie; end

# source://activesupport//lib/active_support/core_ext/range/conversions.rb#4
module ActiveSupport::RangeWithFormat
  # source://activesupport//lib/active_support/core_ext/range/conversions.rb#30
  def to_formatted_s(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/range/conversions.rb#30
  def to_fs(format = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/range/conversions.rb#5
ActiveSupport::RangeWithFormat::RANGE_FORMATS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/reloader.rb#27
class ActiveSupport::Reloader < ::ActiveSupport::ExecutionWrapper
  # source://activesupport//lib/active_support/reloader.rb#91
  def initialize; end

  # source://activesupport//lib/active_support/callbacks.rb#940
  def _class_unload_callbacks; end

  # source://activesupport//lib/active_support/callbacks.rb#940
  def _prepare_callbacks; end

  # source://activesupport//lib/active_support/callbacks.rb#928
  def _run_class_unload_callbacks(&block); end

  # source://activesupport//lib/active_support/callbacks.rb#928
  def _run_prepare_callbacks(&block); end

  # source://activesupport//lib/active_support/reloader.rb#77
  def check; end

  # source://activesupport//lib/active_support/reloader.rb#77
  def check=(_arg0); end

  # source://activesupport//lib/active_support/reloader.rb#77
  def check?; end

  # source://activesupport//lib/active_support/reloader.rb#118
  def class_unload!(&block); end

  # source://activesupport//lib/active_support/reloader.rb#123
  def complete!; end

  # source://activesupport//lib/active_support/reloader.rb#76
  def executor; end

  # source://activesupport//lib/active_support/reloader.rb#76
  def executor=(_arg0); end

  # source://activesupport//lib/active_support/reloader.rb#76
  def executor?; end

  # source://activesupport//lib/active_support/reloader.rb#106
  def release_unload_lock!; end

  # source://activesupport//lib/active_support/reloader.rb#98
  def require_unload_lock!; end

  # source://activesupport//lib/active_support/reloader.rb#113
  def run!; end

  class << self
    # source://activesupport//lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport//lib/active_support/callbacks.rb#932
    def _class_unload_callbacks; end

    # source://activesupport//lib/active_support/callbacks.rb#936
    def _class_unload_callbacks=(value); end

    # source://activesupport//lib/active_support/callbacks.rb#932
    def _prepare_callbacks; end

    # source://activesupport//lib/active_support/callbacks.rb#936
    def _prepare_callbacks=(value); end

    # source://activesupport//lib/active_support/reloader.rb#43
    def after_class_unload(*args, &block); end

    # source://activesupport//lib/active_support/reloader.rb#38
    def before_class_unload(*args, &block); end

    # source://activesupport//lib/active_support/reloader.rb#77
    def check; end

    # source://activesupport//lib/active_support/reloader.rb#79
    def check!; end

    # source://activesupport//lib/active_support/reloader.rb#77
    def check=(value); end

    # source://activesupport//lib/active_support/reloader.rb#77
    def check?; end

    # source://activesupport//lib/active_support/reloader.rb#76
    def executor; end

    # source://activesupport//lib/active_support/reloader.rb#76
    def executor=(value); end

    # source://activesupport//lib/active_support/reloader.rb#76
    def executor?; end

    # source://activesupport//lib/active_support/reloader.rb#87
    def prepare!; end

    # source://activesupport//lib/active_support/reloader.rb#50
    def reload!; end

    # source://activesupport//lib/active_support/reloader.rb#83
    def reloaded!; end

    # source://activesupport//lib/active_support/reloader.rb#61
    def run!(reset: T.unsafe(nil)); end

    # source://activesupport//lib/active_support/reloader.rb#33
    def to_prepare(*args, &block); end

    # source://activesupport//lib/active_support/reloader.rb#70
    def wrap; end
  end
end

# source://activesupport//lib/active_support/rescuable.rb#9
module ActiveSupport::Rescuable
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Rescuable::ClassMethods

  # source://activesupport//lib/active_support/rescuable.rb#170
  def handler_for_rescue(exception); end

  # source://activesupport//lib/active_support/rescuable.rb#164
  def rescue_with_handler(exception); end

  module GeneratedClassMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end

  module GeneratedInstanceMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end
end

# source://activesupport//lib/active_support/rescuable.rb#16
module ActiveSupport::Rescuable::ClassMethods
  # source://activesupport//lib/active_support/rescuable.rb#103
  def handler_for_rescue(exception, object: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/rescuable.rb#51
  def rescue_from(*klasses, with: T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/rescuable.rb#88
  def rescue_with_handler(exception, object: T.unsafe(nil), visited_exceptions: T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/rescuable.rb#137
  def constantize_rescue_handler_class(class_or_name); end

  # source://activesupport//lib/active_support/rescuable.rb#122
  def find_rescue_handler(exception); end
end

# source://activesupport//lib/active_support/ruby_features.rb#4
module ActiveSupport::RubyFeatures; end

# source://activesupport//lib/active_support/ruby_features.rb#5
ActiveSupport::RubyFeatures::CLASS_SUBCLASSES = T.let(T.unsafe(nil), TrueClass)

# source://activesupport//lib/active_support/core_ext/string/output_safety.rb#162
class ActiveSupport::SafeBuffer < ::String
  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#200
  def initialize(str = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#257
  def %(args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#250
  def *(*_arg0); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#246
  def +(other); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#214
  def <<(value); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#181
  def [](*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#238
  def []=(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#222
  def bytesplice(*args, value); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#287
  def capitalize(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#291
  def capitalize!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#287
  def chomp(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#291
  def chomp!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#287
  def chop(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#291
  def chop!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#210
  def clone_empty; end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#214
  def concat(value); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#287
  def delete(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#291
  def delete!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#287
  def delete_prefix(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#291
  def delete_prefix!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#287
  def delete_suffix(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#291
  def delete_suffix!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#287
  def downcase(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#291
  def downcase!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#280
  def encode_with(coder); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#301
  def gsub(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#312
  def gsub!(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#268
  def html_safe?; end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#226
  def insert(index, value); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#287
  def lstrip(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#291
  def lstrip!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#287
  def next(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#291
  def next!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#230
  def prepend(value); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#234
  def replace(value); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#287
  def reverse(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#291
  def reverse!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#287
  def rstrip(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#291
  def rstrip!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#195
  def safe_concat(value); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#287
  def scrub(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#291
  def scrub!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#287
  def slice(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#291
  def slice!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#287
  def squeeze(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#291
  def squeeze!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#287
  def strip(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#291
  def strip!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#301
  def sub(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#312
  def sub!(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#287
  def succ(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#291
  def succ!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#287
  def swapcase(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#291
  def swapcase!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#276
  def to_param; end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#272
  def to_s; end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#287
  def tr(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#291
  def tr!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#287
  def tr_s(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#291
  def tr_s!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#287
  def unicode_normalize(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#291
  def unicode_normalize!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#287
  def upcase(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#291
  def upcase!(*args); end

  private

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#327
  def explicit_html_escape_interpolated_argument(arg); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#331
  def implicit_html_escape_interpolated_argument(arg); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#205
  def initialize_copy(other); end

  def original_concat(*_arg0); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#354
  def set_block_back_references(block, match_data); end
end

# source://activesupport//lib/active_support/core_ext/string/output_safety.rb#175
class ActiveSupport::SafeBuffer::SafeConcatError < ::StandardError
  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#176
  def initialize; end
end

# source://activesupport//lib/active_support/core_ext/string/output_safety.rb#163
ActiveSupport::SafeBuffer::UNSAFE_STRING_METHODS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/core_ext/string/output_safety.rb#169
ActiveSupport::SafeBuffer::UNSAFE_STRING_METHODS_WITH_BACKREF = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/secure_compare_rotator.rb#30
class ActiveSupport::SecureCompareRotator
  include ::ActiveSupport::Messages::Rotator
  include ::ActiveSupport::SecurityUtils

  # source://activesupport//lib/active_support/messages/rotator.rb#6
  def initialize(*secrets, on_rotation: T.unsafe(nil), **options); end

  # source://activesupport//lib/active_support/secure_compare_rotator.rb#40
  def secure_compare!(other_value, on_rotation: T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/secure_compare_rotator.rb#47
  def build_rotation(previous_value, _options); end
end

# source://activesupport//lib/active_support/secure_compare_rotator.rb#34
class ActiveSupport::SecureCompareRotator::InvalidMatch < ::StandardError; end

# source://activesupport//lib/active_support/security_utils.rb#4
module ActiveSupport::SecurityUtils
  private

  # source://activesupport//lib/active_support/security_utils.rb#11
  def fixed_length_secure_compare(a, b); end

  # source://activesupport//lib/active_support/security_utils.rb#33
  def secure_compare(a, b); end

  class << self
    # source://activesupport//lib/active_support/security_utils.rb#11
    def fixed_length_secure_compare(a, b); end

    # source://activesupport//lib/active_support/security_utils.rb#33
    def secure_compare(a, b); end
  end
end

# source://activesupport//lib/active_support/string_inquirer.rb#19
class ActiveSupport::StringInquirer < ::String
  private

  # source://activesupport//lib/active_support/string_inquirer.rb#25
  def method_missing(method_name, *arguments); end

  # source://activesupport//lib/active_support/string_inquirer.rb#21
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/subscriber.rb#30
class ActiveSupport::Subscriber
  # source://activesupport//lib/active_support/subscriber.rb#128
  def initialize; end

  # source://activesupport//lib/active_support/subscriber.rb#143
  def finish(name, id, payload); end

  # source://activesupport//lib/active_support/subscriber.rb#126
  def patterns; end

  # source://activesupport//lib/active_support/subscriber.rb#152
  def publish_event(event); end

  # source://activesupport//lib/active_support/subscriber.rb#134
  def start(name, id, payload); end

  private

  # source://activesupport//lib/active_support/subscriber.rb#158
  def event_stack; end

  class << self
    # source://activesupport//lib/active_support/subscriber.rb#33
    def attach_to(namespace, subscriber = T.unsafe(nil), notifier = T.unsafe(nil), inherit_all: T.unsafe(nil)); end

    # source://activesupport//lib/active_support/subscriber.rb#48
    def detach_from(namespace, notifier = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/subscriber.rb#67
    def method_added(event); end

    # source://activesupport//lib/active_support/subscriber.rb#76
    def subscribers; end

    private

    # source://activesupport//lib/active_support/subscriber.rb#83
    def add_event_subscriber(event); end

    # source://activesupport//lib/active_support/subscriber.rb#121
    def fetch_public_methods(subscriber, inherit_all); end

    # source://activesupport//lib/active_support/subscriber.rb#105
    def find_attached_subscriber; end

    # source://activesupport//lib/active_support/subscriber.rb#109
    def invalid_event?(event); end

    # source://activesupport//lib/active_support/subscriber.rb#81
    def namespace; end

    # source://activesupport//lib/active_support/subscriber.rb#81
    def notifier; end

    # source://activesupport//lib/active_support/subscriber.rb#117
    def pattern_subscribed?(pattern); end

    # source://activesupport//lib/active_support/subscriber.rb#113
    def prepare_pattern(event); end

    # source://activesupport//lib/active_support/subscriber.rb#94
    def remove_event_subscriber(event); end

    # source://activesupport//lib/active_support/subscriber.rb#81
    def subscriber; end
  end
end

# source://activesupport//lib/active_support/tagged_logging.rb#28
module ActiveSupport::TaggedLogging
  # source://activesupport//lib/active_support/tagged_logging.rb#95
  def clear_tags!(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/tagged_logging.rb#108
  def flush; end

  # source://activesupport//lib/active_support/tagged_logging.rb#95
  def pop_tags(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/tagged_logging.rb#95
  def push_tags(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/tagged_logging.rb#97
  def tagged(*tags); end

  class << self
    # source://activesupport//lib/active_support/tagged_logging.rb#81
    def new(logger); end
  end
end

# source://activesupport//lib/active_support/tagged_logging.rb#29
module ActiveSupport::TaggedLogging::Formatter
  # source://activesupport//lib/active_support/tagged_logging.rb#31
  def call(severity, timestamp, progname, msg); end

  # source://activesupport//lib/active_support/tagged_logging.rb#53
  def clear_tags!; end

  # source://activesupport//lib/active_support/tagged_logging.rb#57
  def current_tags; end

  # source://activesupport//lib/active_support/tagged_logging.rb#49
  def pop_tags(size = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/tagged_logging.rb#42
  def push_tags(*tags); end

  # source://activesupport//lib/active_support/tagged_logging.rb#35
  def tagged(*tags); end

  # source://activesupport//lib/active_support/tagged_logging.rb#63
  def tags_text; end
end

# source://activesupport//lib/active_support/tagged_logging.rb#73
module ActiveSupport::TaggedLogging::LocalTagStorage
  # source://activesupport//lib/active_support/tagged_logging.rb#74
  def current_tags; end

  # source://activesupport//lib/active_support/tagged_logging.rb#74
  def current_tags=(_arg0); end

  class << self
    # source://activesupport//lib/active_support/tagged_logging.rb#76
    def extended(base); end
  end
end

# source://activesupport//lib/active_support/test_case.rb#19
class ActiveSupport::TestCase < ::Minitest::Test
  include ::ActiveSupport::Testing::SetupAndTeardown
  include ::ActiveSupport::Testing::TaggedLogging
  include ::ActiveSupport::Callbacks
  include ::ActiveSupport::Testing::Assertions
  include ::ActiveSupport::Testing::Deprecation
  include ::ActiveSupport::Testing::TimeHelpers
  include ::ActiveSupport::Testing::FileFixtures
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveSupport::Testing::SetupAndTeardown::ClassMethods
  extend ::ActiveSupport::Testing::Declarative

  # source://activesupport//lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport//lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport//lib/active_support/callbacks.rb#928
  def _run_setup_callbacks(&block); end

  # source://activesupport//lib/active_support/callbacks.rb#928
  def _run_teardown_callbacks(&block); end

  # source://activesupport//lib/active_support/callbacks.rb#940
  def _setup_callbacks; end

  # source://activesupport//lib/active_support/callbacks.rb#940
  def _teardown_callbacks; end

  # source://minitest/5.18.0/lib/minitest/assertions.rb#735
  def assert_no_match(matcher, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.18.0/lib/minitest/assertions.rb#664
  def assert_not_empty(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.18.0/lib/minitest/assertions.rb#675
  def assert_not_equal(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.18.0/lib/minitest/assertions.rb#687
  def assert_not_in_delta(exp, act, delta = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.18.0/lib/minitest/assertions.rb#699
  def assert_not_in_epsilon(a, b, epsilon = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.18.0/lib/minitest/assertions.rb#706
  def assert_not_includes(collection, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.18.0/lib/minitest/assertions.rb#717
  def assert_not_instance_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.18.0/lib/minitest/assertions.rb#727
  def assert_not_kind_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.18.0/lib/minitest/assertions.rb#745
  def assert_not_nil(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.18.0/lib/minitest/assertions.rb#780
  def assert_not_operator(o1, op, o2 = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.18.0/lib/minitest/assertions.rb#803
  def assert_not_predicate(o1, op, msg = T.unsafe(nil)); end

  # source://minitest/5.18.0/lib/minitest/assertions.rb#811
  def assert_not_respond_to(obj, meth, msg = T.unsafe(nil)); end

  # source://minitest/5.18.0/lib/minitest/assertions.rb#820
  def assert_not_same(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.18.0/lib/minitest/assertions.rb#422
  def assert_raise(*exp); end

  # source://activesupport//lib/active_support/testing/file_fixtures.rb#20
  def file_fixture_path; end

  # source://activesupport//lib/active_support/testing/file_fixtures.rb#20
  def file_fixture_path?; end

  # source://activesupport//lib/active_support/test_case.rb#151
  def inspect; end

  # source://minitest/5.18.0/lib/minitest.rb#304
  def method_name; end

  class << self
    # source://activesupport//lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport//lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport//lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport//lib/active_support/callbacks.rb#932
    def _setup_callbacks; end

    # source://activesupport//lib/active_support/callbacks.rb#936
    def _setup_callbacks=(value); end

    # source://activesupport//lib/active_support/callbacks.rb#932
    def _teardown_callbacks; end

    # source://activesupport//lib/active_support/callbacks.rb#936
    def _teardown_callbacks=(value); end

    # source://activesupport//lib/active_support/testing/file_fixtures.rb#20
    def file_fixture_path; end

    # source://activesupport//lib/active_support/testing/file_fixtures.rb#20
    def file_fixture_path=(value); end

    # source://activesupport//lib/active_support/testing/file_fixtures.rb#20
    def file_fixture_path?; end

    # source://activesupport//lib/active_support/test_case.rb#79
    def parallelize(workers: T.unsafe(nil), with: T.unsafe(nil), threshold: T.unsafe(nil)); end

    # source://activesupport//lib/active_support/test_case.rb#101
    def parallelize_setup(&block); end

    # source://activesupport//lib/active_support/test_case.rb#118
    def parallelize_teardown(&block); end

    # source://activesupport//lib/active_support/test_case.rb#42
    def test_order; end

    # source://activesupport//lib/active_support/test_case.rb#32
    def test_order=(new_order); end
  end
end

# source://activesupport//lib/active_support/test_case.rb#20
ActiveSupport::TestCase::Assertion = Minitest::Assertion

# source://activesupport//lib/active_support/testing/stream.rb#4
module ActiveSupport::Testing; end

# source://activesupport//lib/active_support/testing/assertions.rb#7
module ActiveSupport::Testing::Assertions
  # source://activesupport//lib/active_support/testing/assertions.rb#175
  def assert_changes(expression, message = T.unsafe(nil), from: T.unsafe(nil), to: T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/testing/assertions.rb#86
  def assert_difference(expression, *args, &block); end

  # source://activesupport//lib/active_support/testing/assertions.rb#222
  def assert_no_changes(expression, message = T.unsafe(nil), from: T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/testing/assertions.rb#137
  def assert_no_difference(expression, message = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/testing/assertions.rb#21
  def assert_not(object, message = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/testing/assertions.rb#33
  def assert_nothing_raised; end

  private

  # source://activesupport//lib/active_support/testing/assertions.rb#249
  def _assert_nothing_raised_or_warn(assertion, &block); end
end

# source://activesupport//lib/active_support/testing/assertions.rb#8
ActiveSupport::Testing::Assertions::UNTRACKED = T.let(T.unsafe(nil), Object)

# source://activesupport//lib/active_support/testing/constant_lookup.rb#32
module ActiveSupport::Testing::ConstantLookup
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveSupport::Testing::ConstantLookup::ClassMethods
end

# source://activesupport//lib/active_support/testing/constant_lookup.rb#35
module ActiveSupport::Testing::ConstantLookup::ClassMethods
  # source://activesupport//lib/active_support/testing/constant_lookup.rb#36
  def determine_constant_from_test_name(test_name); end
end

# source://activesupport//lib/active_support/testing/declarative.rb#5
module ActiveSupport::Testing::Declarative
  # source://activesupport//lib/active_support/testing/declarative.rb#13
  def test(name, &block); end
end

# source://activesupport//lib/active_support/testing/deprecation.rb#7
module ActiveSupport::Testing::Deprecation
  # source://activesupport//lib/active_support/testing/deprecation.rb#31
  def assert_deprecated(match = T.unsafe(nil), deprecator = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/testing/deprecation.rb#56
  def assert_not_deprecated(deprecator = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/testing/deprecation.rb#75
  def collect_deprecations(deprecator = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/testing/file_fixtures.rb#16
module ActiveSupport::Testing::FileFixtures
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods

  # source://activesupport//lib/active_support/testing/file_fixtures.rb#26
  def file_fixture(fixture_name); end

  module GeneratedClassMethods
    def file_fixture_path; end
    def file_fixture_path=(value); end
    def file_fixture_path?; end
  end

  module GeneratedInstanceMethods
    def file_fixture_path; end
    def file_fixture_path?; end
  end
end

# source://activesupport//lib/active_support/testing/isolation.rb#5
module ActiveSupport::Testing::Isolation
  include ::ActiveSupport::Testing::Isolation::Forking

  # source://activesupport//lib/active_support/testing/isolation.rb#18
  def run; end

  class << self
    # source://activesupport//lib/active_support/testing/isolation.rb#14
    def forking_env?; end

    # source://activesupport//lib/active_support/testing/isolation.rb#8
    def included(klass); end
  end
end

# source://activesupport//lib/active_support/testing/isolation.rb#26
module ActiveSupport::Testing::Isolation::Forking
  # source://activesupport//lib/active_support/testing/isolation.rb#27
  def run_in_isolation(&blk); end
end

# source://activesupport//lib/active_support/testing/isolation.rb#63
module ActiveSupport::Testing::Isolation::Subprocess
  # source://activesupport//lib/active_support/testing/isolation.rb#68
  def run_in_isolation(&blk); end
end

# source://activesupport//lib/active_support/testing/isolation.rb#64
ActiveSupport::Testing::Isolation::Subprocess::ORIG_ARGV = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/testing/parallelization/server.rb#8
class ActiveSupport::Testing::Parallelization
  # source://activesupport//lib/active_support/testing/parallelization.rb#28
  def initialize(worker_count); end

  # source://activesupport//lib/active_support/testing/parallelization.rb#41
  def <<(work); end

  # source://activesupport//lib/active_support/testing/parallelization.rb#18
  def after_fork_hooks; end

  # source://activesupport//lib/active_support/testing/parallelization.rb#26
  def run_cleanup_hooks; end

  # source://activesupport//lib/active_support/testing/parallelization.rb#49
  def shutdown; end

  # source://activesupport//lib/active_support/testing/parallelization.rb#45
  def size; end

  # source://activesupport//lib/active_support/testing/parallelization.rb#35
  def start; end

  class << self
    # source://activesupport//lib/active_support/testing/parallelization.rb#14
    def after_fork_hook(&blk); end

    # source://activesupport//lib/active_support/testing/parallelization.rb#18
    def after_fork_hooks; end

    # source://activesupport//lib/active_support/testing/parallelization.rb#22
    def run_cleanup_hook(&blk); end

    # source://activesupport//lib/active_support/testing/parallelization.rb#26
    def run_cleanup_hooks; end
  end
end

# source://activesupport//lib/active_support/testing/parallelization/server.rb#9
class ActiveSupport::Testing::Parallelization::Server
  include ::DRb::DRbUndumped

  # source://activesupport//lib/active_support/testing/parallelization/server.rb#12
  def initialize; end

  # source://activesupport//lib/active_support/testing/parallelization/server.rb#28
  def <<(o); end

  # source://activesupport//lib/active_support/testing/parallelization/server.rb#48
  def active_workers?; end

  # source://activesupport//lib/active_support/testing/parallelization/server.rb#52
  def interrupt; end

  # source://activesupport//lib/active_support/testing/parallelization/server.rb#33
  def pop; end

  # source://activesupport//lib/active_support/testing/parallelization/server.rb#18
  def record(reporter, result); end

  # source://activesupport//lib/active_support/testing/parallelization/server.rb#56
  def shutdown; end

  # source://activesupport//lib/active_support/testing/parallelization/server.rb#40
  def start_worker(worker_id); end

  # source://activesupport//lib/active_support/testing/parallelization/server.rb#44
  def stop_worker(worker_id); end
end

# source://activesupport//lib/active_support/testing/parallelization/worker.rb#6
class ActiveSupport::Testing::Parallelization::Worker
  # source://activesupport//lib/active_support/testing/parallelization/worker.rb#7
  def initialize(number, url); end

  # source://activesupport//lib/active_support/testing/parallelization/worker.rb#80
  def after_fork; end

  # source://activesupport//lib/active_support/testing/parallelization/worker.rb#42
  def perform_job(job); end

  # source://activesupport//lib/active_support/testing/parallelization/worker.rb#86
  def run_cleanup; end

  # source://activesupport//lib/active_support/testing/parallelization/worker.rb#56
  def safe_record(reporter, result); end

  # source://activesupport//lib/active_support/testing/parallelization/worker.rb#14
  def start; end

  # source://activesupport//lib/active_support/testing/parallelization/worker.rb#36
  def work_from_queue; end

  private

  # source://activesupport//lib/active_support/testing/parallelization/worker.rb#93
  def add_setup_exception(result); end

  # source://activesupport//lib/active_support/testing/parallelization/worker.rb#97
  def set_process_title(status); end
end

# source://activesupport//lib/active_support/testing/parallelize_executor.rb#5
class ActiveSupport::Testing::ParallelizeExecutor
  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#8
  def initialize(size:, with:, threshold: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#21
  def <<(work); end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#6
  def parallelize_with; end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#25
  def shutdown; end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#6
  def size; end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#14
  def start; end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#6
  def threshold; end

  private

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#34
  def build_parallel_executor; end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#67
  def execution_info; end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#30
  def parallel_executor; end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#46
  def parallelize; end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#51
  def parallelized?; end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#55
  def should_parallelize?; end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#63
  def show_execution_info; end

  # source://activesupport//lib/active_support/testing/parallelize_executor.rb#59
  def tests_count; end
end

# source://activesupport//lib/active_support/testing/setup_and_teardown.rb#20
module ActiveSupport::Testing::SetupAndTeardown
  # source://activesupport//lib/active_support/testing/setup_and_teardown.rb#44
  def after_teardown; end

  # source://activesupport//lib/active_support/testing/setup_and_teardown.rb#39
  def before_setup; end

  class << self
    # source://activesupport//lib/active_support/testing/setup_and_teardown.rb#21
    def prepended(klass); end
  end
end

# source://activesupport//lib/active_support/testing/setup_and_teardown.rb#27
module ActiveSupport::Testing::SetupAndTeardown::ClassMethods
  # source://activesupport//lib/active_support/testing/setup_and_teardown.rb#29
  def setup(*args, &block); end

  # source://activesupport//lib/active_support/testing/setup_and_teardown.rb#34
  def teardown(*args, &block); end
end

# source://activesupport//lib/active_support/testing/time_helpers.rb#10
class ActiveSupport::Testing::SimpleStubs
  # source://activesupport//lib/active_support/testing/time_helpers.rb#13
  def initialize; end

  # source://activesupport//lib/active_support/testing/time_helpers.rb#24
  def stub_object(object, method_name, &block); end

  # source://activesupport//lib/active_support/testing/time_helpers.rb#54
  def stubbed?; end

  # source://activesupport//lib/active_support/testing/time_helpers.rb#49
  def stubbing(object, method_name); end

  # source://activesupport//lib/active_support/testing/time_helpers.rb#38
  def unstub_all!; end

  private

  # source://activesupport//lib/active_support/testing/time_helpers.rb#60
  def unstub_object(stub); end
end

# source://activesupport//lib/active_support/testing/time_helpers.rb#11
class ActiveSupport::Testing::SimpleStubs::Stub < ::Struct
  def method_name; end
  def method_name=(_); end
  def object; end
  def object=(_); end
  def original_method; end
  def original_method=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activesupport//lib/active_support/testing/stream.rb#5
module ActiveSupport::Testing::Stream
  private

  # source://activesupport//lib/active_support/testing/stream.rb#23
  def capture(stream); end

  # source://activesupport//lib/active_support/testing/stream.rb#17
  def quietly(&block); end

  # source://activesupport//lib/active_support/testing/stream.rb#7
  def silence_stream(stream); end
end

# source://activesupport//lib/active_support/testing/tagged_logging.rb#7
module ActiveSupport::Testing::TaggedLogging
  # source://activesupport//lib/active_support/testing/tagged_logging.rb#10
  def before_setup; end

  # source://activesupport//lib/active_support/testing/tagged_logging.rb#8
  def tagged_logger=(_arg0); end

  private

  # source://activesupport//lib/active_support/testing/tagged_logging.rb#22
  def tagged_logger; end
end

# source://activesupport//lib/active_support/testing/time_helpers.rb#69
module ActiveSupport::Testing::TimeHelpers
  # source://activesupport//lib/active_support/testing/time_helpers.rb#70
  def after_teardown; end

  # source://activesupport//lib/active_support/testing/time_helpers.rb#234
  def freeze_time(&block); end

  # source://activesupport//lib/active_support/testing/time_helpers.rb#93
  def travel(duration, &block); end

  # source://activesupport//lib/active_support/testing/time_helpers.rb#208
  def travel_back; end

  # source://activesupport//lib/active_support/testing/time_helpers.rb#128
  def travel_to(date_or_time); end

  # source://activesupport//lib/active_support/testing/time_helpers.rb#208
  def unfreeze_time; end

  private

  # source://activesupport//lib/active_support/testing/time_helpers.rb#243
  def in_block; end

  # source://activesupport//lib/active_support/testing/time_helpers.rb#243
  def in_block=(_arg0); end

  # source://activesupport//lib/active_support/testing/time_helpers.rb#239
  def simple_stubs; end
end

# source://activesupport//lib/active_support/time_with_zone.rb#42
class ActiveSupport::TimeWithZone
  include ::DateAndTime::Compatibility
  include ::Comparable

  # source://activesupport//lib/active_support/time_with_zone.rb#61
  def initialize(utc_time, time_zone, local_time = T.unsafe(nil), period = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#328
  def +(other); end

  # source://activesupport//lib/active_support/time_with_zone.rb#362
  def -(other); end

  # source://activesupport//lib/active_support/time_with_zone.rb#261
  def <=>(other); end

  # source://activesupport//lib/active_support/time_with_zone.rb#523
  def acts_like_time?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#451
  def advance(options); end

  def after?(_arg0); end

  # source://activesupport//lib/active_support/time_with_zone.rb#390
  def ago(other); end

  # source://activesupport//lib/active_support/time_with_zone.rb#176
  def as_json(options = T.unsafe(nil)); end

  def before?(_arg0); end

  # source://activesupport//lib/active_support/time_with_zone.rb#269
  def between?(min, max); end

  # source://activesupport//lib/active_support/time_with_zone.rb#534
  def blank?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#411
  def change(options); end

  # source://activesupport//lib/active_support/time_with_zone.rb#73
  def comparable_time; end

  # source://activesupport//lib/active_support/time_with_zone.rb#463
  def day; end

  # source://activesupport//lib/active_support/time_with_zone.rb#104
  def dst?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#188
  def encode_with(coder); end

  # source://activesupport//lib/active_support/time_with_zone.rb#304
  def eql?(other); end

  # source://activesupport//lib/active_support/time_with_zone.rb#135
  def formatted_offset(colon = T.unsafe(nil), alternate_utc_string = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#538
  def freeze; end

  # source://activesupport//lib/active_support/time_with_zone.rb#299
  def future?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#73
  def getgm; end

  # source://activesupport//lib/active_support/time_with_zone.rb#93
  def getlocal(utc_offset = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#73
  def getutc; end

  # source://activesupport//lib/active_support/time_with_zone.rb#115
  def gmt?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#121
  def gmt_offset; end

  # source://activesupport//lib/active_support/time_with_zone.rb#73
  def gmtime; end

  # source://activesupport//lib/active_support/time_with_zone.rb#121
  def gmtoff; end

  # source://activesupport//lib/active_support/time_with_zone.rb#308
  def hash; end

  # source://activesupport//lib/active_support/time_with_zone.rb#463
  def hour; end

  # source://activesupport//lib/active_support/time_with_zone.rb#196
  def httpdate; end

  # source://activesupport//lib/active_support/time_with_zone.rb#328
  def in(other); end

  # source://activesupport//lib/active_support/time_with_zone.rb#87
  def in_time_zone(new_zone = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#184
  def init_with(coder); end

  # source://activesupport//lib/active_support/time_with_zone.rb#150
  def inspect; end

  # source://activesupport//lib/active_support/time_with_zone.rb#528
  def is_a?(klass); end

  # source://activesupport//lib/active_support/time_with_zone.rb#104
  def isdst; end

  # source://activesupport//lib/active_support/time_with_zone.rb#158
  def iso8601(fraction_digits = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#528
  def kind_of?(klass); end

  # source://activesupport//lib/active_support/time_with_zone.rb#93
  def localtime(utc_offset = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#544
  def marshal_dump; end

  # source://activesupport//lib/active_support/time_with_zone.rb#548
  def marshal_load(variables); end

  # source://activesupport//lib/active_support/time_with_zone.rb#463
  def mday; end

  # source://activesupport//lib/active_support/time_with_zone.rb#569
  def method_missing(sym, *args, &block); end

  # source://activesupport//lib/active_support/time_with_zone.rb#463
  def min; end

  # source://activesupport//lib/active_support/time_with_zone.rb#463
  def mon; end

  # source://activesupport//lib/active_support/time_with_zone.rb#463
  def month; end

  # source://activesupport//lib/active_support/time_with_zone.rb#286
  def next_day?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#463
  def nsec; end

  # source://activesupport//lib/active_support/time_with_zone.rb#274
  def past?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#82
  def period; end

  # source://activesupport//lib/active_support/time_with_zone.rb#293
  def prev_day?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#554
  def respond_to?(sym, include_priv = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#204
  def rfc2822; end

  # source://activesupport//lib/active_support/time_with_zone.rb#158
  def rfc3339(fraction_digits = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#204
  def rfc822; end

  # source://activesupport//lib/active_support/time_with_zone.rb#463
  def sec; end

  # source://activesupport//lib/active_support/time_with_zone.rb#328
  def since(other); end

  # source://activesupport//lib/active_support/time_with_zone.rb#255
  def strftime(format); end

  # source://activesupport//lib/active_support/time_with_zone.rb#68
  def time; end

  # source://activesupport//lib/active_support/time_with_zone.rb#59
  def time_zone; end

  # source://activesupport//lib/active_support/time_with_zone.rb#474
  def to_a; end

  # source://activesupport//lib/active_support/time_with_zone.rb#463
  def to_date; end

  # source://activesupport//lib/active_support/time_with_zone.rb#507
  def to_datetime; end

  # source://activesupport//lib/active_support/time_with_zone.rb#482
  def to_f; end

  # source://activesupport//lib/active_support/time_with_zone.rb#241
  def to_formatted_s(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#241
  def to_fs(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#490
  def to_i; end

  # source://activesupport//lib/active_support/time_with_zone.rb#499
  def to_r; end

  # source://activesupport//lib/active_support/time_with_zone.rb#212
  def to_s(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#514
  def to_time; end

  # source://activesupport//lib/active_support/time_with_zone.rb#280
  def today?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#286
  def tomorrow?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#490
  def tv_sec; end

  # source://activesupport//lib/active_support/time_with_zone.rb#463
  def usec; end

  # source://activesupport//lib/active_support/time_with_zone.rb#73
  def utc; end

  # source://activesupport//lib/active_support/time_with_zone.rb#115
  def utc?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#121
  def utc_offset; end

  # source://activesupport//lib/active_support/time_with_zone.rb#463
  def wday; end

  # source://activesupport//lib/active_support/time_with_zone.rb#158
  def xmlschema(fraction_digits = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#463
  def yday; end

  # source://activesupport//lib/active_support/time_with_zone.rb#463
  def year; end

  # source://activesupport//lib/active_support/time_with_zone.rb#293
  def yesterday?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#143
  def zone; end

  private

  # source://activesupport//lib/active_support/time_with_zone.rb#605
  def duration_of_variable_length?(obj); end

  # source://activesupport//lib/active_support/time_with_zone.rb#586
  def get_period_and_ensure_valid_local_time(period); end

  # source://activesupport//lib/active_support/time_with_zone.rb#578
  def incorporate_utc_offset(time, offset); end

  # source://activesupport//lib/active_support/time_with_zone.rb#562
  def respond_to_missing?(sym, include_priv); end

  # source://activesupport//lib/active_support/time_with_zone.rb#599
  def transfer_time_values_to_utc_constructor(time); end

  # source://activesupport//lib/active_support/time_with_zone.rb#609
  def wrap_with_time_zone(time); end

  class << self
    # source://activesupport//lib/active_support/time_with_zone.rb#44
    def name; end
  end
end

# source://activesupport//lib/active_support/time_with_zone.rb#209
ActiveSupport::TimeWithZone::NOT_SET = T.let(T.unsafe(nil), Object)

# source://activesupport//lib/active_support/time_with_zone.rb#55
ActiveSupport::TimeWithZone::PRECISIONS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/time_with_zone.rb#576
ActiveSupport::TimeWithZone::SECONDS_PER_DAY = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/values/time_zone.rb#29
class ActiveSupport::TimeZone
  include ::Comparable

  # source://activesupport//lib/active_support/values/time_zone.rb#301
  def initialize(name, utc_offset = T.unsafe(nil), tzinfo = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/values/time_zone.rb#324
  def <=>(zone); end

  # source://activesupport//lib/active_support/values/time_zone.rb#333
  def =~(re); end

  # source://activesupport//lib/active_support/values/time_zone.rb#370
  def at(*args); end

  # source://activesupport//lib/active_support/values/time_zone.rb#566
  def encode_with(coder); end

  # source://activesupport//lib/active_support/values/time_zone.rb#318
  def formatted_offset(colon = T.unsafe(nil), alternate_utc_string = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/values/time_zone.rb#562
  def init_with(coder); end

  # source://activesupport//lib/active_support/values/time_zone.rb#387
  def iso8601(str); end

  # source://activesupport//lib/active_support/values/time_zone.rb#354
  def local(*args); end

  # source://activesupport//lib/active_support/values/time_zone.rb#542
  def local_to_utc(time, dst = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/values/time_zone.rb#339
  def match?(re); end

  # source://activesupport//lib/active_support/values/time_zone.rb#294
  def name; end

  # source://activesupport//lib/active_support/values/time_zone.rb#507
  def now; end

  # source://activesupport//lib/active_support/values/time_zone.rb#444
  def parse(str, now = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/values/time_zone.rb#554
  def period_for_local(time, dst = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/values/time_zone.rb#548
  def period_for_utc(time); end

  # source://activesupport//lib/active_support/values/time_zone.rb#558
  def periods_for_local(time); end

  # source://activesupport//lib/active_support/values/time_zone.rb#460
  def rfc3339(str); end

  # source://activesupport//lib/active_support/values/time_zone.rb#498
  def strptime(str, format, now = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/values/time_zone.rb#345
  def to_s; end

  # source://activesupport//lib/active_support/values/time_zone.rb#512
  def today; end

  # source://activesupport//lib/active_support/values/time_zone.rb#517
  def tomorrow; end

  # source://activesupport//lib/active_support/values/time_zone.rb#295
  def tzinfo; end

  # source://activesupport//lib/active_support/values/time_zone.rb#308
  def utc_offset; end

  # source://activesupport//lib/active_support/values/time_zone.rb#533
  def utc_to_local(time); end

  # source://activesupport//lib/active_support/values/time_zone.rb#522
  def yesterday; end

  private

  # source://activesupport//lib/active_support/values/time_zone.rb#572
  def parts_to_time(parts, now); end

  # source://activesupport//lib/active_support/values/time_zone.rb#597
  def time_now; end

  class << self
    # source://activesupport//lib/active_support/values/time_zone.rb#230
    def [](arg); end

    # source://activesupport//lib/active_support/values/time_zone.rb#221
    def all; end

    # source://activesupport//lib/active_support/values/time_zone.rb#263
    def clear; end

    # source://activesupport//lib/active_support/values/time_zone.rb#258
    def country_zones(country_code); end

    def create(*_arg0); end

    # source://activesupport//lib/active_support/values/time_zone.rb#205
    def find_tzinfo(name); end

    # source://activesupport//lib/active_support/values/time_zone.rb#214
    def new(name); end

    # source://activesupport//lib/active_support/values/time_zone.rb#197
    def seconds_to_utc_offset(seconds, colon = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/values/time_zone.rb#252
    def us_zones; end

    private

    # source://activesupport//lib/active_support/values/time_zone.rb#271
    def load_country_zones(code); end

    # source://activesupport//lib/active_support/values/time_zone.rb#285
    def zones_map; end
  end
end

# source://activesupport//lib/active_support/values/time_zone.rb#31
ActiveSupport::TimeZone::MAPPING = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/values/time_zone.rb#186
ActiveSupport::TimeZone::UTC_OFFSET_WITHOUT_COLON = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/values/time_zone.rb#185
ActiveSupport::TimeZone::UTC_OFFSET_WITH_COLON = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/core_ext/object/json.rb#35
module ActiveSupport::ToJsonWithActiveSupportEncoder
  # source://activesupport//lib/active_support/core_ext/object/json.rb#36
  def to_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/try.rb#6
module ActiveSupport::Tryable
  # source://activesupport//lib/active_support/core_ext/object/try.rb#7
  def try(*args, **_arg1, &block); end

  # source://activesupport//lib/active_support/core_ext/object/try.rb#20
  def try!(*args, **_arg1, &block); end
end

# source://activesupport//lib/active_support/gem_version.rb#9
module ActiveSupport::VERSION; end

# source://activesupport//lib/active_support/gem_version.rb#10
ActiveSupport::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/gem_version.rb#11
ActiveSupport::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/gem_version.rb#13
ActiveSupport::VERSION::PRE = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/gem_version.rb#15
ActiveSupport::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/gem_version.rb#12
ActiveSupport::VERSION::TINY = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/core_ext/hash/conversions.rb#140
class ActiveSupport::XMLConverter
  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#151
  def initialize(xml, disallowed_types = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#156
  def to_h; end

  private

  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#222
  def become_array?(value); end

  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#218
  def become_content?(value); end

  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#226
  def become_empty_string?(value); end

  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#232
  def become_hash?(value); end

  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#172
  def deep_to_h(value); end

  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#241
  def garbage?(value); end

  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#161
  def normalize_keys(params); end

  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#236
  def nothing?(value); end

  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#257
  def process_array(value); end

  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#248
  def process_content(value); end

  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#185
  def process_hash(value); end
end

# source://activesupport//lib/active_support/core_ext/hash/conversions.rb#149
ActiveSupport::XMLConverter::DISALLOWED_TYPES = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/core_ext/hash/conversions.rb#143
class ActiveSupport::XMLConverter::DisallowedType < ::StandardError
  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#144
  def initialize(type); end
end

# source://activesupport//lib/active_support/xml_mini.rb#17
module ActiveSupport::XmlMini
  extend ::ActiveSupport::XmlMini

  # source://activesupport//lib/active_support/xml_mini.rb#97
  def backend; end

  # source://activesupport//lib/active_support/xml_mini.rb#101
  def backend=(name); end

  # source://activesupport//lib/active_support/xml_mini.rb#92
  def depth; end

  # source://activesupport//lib/active_support/xml_mini.rb#92
  def depth=(_arg0); end

  # source://activesupport//lib/active_support/xml_mini.rb#95
  def parse(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/xml_mini.rb#148
  def rename_key(key, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/xml_mini.rb#115
  def to_tag(key, value, options); end

  # source://activesupport//lib/active_support/xml_mini.rb#107
  def with_backend(name); end

  private

  # source://activesupport//lib/active_support/xml_mini.rb#159
  def _dasherize(key); end

  # source://activesupport//lib/active_support/xml_mini.rb#166
  def _parse_binary(bin, entity); end

  # source://activesupport//lib/active_support/xml_mini.rb#175
  def _parse_file(file, entity); end

  # source://activesupport//lib/active_support/xml_mini.rb#191
  def cast_backend_name_to_module(name); end

  # source://activesupport//lib/active_support/xml_mini.rb#183
  def current_thread_backend; end

  # source://activesupport//lib/active_support/xml_mini.rb#187
  def current_thread_backend=(name); end
end

# source://activesupport//lib/active_support/xml_mini.rb#34
ActiveSupport::XmlMini::DEFAULT_ENCODINGS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/xml_mini.rb#55
ActiveSupport::XmlMini::FORMATTING = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/xml_mini.rb#22
module ActiveSupport::XmlMini::FileLike
  # source://activesupport//lib/active_support/xml_mini.rb#29
  def content_type; end

  # source://activesupport//lib/active_support/xml_mini.rb#23
  def content_type=(_arg0); end

  # source://activesupport//lib/active_support/xml_mini.rb#25
  def original_filename; end

  # source://activesupport//lib/active_support/xml_mini.rb#23
  def original_filename=(_arg0); end
end

# source://activesupport//lib/active_support/xml_mini.rb#65
ActiveSupport::XmlMini::PARSING = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/xml_mini.rb#39
ActiveSupport::XmlMini::TYPE_NAMES = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/xml_mini/rexml.rb#8
module ActiveSupport::XmlMini_REXML
  extend ::ActiveSupport::XmlMini_REXML

  # source://activesupport//lib/active_support/xml_mini/rexml.rb#20
  def parse(data); end

  private

  # source://activesupport//lib/active_support/xml_mini/rexml.rb#63
  def collapse(element, depth); end

  # source://activesupport//lib/active_support/xml_mini/rexml.rb#133
  def empty_content?(element); end

  # source://activesupport//lib/active_support/xml_mini/rexml.rb#123
  def get_attributes(element); end

  # source://activesupport//lib/active_support/xml_mini/rexml.rb#103
  def merge!(hash, key, value); end

  # source://activesupport//lib/active_support/xml_mini/rexml.rb#54
  def merge_element!(hash, element, depth); end

  # source://activesupport//lib/active_support/xml_mini/rexml.rb#81
  def merge_texts!(hash, element); end

  # source://activesupport//lib/active_support/xml_mini/rexml.rb#41
  def require_rexml; end
end

# source://activesupport//lib/active_support/xml_mini/rexml.rb#11
ActiveSupport::XmlMini_REXML::CONTENT_KEY = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/core_ext/object/blank.rb#83
class Array
  include ::Enumerable

  # source://activesupport//lib/active_support/core_ext/object/json.rb#158
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#325
  def compact_blank!; end

  # source://activesupport//lib/active_support/core_ext/object/deep_dup.rb#29
  def deep_dup; end

  # source://activesupport//lib/active_support/core_ext/array/access.rb#47
  def excluding(*elements); end

  # source://activesupport//lib/active_support/core_ext/array/extract.rb#10
  def extract!; end

  # source://activesupport//lib/active_support/core_ext/array/extract_options.rb#24
  def extract_options!; end

  # source://activesupport//lib/active_support/core_ext/array/access.rb#76
  def fifth; end

  # source://activesupport//lib/active_support/core_ext/array/access.rb#83
  def forty_two; end

  # source://activesupport//lib/active_support/core_ext/array/access.rb#69
  def fourth; end

  # source://activesupport//lib/active_support/core_ext/array/access.rb#12
  def from(position); end

  # source://activesupport//lib/active_support/core_ext/array/grouping.rb#62
  def in_groups(number, fill_with = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/core_ext/array/grouping.rb#22
  def in_groups_of(number, fill_with = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/core_ext/array/access.rb#36
  def including(*elements); end

  # source://activesupport//lib/active_support/core_ext/array/inquiry.rb#16
  def inquiry; end

  # source://activesupport//lib/active_support/core_ext/array/access.rb#55
  def second; end

  # source://activesupport//lib/active_support/core_ext/array/access.rb#97
  def second_to_last; end

  # source://activesupport//lib/active_support/core_ext/array/grouping.rb#93
  def split(value = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#310
  def sum(init = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/core_ext/array/access.rb#62
  def third; end

  # source://activesupport//lib/active_support/core_ext/array/access.rb#90
  def third_to_last; end

  # source://activesupport//lib/active_support/core_ext/array/access.rb#24
  def to(position); end

  # source://activesupport//lib/active_support/core_ext/array/conversions.rb#94
  def to_formatted_s(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/array/conversions.rb#94
  def to_fs(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#42
  def to_param; end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#50
  def to_query(key); end

  # source://activesupport//lib/active_support/core_ext/array/deprecated_conversions.rb#5
  def to_s(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/array/conversions.rb#60
  def to_sentence(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/array/conversions.rb#184
  def to_xml(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/array/access.rb#47
  def without(*elements); end

  class << self
    # source://activesupport//lib/active_support/core_ext/array/wrap.rb#39
    def wrap(object); end
  end
end

# source://activesupport//lib/active_support/core_ext/array/deprecated_conversions.rb#4
Array::NOT_SET = T.let(T.unsafe(nil), Object)

# source://activesupport//lib/active_support/core_ext/object/json.rb#118
class BigDecimal < ::Numeric
  include ::ActiveSupport::BigDecimalWithDefaultFormat
  include ::ActiveSupport::NumericWithFormat
  include ::ActiveSupport::DeprecatedNumericWithFormat

  # source://activesupport//lib/active_support/core_ext/object/json.rb#128
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/numeric/deprecated_conversions.rb#5
  def to_s(format = T.unsafe(nil), options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/class/attribute.rb#5
class Class < ::Module
  # source://activesupport//lib/active_support/core_ext/class/attribute.rb#85
  def class_attribute(*attrs, instance_accessor: T.unsafe(nil), instance_reader: T.unsafe(nil), instance_writer: T.unsafe(nil), instance_predicate: T.unsafe(nil), default: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/class/subclasses.rb#20
  def descendants; end
end

# source://activesupport//lib/active_support/core_ext/date/zones.rb#6
class Date
  include ::Comparable
  include ::DateAndTime::Zones
  include ::DateAndTime::Calculations

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#90
  def +(other); end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#100
  def -(other); end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#137
  def <=>(other); end

  # source://activesupport//lib/active_support/core_ext/date/acts_like.rb#7
  def acts_like_date?; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#112
  def advance(options); end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#55
  def ago(seconds); end

  # source://activesupport//lib/active_support/core_ext/object/json.rb#197
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#67
  def at_beginning_of_day; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#85
  def at_end_of_day; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#75
  def at_midday; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#75
  def at_middle_of_day; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#67
  def at_midnight; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#75
  def at_noon; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#67
  def beginning_of_day; end

  # source://activesupport//lib/active_support/core_ext/date/blank.rb#11
  def blank?; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#128
  def change(options); end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#137
  def compare_with_coercion(other); end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#85
  def end_of_day; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#61
  def in(seconds); end

  # source://activesupport//lib/active_support/core_ext/date/conversions.rb#62
  def inspect; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#75
  def midday; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#75
  def middle_of_day; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#67
  def midnight; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#100
  def minus_with_duration(other); end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#75
  def noon; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#90
  def plus_with_duration(other); end

  # source://activesupport//lib/active_support/core_ext/date/conversions.rb#62
  def readable_inspect; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#61
  def since(seconds); end

  # source://activesupport//lib/active_support/core_ext/date/conversions.rb#47
  def to_formatted_s(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date/conversions.rb#47
  def to_fs(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date/deprecated_conversions.rb#7
  def to_s(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date/conversions.rb#82
  def to_time(form = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date/conversions.rb#94
  def xmlschema; end

  class << self
    # source://activesupport//lib/active_support/core_ext/date/calculations.rb#19
    def beginning_of_week; end

    # source://activesupport//lib/active_support/core_ext/date/calculations.rb#27
    def beginning_of_week=(week_start); end

    # source://activesupport//lib/active_support/core_ext/date/calculations.rb#14
    def beginning_of_week_default; end

    # source://activesupport//lib/active_support/core_ext/date/calculations.rb#14
    def beginning_of_week_default=(_arg0); end

    # source://activesupport//lib/active_support/core_ext/date/calculations.rb#48
    def current; end

    # source://activesupport//lib/active_support/core_ext/date/calculations.rb#32
    def find_beginning_of_week!(week_start); end

    # source://activesupport//lib/active_support/core_ext/date/calculations.rb#43
    def tomorrow; end

    # source://activesupport//lib/active_support/core_ext/date/calculations.rb#38
    def yesterday; end
  end
end

# source://activesupport//lib/active_support/core_ext/date/conversions.rb#9
Date::DATE_FORMATS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/core_ext/date/deprecated_conversions.rb#6
Date::NOT_SET = T.let(T.unsafe(nil), Object)

# source://activesupport//lib/active_support/core_ext/date_and_time/compatibility.rb#5
module DateAndTime; end

# source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#7
module DateAndTime::Calculations
  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#72
  def after?(date_or_time); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#300
  def all_day; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#311
  def all_month; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#316
  def all_quarter; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#306
  def all_week(start_day = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#321
  def all_year; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#125
  def at_beginning_of_month; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#139
  def at_beginning_of_quarter; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#257
  def at_beginning_of_week(start_day = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#169
  def at_beginning_of_year; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#286
  def at_end_of_month; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#154
  def at_end_of_quarter; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#273
  def at_end_of_week(start_day = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#294
  def at_end_of_year; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#67
  def before?(date_or_time); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#125
  def beginning_of_month; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#139
  def beginning_of_quarter; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#257
  def beginning_of_week(start_day = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#169
  def beginning_of_year; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#77
  def days_ago(days); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#82
  def days_since(days); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#248
  def days_to_week_start(start_day = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#286
  def end_of_month; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#154
  def end_of_quarter; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#273
  def end_of_week(start_day = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#294
  def end_of_year; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#52
  def future?; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#230
  def last_month; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#235
  def last_quarter; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#213
  def last_week(start_day = T.unsafe(nil), same_time: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#220
  def last_weekday; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#241
  def last_year; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#265
  def monday; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#97
  def months_ago(months); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#102
  def months_since(months); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#35
  def next_day?; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#330
  def next_occurring(day_of_week); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#205
  def next_quarter; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#190
  def next_week(given_day_in_next_week = T.unsafe(nil), same_time: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#196
  def next_weekday; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#62
  def on_weekday?; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#57
  def on_weekend?; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#47
  def past?; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#41
  def prev_day?; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#341
  def prev_occurring(day_of_week); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#235
  def prev_quarter; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#213
  def prev_week(start_day = T.unsafe(nil), same_time: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#220
  def prev_weekday; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#280
  def sunday; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#30
  def today?; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#25
  def tomorrow; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#35
  def tomorrow?; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#87
  def weeks_ago(weeks); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#92
  def weeks_since(weeks); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#107
  def years_ago(years); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#112
  def years_since(years); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#20
  def yesterday; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#41
  def yesterday?; end

  private

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#360
  def copy_time_to(other); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#356
  def days_span(day); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#348
  def first_hour(date_or_time); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#352
  def last_hour(date_or_time); end
end

# source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#8
DateAndTime::Calculations::DAYS_INTO_WEEK = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#17
DateAndTime::Calculations::WEEKEND_DAYS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/core_ext/date_and_time/compatibility.rb#6
module DateAndTime::Compatibility
  # source://activesupport//lib/active_support/core_ext/date_and_time/compatibility.rb#14
  def preserve_timezone; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/compatibility.rb#29
  def utc_to_local_returns_utc_offset_times; end

  class << self
    # source://activesupport//lib/active_support/core_ext/date_and_time/compatibility.rb#14
    def preserve_timezone; end

    # source://activesupport//lib/active_support/core_ext/date_and_time/compatibility.rb#14
    def preserve_timezone=(val); end

    # source://activesupport//lib/active_support/core_ext/date_and_time/compatibility.rb#29
    def utc_to_local_returns_utc_offset_times; end

    # source://activesupport//lib/active_support/core_ext/date_and_time/compatibility.rb#29
    def utc_to_local_returns_utc_offset_times=(val); end
  end
end

# source://activesupport//lib/active_support/core_ext/date_and_time/zones.rb#4
module DateAndTime::Zones
  # source://activesupport//lib/active_support/core_ext/date_and_time/zones.rb#20
  def in_time_zone(zone = T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/core_ext/date_and_time/zones.rb#32
  def time_with_zone(time, zone); end
end

# source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#5
class DateTime < ::Date
  include ::DateAndTime::Compatibility

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#204
  def <=>(other); end

  # source://activesupport//lib/active_support/core_ext/date_time/acts_like.rb#8
  def acts_like_date?; end

  # source://activesupport//lib/active_support/core_ext/date_time/acts_like.rb#13
  def acts_like_time?; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#78
  def advance(options); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#105
  def ago(seconds); end

  # source://activesupport//lib/active_support/core_ext/object/json.rb#207
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#118
  def at_beginning_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#142
  def at_beginning_of_hour; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#154
  def at_beginning_of_minute; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#136
  def at_end_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#148
  def at_end_of_hour; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#160
  def at_end_of_minute; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#126
  def at_midday; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#126
  def at_middle_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#118
  def at_midnight; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#126
  def at_noon; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#118
  def beginning_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#142
  def beginning_of_hour; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#154
  def beginning_of_minute; end

  # source://activesupport//lib/active_support/core_ext/date_time/blank.rb#11
  def blank?; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#51
  def change(options); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#136
  def end_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#148
  def end_of_hour; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#160
  def end_of_minute; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#51
  def formatted_offset(colon = T.unsafe(nil), alternate_utc_string = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#180
  def getgm; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#166
  def getlocal(utc_offset = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#180
  def getutc; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#180
  def gmtime; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#112
  def in(seconds); end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#56
  def inspect; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#166
  def localtime(utc_offset = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#126
  def midday; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#126
  def middle_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#118
  def midnight; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#126
  def noon; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#94
  def nsec; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#56
  def readable_inspect; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#20
  def seconds_since_midnight; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#29
  def seconds_until_end_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#112
  def since(seconds); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#36
  def subsec; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#79
  def to_f; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#35
  def to_formatted_s(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#35
  def to_fs(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#84
  def to_i; end

  # source://activesupport//lib/active_support/core_ext/date_time/deprecated_conversions.rb#7
  def to_s(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_time/compatibility.rb#15
  def to_time; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#89
  def usec; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#180
  def utc; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#193
  def utc?; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#198
  def utc_offset; end

  private

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#99
  def offset_in_seconds; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#103
  def seconds_since_unix_epoch; end

  class << self
    # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#69
    def civil_from_format(utc_or_local, year, month = T.unsafe(nil), day = T.unsafe(nil), hour = T.unsafe(nil), min = T.unsafe(nil), sec = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#10
    def current; end
  end
end

# source://activesupport//lib/active_support/core_ext/date_time/deprecated_conversions.rb#6
DateTime::NOT_SET = T.let(T.unsafe(nil), Object)

# source://activesupport//lib/active_support/core_ext/object/try.rb#117
class Delegator < ::BasicObject
  include ::ActiveSupport::Tryable
end

# source://activesupport//lib/active_support/core_ext/digest/uuid.rb#7
module Digest::UUID
  class << self
    # source://activesupport//lib/active_support/core_ext/digest/uuid.rb#13
    def use_rfc4122_namespaced_uuids; end

    # source://activesupport//lib/active_support/core_ext/digest/uuid.rb#13
    def use_rfc4122_namespaced_uuids=(val); end

    # source://activesupport//lib/active_support/core_ext/digest/uuid.rb#21
    def uuid_from_hash(hash_class, namespace, name); end

    # source://activesupport//lib/active_support/core_ext/digest/uuid.rb#44
    def uuid_v3(uuid_namespace, name); end

    # source://activesupport//lib/active_support/core_ext/digest/uuid.rb#54
    def uuid_v4; end

    # source://activesupport//lib/active_support/core_ext/digest/uuid.rb#49
    def uuid_v5(uuid_namespace, name); end

    private

    # source://activesupport//lib/active_support/core_ext/digest/uuid.rb#58
    def pack_uuid_namespace(namespace); end
  end
end

# source://activesupport//lib/active_support/core_ext/digest/uuid.rb#8
Digest::UUID::DNS_NAMESPACE = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/core_ext/digest/uuid.rb#10
Digest::UUID::OID_NAMESPACE = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/core_ext/digest/uuid.rb#9
Digest::UUID::URL_NAMESPACE = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/core_ext/digest/uuid.rb#11
Digest::UUID::X500_NAMESPACE = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/core_ext/string/output_safety.rb#8
module ERB::Util
  private

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#27
  def h(s); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#27
  def html_escape(s); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#58
  def html_escape_once(s); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#120
  def json_escape(s); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#41
  def unwrapped_html_escape(s); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#133
  def xml_name_escape(name); end

  class << self
    # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#27
    def h(s); end

    # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#27
    def html_escape(s); end

    # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#58
    def html_escape_once(s); end

    # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#120
    def json_escape(s); end

    # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#41
    def unwrapped_html_escape(s); end

    # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#133
    def xml_name_escape(name); end
  end
end

# source://activesupport//lib/active_support/core_ext/string/output_safety.rb#9
ERB::Util::HTML_ESCAPE = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/core_ext/string/output_safety.rb#11
ERB::Util::HTML_ESCAPE_ONCE_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/core_ext/string/output_safety.rb#10
ERB::Util::JSON_ESCAPE = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/core_ext/string/output_safety.rb#12
ERB::Util::JSON_ESCAPE_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/core_ext/string/output_safety.rb#19
ERB::Util::TAG_NAME_FOLLOWING_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/core_ext/string/output_safety.rb#20
ERB::Util::TAG_NAME_REPLACEMENT_CHAR = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/core_ext/string/output_safety.rb#18
ERB::Util::TAG_NAME_START_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/core_ext/string/output_safety.rb#15
ERB::Util::TAG_NAME_START_REGEXP_SET = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/core_ext/object/json.rb#139
module Enumerable
  extend ::ActiveSupport::EnumerableCoreExt::Constants

  # source://activesupport//lib/active_support/core_ext/object/json.rb#140
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#235
  def compact_blank; end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#169
  def exclude?(object); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#183
  def excluding(*elements); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#247
  def in_order_of(key, series); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#163
  def including(*elements); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#103
  def index_by; end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#126
  def index_with(default = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#144
  def many?; end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#52
  def maximum(key); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#44
  def minimum(key); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#212
  def pick(*keys); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#196
  def pluck(*keys); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#257
  def sole; end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#74
  def sum(identity = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#183
  def without(*elements); end
end

# source://activesupport//lib/active_support/core_ext/enumerable.rb#21
class Enumerable::SoleItemExpectedError < ::StandardError; end

# source://activesupport//lib/active_support/core_ext/object/json.rb#240
class Exception
  # source://activesupport//lib/active_support/core_ext/object/json.rb#241
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/blank.rb#61
class FalseClass
  # source://activesupport//lib/active_support/core_ext/object/json.rb#81
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#67
  def blank?; end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#34
  def to_param; end
end

# source://activesupport//lib/active_support/core_ext/file/atomic.rb#5
class File < ::IO
  class << self
    # source://activesupport//lib/active_support/core_ext/file/atomic.rb#21
    def atomic_write(file_name, temp_dir = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/core_ext/file/atomic.rb#56
    def probe_stat_in(dir); end
  end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#110
class Float < ::Numeric
  include ::ActiveSupport::NumericWithFormat
  include ::ActiveSupport::DeprecatedNumericWithFormat

  # source://activesupport//lib/active_support/core_ext/object/json.rb#113
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/numeric/deprecated_conversions.rb#5
  def to_s(format = T.unsafe(nil), options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/hash/deep_merge.rb#3
class Hash
  include ::Enumerable

  # source://activesupport//lib/active_support/core_ext/object/json.rb#164
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#48
  def assert_valid_keys(*valid_keys); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#268
  def compact_blank; end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#278
  def compact_blank!; end

  # source://activesupport//lib/active_support/core_ext/object/deep_dup.rb#43
  def deep_dup; end

  # source://activesupport//lib/active_support/core_ext/hash/deep_merge.rb#18
  def deep_merge(other_hash, &block); end

  # source://activesupport//lib/active_support/core_ext/hash/deep_merge.rb#23
  def deep_merge!(other_hash, &block); end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#84
  def deep_stringify_keys; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#91
  def deep_stringify_keys!; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#103
  def deep_symbolize_keys; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#110
  def deep_symbolize_keys!; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#65
  def deep_transform_keys(&block); end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#72
  def deep_transform_keys!(&block); end

  # source://activesupport//lib/active_support/core_ext/hash/deep_transform_values.rb#12
  def deep_transform_values(&block); end

  # source://activesupport//lib/active_support/core_ext/hash/deep_transform_values.rb#19
  def deep_transform_values!(&block); end

  # source://activesupport//lib/active_support/core_ext/hash/except.rb#20
  def except!(*keys); end

  # source://activesupport//lib/active_support/core_ext/hash/slice.rb#24
  def extract!(*keys); end

  # source://activesupport//lib/active_support/core_ext/array/extract_options.rb#9
  def extractable_options?; end

  # source://activesupport//lib/active_support/core_ext/hash/indifferent_access.rb#9
  def nested_under_indifferent_access; end

  # source://activesupport//lib/active_support/core_ext/hash/reverse_merge.rb#14
  def reverse_merge(other_hash); end

  # source://activesupport//lib/active_support/core_ext/hash/reverse_merge.rb#20
  def reverse_merge!(other_hash); end

  # source://activesupport//lib/active_support/core_ext/hash/reverse_merge.rb#20
  def reverse_update(other_hash); end

  # source://activesupport//lib/active_support/core_ext/hash/slice.rb#10
  def slice!(*keys); end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#10
  def stringify_keys; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#16
  def stringify_keys!; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#27
  def symbolize_keys; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#34
  def symbolize_keys!; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#27
  def to_options; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#34
  def to_options!; end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#77
  def to_param(namespace = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#77
  def to_query(namespace = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#74
  def to_xml(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/hash/reverse_merge.rb#14
  def with_defaults(other_hash); end

  # source://activesupport//lib/active_support/core_ext/hash/reverse_merge.rb#20
  def with_defaults!(other_hash); end

  # source://activesupport//lib/active_support/core_ext/hash/indifferent_access.rb#9
  def with_indifferent_access; end

  private

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#116
  def _deep_transform_keys_in_object(object, &block); end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#129
  def _deep_transform_keys_in_object!(object, &block); end

  # source://activesupport//lib/active_support/core_ext/hash/deep_transform_values.rb#25
  def _deep_transform_values_in_object(object, &block); end

  # source://activesupport//lib/active_support/core_ext/hash/deep_transform_values.rb#36
  def _deep_transform_values_in_object!(object, &block); end

  class << self
    # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#133
    def from_trusted_xml(xml); end

    # source://activesupport//lib/active_support/core_ext/hash/conversions.rb#128
    def from_xml(xml, disallowed_types = T.unsafe(nil)); end
  end
end

# source://activesupport//lib/active_support/hash_with_indifferent_access.rb#425
HashWithIndifferentAccess = ActiveSupport::HashWithIndifferentAccess

# source://activesupport//lib/active_support/i18n_railtie.rb#8
module I18n
  class << self
    # source://i18n/1.12.0/lib/i18n/backend/cache.rb#64
    def cache_key_digest; end

    # source://i18n/1.12.0/lib/i18n/backend/cache.rb#68
    def cache_key_digest=(key_digest); end

    # source://i18n/1.12.0/lib/i18n/backend/cache.rb#56
    def cache_namespace; end

    # source://i18n/1.12.0/lib/i18n/backend/cache.rb#60
    def cache_namespace=(namespace); end

    # source://i18n/1.12.0/lib/i18n/backend/cache.rb#48
    def cache_store; end

    # source://i18n/1.12.0/lib/i18n/backend/cache.rb#52
    def cache_store=(store); end

    # source://i18n/1.12.0/lib/i18n/backend/fallbacks.rb#17
    def fallbacks; end

    # source://i18n/1.12.0/lib/i18n/backend/fallbacks.rb#23
    def fallbacks=(fallbacks); end

    # source://i18n/1.12.0/lib/i18n/interpolate/ruby.rb#16
    def interpolate(string, values); end

    # source://i18n/1.12.0/lib/i18n/interpolate/ruby.rb#22
    def interpolate_hash(string, values); end

    # source://i18n/1.12.0/lib/i18n.rb#37
    def new_double_nested_cache; end

    # source://i18n/1.12.0/lib/i18n/backend/cache.rb#72
    def perform_caching?; end

    # source://i18n/1.12.0/lib/i18n.rb#45
    def reserve_key(key); end

    # source://i18n/1.12.0/lib/i18n.rb#50
    def reserved_keys_pattern; end
  end
end

# source://activesupport//lib/active_support/i18n_railtie.rb#9
class I18n::Railtie < ::Rails::Railtie
  class << self
    # source://activesupport//lib/active_support/i18n_railtie.rb#78
    def forward_raise_on_missing_translations_config(app); end

    # source://activesupport//lib/active_support/i18n_railtie.rb#88
    def include_fallbacks_module; end

    # source://activesupport//lib/active_support/i18n_railtie.rb#92
    def init_fallbacks(fallbacks); end

    # source://activesupport//lib/active_support/i18n_railtie.rb#32
    def initialize_i18n(app); end

    # source://activesupport//lib/active_support/i18n_railtie.rb#108
    def validate_fallbacks(fallbacks); end

    # source://activesupport//lib/active_support/i18n_railtie.rb#119
    def watched_dirs_with_extensions(paths); end
  end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#145
class IO
  include ::Enumerable
  include ::File::Constants

  # source://activesupport//lib/active_support/core_ext/object/json.rb#146
  def as_json(options = T.unsafe(nil)); end
end

class IO::Buffer
  include ::Comparable

  def initialize(*_arg0); end

  def &(_arg0); end
  def <=>(_arg0); end
  def ^(_arg0); end
  def and!(_arg0); end
  def clear(*_arg0); end
  def copy(*_arg0); end
  def each(*_arg0); end
  def each_byte(*_arg0); end
  def empty?; end
  def external?; end
  def free; end
  def get_string(*_arg0); end
  def get_value(_arg0, _arg1); end
  def get_values(_arg0, _arg1); end
  def hexdump; end
  def inspect; end
  def internal?; end
  def locked; end
  def locked?; end
  def mapped?; end
  def not!; end
  def null?; end
  def or!(_arg0); end
  def pread(*_arg0); end
  def pwrite(*_arg0); end
  def read(*_arg0); end
  def readonly?; end
  def resize(_arg0); end
  def set_string(*_arg0); end
  def set_value(_arg0, _arg1, _arg2); end
  def set_values(_arg0, _arg1, _arg2); end
  def shared?; end
  def size; end
  def slice(*_arg0); end
  def to_s; end
  def transfer; end
  def valid?; end
  def values(*_arg0); end
  def write(*_arg0); end
  def xor!(_arg0); end
  def |(_arg0); end
  def ~; end

  private

  def initialize_copy(_arg0); end

  class << self
    def for(_arg0); end
    def map(*_arg0); end
    def size_of(_arg0); end
  end
end

class IO::Buffer::AccessError < ::RuntimeError; end
class IO::Buffer::AllocationError < ::RuntimeError; end
IO::Buffer::BIG_ENDIAN = T.let(T.unsafe(nil), Integer)
IO::Buffer::DEFAULT_SIZE = T.let(T.unsafe(nil), Integer)
IO::Buffer::EXTERNAL = T.let(T.unsafe(nil), Integer)
IO::Buffer::HOST_ENDIAN = T.let(T.unsafe(nil), Integer)
IO::Buffer::INTERNAL = T.let(T.unsafe(nil), Integer)
class IO::Buffer::InvalidatedError < ::RuntimeError; end
IO::Buffer::LITTLE_ENDIAN = T.let(T.unsafe(nil), Integer)
IO::Buffer::LOCKED = T.let(T.unsafe(nil), Integer)
class IO::Buffer::LockedError < ::RuntimeError; end
IO::Buffer::MAPPED = T.let(T.unsafe(nil), Integer)
class IO::Buffer::MaskError < ::ArgumentError; end
IO::Buffer::NETWORK_ENDIAN = T.let(T.unsafe(nil), Integer)
IO::Buffer::PAGE_SIZE = T.let(T.unsafe(nil), Integer)
IO::Buffer::PRIVATE = T.let(T.unsafe(nil), Integer)
IO::Buffer::READONLY = T.let(T.unsafe(nil), Integer)
IO::Buffer::SHARED = T.let(T.unsafe(nil), Integer)

class IO::ConsoleMode
  def echo=(_arg0); end
  def raw(*_arg0); end
  def raw!(*_arg0); end

  private

  def initialize_copy(_arg0); end
end

class IO::EAGAINWaitReadable < ::Errno::EAGAIN
  include ::IO::WaitReadable
end

class IO::EAGAINWaitWritable < ::Errno::EAGAIN
  include ::IO::WaitWritable
end

class IO::EINPROGRESSWaitReadable < ::Errno::EINPROGRESS
  include ::IO::WaitReadable
end

class IO::EINPROGRESSWaitWritable < ::Errno::EINPROGRESS
  include ::IO::WaitWritable
end

IO::EWOULDBLOCKWaitReadable = IO::EAGAINWaitReadable
IO::EWOULDBLOCKWaitWritable = IO::EAGAINWaitWritable
IO::PRIORITY = T.let(T.unsafe(nil), Integer)
IO::READABLE = T.let(T.unsafe(nil), Integer)
class IO::TimeoutError < ::IOError; end
IO::WRITABLE = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/core_ext/object/json.rb#228
class IPAddr
  # source://activesupport//lib/active_support/core_ext/object/json.rb#229
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/integer/time.rb#6
class Integer < ::Numeric
  include ::ActiveSupport::NumericWithFormat
  include ::ActiveSupport::DeprecatedNumericWithFormat

  # source://activesupport//lib/active_support/core_ext/integer/time.rb#10
  def month; end

  # source://activesupport//lib/active_support/core_ext/integer/time.rb#10
  def months; end

  # source://activesupport//lib/active_support/core_ext/numeric/deprecated_conversions.rb#5
  def to_s(format = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/integer/time.rb#18
  def year; end

  # source://activesupport//lib/active_support/core_ext/integer/time.rb#18
  def years; end
end

# source://activesupport//lib/active_support/core_ext/kernel/reporting.rb#3
module Kernel
  private

  # source://activesupport//lib/active_support/core_ext/kernel/reporting.rb#20
  def enable_warnings(&block); end

  # source://activesupport//lib/active_support/core_ext/kernel/reporting.rb#14
  def silence_warnings(&block); end

  # source://activesupport//lib/active_support/core_ext/kernel/reporting.rb#41
  def suppress(*exception_classes); end

  # source://activesupport//lib/active_support/core_ext/kernel/reporting.rb#26
  def with_warnings(flag); end

  class << self
    # source://activesupport//lib/active_support/core_ext/kernel/reporting.rb#20
    def enable_warnings(&block); end

    # source://activesupport//lib/active_support/core_ext/kernel/reporting.rb#14
    def silence_warnings(&block); end

    # source://activesupport//lib/active_support/core_ext/kernel/reporting.rb#41
    def suppress(*exception_classes); end

    # source://activesupport//lib/active_support/core_ext/kernel/reporting.rb#26
    def with_warnings(flag); end
  end
end

# source://activesupport//lib/active_support/core_ext/load_error.rb#3
class LoadError < ::ScriptError
  include ::DidYouMean::Correctable

  # source://activesupport//lib/active_support/core_ext/load_error.rb#6
  def is_missing?(location); end
end

# source://activesupport//lib/active_support/core_ext/object/duplicable.rb#31
class Method
  # source://activesupport//lib/active_support/core_ext/object/duplicable.rb#36
  def duplicable?; end
end

# source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#8
class Module
  include ::Module::Concerning

  # source://activesupport//lib/active_support/core_ext/module/aliasing.rb#21
  def alias_attribute(new_name, old_name); end

  # source://activesupport//lib/active_support/core_ext/module/anonymous.rb#27
  def anonymous?; end

  # source://activesupport//lib/active_support/core_ext/object/json.rb#53
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/attr_internal.rb#16
  def attr_internal(*attrs); end

  # source://activesupport//lib/active_support/core_ext/module/attr_internal.rb#16
  def attr_internal_accessor(*attrs); end

  # source://activesupport//lib/active_support/core_ext/module/attr_internal.rb#5
  def attr_internal_reader(*attrs); end

  # source://activesupport//lib/active_support/core_ext/module/attr_internal.rb#10
  def attr_internal_writer(*attrs); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#202
  def cattr_accessor(*syms, instance_reader: T.unsafe(nil), instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), &blk); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#53
  def cattr_reader(*syms, instance_reader: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#117
  def cattr_writer(*syms, instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/delegation.rb#171
  def delegate(*methods, to: T.unsafe(nil), prefix: T.unsafe(nil), allow_nil: T.unsafe(nil), private: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/delegation.rb#289
  def delegate_missing_to(target, allow_nil: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/deprecation.rb#22
  def deprecate(*method_names); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#202
  def mattr_accessor(*syms, instance_reader: T.unsafe(nil), instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), &blk); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#53
  def mattr_reader(*syms, instance_reader: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#117
  def mattr_writer(*syms, instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/redefine_method.rb#30
  def method_visibility(method); end

  # source://activesupport//lib/active_support/core_ext/module/introspection.rb#35
  def module_parent; end

  # source://activesupport//lib/active_support/core_ext/module/introspection.rb#10
  def module_parent_name; end

  # source://activesupport//lib/active_support/core_ext/module/introspection.rb#51
  def module_parents; end

  # source://activesupport//lib/active_support/core_ext/module/redefine_method.rb#17
  def redefine_method(method, &block); end

  # source://activesupport//lib/active_support/core_ext/module/redefine_method.rb#26
  def redefine_singleton_method(method, &block); end

  # source://activesupport//lib/active_support/core_ext/module/remove_method.rb#7
  def remove_possible_method(method); end

  # source://activesupport//lib/active_support/core_ext/module/remove_method.rb#14
  def remove_possible_singleton_method(method); end

  # source://activesupport//lib/active_support/core_ext/module/redefine_method.rb#7
  def silence_redefinition_of_method(method); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#152
  def thread_cattr_accessor(*syms, instance_reader: T.unsafe(nil), instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#41
  def thread_cattr_reader(*syms, instance_reader: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#85
  def thread_cattr_writer(*syms, instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#152
  def thread_mattr_accessor(*syms, instance_reader: T.unsafe(nil), instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#41
  def thread_mattr_reader(*syms, instance_reader: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#85
  def thread_mattr_writer(*syms, instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/core_ext/module/attr_internal.rb#30
  def attr_internal_define(attr_name, type); end

  # source://activesupport//lib/active_support/core_ext/module/attr_internal.rb#26
  def attr_internal_ivar_name(attr); end

  class << self
    # source://activesupport//lib/active_support/core_ext/module/attr_internal.rb#22
    def attr_internal_naming_format; end

    # source://activesupport//lib/active_support/core_ext/module/attr_internal.rb#22
    def attr_internal_naming_format=(_arg0); end
  end
end

# source://activesupport//lib/active_support/core_ext/module/concerning.rb#112
module Module::Concerning
  # source://activesupport//lib/active_support/core_ext/module/concerning.rb#132
  def concern(topic, &module_definition); end

  # source://activesupport//lib/active_support/core_ext/module/concerning.rb#114
  def concerning(topic, prepend: T.unsafe(nil), &block); end
end

# source://activesupport//lib/active_support/core_ext/module/delegation.rb#13
Module::DELEGATION_RESERVED_KEYWORDS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/core_ext/module/delegation.rb#14
Module::DELEGATION_RESERVED_METHOD_NAMES = T.let(T.unsafe(nil), Set)

# source://activesupport//lib/active_support/core_ext/module/delegation.rb#8
class Module::DelegationError < ::NoMethodError; end

# source://activesupport//lib/active_support/core_ext/module/delegation.rb#10
Module::RUBY_RESERVED_KEYWORDS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/core_ext/name_error.rb#3
class NameError < ::StandardError
  include ::ErrorHighlight::CoreExt
  include ::DidYouMean::Correctable

  # source://activesupport//lib/active_support/core_ext/name_error.rb#12
  def missing_name; end

  # source://activesupport//lib/active_support/core_ext/name_error.rb#44
  def missing_name?(name); end

  private

  # source://activesupport//lib/active_support/core_ext/name_error.rb#56
  def real_mod_name(mod); end
end

# source://activesupport//lib/active_support/core_ext/name_error.rb#53
NameError::UNBOUND_METHOD_MODULE_NAME = T.let(T.unsafe(nil), UnboundMethod)

# source://activesupport//lib/active_support/core_ext/object/blank.rb#50
class NilClass
  # source://activesupport//lib/active_support/core_ext/object/json.rb#87
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#56
  def blank?; end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#20
  def to_param; end

  # source://activesupport//lib/active_support/core_ext/object/try.rb#148
  def try(*_arg0); end

  # source://activesupport//lib/active_support/core_ext/object/try.rb#155
  def try!(*_arg0); end
end

# source://activesupport//lib/active_support/core_ext/object/blank.rb#134
class Numeric
  include ::Comparable

  # source://activesupport//lib/active_support/core_ext/object/json.rb#105
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#141
  def blank?; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#14
  def byte; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#14
  def bytes; end

  # source://activesupport//lib/active_support/core_ext/numeric/time.rb#37
  def day; end

  # source://activesupport//lib/active_support/core_ext/numeric/time.rb#37
  def days; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#62
  def exabyte; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#62
  def exabytes; end

  # source://activesupport//lib/active_support/core_ext/numeric/time.rb#53
  def fortnight; end

  # source://activesupport//lib/active_support/core_ext/numeric/time.rb#53
  def fortnights; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#38
  def gigabyte; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#38
  def gigabytes; end

  # source://activesupport//lib/active_support/core_ext/numeric/time.rb#29
  def hour; end

  # source://activesupport//lib/active_support/core_ext/numeric/time.rb#29
  def hours; end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#156
  def html_safe?; end

  # source://activesupport//lib/active_support/core_ext/numeric/time.rb#63
  def in_milliseconds; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#22
  def kilobyte; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#22
  def kilobytes; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#30
  def megabyte; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#30
  def megabytes; end

  # source://activesupport//lib/active_support/core_ext/numeric/time.rb#21
  def minute; end

  # source://activesupport//lib/active_support/core_ext/numeric/time.rb#21
  def minutes; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#54
  def petabyte; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#54
  def petabytes; end

  # source://activesupport//lib/active_support/core_ext/numeric/time.rb#13
  def second; end

  # source://activesupport//lib/active_support/core_ext/numeric/time.rb#13
  def seconds; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#46
  def terabyte; end

  # source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#46
  def terabytes; end

  # source://activesupport//lib/active_support/core_ext/numeric/time.rb#45
  def week; end

  # source://activesupport//lib/active_support/core_ext/numeric/time.rb#45
  def weeks; end
end

# source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#9
Numeric::EXABYTE = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#6
Numeric::GIGABYTE = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#4
Numeric::KILOBYTE = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#5
Numeric::MEGABYTE = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#8
Numeric::PETABYTE = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/core_ext/numeric/bytes.rb#7
Numeric::TERABYTE = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/core_ext/object/blank.rb#5
class Object < ::BasicObject
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  include ::ActiveSupport::Dependencies::RequireDependency
  include ::Kernel
  include ::PP::ObjectMixin
  include ::ActiveSupport::Tryable

  # source://activesupport//lib/active_support/core_ext/object/acts_like.rb#33
  def acts_like?(duck); end

  # source://activesupport//lib/active_support/core_ext/object/json.rb#59
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#18
  def blank?; end

  # source://activesupport//lib/active_support/core_ext/object/deep_dup.rb#15
  def deep_dup; end

  # source://activesupport//lib/active_support/core_ext/object/duplicable.rb#26
  def duplicable?; end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#150
  def html_safe?; end

  # source://activesupport//lib/active_support/core_ext/object/inclusion.rb#12
  def in?(another_object); end

  # source://activesupport//lib/active_support/core_ext/object/instance_variables.rb#14
  def instance_values; end

  # source://activesupport//lib/active_support/core_ext/object/instance_variables.rb#27
  def instance_variable_names; end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#45
  def presence; end

  # source://activesupport//lib/active_support/core_ext/object/inclusion.rb#26
  def presence_in(another_object); end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#25
  def present?; end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#7
  def to_param; end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#13
  def to_query(key); end

  # source://activesupport//lib/active_support/core_ext/object/with_options.rb#92
  def with_options(options, &block); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#222
class Pathname
  # source://activesupport//lib/active_support/core_ext/object/json.rb#223
  def as_json(options = T.unsafe(nil)); end
end

module Process
  extend ::ActiveSupport::ForkTracker::ModernCoreExt

  class << self
    # source://activesupport//lib/active_support/fork_tracker.rb#6
    def _fork; end
  end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#234
class Process::Status
  # source://activesupport//lib/active_support/core_ext/object/json.rb#235
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#151
class Range
  include ::ActiveSupport::RangeWithFormat
  include ::ActiveSupport::DeprecatedRangeWithFormat
  include ::ActiveSupport::CompareWithRange
  include ::ActiveSupport::EachTimeWithZone
  include ::Enumerable

  # source://activesupport//lib/active_support/core_ext/range/compare_range.rb#16
  def ===(value); end

  # source://activesupport//lib/active_support/core_ext/object/json.rb#152
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/range/each.rb#7
  def each(&block); end

  # source://activesupport//lib/active_support/core_ext/range/compare_range.rb#41
  def include?(value); end

  # source://activesupport//lib/active_support/core_ext/range/overlaps.rb#7
  def overlaps?(other); end

  # source://activesupport//lib/active_support/core_ext/range/each.rb#12
  def step(n = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/core_ext/enumerable.rb#287
  def sum(identity = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/range/deprecated_conversions.rb#6
  def to_s(format = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#133
class Regexp
  # source://activesupport//lib/active_support/core_ext/object/json.rb#134
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/regexp.rb#11
  def multiline?; end
end

class Regexp::TimeoutError < ::RegexpError; end

# source://activesupport//lib/active_support/core_ext/securerandom.rb#5
module SecureRandom
  class << self
    # source://activesupport//lib/active_support/core_ext/securerandom.rb#38
    def base36(n = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/core_ext/securerandom.rb#19
    def base58(n = T.unsafe(nil)); end
  end
end

# source://activesupport//lib/active_support/core_ext/securerandom.rb#7
SecureRandom::BASE36_ALPHABET = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/core_ext/securerandom.rb#6
SecureRandom::BASE58_ALPHABET = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/core_ext/object/duplicable.rb#53
module Singleton
  mixes_in_class_methods ::Singleton::SingletonClassMethods

  # source://activesupport//lib/active_support/core_ext/object/duplicable.rb#57
  def duplicable?; end
end

# source://activesupport//lib/active_support/core_ext/object/blank.rb#103
class String
  include ::Comparable

  # source://activesupport//lib/active_support/core_ext/string/behavior.rb#5
  def acts_like_string?; end

  # source://activesupport//lib/active_support/core_ext/object/json.rb#93
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/access.rb#29
  def at(position); end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#121
  def blank?; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#103
  def camelcase(first_letter = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#103
  def camelize(first_letter = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#243
  def classify; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#73
  def constantize; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#152
  def dasherize; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#181
  def deconstantize; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#166
  def demodulize; end

  # source://activesupport//lib/active_support/core_ext/string/access.rb#78
  def first(limit = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#290
  def foreign_key(separate_class_name_and_id_with_underscore = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/access.rb#46
  def from(position); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#368
  def html_safe; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#266
  def humanize(capitalize: T.unsafe(nil), keep_id_suffix: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/zones.rb#9
  def in_time_zone(zone = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/indent.rb#42
  def indent(amount, indent_string = T.unsafe(nil), indent_empty_lines = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/indent.rb#7
  def indent!(amount, indent_string = T.unsafe(nil), indent_empty_lines = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/inquiry.rb#13
  def inquiry; end

  # source://activesupport//lib/active_support/core_ext/string/multibyte.rb#48
  def is_utf8?; end

  # source://activesupport//lib/active_support/core_ext/string/access.rb#92
  def last(limit = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/multibyte.rb#37
  def mb_chars; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#219
  def parameterize(separator: T.unsafe(nil), preserve_case: T.unsafe(nil), locale: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#35
  def pluralize(count = T.unsafe(nil), locale = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/filters.rb#32
  def remove(*patterns); end

  # source://activesupport//lib/active_support/core_ext/string/filters.rb#40
  def remove!(*patterns); end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#86
  def safe_constantize; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#60
  def singularize(locale = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/filters.rb#13
  def squish; end

  # source://activesupport//lib/active_support/core_ext/string/filters.rb#21
  def squish!; end

  # source://activesupport//lib/active_support/core_ext/string/strip.rb#22
  def strip_heredoc; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#231
  def tableize; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#130
  def titlecase(keep_id_suffix: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#130
  def titleize(keep_id_suffix: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/access.rb#63
  def to(position); end

  # source://activesupport//lib/active_support/core_ext/string/conversions.rb#47
  def to_date; end

  # source://activesupport//lib/active_support/core_ext/string/conversions.rb#57
  def to_datetime; end

  # source://activesupport//lib/active_support/core_ext/string/conversions.rb#22
  def to_time(form = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/filters.rb#66
  def truncate(truncate_at, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/filters.rb#95
  def truncate_bytes(truncate_at, omission: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/filters.rb#136
  def truncate_words(words_count, options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#143
  def underscore; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#277
  def upcase_first; end
end

# source://activesupport//lib/active_support/core_ext/object/blank.rb#104
String::BLANK_RE = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/core_ext/object/blank.rb#105
String::ENCODED_BLANKS = T.let(T.unsafe(nil), Concurrent::Map)

# source://activesupport//lib/active_support/core_ext/object/json.rb#68
class Struct
  include ::Enumerable

  # source://activesupport//lib/active_support/core_ext/object/json.rb#69
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#98
class Symbol
  include ::Comparable

  # source://activesupport//lib/active_support/core_ext/object/json.rb#99
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/blank.rb#146
class Time
  include ::Comparable
  include ::DateAndTime::Zones
  include ::DateAndTime::Calculations
  include ::DateAndTime::Compatibility

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#280
  def +(other); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#303
  def -(other); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#312
  def <=>(other); end

  # source://activesupport//lib/active_support/core_ext/time/acts_like.rb#7
  def acts_like_time?; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#182
  def advance(options); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#208
  def ago(seconds); end

  # source://activesupport//lib/active_support/core_ext/object/json.rb#187
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#221
  def at_beginning_of_day; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#250
  def at_beginning_of_hour; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#266
  def at_beginning_of_minute; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#239
  def at_end_of_day; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#256
  def at_end_of_hour; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#272
  def at_end_of_minute; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#229
  def at_midday; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#229
  def at_middle_of_day; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#221
  def at_midnight; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#229
  def at_noon; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#221
  def beginning_of_day; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#250
  def beginning_of_hour; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#266
  def beginning_of_minute; end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#152
  def blank?; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#138
  def change(options); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#312
  def compare_with_coercion(other); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#239
  def end_of_day; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#256
  def end_of_hour; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#272
  def end_of_minute; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#327
  def eql?(other); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#327
  def eql_with_coercion(other); end

  # source://activesupport//lib/active_support/core_ext/time/conversions.rb#69
  def formatted_offset(colon = T.unsafe(nil), alternate_utc_string = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#213
  def in(seconds); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#229
  def midday; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#229
  def middle_of_day; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#221
  def midnight; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#303
  def minus_with_coercion(other); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#290
  def minus_with_duration(other); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#290
  def minus_without_coercion(other); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#341
  def next_day(days = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#351
  def next_month(months = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#361
  def next_year(years = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#229
  def noon; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#280
  def plus_with_duration(other); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#336
  def prev_day(days = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#346
  def prev_month(months = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#356
  def prev_year(years = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#107
  def sec_fraction; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#91
  def seconds_since_midnight; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#100
  def seconds_until_end_of_day; end

  # source://activesupport//lib/active_support/core_ext/time/calculations.rb#213
  def since(seconds); end

  # source://activesupport//lib/active_support/core_ext/time/conversions.rb#53
  def to_formatted_s(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/conversions.rb#53
  def to_fs(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/deprecated_conversions.rb#7
  def to_s(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/compatibility.rb#13
  def to_time; end

  class << self
    # source://activesupport//lib/active_support/core_ext/time/calculations.rb#18
    def ===(other); end

    # source://activesupport//lib/active_support/core_ext/time/calculations.rb#45
    def at(*args, **kwargs); end

    # source://activesupport//lib/active_support/core_ext/time/calculations.rb#45
    def at_with_coercion(*args, **kwargs); end

    # source://activesupport//lib/active_support/core_ext/time/calculations.rb#39
    def current; end

    # source://activesupport//lib/active_support/core_ext/time/calculations.rb#24
    def days_in_month(month, year = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/core_ext/time/calculations.rb#34
    def days_in_year(year = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/core_ext/time/zones.rb#94
    def find_zone(time_zone); end

    # source://activesupport//lib/active_support/core_ext/time/zones.rb#82
    def find_zone!(time_zone); end

    # source://activesupport//lib/active_support/core_ext/time/calculations.rb#69
    def rfc3339(str); end

    # source://activesupport//lib/active_support/core_ext/time/zones.rb#62
    def use_zone(time_zone); end

    # source://activesupport//lib/active_support/core_ext/time/zones.rb#14
    def zone; end

    # source://activesupport//lib/active_support/core_ext/time/zones.rb#41
    def zone=(time_zone); end

    # source://activesupport//lib/active_support/core_ext/time/zones.rb#10
    def zone_default; end

    # source://activesupport//lib/active_support/core_ext/time/zones.rb#10
    def zone_default=(_arg0); end
  end
end

# source://activesupport//lib/active_support/core_ext/time/calculations.rb#14
Time::COMMON_YEAR_DAYS_IN_MONTH = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/core_ext/time/conversions.rb#8
Time::DATE_FORMATS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/core_ext/time/deprecated_conversions.rb#6
Time::NOT_SET = T.let(T.unsafe(nil), Object)

# source://activesupport//lib/active_support/core_ext/object/blank.rb#72
class TrueClass
  # source://activesupport//lib/active_support/core_ext/object/json.rb#75
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/object/blank.rb#78
  def blank?; end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#27
  def to_param; end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#216
class URI::Generic
  include ::URI::RFC2396_REGEXP
  include ::URI

  # source://activesupport//lib/active_support/core_ext/object/json.rb#217
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/duplicable.rb#41
class UnboundMethod
  # source://activesupport//lib/active_support/core_ext/object/duplicable.rb#46
  def duplicable?; end
end
