# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `logger` gem.
# Please instead update this file by running `bin/tapioca gem logger`.


# source://logger//lib/logger/version.rb#3
class Logger
  include ::Logger::Severity

  # source://logger//lib/logger.rb#581
  def initialize(logdev, shift_age = T.unsafe(nil), shift_size = T.unsafe(nil), level: T.unsafe(nil), progname: T.unsafe(nil), formatter: T.unsafe(nil), datetime_format: T.unsafe(nil), binmode: T.unsafe(nil), shift_period_suffix: T.unsafe(nil), reraise_write_errors: T.unsafe(nil)); end

  # source://logger//lib/logger.rb#689
  def <<(msg); end

  # source://logger//lib/logger.rb#656
  def add(severity, message = T.unsafe(nil), progname = T.unsafe(nil)); end

  # source://logger//lib/logger.rb#736
  def close; end

  # source://logger//lib/logger.rb#438
  def datetime_format; end

  # source://logger//lib/logger.rb#432
  def datetime_format=(datetime_format); end

  # source://logger//lib/logger.rb#695
  def debug(progname = T.unsafe(nil), &block); end

  # source://logger//lib/logger.rb#487
  def debug!; end

  # source://logger//lib/logger.rb#482
  def debug?; end

  # source://logger//lib/logger.rb#713
  def error(progname = T.unsafe(nil), &block); end

  # source://logger//lib/logger.rb#520
  def error!; end

  # source://logger//lib/logger.rb#515
  def error?; end

  # source://logger//lib/logger.rb#719
  def fatal(progname = T.unsafe(nil), &block); end

  # source://logger//lib/logger.rb#531
  def fatal!; end

  # source://logger//lib/logger.rb#526
  def fatal?; end

  # source://logger//lib/logger.rb#473
  def formatter; end

  # source://logger//lib/logger.rb#473
  def formatter=(_arg0); end

  # source://logger//lib/logger.rb#701
  def info(progname = T.unsafe(nil), &block); end

  # source://logger//lib/logger.rb#498
  def info!; end

  # source://logger//lib/logger.rb#493
  def info?; end

  # source://logger//lib/logger.rb#383
  def level; end

  # source://logger//lib/logger.rb#399
  def level=(severity); end

  # source://logger//lib/logger.rb#656
  def log(severity, message = T.unsafe(nil), progname = T.unsafe(nil)); end

  # source://logger//lib/logger.rb#422
  def progname; end

  # source://logger//lib/logger.rb#422
  def progname=(_arg0); end

  # source://logger//lib/logger.rb#624
  def reopen(logdev = T.unsafe(nil)); end

  # source://logger//lib/logger.rb#383
  def sev_threshold; end

  # source://logger//lib/logger.rb#399
  def sev_threshold=(severity); end

  # source://logger//lib/logger.rb#725
  def unknown(progname = T.unsafe(nil), &block); end

  # source://logger//lib/logger.rb#707
  def warn(progname = T.unsafe(nil), &block); end

  # source://logger//lib/logger.rb#509
  def warn!; end

  # source://logger//lib/logger.rb#504
  def warn?; end

  # source://logger//lib/logger.rb#408
  def with_level(severity); end

  private

  # source://logger//lib/logger.rb#758
  def format_message(severity, datetime, progname, msg); end

  # source://logger//lib/logger.rb#745
  def format_severity(severity); end

  # source://logger//lib/logger.rb#754
  def level_key; end

  # source://logger//lib/logger.rb#750
  def level_override; end
end

# source://logger//lib/logger/formatter.rb#5
class Logger::Formatter
  # source://logger//lib/logger/formatter.rb#11
  def initialize; end

  # source://logger//lib/logger/formatter.rb#15
  def call(severity, time, progname, msg); end

  # source://logger//lib/logger/formatter.rb#9
  def datetime_format; end

  # source://logger//lib/logger/formatter.rb#9
  def datetime_format=(_arg0); end

  private

  # source://logger//lib/logger/formatter.rb#21
  def format_datetime(time); end

  # source://logger//lib/logger/formatter.rb#25
  def msg2str(msg); end
end

# source://logger//lib/logger/formatter.rb#7
Logger::Formatter::DatetimeFormat = T.let(T.unsafe(nil), String)

# source://logger//lib/logger/formatter.rb#6
Logger::Formatter::Format = T.let(T.unsafe(nil), String)

# source://logger//lib/logger/log_device.rb#7
class Logger::LogDevice
  include ::Logger::Period
  include ::MonitorMixin

  # source://logger//lib/logger/log_device.rb#14
  def initialize(log = T.unsafe(nil), shift_age: T.unsafe(nil), shift_size: T.unsafe(nil), shift_period_suffix: T.unsafe(nil), binmode: T.unsafe(nil), reraise_write_errors: T.unsafe(nil)); end

  # source://logger//lib/logger/log_device.rb#59
  def close; end

  # source://logger//lib/logger/log_device.rb#10
  def dev; end

  # source://logger//lib/logger/log_device.rb#11
  def filename; end

  # source://logger//lib/logger/log_device.rb#69
  def reopen(log = T.unsafe(nil)); end

  # source://logger//lib/logger/log_device.rb#32
  def write(message); end

  private

  # source://logger//lib/logger/log_device.rb#126
  def add_log_header(file); end

  # source://logger//lib/logger/log_device.rb#132
  def check_shift_log; end

  # source://logger//lib/logger/log_device.rb#110
  def create_logfile(filename); end

  # source://logger//lib/logger/log_device.rb#152
  def lock_shift_log; end

  # source://logger//lib/logger/log_device.rb#102
  def open_logfile(filename); end

  # source://logger//lib/logger/log_device.rb#86
  def set_dev(log); end

  # source://logger//lib/logger/log_device.rb#183
  def shift_log_age; end

  # source://logger//lib/logger/log_device.rb#195
  def shift_log_period(period_end); end
end

# source://logger//lib/logger/period.rb#4
module Logger::Period
  private

  # source://logger//lib/logger/period.rb#9
  def next_rotate_time(now, shift_age); end

  # source://logger//lib/logger/period.rb#31
  def previous_period_end(now, shift_age); end

  class << self
    # source://logger//lib/logger/period.rb#9
    def next_rotate_time(now, shift_age); end

    # source://logger//lib/logger/period.rb#31
    def previous_period_end(now, shift_age); end
  end
end

# source://logger//lib/logger/period.rb#7
Logger::Period::SiD = T.let(T.unsafe(nil), Integer)

# source://logger//lib/logger.rb#743
Logger::SEV_LABEL = T.let(T.unsafe(nil), Array)

# source://logger//lib/logger/severity.rb#5
module Logger::Severity
  class << self
    # source://logger//lib/logger/severity.rb#29
    def coerce(severity); end
  end
end

# source://logger//lib/logger/severity.rb#19
Logger::Severity::LEVELS = T.let(T.unsafe(nil), Hash)
