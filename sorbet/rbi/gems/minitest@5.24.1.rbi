# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `minitest` gem.
# Please instead update this file by running `bin/tapioca gem minitest`.


# source://minitest//lib/minitest/parallel.rb#1
module Minitest
  class << self
    # source://minitest//lib/minitest.rb#323
    def __run(reporter, options); end

    # source://minitest//lib/minitest.rb#97
    def after_run(&block); end

    # source://minitest//lib/minitest.rb#19
    def allow_fork; end

    # source://minitest//lib/minitest.rb#19
    def allow_fork=(_arg0); end

    # source://minitest//lib/minitest.rb#69
    def autorun; end

    # source://minitest//lib/minitest.rb#19
    def backtrace_filter; end

    # source://minitest//lib/minitest.rb#19
    def backtrace_filter=(_arg0); end

    # source://minitest//lib/minitest.rb#18
    def cattr_accessor(name); end

    # source://minitest//lib/minitest.rb#1208
    def clock_time; end

    # source://minitest//lib/minitest.rb#303
    def empty_run!(options); end

    # source://minitest//lib/minitest.rb#19
    def extensions; end

    # source://minitest//lib/minitest.rb#19
    def extensions=(_arg0); end

    # source://minitest//lib/minitest.rb#336
    def filter_backtrace(bt); end

    # source://minitest//lib/minitest.rb#19
    def info_signal; end

    # source://minitest//lib/minitest.rb#19
    def info_signal=(_arg0); end

    # source://minitest//lib/minitest.rb#125
    def init_plugins(options); end

    # source://minitest//lib/minitest.rb#109
    def load_plugins; end

    # source://minitest//lib/minitest.rb#19
    def parallel_executor; end

    # source://minitest//lib/minitest.rb#19
    def parallel_executor=(_arg0); end

    # source://minitest//lib/minitest.rb#143
    def process_args(args = T.unsafe(nil)); end

    # source://minitest//lib/minitest.rb#104
    def register_plugin(name_or_mod); end

    # source://minitest//lib/minitest.rb#19
    def reporter; end

    # source://minitest//lib/minitest.rb#19
    def reporter=(_arg0); end

    # source://minitest//lib/minitest.rb#269
    def run(args = T.unsafe(nil)); end

    # source://minitest//lib/minitest.rb#1199
    def run_one_method(klass, method_name); end

    # source://minitest//lib/minitest.rb#19
    def seed; end

    # source://minitest//lib/minitest.rb#19
    def seed=(_arg0); end
  end
end

# source://minitest//lib/minitest.rb#682
class Minitest::AbstractReporter
  # source://minitest//lib/minitest.rb#684
  def initialize; end

  # source://minitest//lib/minitest.rb#719
  def passed?; end

  # source://minitest//lib/minitest.rb#698
  def prerecord(klass, name); end

  # source://minitest//lib/minitest.rb#707
  def record(result); end

  # source://minitest//lib/minitest.rb#713
  def report; end

  # source://minitest//lib/minitest.rb#691
  def start; end

  # source://minitest//lib/minitest.rb#723
  def synchronize(&block); end
end

# source://minitest//lib/minitest.rb#1015
class Minitest::Assertion < ::Exception
  # source://minitest//lib/minitest.rb#1018
  def error; end

  # source://minitest//lib/minitest.rb#1025
  def location; end

  # source://minitest//lib/minitest.rb#1033
  def result_code; end

  # source://minitest//lib/minitest.rb#1037
  def result_label; end
end

# source://minitest//lib/minitest.rb#1016
Minitest::Assertion::RE = T.let(T.unsafe(nil), Regexp)

# source://minitest//lib/minitest/assertions.rb#18
module Minitest::Assertions
  # source://minitest//lib/minitest/assertions.rb#188
  def _synchronize; end

  # source://minitest//lib/minitest/assertions.rb#201
  def _where; end

  # source://minitest//lib/minitest/assertions.rb#178
  def assert(test, msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#195
  def assert_empty(obj, msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#221
  def assert_equal(exp, act, msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#242
  def assert_in_delta(exp, act, delta = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#254
  def assert_in_epsilon(exp, act, epsilon = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#261
  def assert_includes(collection, obj, msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#272
  def assert_instance_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#283
  def assert_kind_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#293
  def assert_match(matcher, obj, msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#305
  def assert_nil(obj, msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#315
  def assert_operator(o1, op, o2 = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#333
  def assert_output(stdout = T.unsafe(nil), stderr = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#357
  def assert_path_exists(path, msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#376
  def assert_pattern; end

  # source://minitest//lib/minitest/assertions.rb#397
  def assert_predicate(o1, op, msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#424
  def assert_raises(*exp); end

  # source://minitest//lib/minitest/assertions.rb#456
  def assert_respond_to(obj, meth, msg = T.unsafe(nil), include_all: T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#466
  def assert_same(exp, act, msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#479
  def assert_send(send_ary, m = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#493
  def assert_silent; end

  # source://minitest//lib/minitest/assertions.rb#502
  def assert_throws(sym, msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#543
  def capture_io; end

  # source://minitest//lib/minitest/assertions.rb#576
  def capture_subprocess_io; end

  # source://minitest//lib/minitest/assertions.rb#59
  def diff(exp, act); end

  # source://minitest//lib/minitest/assertions.rb#608
  def exception_details(e, msg); end

  # source://minitest//lib/minitest/assertions.rb#624
  def fail_after(y, m, d, msg); end

  # source://minitest//lib/minitest/assertions.rb#631
  def flunk(msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#639
  def message(msg = T.unsafe(nil), ending = T.unsafe(nil), &default); end

  # source://minitest//lib/minitest/assertions.rb#129
  def mu_pp(obj); end

  # source://minitest//lib/minitest/assertions.rb#152
  def mu_pp_for_diff(obj); end

  # source://minitest//lib/minitest/assertions.rb#650
  def pass(_msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#657
  def refute(test, msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#665
  def refute_empty(obj, msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#676
  def refute_equal(exp, act, msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#688
  def refute_in_delta(exp, act, delta = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#700
  def refute_in_epsilon(a, b, epsilon = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#707
  def refute_includes(collection, obj, msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#718
  def refute_instance_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#728
  def refute_kind_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#736
  def refute_match(matcher, obj, msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#746
  def refute_nil(obj, msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#781
  def refute_operator(o1, op, o2 = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#790
  def refute_path_exists(path, msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#763
  def refute_pattern; end

  # source://minitest//lib/minitest/assertions.rb#804
  def refute_predicate(o1, op, msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#813
  def refute_respond_to(obj, meth, msg = T.unsafe(nil), include_all: T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#822
  def refute_same(exp, act, msg = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#835
  def skip(msg = T.unsafe(nil), _ignored = T.unsafe(nil)); end

  # source://minitest//lib/minitest/assertions.rb#847
  def skip_until(y, m, d, msg); end

  # source://minitest//lib/minitest/assertions.rb#856
  def skipped?; end

  # source://minitest//lib/minitest/assertions.rb#104
  def things_to_diff(exp, act); end

  class << self
    # source://minitest//lib/minitest/assertions.rb#29
    def diff; end

    # source://minitest//lib/minitest/assertions.rb#47
    def diff=(o); end
  end
end

# source://minitest//lib/minitest/assertions.rb#206
Minitest::Assertions::E = T.let(T.unsafe(nil), String)

# source://minitest//lib/minitest/assertions.rb#19
Minitest::Assertions::UNDEFINED = T.let(T.unsafe(nil), Object)

# source://minitest//lib/minitest.rb#1170
class Minitest::BacktraceFilter
  # source://minitest//lib/minitest.rb#1176
  def initialize(regexp = T.unsafe(nil)); end

  # source://minitest//lib/minitest.rb#1184
  def filter(bt); end

  # source://minitest//lib/minitest.rb#1174
  def regexp; end

  # source://minitest//lib/minitest.rb#1174
  def regexp=(_arg0); end
end

# source://minitest//lib/minitest.rb#1172
Minitest::BacktraceFilter::MT_RE = T.let(T.unsafe(nil), Regexp)

# source://minitest//lib/minitest.rb#964
class Minitest::CompositeReporter < ::Minitest::AbstractReporter
  # source://minitest//lib/minitest.rb#970
  def initialize(*reporters); end

  # source://minitest//lib/minitest.rb#982
  def <<(reporter); end

  # source://minitest//lib/minitest.rb#975
  def io; end

  # source://minitest//lib/minitest.rb#986
  def passed?; end

  # source://minitest//lib/minitest.rb#994
  def prerecord(klass, name); end

  # source://minitest//lib/minitest.rb#1001
  def record(result); end

  # source://minitest//lib/minitest.rb#1007
  def report; end

  # source://minitest//lib/minitest.rb#968
  def reporters; end

  # source://minitest//lib/minitest.rb#968
  def reporters=(_arg0); end

  # source://minitest//lib/minitest.rb#990
  def start; end
end

# source://minitest//lib/minitest/compress.rb#5
module Minitest::Compress
  # source://minitest//lib/minitest/compress.rb#11
  def compress(orig); end
end

# source://minitest//lib/minitest.rb#1114
module Minitest::Guard
  # source://minitest//lib/minitest.rb#1119
  def jruby?(platform = T.unsafe(nil)); end

  # source://minitest//lib/minitest.rb#1126
  def maglev?(platform = T.unsafe(nil)); end

  # source://minitest//lib/minitest.rb#1136
  def mri?(platform = T.unsafe(nil)); end

  # source://minitest//lib/minitest.rb#1143
  def osx?(platform = T.unsafe(nil)); end

  # source://minitest//lib/minitest.rb#1150
  def rubinius?(platform = T.unsafe(nil)); end

  # source://minitest//lib/minitest.rb#1160
  def windows?(platform = T.unsafe(nil)); end
end

# source://minitest//lib/minitest/parallel.rb#2
module Minitest::Parallel; end

# source://minitest//lib/minitest/parallel.rb#7
class Minitest::Parallel::Executor
  # source://minitest//lib/minitest/parallel.rb#17
  def initialize(size); end

  # source://minitest//lib/minitest/parallel.rb#43
  def <<(work); end

  # source://minitest//lib/minitest/parallel.rb#50
  def shutdown; end

  # source://minitest//lib/minitest/parallel.rb#12
  def size; end

  # source://minitest//lib/minitest/parallel.rb#26
  def start; end
end

# source://minitest//lib/minitest/parallel.rb#56
module Minitest::Parallel::Test
  # source://minitest//lib/minitest/parallel.rb#57
  def _synchronize; end
end

# source://minitest//lib/minitest/parallel.rb#59
module Minitest::Parallel::Test::ClassMethods
  # source://minitest//lib/minitest/parallel.rb#60
  def run_one_method(klass, method_name, reporter); end

  # source://minitest//lib/minitest/parallel.rb#64
  def test_order; end
end

# source://minitest//lib/minitest.rb#754
class Minitest::ProgressReporter < ::Minitest::Reporter
  # source://minitest//lib/minitest.rb#755
  def prerecord(klass, name); end

  # source://minitest//lib/minitest.rb#762
  def record(result); end
end

# source://minitest//lib/minitest.rb#576
module Minitest::Reportable
  # source://minitest//lib/minitest.rb#598
  def class_name; end

  # source://minitest//lib/minitest.rb#619
  def error?; end

  # source://minitest//lib/minitest.rb#593
  def location; end

  # source://minitest//lib/minitest.rb#583
  def passed?; end

  # source://minitest//lib/minitest.rb#605
  def result_code; end

  # source://minitest//lib/minitest.rb#612
  def skipped?; end
end

# source://minitest//lib/minitest.rb#587
Minitest::Reportable::BASE_DIR = T.let(T.unsafe(nil), String)

# source://minitest//lib/minitest.rb#730
class Minitest::Reporter < ::Minitest::AbstractReporter
  # source://minitest//lib/minitest.rb#739
  def initialize(io = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://minitest//lib/minitest.rb#732
  def io; end

  # source://minitest//lib/minitest.rb#732
  def io=(_arg0); end

  # source://minitest//lib/minitest.rb#737
  def options; end

  # source://minitest//lib/minitest.rb#737
  def options=(_arg0); end
end

# source://minitest//lib/minitest.rb#631
class Minitest::Result < ::Minitest::Runnable
  include ::Minitest::Reportable

  # source://minitest//lib/minitest.rb#665
  def class_name; end

  # source://minitest//lib/minitest.rb#640
  def klass; end

  # source://minitest//lib/minitest.rb#640
  def klass=(_arg0); end

  # source://minitest//lib/minitest.rb#645
  def source_location; end

  # source://minitest//lib/minitest.rb#645
  def source_location=(_arg0); end

  # source://minitest//lib/minitest.rb#669
  def to_s; end

  class << self
    # source://minitest//lib/minitest.rb#650
    def from(runnable); end
  end
end

# source://minitest//lib/minitest.rb#349
class Minitest::Runnable
  # source://minitest//lib/minitest.rb#507
  def initialize(name); end

  # source://minitest//lib/minitest.rb#353
  def assertions; end

  # source://minitest//lib/minitest.rb#353
  def assertions=(_arg0); end

  # source://minitest//lib/minitest.rb#503
  def failure; end

  # source://minitest//lib/minitest.rb#358
  def failures; end

  # source://minitest//lib/minitest.rb#358
  def failures=(_arg0); end

  # source://minitest//lib/minitest.rb#489
  def marshal_dump; end

  # source://minitest//lib/minitest.rb#499
  def marshal_load(ary); end

  # source://minitest//lib/minitest.rb#522
  def metadata; end

  # source://minitest//lib/minitest.rb#529
  def metadata=(_arg0); end

  # source://minitest//lib/minitest.rb#534
  def metadata?; end

  # source://minitest//lib/minitest.rb#376
  def name; end

  # source://minitest//lib/minitest.rb#383
  def name=(o); end

  # source://minitest//lib/minitest.rb#551
  def passed?; end

  # source://minitest//lib/minitest.rb#560
  def result_code; end

  # source://minitest//lib/minitest.rb#541
  def run; end

  # source://minitest//lib/minitest.rb#567
  def skipped?; end

  # source://minitest//lib/minitest.rb#363
  def time; end

  # source://minitest//lib/minitest.rb#363
  def time=(_arg0); end

  # source://minitest//lib/minitest.rb#365
  def time_it; end

  class << self
    # source://minitest//lib/minitest.rb#1218
    def inherited(klass); end

    # source://minitest//lib/minitest.rb#390
    def methods_matching(re); end

    # source://minitest//lib/minitest.rb#459
    def on_signal(name, action); end

    # source://minitest//lib/minitest.rb#394
    def reset; end

    # source://minitest//lib/minitest.rb#405
    def run(reporter, options = T.unsafe(nil)); end

    # source://minitest//lib/minitest.rb#431
    def run_one_method(klass, method_name, reporter); end

    # source://minitest//lib/minitest.rb#476
    def runnable_methods; end

    # source://minitest//lib/minitest.rb#483
    def runnables; end

    # source://minitest//lib/minitest.rb#440
    def test_order; end

    # source://minitest//lib/minitest.rb#444
    def with_info_handler(reporter, &block); end
  end
end

# source://minitest//lib/minitest.rb#457
Minitest::Runnable::SIGNALS = T.let(T.unsafe(nil), Hash)

# source://minitest//lib/minitest.rb#1045
class Minitest::Skip < ::Minitest::Assertion
  # source://minitest//lib/minitest.rb#1046
  def result_label; end
end

# source://minitest//lib/minitest.rb#790
class Minitest::StatisticsReporter < ::Minitest::Reporter
  # source://minitest//lib/minitest.rb#839
  def initialize(io = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://minitest//lib/minitest.rb#794
  def assertions; end

  # source://minitest//lib/minitest.rb#794
  def assertions=(_arg0); end

  # source://minitest//lib/minitest.rb#799
  def count; end

  # source://minitest//lib/minitest.rb#799
  def count=(_arg0); end

  # source://minitest//lib/minitest.rb#827
  def errors; end

  # source://minitest//lib/minitest.rb#827
  def errors=(_arg0); end

  # source://minitest//lib/minitest.rb#822
  def failures; end

  # source://minitest//lib/minitest.rb#822
  def failures=(_arg0); end

  # source://minitest//lib/minitest.rb#853
  def passed?; end

  # source://minitest//lib/minitest.rb#861
  def record(result); end

  # source://minitest//lib/minitest.rb#871
  def report; end

  # source://minitest//lib/minitest.rb#804
  def results; end

  # source://minitest//lib/minitest.rb#804
  def results=(_arg0); end

  # source://minitest//lib/minitest.rb#837
  def skips; end

  # source://minitest//lib/minitest.rb#837
  def skips=(_arg0); end

  # source://minitest//lib/minitest.rb#857
  def start; end

  # source://minitest//lib/minitest.rb#811
  def start_time; end

  # source://minitest//lib/minitest.rb#811
  def start_time=(_arg0); end

  # source://minitest//lib/minitest.rb#817
  def total_time; end

  # source://minitest//lib/minitest.rb#817
  def total_time=(_arg0); end

  # source://minitest//lib/minitest.rb#832
  def warnings; end

  # source://minitest//lib/minitest.rb#832
  def warnings=(_arg0); end
end

# source://minitest//lib/minitest.rb#892
class Minitest::SummaryReporter < ::Minitest::StatisticsReporter
  # source://minitest//lib/minitest.rb#927
  def aggregated_results(io); end

  # source://minitest//lib/minitest.rb#895
  def old_sync; end

  # source://minitest//lib/minitest.rb#895
  def old_sync=(_arg0); end

  # source://minitest//lib/minitest.rb#910
  def report; end

  # source://minitest//lib/minitest.rb#898
  def start; end

  # source://minitest//lib/minitest.rb#922
  def statistics; end

  # source://minitest//lib/minitest.rb#947
  def summary; end

  # source://minitest//lib/minitest.rb#894
  def sync; end

  # source://minitest//lib/minitest.rb#894
  def sync=(_arg0); end

  # source://minitest//lib/minitest.rb#943
  def to_s; end
end

# source://minitest//lib/minitest/test.rb#10
class Minitest::Test < ::Minitest::Runnable
  include ::Minitest::Assertions
  include ::Minitest::Reportable
  include ::Minitest::Test::LifecycleHooks
  include ::Minitest::Guard
  extend ::Minitest::Guard

  # source://minitest//lib/minitest/test.rb#191
  def capture_exceptions; end

  # source://minitest//lib/minitest/test.rb#15
  def class_name; end

  # source://minitest//lib/minitest/test.rb#208
  def neuter_exception(e); end

  # source://minitest//lib/minitest/test.rb#219
  def new_exception(klass, msg, bt, kill = T.unsafe(nil)); end

  # source://minitest//lib/minitest/test.rb#87
  def run; end

  # source://minitest//lib/minitest/test.rb#201
  def sanitize_exception(e); end

  # source://minitest//lib/minitest/test.rb#233
  def with_info_handler(&block); end

  class << self
    # source://minitest//lib/minitest/test.rb#35
    def i_suck_and_my_tests_are_order_dependent!; end

    # source://minitest//lib/minitest/test.rb#26
    def io_lock; end

    # source://minitest//lib/minitest/test.rb#26
    def io_lock=(_arg0); end

    # source://minitest//lib/minitest/test.rb#48
    def make_my_diffs_pretty!; end

    # source://minitest//lib/minitest/test.rb#60
    def parallelize_me!; end

    # source://minitest//lib/minitest/test.rb#70
    def runnable_methods; end
  end
end

# source://minitest//lib/minitest/test.rb#114
module Minitest::Test::LifecycleHooks
  # source://minitest//lib/minitest/test.rb#164
  def after_setup; end

  # source://minitest//lib/minitest/test.rb#188
  def after_teardown; end

  # source://minitest//lib/minitest/test.rb#149
  def before_setup; end

  # source://minitest//lib/minitest/test.rb#173
  def before_teardown; end

  # source://minitest//lib/minitest/test.rb#155
  def setup; end

  # source://minitest//lib/minitest/test.rb#179
  def teardown; end
end

# source://minitest//lib/minitest/test.rb#19
Minitest::Test::PASSTHROUGH_EXCEPTIONS = T.let(T.unsafe(nil), Array)

# source://minitest//lib/minitest/test.rb#21
Minitest::Test::SETUP_METHODS = T.let(T.unsafe(nil), Array)

# source://minitest//lib/minitest/test.rb#23
Minitest::Test::TEARDOWN_METHODS = T.let(T.unsafe(nil), Array)

# source://minitest//lib/minitest.rb#1054
class Minitest::UnexpectedError < ::Minitest::Assertion
  include ::Minitest::Compress

  # source://minitest//lib/minitest.rb#1060
  def initialize(error); end

  # source://minitest//lib/minitest.rb#1073
  def backtrace; end

  # source://minitest//lib/minitest.rb#1058
  def error; end

  # source://minitest//lib/minitest.rb#1058
  def error=(_arg0); end

  # source://minitest//lib/minitest.rb#1079
  def message; end

  # source://minitest//lib/minitest.rb#1085
  def result_label; end
end

# source://minitest//lib/minitest.rb#1077
Minitest::UnexpectedError::BASE_RE = T.let(T.unsafe(nil), Regexp)

# source://minitest//lib/minitest.rb#1093
class Minitest::UnexpectedWarning < ::Minitest::Assertion
  # source://minitest//lib/minitest.rb#1094
  def result_label; end
end

# source://minitest//lib/minitest.rb#12
Minitest::VERSION = T.let(T.unsafe(nil), String)
