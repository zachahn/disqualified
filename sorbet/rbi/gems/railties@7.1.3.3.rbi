# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `railties` gem.
# Please instead update this file by running `bin/tapioca gem railties`.


# source://railties//lib/rails/gem_version.rb#3
module Rails
  extend ::ActiveSupport::Autoload
  extend ::ActiveSupport::Benchmarkable

  class << self
    # source://railties//lib/rails.rb#42
    def app_class; end

    # source://railties//lib/rails.rb#42
    def app_class=(_arg0); end

    # source://railties//lib/rails.rb#43
    def application; end

    # source://railties//lib/rails.rb#41
    def application=(_arg0); end

    # source://railties//lib/rails.rb#123
    def autoloaders; end

    # source://railties//lib/rails.rb#54
    def backtrace_cleaner; end

    # source://railties//lib/rails.rb#42
    def cache; end

    # source://railties//lib/rails.rb#42
    def cache=(_arg0); end

    # source://railties//lib/rails.rb#50
    def configuration; end

    # source://railties//lib/rails/deprecator.rb#4
    def deprecator; end

    # source://railties//lib/rails.rb#72
    def env; end

    # source://railties//lib/rails.rb#79
    def env=(environment); end

    # source://railties//lib/rails.rb#90
    def error; end

    # source://railties//lib/rails/gem_version.rb#5
    def gem_version; end

    # source://railties//lib/rails.rb#103
    def groups(*groups); end

    # source://railties//lib/rails.rb#47
    def initialize!(*_arg0, **_arg1, &_arg2); end

    # source://railties//lib/rails.rb#47
    def initialized?(*_arg0, **_arg1, &_arg2); end

    # source://railties//lib/rails.rb#42
    def logger; end

    # source://railties//lib/rails.rb#42
    def logger=(_arg0); end

    # source://railties//lib/rails.rb#119
    def public_path; end

    # source://railties//lib/rails.rb#63
    def root; end

    # source://railties//lib/rails/version.rb#7
    def version; end
  end
end

# source://railties//lib/rails/application.rb#62
class Rails::Application < ::Rails::Engine
  # source://railties//lib/rails/application.rb#109
  def initialize(initial_variable_values = T.unsafe(nil), &block); end

  # source://sprockets-rails/3.4.2/lib/sprockets/railtie.rb#37
  def asset_precompiled?(logical_path); end

  # source://sprockets-rails/3.4.2/lib/sprockets/railtie.rb#30
  def assets; end

  # source://sprockets-rails/3.4.2/lib/sprockets/railtie.rb#30
  def assets=(_arg0); end

  # source://sprockets-rails/3.4.2/lib/sprockets/railtie.rb#33
  def assets_manifest; end

  # source://sprockets-rails/3.4.2/lib/sprockets/railtie.rb#33
  def assets_manifest=(_arg0); end

  # source://railties//lib/rails/application.rb#102
  def autoloaders; end

  # source://railties//lib/rails/engine.rb#517
  def build_middleware_stack; end

  # source://railties//lib/rails/application.rb#437
  def config; end

  # source://railties//lib/rails/application.rb#441
  def config=(_arg0); end

  # source://railties//lib/rails/application.rb#274
  def config_for(name, env: T.unsafe(nil)); end

  # source://railties//lib/rails/application.rb#357
  def console(&blk); end

  # source://railties//lib/rails/application.rb#516
  def credentials; end

  # source://railties//lib/rails/application.rb#460
  def credentials=(_arg0); end

  # source://railties//lib/rails/application.rb#104
  def default_url_options(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/application.rb#104
  def default_url_options=(arg); end

  # source://railties//lib/rails/application.rb#230
  def deprecators; end

  # source://railties//lib/rails/application.rb#574
  def eager_load!; end

  # source://railties//lib/rails/application.rb#535
  def encrypted(path, key_path: T.unsafe(nil), env_key: T.unsafe(nil)); end

  # source://railties//lib/rails/application.rb#303
  def env_config; end

  # source://railties//lib/rails/application.rb#102
  def executor; end

  # source://railties//lib/rails/application.rb#363
  def generators(&blk); end

  # source://railties//lib/rails/application.rb#548
  def helpers_paths; end

  # source://railties//lib/rails/application.rb#424
  def initialize!(group = T.unsafe(nil)); end

  # source://railties//lib/rails/application.rb#134
  def initialized?; end

  # source://railties//lib/rails/application.rb#345
  def initializer(name, opts = T.unsafe(nil), &block); end

  # source://railties//lib/rails/application.rb#431
  def initializers; end

  # source://railties//lib/rails/application.rb#374
  def isolate_namespace(mod); end

  # source://railties//lib/rails/application.rb#161
  def key_generator(secret_key_base = T.unsafe(nil)); end

  # source://railties//lib/rails/application.rb#568
  def load_generators(app = T.unsafe(nil)); end

  # source://railties//lib/rails/application.rb#222
  def message_verifier(verifier_name); end

  # source://railties//lib/rails/application.rb#197
  def message_verifiers; end

  # source://railties//lib/rails/application.rb#564
  def migration_railties; end

  # source://sprockets-rails/3.4.2/lib/sprockets/railtie.rb#51
  def precompiled_assets(clear_cache = T.unsafe(nil)); end

  # source://railties//lib/rails/application.rb#338
  def rake_tasks(&block); end

  # source://railties//lib/rails/application.rb#153
  def reload_routes!; end

  # source://railties//lib/rails/application.rb#102
  def reloader; end

  # source://railties//lib/rails/application.rb#102
  def reloaders; end

  # source://railties//lib/rails/application.rb#400
  def require_environment!; end

  # source://railties//lib/rails/application.rb#405
  def routes_reloader; end

  # source://railties//lib/rails/application.rb#138
  def run_load_hooks!; end

  # source://railties//lib/rails/application.rb#351
  def runner(&blk); end

  # source://railties//lib/rails/application.rb#100
  def sandbox; end

  # source://railties//lib/rails/application.rb#100
  def sandbox=(_arg0); end

  # source://railties//lib/rails/application.rb#100
  def sandbox?; end

  # source://railties//lib/rails/application.rb#478
  def secret_key_base; end

  # source://railties//lib/rails/application.rb#443
  def secrets; end

  # source://railties//lib/rails/application.rb#460
  def secrets=(_arg0); end

  # source://railties//lib/rails/application.rb#369
  def server(&blk); end

  # source://railties//lib/rails/application.rb#544
  def to_app; end

  # source://railties//lib/rails/application.rb#412
  def watchable_args; end

  protected

  # source://railties//lib/rails/application.rb#647
  def default_middleware_stack; end

  # source://railties//lib/rails/application.rb#662
  def ensure_generator_templates_added; end

  # source://railties//lib/rails/application.rb#613
  def ordered_railties; end

  # source://railties//lib/rails/application.rb#635
  def railties_initializers(current); end

  # source://railties//lib/rails/application.rb#602
  def run_console_blocks(app); end

  # source://railties//lib/rails/application.rb#592
  def run_generators_blocks(app); end

  # source://railties//lib/rails/application.rb#597
  def run_runner_blocks(app); end

  # source://railties//lib/rails/application.rb#607
  def run_server_blocks(app); end

  # source://railties//lib/rails/application.rb#581
  def run_tasks_blocks(app); end

  # source://railties//lib/rails/application.rb#652
  def validate_secret_key_base(secret_key_base); end

  private

  # source://railties//lib/rails/application.rb#700
  def build_middleware; end

  # source://railties//lib/rails/application.rb#693
  def build_request(env); end

  # source://railties//lib/rails/application.rb#704
  def coerce_same_site_protection(protection); end

  # source://railties//lib/rails/application.rb#708
  def filter_parameters; end

  # source://railties//lib/rails/application.rb#668
  def generate_local_secret; end

  # source://railties//lib/rails/application.rb#687
  def secrets_secret_key_base; end

  class << self
    # source://railties//lib/rails/application.rb#393
    def add_lib_to_load_path!(root); end

    # source://railties//lib/rails/application.rb#84
    def create(initial_variable_values = T.unsafe(nil), &block); end

    # source://railties//lib/rails/application.rb#88
    def find_root(from); end

    # source://railties//lib/rails/application.rb#71
    def inherited(base); end

    # source://railties//lib/rails/application.rb#80
    def instance; end

    def new(*_arg0); end
  end
end

# source://railties//lib/rails/application/bootstrap.rb#12
module Rails::Application::Bootstrap
  include ::Rails::Initializable
  extend ::Rails::Initializable::ClassMethods
end

# source://railties//lib/rails/application/configuration.rb#13
class Rails::Application::Configuration < ::Rails::Engine::Configuration
  # source://railties//lib/rails/application/configuration.rb#30
  def initialize(*_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def add_autoload_paths_to_load_path; end

  # source://railties//lib/rails/application/configuration.rb#14
  def add_autoload_paths_to_load_path=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def allow_concurrency; end

  # source://railties//lib/rails/application/configuration.rb#14
  def allow_concurrency=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#541
  def annotations; end

  # source://railties//lib/rails/application/configuration.rb#28
  def api_only; end

  # source://railties//lib/rails/application/configuration.rb#375
  def api_only=(value); end

  # source://railties//lib/rails/application/configuration.rb#14
  def asset_host; end

  # source://railties//lib/rails/application/configuration.rb#14
  def asset_host=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def assume_ssl; end

  # source://railties//lib/rails/application/configuration.rb#14
  def assume_ssl=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def autoflush_log; end

  # source://railties//lib/rails/application/configuration.rb#14
  def autoflush_log=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#473
  def autoload_lib(ignore:); end

  # source://railties//lib/rails/application/configuration.rb#485
  def autoload_lib_once(ignore:); end

  # source://railties//lib/rails/application/configuration.rb#14
  def beginning_of_week; end

  # source://railties//lib/rails/application/configuration.rb#14
  def beginning_of_week=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#387
  def broadcast_log_level; end

  # source://railties//lib/rails/application/configuration.rb#14
  def cache_classes; end

  # source://railties//lib/rails/application/configuration.rb#14
  def cache_classes=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def cache_store; end

  # source://railties//lib/rails/application/configuration.rb#14
  def cache_store=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#497
  def colorize_logging; end

  # source://railties//lib/rails/application/configuration.rb#501
  def colorize_logging=(val); end

  # source://railties//lib/rails/application/configuration.rb#14
  def consider_all_requests_local; end

  # source://railties//lib/rails/application/configuration.rb#14
  def consider_all_requests_local=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def console; end

  # source://railties//lib/rails/application/configuration.rb#14
  def console=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#546
  def content_security_policy(&block); end

  # source://railties//lib/rails/application/configuration.rb#14
  def content_security_policy_nonce_directives; end

  # source://railties//lib/rails/application/configuration.rb#14
  def content_security_policy_nonce_directives=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def content_security_policy_nonce_generator; end

  # source://railties//lib/rails/application/configuration.rb#14
  def content_security_policy_nonce_generator=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def content_security_policy_report_only; end

  # source://railties//lib/rails/application/configuration.rb#14
  def content_security_policy_report_only=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def credentials; end

  # source://railties//lib/rails/application/configuration.rb#14
  def credentials=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#436
  def database_configuration; end

  # source://railties//lib/rails/application/configuration.rb#391
  def debug_exception_response_format; end

  # source://railties//lib/rails/application/configuration.rb#395
  def debug_exception_response_format=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#563
  def default_log_file; end

  # source://railties//lib/rails/application/configuration.rb#14
  def disable_sandbox; end

  # source://railties//lib/rails/application/configuration.rb#14
  def disable_sandbox=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def dom_testing_default_html_version; end

  # source://railties//lib/rails/application/configuration.rb#14
  def dom_testing_default_html_version=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def eager_load; end

  # source://railties//lib/rails/application/configuration.rb#14
  def eager_load=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#357
  def enable_dependency_loading; end

  # source://railties//lib/rails/application/configuration.rb#362
  def enable_dependency_loading=(value); end

  # source://railties//lib/rails/application/configuration.rb#343
  def enable_reloading; end

  # source://railties//lib/rails/application/configuration.rb#347
  def enable_reloading=(value); end

  # source://railties//lib/rails/application/configuration.rb#28
  def encoding; end

  # source://railties//lib/rails/application/configuration.rb#367
  def encoding=(value); end

  # source://railties//lib/rails/application/configuration.rb#14
  def exceptions_app; end

  # source://railties//lib/rails/application/configuration.rb#14
  def exceptions_app=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def file_watcher; end

  # source://railties//lib/rails/application/configuration.rb#14
  def file_watcher=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def filter_parameters; end

  # source://railties//lib/rails/application/configuration.rb#14
  def filter_parameters=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def filter_redirect; end

  # source://railties//lib/rails/application/configuration.rb#14
  def filter_redirect=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def force_ssl; end

  # source://railties//lib/rails/application/configuration.rb#14
  def force_ssl=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def helpers_paths; end

  # source://railties//lib/rails/application/configuration.rb#14
  def helpers_paths=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def host_authorization; end

  # source://railties//lib/rails/application/configuration.rb#14
  def host_authorization=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def hosts; end

  # source://railties//lib/rails/application/configuration.rb#14
  def hosts=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#575
  def inspect; end

  # source://railties//lib/rails/application/configuration.rb#418
  def load_database_yaml; end

  # source://railties//lib/rails/application/configuration.rb#92
  def load_defaults(target_version); end

  # source://railties//lib/rails/application/configuration.rb#28
  def loaded_config_version; end

  # source://railties//lib/rails/application/configuration.rb#14
  def log_file_size; end

  # source://railties//lib/rails/application/configuration.rb#14
  def log_file_size=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def log_formatter; end

  # source://railties//lib/rails/application/configuration.rb#14
  def log_formatter=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#28
  def log_level; end

  # source://railties//lib/rails/application/configuration.rb#382
  def log_level=(level); end

  # source://railties//lib/rails/application/configuration.rb#14
  def log_tags; end

  # source://railties//lib/rails/application/configuration.rb#14
  def log_tags=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def logger; end

  # source://railties//lib/rails/application/configuration.rb#14
  def logger=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#397
  def paths; end

  # source://railties//lib/rails/application/configuration.rb#555
  def permissions_policy(&block); end

  # source://railties//lib/rails/application/configuration.rb#14
  def precompile_filter_parameters; end

  # source://railties//lib/rails/application/configuration.rb#14
  def precompile_filter_parameters=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def public_file_server; end

  # source://railties//lib/rails/application/configuration.rb#14
  def public_file_server=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def railties_order; end

  # source://railties//lib/rails/application/configuration.rb#14
  def railties_order=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def rake_eager_load; end

  # source://railties//lib/rails/application/configuration.rb#14
  def rake_eager_load=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def read_encrypted_secrets; end

  # source://railties//lib/rails/application/configuration.rb#14
  def read_encrypted_secrets=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def relative_url_root; end

  # source://railties//lib/rails/application/configuration.rb#14
  def relative_url_root=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def reload_classes_only_on_change; end

  # source://railties//lib/rails/application/configuration.rb#14
  def reload_classes_only_on_change=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#339
  def reloading_enabled?; end

  # source://railties//lib/rails/application/configuration.rb#14
  def require_master_key; end

  # source://railties//lib/rails/application/configuration.rb#14
  def require_master_key=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def sandbox_by_default; end

  # source://railties//lib/rails/application/configuration.rb#14
  def sandbox_by_default=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def secret_key_base; end

  # source://railties//lib/rails/application/configuration.rb#14
  def secret_key_base=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def server_timing; end

  # source://railties//lib/rails/application/configuration.rb#14
  def server_timing=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def session_options; end

  # source://railties//lib/rails/application/configuration.rb#14
  def session_options=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#521
  def session_store(new_session_store = T.unsafe(nil), **options); end

  # source://railties//lib/rails/application/configuration.rb#537
  def session_store?; end

  # source://railties//lib/rails/application/configuration.rb#14
  def ssl_options; end

  # source://railties//lib/rails/application/configuration.rb#14
  def ssl_options=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def time_zone; end

  # source://railties//lib/rails/application/configuration.rb#14
  def time_zone=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def x; end

  # source://railties//lib/rails/application/configuration.rb#14
  def x=(_arg0); end

  private

  # source://railties//lib/rails/application/configuration.rb#600
  def credentials_defaults; end
end

# source://railties//lib/rails/application/configuration.rb#579
class Rails::Application::Configuration::Custom
  # source://railties//lib/rails/application/configuration.rb#580
  def initialize; end

  # source://railties//lib/rails/application/configuration.rb#584
  def method_missing(method, *args); end

  private

  # source://railties//lib/rails/application/configuration.rb#594
  def respond_to_missing?(symbol, *_arg1); end
end

# source://railties//lib/rails/application/configuration.rb#351
Rails::Application::Configuration::ENABLE_DEPENDENCY_LOADING_WARNING = T.let(T.unsafe(nil), String)

# source://railties//lib/rails/application/default_middleware_stack.rb#5
class Rails::Application::DefaultMiddlewareStack
  # source://railties//lib/rails/application/default_middleware_stack.rb#8
  def initialize(app, config, paths); end

  # source://railties//lib/rails/application/default_middleware_stack.rb#6
  def app; end

  # source://railties//lib/rails/application/default_middleware_stack.rb#14
  def build_stack; end

  # source://railties//lib/rails/application/default_middleware_stack.rb#6
  def config; end

  # source://railties//lib/rails/application/default_middleware_stack.rb#6
  def paths; end

  private

  # source://railties//lib/rails/application/default_middleware_stack.rb#109
  def load_rack_cache; end

  # source://railties//lib/rails/application/default_middleware_stack.rb#131
  def show_exceptions_app; end
end

# source://railties//lib/rails/application/finisher.rb#11
module Rails::Application::Finisher
  include ::Rails::Initializable
  extend ::Rails::Initializable::ClassMethods
end

# source://railties//lib/rails/application/finisher.rb#110
module Rails::Application::Finisher::InterlockHook
  class << self
    # source://railties//lib/rails/application/finisher.rb#115
    def complete(_state); end

    # source://railties//lib/rails/application/finisher.rb#111
    def run; end
  end
end

# source://railties//lib/rails/application/finisher.rb#96
class Rails::Application::Finisher::MonitorHook
  # source://railties//lib/rails/application/finisher.rb#97
  def initialize(monitor = T.unsafe(nil)); end

  # source://railties//lib/rails/application/finisher.rb#105
  def complete(_state); end

  # source://railties//lib/rails/application/finisher.rb#101
  def run; end
end

# source://railties//lib/rails/application.rb#106
Rails::Application::INITIAL_VARIABLES = T.let(T.unsafe(nil), Array)

# source://railties//lib/rails/application/routes_reloader.rb#7
class Rails::Application::RoutesReloader
  include ::ActiveSupport::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker

  # source://railties//lib/rails/application/routes_reloader.rb#15
  def initialize; end

  # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#70
  def __callbacks; end

  # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#70
  def __callbacks?; end

  # source://railties//lib/rails/application/routes_reloader.rb#11
  def eager_load; end

  # source://railties//lib/rails/application/routes_reloader.rb#11
  def eager_load=(_arg0); end

  # source://railties//lib/rails/application/routes_reloader.rb#13
  def execute(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/application/routes_reloader.rb#13
  def execute_if_updated(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/application/routes_reloader.rb#10
  def external_routes; end

  # source://railties//lib/rails/application/routes_reloader.rb#10
  def paths; end

  # source://railties//lib/rails/application/routes_reloader.rb#22
  def reload!; end

  # source://railties//lib/rails/application/routes_reloader.rb#10
  def route_sets; end

  # source://railties//lib/rails/application/routes_reloader.rb#12
  def run_after_load_paths=(_arg0); end

  # source://railties//lib/rails/application/routes_reloader.rb#13
  def updated?(*_arg0, **_arg1, &_arg2); end

  private

  # source://railties//lib/rails/application/routes_reloader.rb#42
  def clear!; end

  # source://railties//lib/rails/application/routes_reloader.rb#58
  def finalize!; end

  # source://railties//lib/rails/application/routes_reloader.rb#49
  def load_paths; end

  # source://railties//lib/rails/application/routes_reloader.rb#62
  def revert; end

  # source://railties//lib/rails/application/routes_reloader.rb#54
  def run_after_load_paths; end

  # source://railties//lib/rails/application/routes_reloader.rb#32
  def updater; end

  class << self
    # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#70
    def __callbacks=(value); end

    # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#70
    def __callbacks?; end
  end
end

# source://railties//lib/rails/application_controller.rb#3
class Rails::ApplicationController < ::ActionController::Base
  private

  # source://actionview/7.1.3.3/lib/action_view/layouts.rb#330
  def _layout(lookup_context, formats); end

  # source://railties//lib/rails/application_controller.rb#25
  def disable_content_security_policy_nonce!; end

  # source://railties//lib/rails/application_controller.rb#21
  def local_request?; end

  # source://railties//lib/rails/application_controller.rb#15
  def require_local!; end

  class << self
    # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://actionview/7.1.3.3/lib/action_view/layouts.rb#211
    def _layout; end

    # source://actionview/7.1.3.3/lib/action_view/layouts.rb#212
    def _layout_conditions; end

    # source://actionpack/7.1.3.3/lib/action_controller/metal.rb#262
    def middleware_stack; end
  end
end

# source://railties//lib/rails/autoloaders.rb#4
class Rails::Autoloaders
  include ::Enumerable

  # source://railties//lib/rails/autoloaders.rb#11
  def initialize; end

  # source://railties//lib/rails/autoloaders.rb#31
  def each; end

  # source://railties//lib/rails/autoloaders.rb#40
  def log!; end

  # source://railties//lib/rails/autoloaders.rb#36
  def logger=(logger); end

  # source://railties//lib/rails/autoloaders.rb#9
  def main; end

  # source://railties//lib/rails/autoloaders.rb#9
  def once; end

  # source://railties//lib/rails/autoloaders.rb#44
  def zeitwerk_enabled?; end
end

# source://railties//lib/rails/autoloaders/inflector.rb#7
module Rails::Autoloaders::Inflector
  class << self
    # source://railties//lib/rails/autoloaders/inflector.rb#12
    def camelize(basename, _abspath); end

    # source://railties//lib/rails/autoloaders/inflector.rb#16
    def inflect(overrides); end
  end
end

# source://railties//lib/rails/backtrace_cleaner.rb#7
class Rails::BacktraceCleaner < ::ActiveSupport::BacktraceCleaner
  # source://railties//lib/rails/backtrace_cleaner.rb#11
  def initialize; end
end

# source://railties//lib/rails/backtrace_cleaner.rb#8
Rails::BacktraceCleaner::APP_DIRS_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://railties//lib/rails/backtrace_cleaner.rb#9
Rails::BacktraceCleaner::RENDER_TEMPLATE_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://railties//lib/rails/command.rb#11
module Rails::Command
  include ::Rails::Command::Behavior
  extend ::ActiveSupport::Autoload
  extend ::Rails::Command::Behavior::ClassMethods

  class << self
    # source://railties//lib/rails/command.rb#116
    def application_root; end

    # source://railties//lib/rails/command.rb#57
    def environment; end

    # source://railties//lib/rails/command.rb#96
    def find_by_namespace(namespace, command_name = T.unsafe(nil)); end

    # source://railties//lib/rails/command.rb#53
    def hidden_commands; end

    # source://railties//lib/rails/command.rb#62
    def invoke(full_namespace, args = T.unsafe(nil), **config); end

    # source://railties//lib/rails/command.rb#120
    def printing_commands; end

    # source://railties//lib/rails/command.rb#108
    def root; end

    private

    # source://railties//lib/rails/command.rb#159
    def command_type; end

    # source://railties//lib/rails/command.rb#167
    def file_lookup_paths; end

    # source://railties//lib/rails/command.rb#154
    def invoke_rake(task, args, config); end

    # source://railties//lib/rails/command.rb#163
    def lookup_paths; end

    # source://railties//lib/rails/command.rb#127
    def rails_new_with_no_path?(args); end

    # source://railties//lib/rails/command.rb#131
    def split_namespace(namespace); end

    # source://railties//lib/rails/command.rb#146
    def with_argv(argv); end
  end
end

# source://railties//lib/rails/command/actions.rb#5
module Rails::Command::Actions
  # source://railties//lib/rails/command/actions.rb#18
  def boot_application!; end

  # source://railties//lib/rails/command/actions.rb#23
  def load_environment_config!; end

  # source://railties//lib/rails/command/actions.rb#46
  def load_generators; end

  # source://railties//lib/rails/command/actions.rb#42
  def load_tasks; end

  # source://railties//lib/rails/command/actions.rb#13
  def require_application!; end

  # source://railties//lib/rails/command/actions.rb#9
  def set_application_directory!; end
end

# source://railties//lib/rails/command/base.rb#14
class Rails::Command::Base < ::Thor
  include ::Rails::Command::Actions

  # source://thor/1.3.1/lib/thor/base.rb#155
  def current_subcommand; end

  # source://railties//lib/rails/command/base.rb#172
  def executable(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/command/base.rb#175
  def invoke_command(command, *_arg1); end

  class << self
    # source://railties//lib/rails/command/base.rb#86
    def banner(command = T.unsafe(nil), *_arg1); end

    # source://railties//lib/rails/command/base.rb#106
    def base_name; end

    # source://railties//lib/rails/command/base.rb#20
    def bin; end

    # source://railties//lib/rails/command/base.rb#20
    def bin=(value); end

    # source://railties//lib/rails/command/base.rb#20
    def bin?; end

    # source://railties//lib/rails/command/base.rb#122
    def class_usage; end

    # source://railties//lib/rails/command/base.rb#115
    def command_name; end

    # source://railties//lib/rails/command/base.rb#139
    def default_command_root; end

    # source://railties//lib/rails/command/base.rb#34
    def desc(usage = T.unsafe(nil), description = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://railties//lib/rails/command/base.rb#28
    def engine?; end

    # source://railties//lib/rails/command/base.rb#82
    def executable(command_name = T.unsafe(nil)); end

    # source://railties//lib/rails/command/base.rb#23
    def exit_on_failure?; end

    # source://railties//lib/rails/command/base.rb#98
    def help(shell, *_arg1); end

    # source://railties//lib/rails/command/base.rb#55
    def hide_command!; end

    # source://railties//lib/rails/command/base.rb#59
    def inherited(base); end

    # source://railties//lib/rails/command/base.rb#45
    def namespace(name = T.unsafe(nil)); end

    # source://railties//lib/rails/command/base.rb#67
    def perform(command, args, config); end

    # source://railties//lib/rails/command/base.rb#76
    def printing_commands; end

    # source://railties//lib/rails/command/base.rb#129
    def usage_path; end

    private

    # source://railties//lib/rails/command/base.rb#146
    def create_command(meth); end

    # source://railties//lib/rails/command/base.rb#159
    def namespaced_name(name); end

    # source://railties//lib/rails/command/base.rb#164
    def resolve_path(path); end
  end
end

# source://railties//lib/rails/command/base.rb#15
class Rails::Command::Base::Error < ::Thor::Error; end

# source://railties//lib/rails/command/behavior.rb#7
module Rails::Command::Behavior
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Rails::Command::Behavior::ClassMethods
end

# source://railties//lib/rails/command/behavior.rb#0
module Rails::Command::Behavior::ClassMethods
  # source://railties//lib/rails/command/behavior.rb#12
  def no_color!; end

  # source://railties//lib/rails/command/behavior.rb#17
  def subclasses; end

  private

  # source://railties//lib/rails/command/behavior.rb#36
  def lookup(namespaces); end

  # source://railties//lib/rails/command/behavior.rb#56
  def lookup!; end

  # source://railties//lib/rails/command/behavior.rb#70
  def namespaces_to_paths(namespaces); end

  # source://railties//lib/rails/command/behavior.rb#23
  def print_list(base, namespaces); end
end

# source://railties//lib/rails/command.rb#17
class Rails::Command::CorrectableNameError < ::StandardError
  include ::DidYouMean::Correctable

  # source://railties//lib/rails/command.rb#20
  def initialize(message, name, alternatives); end

  # source://railties//lib/rails/command.rb#35
  def corrections; end

  # source://railties//lib/rails/command.rb#18
  def name; end
end

# source://railties//lib/rails/command.rb#49
Rails::Command::HELP_MAPPINGS = T.let(T.unsafe(nil), Set)

# source://railties//lib/rails/command.rb#41
class Rails::Command::UnrecognizedCommandError < ::Rails::Command::CorrectableNameError
  # source://railties//lib/rails/command.rb#42
  def initialize(name); end
end

# source://railties//lib/rails/command.rb#50
Rails::Command::VERSION_MAPPINGS = T.let(T.unsafe(nil), Set)

# source://railties//lib/rails/configuration.rb#9
module Rails::Configuration; end

# source://railties//lib/rails/configuration.rb#104
class Rails::Configuration::Generators
  # source://railties//lib/rails/configuration.rb#108
  def initialize; end

  # source://railties//lib/rails/configuration.rb#130
  def after_generate(&block); end

  # source://railties//lib/rails/configuration.rb#106
  def after_generate_callbacks; end

  # source://railties//lib/rails/configuration.rb#105
  def aliases; end

  # source://railties//lib/rails/configuration.rb#105
  def aliases=(_arg0); end

  # source://railties//lib/rails/configuration.rb#105
  def api_only; end

  # source://railties//lib/rails/configuration.rb#105
  def api_only=(_arg0); end

  # source://railties//lib/rails/configuration.rb#105
  def colorize_logging; end

  # source://railties//lib/rails/configuration.rb#105
  def colorize_logging=(_arg0); end

  # source://railties//lib/rails/configuration.rb#105
  def fallbacks; end

  # source://railties//lib/rails/configuration.rb#105
  def fallbacks=(_arg0); end

  # source://railties//lib/rails/configuration.rb#106
  def hidden_namespaces; end

  # source://railties//lib/rails/configuration.rb#126
  def hide_namespace(namespace); end

  # source://railties//lib/rails/configuration.rb#134
  def method_missing(method, *args); end

  # source://railties//lib/rails/configuration.rb#105
  def options; end

  # source://railties//lib/rails/configuration.rb#105
  def options=(_arg0); end

  # source://railties//lib/rails/configuration.rb#105
  def templates; end

  # source://railties//lib/rails/configuration.rb#105
  def templates=(_arg0); end

  private

  # source://railties//lib/rails/configuration.rb#119
  def initialize_copy(source); end
end

# source://railties//lib/rails/configuration.rb#46
class Rails::Configuration::MiddlewareStackProxy
  # source://railties//lib/rails/configuration.rb#47
  def initialize(operations = T.unsafe(nil), delete_operations = T.unsafe(nil)); end

  # source://railties//lib/rails/configuration.rb#96
  def +(other); end

  # source://railties//lib/rails/configuration.rb#70
  def delete(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#52
  def insert(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#58
  def insert_after(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#52
  def insert_before(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#88
  def merge_into(other); end

  # source://railties//lib/rails/configuration.rb#74
  def move(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#80
  def move_after(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#74
  def move_before(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#62
  def swap(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#84
  def unshift(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#66
  def use(*_arg0, **_arg1, &_arg2); end

  protected

  # source://railties//lib/rails/configuration.rb#101
  def delete_operations; end

  # source://railties//lib/rails/configuration.rb#101
  def operations; end
end

# source://railties//lib/rails/engine/railties.rb#4
class Rails::Engine < ::Rails::Railtie
  include ::ActiveSupport::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods

  # source://railties//lib/rails/engine.rb#439
  def initialize; end

  # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#70
  def __callbacks; end

  # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#70
  def __callbacks?; end

  # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#963
  def _load_seed_callbacks; end

  # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#951
  def _run_load_seed_callbacks(&block); end

  # source://railties//lib/rails/engine.rb#517
  def app; end

  # source://railties//lib/rails/engine.rb#534
  def call(env); end

  # source://railties//lib/rails/engine.rb#553
  def config; end

  # source://railties//lib/rails/engine.rb#491
  def eager_load!; end

  # source://railties//lib/rails/engine.rb#529
  def endpoint; end

  # source://railties//lib/rails/engine.rb#437
  def engine_name(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/engine.rb#540
  def env_config; end

  # source://railties//lib/rails/engine.rb#501
  def helpers; end

  # source://railties//lib/rails/engine.rb#512
  def helpers_paths; end

  # source://railties//lib/rails/engine.rb#437
  def isolated?(&block); end

  # source://railties//lib/rails/engine.rb#453
  def load_console(app = T.unsafe(nil)); end

  # source://railties//lib/rails/engine.rb#477
  def load_generators(app = T.unsafe(nil)); end

  # source://railties//lib/rails/engine.rb#462
  def load_runner(app = T.unsafe(nil)); end

  # source://railties//lib/rails/engine.rb#561
  def load_seed; end

  # source://railties//lib/rails/engine.rb#486
  def load_server(app = T.unsafe(nil)); end

  # source://railties//lib/rails/engine.rb#469
  def load_tasks(app = T.unsafe(nil)); end

  # source://railties//lib/rails/engine.rb#436
  def middleware(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/engine.rb#436
  def paths(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/engine.rb#496
  def railties; end

  # source://railties//lib/rails/engine.rb#436
  def root(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/engine.rb#546
  def routes(&block); end

  # source://railties//lib/rails/engine.rb#677
  def routes?; end

  protected

  # source://railties//lib/rails/engine.rb#682
  def run_tasks_blocks(*_arg0); end

  private

  # source://railties//lib/rails/engine.rb#714
  def _all_autoload_once_paths; end

  # source://railties//lib/rails/engine.rb#718
  def _all_autoload_paths; end

  # source://railties//lib/rails/engine.rb#727
  def _all_load_paths(add_autoload_paths_to_load_path); end

  # source://railties//lib/rails/engine.rb#751
  def build_middleware; end

  # source://railties//lib/rails/engine.rb#743
  def build_request(env); end

  # source://railties//lib/rails/engine.rb#710
  def default_middleware_stack; end

  # source://railties//lib/rails/engine.rb#738
  def fixtures_in_root_and_not_in_vendor?(fixtures); end

  # source://railties//lib/rails/engine.rb#694
  def has_migrations?; end

  # source://railties//lib/rails/engine.rb#688
  def load_config_initializer(initializer); end

  class << self
    # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#70
    def __callbacks=(value); end

    # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#70
    def __callbacks?; end

    # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#955
    def _load_seed_callbacks; end

    # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#959
    def _load_seed_callbacks=(value); end

    # source://railties//lib/rails/engine.rb#354
    def called_from; end

    # source://railties//lib/rails/engine.rb#354
    def called_from=(_arg0); end

    # source://railties//lib/rails/engine.rb#359
    def eager_load!(*_arg0, **_arg1, &_arg2); end

    # source://railties//lib/rails/engine.rb#379
    def endpoint(endpoint = T.unsafe(nil)); end

    # source://railties//lib/rails/railtie.rb#176
    def engine_name(name = T.unsafe(nil)); end

    # source://railties//lib/rails/engine.rb#423
    def find(path); end

    # source://railties//lib/rails/engine.rb#375
    def find_root(from); end

    # source://railties//lib/rails/engine.rb#698
    def find_root_with_flag(flag, root_path, default = T.unsafe(nil)); end

    # source://railties//lib/rails/engine.rb#361
    def inherited(base); end

    # source://railties//lib/rails/engine.rb#385
    def isolate_namespace(mod); end

    # source://railties//lib/rails/engine.rb#354
    def isolated; end

    # source://railties//lib/rails/engine.rb#354
    def isolated=(_arg0); end

    # source://railties//lib/rails/engine.rb#354
    def isolated?; end
  end
end

# source://railties//lib/rails/engine/configuration.rb#7
class Rails::Engine::Configuration < ::Rails::Railtie::Configuration
  # source://railties//lib/rails/engine/configuration.rb#41
  def initialize(root = T.unsafe(nil)); end

  # source://railties//lib/rails/engine/configuration.rb#125
  def all_autoload_once_paths; end

  # source://railties//lib/rails/engine/configuration.rb#119
  def all_autoload_paths; end

  # source://railties//lib/rails/engine/configuration.rb#131
  def all_eager_load_paths; end

  # source://railties//lib/rails/engine/configuration.rb#29
  def autoload_once_paths; end

  # source://railties//lib/rails/engine/configuration.rb#10
  def autoload_once_paths=(_arg0); end

  # source://railties//lib/rails/engine/configuration.rb#20
  def autoload_paths; end

  # source://railties//lib/rails/engine/configuration.rb#10
  def autoload_paths=(_arg0); end

  # source://railties//lib/rails/engine/configuration.rb#39
  def eager_load_paths; end

  # source://railties//lib/rails/engine/configuration.rb#10
  def eager_load_paths=(_arg0); end

  # source://railties//lib/rails/engine/configuration.rb#65
  def generators; end

  # source://railties//lib/rails/engine/configuration.rb#9
  def javascript_path; end

  # source://railties//lib/rails/engine/configuration.rb#9
  def javascript_path=(_arg0); end

  # source://railties//lib/rails/engine/configuration.rb#9
  def middleware; end

  # source://railties//lib/rails/engine/configuration.rb#9
  def middleware=(_arg0); end

  # source://railties//lib/rails/engine/configuration.rb#71
  def paths; end

  # source://railties//lib/rails/engine/configuration.rb#8
  def root; end

  # source://railties//lib/rails/engine/configuration.rb#113
  def root=(value); end
end

# source://railties//lib/rails/engine/railties.rb#5
class Rails::Engine::Railties
  include ::Enumerable

  # source://railties//lib/rails/engine/railties.rb#9
  def initialize; end

  # source://railties//lib/rails/engine/railties.rb#18
  def -(others); end

  # source://railties//lib/rails/engine/railties.rb#7
  def _all; end

  # source://railties//lib/rails/engine/railties.rb#14
  def each(*args, &block); end
end

# source://railties//lib/rails/generators.rb#14
module Rails::Generators
  include ::Rails::Command::Behavior
  extend ::Rails::Command::Behavior::ClassMethods

  # source://railties//lib/rails/generators.rb#27
  def namespace; end

  # source://railties//lib/rails/generators.rb#27
  def namespace=(val); end

  class << self
    # source://railties//lib/rails/generators.rb#274
    def add_generated_file(file); end

    # source://railties//lib/rails/generators.rb#88
    def after_generate_callbacks; end

    # source://railties//lib/rails/generators.rb#80
    def aliases; end

    # source://railties//lib/rails/generators.rb#112
    def api_only!; end

    # source://railties//lib/rails/generators.rb#64
    def configure!(config); end

    # source://railties//lib/rails/generators.rb#104
    def fallbacks; end

    # source://railties//lib/rails/generators.rb#230
    def find_by_namespace(name, base = T.unsafe(nil), context = T.unsafe(nil)); end

    # source://railties//lib/rails/generators.rb#165
    def help(command = T.unsafe(nil)); end

    # source://railties//lib/rails/generators.rb#130
    def hidden_namespaces; end

    # source://railties//lib/rails/generators.rb#159
    def hide_namespace(*namespaces); end

    # source://railties//lib/rails/generators.rb#159
    def hide_namespaces(*namespaces); end

    # source://railties//lib/rails/generators.rb#257
    def invoke(namespace, args = T.unsafe(nil), config = T.unsafe(nil)); end

    # source://railties//lib/rails/generators.rb#27
    def namespace; end

    # source://railties//lib/rails/generators.rb#27
    def namespace=(val); end

    # source://railties//lib/rails/generators.rb#84
    def options; end

    # source://railties//lib/rails/generators.rb#187
    def print_generators; end

    # source://railties//lib/rails/generators.rb#182
    def public_namespaces; end

    # source://railties//lib/rails/generators.rb#191
    def sorted_groups; end

    # source://railties//lib/rails/generators.rb#76
    def templates_path; end

    private

    # source://railties//lib/rails/generators.rb#301
    def command_type; end

    # source://railties//lib/rails/generators.rb#309
    def file_lookup_paths; end

    # source://railties//lib/rails/generators.rb#286
    def invoke_fallbacks_for(name, base); end

    # source://railties//lib/rails/generators.rb#305
    def lookup_paths; end

    # source://railties//lib/rails/generators.rb#280
    def print_list(base, namespaces); end

    # source://railties//lib/rails/generators.rb#313
    def run_after_generate_callback; end
  end
end

# source://railties//lib/rails/generators/actions.rb#9
module Rails::Generators::Actions
  # source://railties//lib/rails/generators/actions.rb#10
  def initialize(*_arg0); end

  # source://railties//lib/rails/generators/actions.rb#151
  def add_source(source, options = T.unsafe(nil), &block); end

  # source://railties//lib/rails/generators/actions.rb#206
  def application(data = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#206
  def environment(data = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#67
  def gem(*args); end

  # source://railties//lib/rails/generators/actions.rb#111
  def gem_group(*names, &block); end

  # source://railties//lib/rails/generators/actions.rb#332
  def generate(what, *args); end

  # source://railties//lib/rails/generators/actions.rb#237
  def git(commands = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#125
  def github(repo, options = T.unsafe(nil), &block); end

  # source://railties//lib/rails/generators/actions.rb#319
  def initializer(filename, data = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#275
  def lib(filename, data = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#391
  def rails_command(command, options = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#364
  def rake(command, options = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#302
  def rakefile(filename, data = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#442
  def readme(path); end

  # source://railties//lib/rails/generators/actions.rb#409
  def route(routing_code, namespace: T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#258
  def vendor(filename, data = T.unsafe(nil)); end

  private

  # source://railties//lib/rails/generators/actions.rb#507
  def append_file_with_newline(path, str, options = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#461
  def execute_command(executor, command, options = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#494
  def indentation; end

  # source://railties//lib/rails/generators/actions.rb#450
  def log(*args); end

  # source://railties//lib/rails/generators/actions.rb#513
  def match_file(path, pattern); end

  # source://railties//lib/rails/generators/actions.rb#487
  def optimize_indentation(value, amount = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#475
  def quote(value); end

  # source://railties//lib/rails/generators/actions.rb#487
  def rebase_indentation(value, amount = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#517
  def route_namespace_pattern(namespace); end

  # source://railties//lib/rails/generators/actions.rb#499
  def with_indentation(&block); end
end

# source://railties//lib/rails/generators/actions/create_migration.rb#9
class Rails::Generators::Actions::CreateMigration < ::Thor::Actions::CreateFile
  # source://railties//lib/rails/generators/actions/create_migration.rb#41
  def existing_migration; end

  # source://railties//lib/rails/generators/actions/create_migration.rb#41
  def exists?; end

  # source://railties//lib/rails/generators/actions/create_migration.rb#18
  def identical?; end

  # source://railties//lib/rails/generators/actions/create_migration.rb#22
  def invoke!; end

  # source://railties//lib/rails/generators/actions/create_migration.rb#10
  def migration_dir; end

  # source://railties//lib/rails/generators/actions/create_migration.rb#14
  def migration_file_name; end

  # source://railties//lib/rails/generators/actions/create_migration.rb#37
  def relative_existing_migration; end

  # source://railties//lib/rails/generators/actions/create_migration.rb#29
  def revoke!; end

  private

  # source://railties//lib/rails/generators/actions/create_migration.rb#48
  def on_conflict_behavior; end

  # source://railties//lib/rails/generators/actions/create_migration.rb#69
  def say_status(status, color, message = T.unsafe(nil)); end
end

# source://railties//lib/rails/generators/active_model.rb#28
class Rails::Generators::ActiveModel
  # source://railties//lib/rails/generators/active_model.rb#31
  def initialize(name); end

  # source://railties//lib/rails/generators/active_model.rb#89
  def destroy; end

  # source://railties//lib/rails/generators/active_model.rb#82
  def errors; end

  # source://railties//lib/rails/generators/active_model.rb#29
  def name; end

  # source://railties//lib/rails/generators/active_model.rb#67
  def save; end

  # source://railties//lib/rails/generators/active_model.rb#74
  def update(params = T.unsafe(nil)); end

  class << self
    # source://railties//lib/rails/generators/active_model.rb#38
    def all(klass); end

    # source://railties//lib/rails/generators/active_model.rb#56
    def build(klass, params = T.unsafe(nil)); end

    # source://railties//lib/rails/generators/active_model.rb#48
    def find(klass, params = T.unsafe(nil)); end
  end
end

# source://railties//lib/rails/generators/app_name.rb#5
module Rails::Generators::AppName
  private

  # source://railties//lib/rails/generators/app_name.rb#22
  def app_const; end

  # source://railties//lib/rails/generators/app_name.rb#17
  def app_const_base; end

  # source://railties//lib/rails/generators/app_name.rb#9
  def app_name; end

  # source://railties//lib/rails/generators/app_name.rb#17
  def camelized; end

  # source://railties//lib/rails/generators/app_name.rb#13
  def original_app_name; end

  # source://railties//lib/rails/generators/app_name.rb#26
  def valid_const?; end
end

# source://railties//lib/rails/generators/app_name.rb#6
Rails::Generators::AppName::RESERVED_NAMES = T.let(T.unsafe(nil), Array)

# source://railties//lib/rails/generators/base.rb#17
class Rails::Generators::Base < ::Thor::Group
  include ::Thor::Actions
  include ::Rails::Generators::Actions
  extend ::Thor::Actions::ClassMethods

  private

  # source://railties//lib/rails/generators/base.rb#264
  def class_collisions(*class_names); end

  # source://railties//lib/rails/generators/base.rb#287
  def extract_last_module(nesting); end

  # source://railties//lib/rails/generators/base.rb#302
  def indent(content, multiplier = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/base.rb#296
  def module_namespacing(&block); end

  # source://railties//lib/rails/generators/base.rb#312
  def namespace; end

  # source://railties//lib/rails/generators/base.rb#320
  def namespace_dirs; end

  # source://railties//lib/rails/generators/base.rb#316
  def namespaced?; end

  # source://railties//lib/rails/generators/base.rb#324
  def namespaced_path; end

  # source://railties//lib/rails/generators/base.rb#307
  def wrap_with_namespace(content); end

  class << self
    # source://railties//lib/rails/generators/base.rb#396
    def add_shebang_option!; end

    # source://railties//lib/rails/generators/base.rb#329
    def banner; end

    # source://railties//lib/rails/generators/base.rb#334
    def base_name; end

    # source://railties//lib/rails/generators/base.rb#236
    def base_root; end

    # source://railties//lib/rails/generators/base.rb#217
    def class_option(name, options = T.unsafe(nil)); end

    # source://railties//lib/rails/generators/base.rb#357
    def default_aliases_for_option(name, options); end

    # source://railties//lib/rails/generators/base.rb#362
    def default_for_option(config, name, options, default); end

    # source://railties//lib/rails/generators/base.rb#422
    def default_generator_root; end

    # source://railties//lib/rails/generators/base.rb#227
    def default_source_root; end

    # source://railties//lib/rails/generators/base.rb#351
    def default_value_for_option(name, options); end

    # source://railties//lib/rails/generators/base.rb#41
    def desc(description = T.unsafe(nil)); end

    # source://railties//lib/rails/generators/base.rb#29
    def exit_on_failure?; end

    # source://railties//lib/rails/generators/base.rb#342
    def generator_name; end

    # source://railties//lib/rails/generators/base.rb#61
    def hide!; end

    # source://railties//lib/rails/generators/base.rb#174
    def hook_for(*names, &block); end

    # source://railties//lib/rails/generators/base.rb#375
    def hooks; end

    # source://railties//lib/rails/generators/base.rb#242
    def inherited(base); end

    # source://railties//lib/rails/generators/base.rb#54
    def namespace(name = T.unsafe(nil)); end

    # source://railties//lib/rails/generators/base.rb#381
    def prepare_for_invocation(name, value); end

    # source://railties//lib/rails/generators/base.rb#207
    def remove_hook_for(*names); end

    # source://railties//lib/rails/generators/base.rb#34
    def source_root(path = T.unsafe(nil)); end

    # source://railties//lib/rails/generators/base.rb#414
    def usage_path; end
  end
end

# source://railties//lib/rails/generators.rb#29
Rails::Generators::DEFAULT_ALIASES = T.let(T.unsafe(nil), Hash)

# source://railties//lib/rails/generators.rb#46
Rails::Generators::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://railties//lib/rails/generators/database.rb#5
module Rails::Generators::Database
  # source://railties//lib/rails/generators/database.rb#9
  def initialize(*_arg0); end

  # source://railties//lib/rails/generators/database.rb#62
  def build_package_for_database(database = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/database.rb#50
  def convert_database_option_for_jruby; end

  # source://railties//lib/rails/generators/database.rb#70
  def deploy_package_for_database(database = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/database.rb#30
  def docker_for_database_build(database = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/database.rb#40
  def docker_for_database_deploy(database = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/database.rb#14
  def gem_for_database(database = T.unsafe(nil)); end

  private

  # source://railties//lib/rails/generators/database.rb#80
  def mysql_socket; end
end

# source://railties//lib/rails/generators/database.rb#7
Rails::Generators::Database::DATABASES = T.let(T.unsafe(nil), Array)

# source://railties//lib/rails/generators/database.rb#6
Rails::Generators::Database::JDBC_DATABASES = T.let(T.unsafe(nil), Array)

# source://railties//lib/rails/generators/base.rb#14
class Rails::Generators::Error < ::Thor::Error; end

# source://railties//lib/rails/generators/generated_attribute.rb#7
class Rails::Generators::GeneratedAttribute
  # source://railties//lib/rails/generators/generated_attribute.rb#109
  def initialize(name, type = T.unsafe(nil), index_type = T.unsafe(nil), attr_options = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/generated_attribute.rb#211
  def attachment?; end

  # source://railties//lib/rails/generators/generated_attribute.rb#215
  def attachments?; end

  # source://railties//lib/rails/generators/generated_attribute.rb#31
  def attr_options; end

  # source://railties//lib/rails/generators/generated_attribute.rb#171
  def column_name; end

  # source://railties//lib/rails/generators/generated_attribute.rb#133
  def default; end

  # source://railties//lib/rails/generators/generated_attribute.rb#117
  def field_type; end

  # source://railties//lib/rails/generators/generated_attribute.rb#175
  def foreign_key?; end

  # source://railties//lib/rails/generators/generated_attribute.rb#191
  def has_index?; end

  # source://railties//lib/rails/generators/generated_attribute.rb#195
  def has_uniq_index?; end

  # source://railties//lib/rails/generators/generated_attribute.rb#159
  def human_name; end

  # source://railties//lib/rails/generators/generated_attribute.rb#163
  def index_name; end

  # source://railties//lib/rails/generators/generated_attribute.rb#32
  def index_name=(_arg0); end

  # source://railties//lib/rails/generators/generated_attribute.rb#227
  def inject_index_options; end

  # source://railties//lib/rails/generators/generated_attribute.rb#223
  def inject_options; end

  # source://railties//lib/rails/generators/generated_attribute.rb#30
  def name; end

  # source://railties//lib/rails/generators/generated_attribute.rb#30
  def name=(_arg0); end

  # source://railties//lib/rails/generators/generated_attribute.rb#231
  def options_for_migration; end

  # source://railties//lib/rails/generators/generated_attribute.rb#199
  def password_digest?; end

  # source://railties//lib/rails/generators/generated_attribute.rb#151
  def plural_name; end

  # source://railties//lib/rails/generators/generated_attribute.rb#183
  def polymorphic?; end

  # source://railties//lib/rails/generators/generated_attribute.rb#179
  def reference?; end

  # source://railties//lib/rails/generators/generated_attribute.rb#187
  def required?; end

  # source://railties//lib/rails/generators/generated_attribute.rb#207
  def rich_text?; end

  # source://railties//lib/rails/generators/generated_attribute.rb#155
  def singular_name; end

  # source://railties//lib/rails/generators/generated_attribute.rb#203
  def token?; end

  # source://railties//lib/rails/generators/generated_attribute.rb#30
  def type; end

  # source://railties//lib/rails/generators/generated_attribute.rb#30
  def type=(_arg0); end

  # source://railties//lib/rails/generators/generated_attribute.rb#219
  def virtual?; end

  class << self
    # source://railties//lib/rails/generators/generated_attribute.rb#67
    def dangerous_name?(name); end

    # source://railties//lib/rails/generators/generated_attribute.rb#35
    def parse(column_definition); end

    # source://railties//lib/rails/generators/generated_attribute.rb#82
    def reference?(type); end

    # source://railties//lib/rails/generators/generated_attribute.rb#78
    def valid_index_type?(index_type); end

    # source://railties//lib/rails/generators/generated_attribute.rb#72
    def valid_type?(type); end

    private

    # source://railties//lib/rails/generators/generated_attribute.rb#89
    def parse_type_and_options(type); end
  end
end

# source://railties//lib/rails/generators/generated_attribute.rb#10
Rails::Generators::GeneratedAttribute::DEFAULT_TYPES = T.let(T.unsafe(nil), Array)

# source://railties//lib/rails/generators/generated_attribute.rb#8
Rails::Generators::GeneratedAttribute::INDEX_OPTIONS = T.let(T.unsafe(nil), Array)

# source://railties//lib/rails/generators/generated_attribute.rb#9
Rails::Generators::GeneratedAttribute::UNIQ_INDEX_OPTIONS = T.let(T.unsafe(nil), Array)

# source://railties//lib/rails/generators/migration.rb#11
module Rails::Generators::Migration
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Rails::Generators::Migration::ClassMethods

  # source://railties//lib/rails/generators/migration.rb#35
  def create_migration(destination, data, config = T.unsafe(nil), &block); end

  # source://railties//lib/rails/generators/migration.rb#13
  def migration_class_name; end

  # source://railties//lib/rails/generators/migration.rb#13
  def migration_file_name; end

  # source://railties//lib/rails/generators/migration.rb#13
  def migration_number; end

  # source://railties//lib/rails/generators/migration.rb#56
  def migration_template(source, destination, config = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/migration.rb#39
  def set_migration_assigns!(destination); end
end

# source://railties//lib/rails/generators/migration.rb#15
module Rails::Generators::Migration::ClassMethods
  # source://railties//lib/rails/generators/migration.rb#24
  def current_migration_number(dirname); end

  # source://railties//lib/rails/generators/migration.rb#20
  def migration_exists?(dirname, file_name); end

  # source://railties//lib/rails/generators/migration.rb#16
  def migration_lookup_at(dirname); end

  # source://railties//lib/rails/generators/migration.rb#30
  def next_migration_number(dirname); end
end

# source://railties//lib/rails/generators/model_helpers.rb#7
module Rails::Generators::ModelHelpers
  # source://railties//lib/rails/generators/model_helpers.rb#26
  def initialize(args, *_options); end

  # source://railties//lib/rails/generators/model_helpers.rb#19
  def skip_warn; end

  # source://railties//lib/rails/generators/model_helpers.rb#19
  def skip_warn=(val); end

  private

  # source://railties//lib/rails/generators/model_helpers.rb#56
  def inflection_impossible?(name); end

  # source://railties//lib/rails/generators/model_helpers.rb#52
  def irregular_model_name?(name); end

  # source://railties//lib/rails/generators/model_helpers.rb#48
  def plural_model_name?(name); end

  class << self
    # source://railties//lib/rails/generators/model_helpers.rb#21
    def included(base); end

    # source://railties//lib/rails/generators/model_helpers.rb#19
    def skip_warn; end

    # source://railties//lib/rails/generators/model_helpers.rb#19
    def skip_warn=(val); end
  end
end

# source://railties//lib/rails/generators/model_helpers.rb#14
Rails::Generators::ModelHelpers::INFLECTION_IMPOSSIBLE_ERROR_MESSAGE = T.let(T.unsafe(nil), String)

# source://railties//lib/rails/generators/model_helpers.rb#10
Rails::Generators::ModelHelpers::IRREGULAR_MODEL_NAME_WARN_MESSAGE = T.let(T.unsafe(nil), String)

# source://railties//lib/rails/generators/model_helpers.rb#8
Rails::Generators::ModelHelpers::PLURAL_MODEL_NAME_WARN_MESSAGE = T.let(T.unsafe(nil), String)

# source://railties//lib/rails/generators/named_base.rb#8
class Rails::Generators::NamedBase < ::Rails::Generators::Base
  # source://railties//lib/rails/generators/named_base.rb#11
  def initialize(args, *options); end

  # source://thor/1.3.1/lib/thor/base.rb#155
  def file_name; end

  # source://railties//lib/rails/generators/named_base.rb#29
  def js_template(source, destination); end

  # source://thor/1.3.1/lib/thor/base.rb#163
  def name; end

  # source://thor/1.3.1/lib/thor/base.rb#163
  def name=(_arg0); end

  # source://railties//lib/rails/generators/named_base.rb#23
  def template(source, *args, &block); end

  private

  # source://railties//lib/rails/generators/named_base.rb#138
  def application_name; end

  # source://railties//lib/rails/generators/named_base.rb#175
  def assign_names!(name); end

  # source://railties//lib/rails/generators/named_base.rb#188
  def attributes_names; end

  # source://railties//lib/rails/generators/named_base.rb#70
  def class_name; end

  # source://railties//lib/rails/generators/named_base.rb#58
  def class_path; end

  # source://railties//lib/rails/generators/named_base.rb#105
  def edit_helper(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/generators/named_base.rb#54
  def file_path; end

  # source://railties//lib/rails/generators/named_base.rb#125
  def fixture_file_name; end

  # source://railties//lib/rails/generators/named_base.rb#74
  def human_name; end

  # source://railties//lib/rails/generators/named_base.rb#82
  def i18n_scope; end

  # source://railties//lib/rails/generators/named_base.rb#97
  def index_helper(type: T.unsafe(nil)); end

  # source://railties//lib/rails/generators/named_base.rb#43
  def inside_template; end

  # source://railties//lib/rails/generators/named_base.rb#50
  def inside_template?; end

  # source://railties//lib/rails/generators/named_base.rb#150
  def model_resource_name(base_name = T.unsafe(nil), prefix: T.unsafe(nil)); end

  # source://railties//lib/rails/generators/named_base.rb#200
  def mountable_engine?; end

  # source://railties//lib/rails/generators/named_base.rb#66
  def namespaced_class_path; end

  # source://railties//lib/rails/generators/named_base.rb#109
  def new_helper(type: T.unsafe(nil)); end

  # source://railties//lib/rails/generators/named_base.rb#182
  def parse_attributes!; end

  # source://railties//lib/rails/generators/named_base.rb#121
  def plural_file_name; end

  # source://railties//lib/rails/generators/named_base.rb#78
  def plural_name; end

  # source://railties//lib/rails/generators/named_base.rb#167
  def plural_route_name; end

  # source://railties//lib/rails/generators/named_base.rb#117
  def plural_table_name; end

  # source://railties//lib/rails/generators/named_base.rb#196
  def pluralize_table_names?; end

  # source://railties//lib/rails/generators/named_base.rb#146
  def redirect_resource_name; end

  # source://railties//lib/rails/generators/named_base.rb#62
  def regular_class_path; end

  # source://railties//lib/rails/generators/named_base.rb#129
  def route_url; end

  # source://railties//lib/rails/generators/named_base.rb#101
  def show_helper(arg = T.unsafe(nil), type: T.unsafe(nil)); end

  # source://railties//lib/rails/generators/named_base.rb#39
  def singular_name; end

  # source://railties//lib/rails/generators/named_base.rb#159
  def singular_route_name; end

  # source://railties//lib/rails/generators/named_base.rb#113
  def singular_table_name; end

  # source://railties//lib/rails/generators/named_base.rb#86
  def table_name; end

  # source://railties//lib/rails/generators/named_base.rb#93
  def uncountable?; end

  # source://railties//lib/rails/generators/named_base.rb#133
  def url_helper_prefix; end

  class << self
    # source://railties//lib/rails/generators/named_base.rb#214
    def check_class_collision(options = T.unsafe(nil)); end
  end
end

# source://railties//lib/rails/generators/resource_helpers.rb#10
module Rails::Generators::ResourceHelpers
  include ::Rails::Generators::ModelHelpers

  # source://railties//lib/rails/generators/resource_helpers.rb#17
  def initialize(*args); end

  private

  # source://railties//lib/rails/generators/resource_helpers.rb#39
  def assign_controller_names!(name); end

  # source://railties//lib/rails/generators/resource_helpers.rb#50
  def controller_class_name; end

  # source://railties//lib/rails/generators/resource_helpers.rb#31
  def controller_class_path; end

  # source://railties//lib/rails/generators/resource_helpers.rb#29
  def controller_file_name; end

  # source://railties//lib/rails/generators/resource_helpers.rb#46
  def controller_file_path; end

  # source://railties//lib/rails/generators/resource_helpers.rb#54
  def controller_i18n_scope; end

  # source://railties//lib/rails/generators/resource_helpers.rb#29
  def controller_name; end

  # source://railties//lib/rails/generators/resource_helpers.rb#61
  def orm_class; end

  # source://railties//lib/rails/generators/resource_helpers.rb#77
  def orm_instance(name = T.unsafe(nil)); end

  class << self
    # source://railties//lib/rails/generators/resource_helpers.rb#11
    def included(base); end
  end
end

# source://railties//lib/rails/generators/test_case.rb#30
class Rails::Generators::TestCase < ::ActiveSupport::TestCase
  include ::ActiveSupport::Testing::Stream
  include ::Rails::Generators::Testing::Behavior
  include ::Rails::Generators::Testing::SetupAndTeardown
  include ::Rails::Generators::Testing::Assertions
  include ::FileUtils::StreamUtils_
  include ::FileUtils
  extend ::Rails::Generators::Testing::Behavior::ClassMethods

  # source://railties//lib/rails/generators/testing/behavior.rb#21
  def current_path; end

  # source://railties//lib/rails/generators/testing/behavior.rb#21
  def current_path=(_arg0); end

  # source://railties//lib/rails/generators/testing/behavior.rb#21
  def current_path?; end

  # source://railties//lib/rails/generators/testing/behavior.rb#22
  def default_arguments; end

  # source://railties//lib/rails/generators/testing/behavior.rb#22
  def default_arguments=(_arg0); end

  # source://railties//lib/rails/generators/testing/behavior.rb#22
  def default_arguments?; end

  # source://railties//lib/rails/generators/testing/behavior.rb#23
  def destination_root; end

  # source://railties//lib/rails/generators/testing/behavior.rb#23
  def destination_root=(_arg0); end

  # source://railties//lib/rails/generators/testing/behavior.rb#23
  def destination_root?; end

  # source://railties//lib/rails/generators/testing/behavior.rb#24
  def generator_class; end

  # source://railties//lib/rails/generators/testing/behavior.rb#24
  def generator_class=(_arg0); end

  # source://railties//lib/rails/generators/testing/behavior.rb#24
  def generator_class?; end

  class << self
    # source://railties//lib/rails/generators/testing/behavior.rb#21
    def current_path; end

    # source://railties//lib/rails/generators/testing/behavior.rb#21
    def current_path=(value); end

    # source://railties//lib/rails/generators/testing/behavior.rb#21
    def current_path?; end

    # source://railties//lib/rails/generators/testing/behavior.rb#22
    def default_arguments; end

    # source://railties//lib/rails/generators/testing/behavior.rb#22
    def default_arguments=(value); end

    # source://railties//lib/rails/generators/testing/behavior.rb#22
    def default_arguments?; end

    # source://railties//lib/rails/generators/testing/behavior.rb#23
    def destination_root; end

    # source://railties//lib/rails/generators/testing/behavior.rb#23
    def destination_root=(value); end

    # source://railties//lib/rails/generators/testing/behavior.rb#23
    def destination_root?; end

    # source://railties//lib/rails/generators/testing/behavior.rb#24
    def generator_class; end

    # source://railties//lib/rails/generators/testing/behavior.rb#24
    def generator_class=(value); end

    # source://railties//lib/rails/generators/testing/behavior.rb#24
    def generator_class?; end
  end
end

# source://railties//lib/rails/generators/testing/behavior.rb#13
module Rails::Generators::Testing
  include ::ActiveSupport::Deprecation::DeprecatedConstantAccessor
end

# source://railties//lib/rails/generators/testing/assertions.rb#6
module Rails::Generators::Testing::Assertions
  # source://railties//lib/rails/generators/testing/assertions.rb#88
  def assert_class_method(method, content, &block); end

  # source://railties//lib/rails/generators/testing/assertions.rb#25
  def assert_directory(relative, *contents); end

  # source://railties//lib/rails/generators/testing/assertions.rb#117
  def assert_field_default_value(attribute_type, value); end

  # source://railties//lib/rails/generators/testing/assertions.rb#110
  def assert_field_type(attribute_type, field_type); end

  # source://railties//lib/rails/generators/testing/assertions.rb#25
  def assert_file(relative, *contents); end

  # source://railties//lib/rails/generators/testing/assertions.rb#100
  def assert_instance_method(method, content); end

  # source://railties//lib/rails/generators/testing/assertions.rb#100
  def assert_method(method, content); end

  # source://railties//lib/rails/generators/testing/assertions.rb#64
  def assert_migration(relative, *contents, &block); end

  # source://railties//lib/rails/generators/testing/assertions.rb#47
  def assert_no_directory(relative); end

  # source://railties//lib/rails/generators/testing/assertions.rb#47
  def assert_no_file(relative); end

  # source://railties//lib/rails/generators/testing/assertions.rb#74
  def assert_no_migration(relative); end
end

# source://railties//lib/rails/generators/testing/behavior.rb#14
module Rails::Generators::Testing::Behavior
  include ::ActiveSupport::Testing::Stream
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::Rails::Generators::Testing::Behavior::ClassMethods

  # source://railties//lib/rails/generators/testing/behavior.rb#85
  def create_generated_attribute(attribute_type, name = T.unsafe(nil), index = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/testing/behavior.rb#77
  def generator(args = T.unsafe(nil), options = T.unsafe(nil), config = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/testing/behavior.rb#67
  def run_generator(args = T.unsafe(nil), config = T.unsafe(nil)); end

  private

  # source://railties//lib/rails/generators/testing/behavior.rb#90
  def destination_root_is_set?; end

  # source://railties//lib/rails/generators/testing/behavior.rb#94
  def ensure_current_path; end

  # source://railties//lib/rails/generators/testing/behavior.rb#104
  def migration_file_name(relative); end

  # source://railties//lib/rails/generators/testing/behavior.rb#99
  def prepare_destination; end

  module GeneratedClassMethods
    def current_path; end
    def current_path=(value); end
    def current_path?; end
    def default_arguments; end
    def default_arguments=(value); end
    def default_arguments?; end
    def destination_root; end
    def destination_root=(value); end
    def destination_root?; end
    def generator_class; end
    def generator_class=(value); end
    def generator_class?; end
  end

  module GeneratedInstanceMethods
    def current_path; end
    def current_path=(value); end
    def current_path?; end
    def default_arguments; end
    def default_arguments=(value); end
    def default_arguments?; end
    def destination_root; end
    def destination_root=(value); end
    def destination_root?; end
    def generator_class; end
    def generator_class=(value); end
    def generator_class?; end
  end
end

# source://railties//lib/rails/generators/testing/behavior.rb#27
module Rails::Generators::Testing::Behavior::ClassMethods
  # source://railties//lib/rails/generators/testing/behavior.rb#39
  def arguments(array); end

  # source://railties//lib/rails/generators/testing/behavior.rb#46
  def destination(path); end

  # source://railties//lib/rails/generators/testing/behavior.rb#31
  def tests(klass); end
end

# source://railties//lib/rails/generators/testing/setup_and_teardown.rb#6
module Rails::Generators::Testing::SetupAndTeardown
  # source://railties//lib/rails/generators/testing/setup_and_teardown.rb#7
  def setup; end

  # source://railties//lib/rails/generators/testing/setup_and_teardown.rb#13
  def teardown; end
end

# source://railties//lib/rails/health_controller.rb#35
class Rails::HealthController < ::ActionController::Base
  # source://railties//lib/rails/health_controller.rb#38
  def show; end

  private

  # source://actionview/7.1.3.3/lib/action_view/layouts.rb#330
  def _layout(lookup_context, formats); end

  # source://railties//lib/rails/health_controller.rb#51
  def html_status(color:); end

  # source://railties//lib/rails/health_controller.rb#47
  def render_down; end

  # source://railties//lib/rails/health_controller.rb#43
  def render_up; end

  class << self
    # source://actionpack/7.1.3.3/lib/action_controller/metal.rb#262
    def middleware_stack; end

    # source://activesupport/7.1.3.3/lib/active_support/rescuable.rb#15
    def rescue_handlers; end
  end
end

# source://railties//lib/rails/info.rb#9
module Rails::Info
  # source://railties//lib/rails/info.rb#10
  def properties; end

  # source://railties//lib/rails/info.rb#10
  def properties=(val); end

  class << self
    # source://railties//lib/rails/info.rb#31
    def inspect; end

    # source://railties//lib/rails/info.rb#10
    def properties; end

    # source://railties//lib/rails/info.rb#10
    def properties=(val); end

    # source://railties//lib/rails/info.rb#25
    def property(name, value = T.unsafe(nil)); end

    # source://railties//lib/rails/info.rb#43
    def to_html; end

    # source://railties//lib/rails/info.rb#31
    def to_s; end
  end
end

# source://railties//lib/rails/info_controller.rb#6
class Rails::InfoController < ::Rails::ApplicationController
  # source://railties//lib/rails/info_controller.rb#12
  def index; end

  # source://railties//lib/rails/info_controller.rb#16
  def properties; end

  # source://railties//lib/rails/info_controller.rb#21
  def routes; end

  private

  # source://actionview/7.1.3.3/lib/action_view/layouts.rb#330
  def _layout(lookup_context, formats); end

  # source://railties//lib/rails/info_controller.rb#8
  def _layout_from_proc; end

  # source://railties//lib/rails/info_controller.rb#36
  def matching_routes(query:, exact_match:); end

  class << self
    # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://actionview/7.1.3.3/lib/action_view/layouts.rb#211
    def _layout; end

    # source://actionview/7.1.3.3/lib/action_view/layouts.rb#212
    def _layout_conditions; end

    # source://actionpack/7.1.3.3/lib/action_controller/metal.rb#262
    def middleware_stack; end
  end
end

# source://railties//lib/rails/initializable.rb#6
module Rails::Initializable
  mixes_in_class_methods ::Rails::Initializable::ClassMethods

  # source://railties//lib/rails/initializable.rb#66
  def initializers; end

  # source://railties//lib/rails/initializable.rb#58
  def run_initializers(group = T.unsafe(nil), *args); end

  class << self
    # source://railties//lib/rails/initializable.rb#7
    def included(base); end
  end
end

# source://railties//lib/rails/initializable.rb#70
module Rails::Initializable::ClassMethods
  # source://railties//lib/rails/initializable.rb#88
  def initializer(name, opts = T.unsafe(nil), &blk); end

  # source://railties//lib/rails/initializable.rb#71
  def initializers; end

  # source://railties//lib/rails/initializable.rb#75
  def initializers_chain; end

  # source://railties//lib/rails/initializable.rb#84
  def initializers_for(binding); end
end

# source://railties//lib/rails/initializable.rb#45
class Rails::Initializable::Collection < ::Array
  include ::TSort

  # source://railties//lib/rails/initializable.rb#53
  def +(other); end

  # source://railties//lib/rails/initializable.rb#49
  def tsort_each_child(initializer, &block); end

  def tsort_each_node; end
end

# source://railties//lib/rails/initializable.rb#11
class Rails::Initializable::Initializer
  # source://railties//lib/rails/initializable.rb#14
  def initialize(name, context, options, &block); end

  # source://railties//lib/rails/initializable.rb#23
  def after; end

  # source://railties//lib/rails/initializable.rb#19
  def before; end

  # source://railties//lib/rails/initializable.rb#27
  def belongs_to?(group); end

  # source://railties//lib/rails/initializable.rb#35
  def bind(context); end

  # source://railties//lib/rails/initializable.rb#12
  def block; end

  # source://railties//lib/rails/initializable.rb#40
  def context_class; end

  # source://railties//lib/rails/initializable.rb#12
  def name; end

  # source://railties//lib/rails/initializable.rb#31
  def run(*args); end
end

# source://railties//lib/rails/test_unit/line_filtering.rb#6
module Rails::LineFiltering
  # source://railties//lib/rails/test_unit/line_filtering.rb#7
  def run(reporter, options = T.unsafe(nil)); end
end

# source://railties//lib/rails/mailers_controller.rb#5
class Rails::MailersController < ::Rails::ApplicationController
  # source://railties//lib/rails/mailers_controller.rb#21
  def download; end

  # source://railties//lib/rails/mailers_controller.rb#16
  def index; end

  # source://railties//lib/rails/mailers_controller.rb#31
  def preview; end

  private

  # source://actionview/7.1.3.3/lib/action_view/layouts.rb#330
  def _layout(lookup_context, formats); end

  # source://railties//lib/rails/mailers_controller.rb#90
  def find_part(format); end

  # source://railties//lib/rails/mailers_controller.rb#78
  def find_preferred_part(*formats); end

  # source://railties//lib/rails/mailers_controller.rb#66
  def find_preview; end

  # source://railties//lib/rails/mailers_controller.rb#102
  def locale_query(locale); end

  # source://railties//lib/rails/mailers_controller.rb#98
  def part_query(mime_type); end

  # source://railties//lib/rails/mailers_controller.rb#106
  def set_locale(&block); end

  # source://railties//lib/rails/mailers_controller.rb#62
  def show_previews?; end

  class << self
    # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://actionpack/7.1.3.3/lib/abstract_controller/helpers.rb#12
    def _helper_methods; end

    # source://actionpack/7.1.3.3/lib/action_controller/metal.rb#262
    def middleware_stack; end
  end
end

# source://railties//lib/rails/mailers_controller.rb#0
module Rails::MailersController::HelperMethods
  include ::ActionText::ContentHelper
  include ::ActionText::TagHelper
  include ::ActionController::Base::HelperMethods

  # source://railties//lib/rails/mailers_controller.rb#12
  def locale_query(*args, **_arg1, &block); end

  # source://railties//lib/rails/mailers_controller.rb#12
  def part_query(*args, **_arg1, &block); end
end

# source://railties//lib/rails/paths.rb#6
module Rails::Paths; end

# source://railties//lib/rails/paths.rb#114
class Rails::Paths::Path
  include ::Enumerable

  # source://railties//lib/rails/paths.rb#119
  def initialize(root, current, paths, options = T.unsafe(nil)); end

  # source://railties//lib/rails/paths.rb#171
  def <<(path); end

  # source://railties//lib/rails/paths.rb#132
  def absolute_current; end

  # source://railties//lib/rails/paths.rb#153
  def autoload!; end

  # source://railties//lib/rails/paths.rb#161
  def autoload?; end

  # source://railties//lib/rails/paths.rb#153
  def autoload_once!; end

  # source://railties//lib/rails/paths.rb#161
  def autoload_once?; end

  # source://railties//lib/rails/paths.rb#136
  def children; end

  # source://railties//lib/rails/paths.rb#176
  def concat(paths); end

  # source://railties//lib/rails/paths.rb#167
  def each(&block); end

  # source://railties//lib/rails/paths.rb#153
  def eager_load!; end

  # source://railties//lib/rails/paths.rb#161
  def eager_load?; end

  # source://railties//lib/rails/paths.rb#220
  def existent; end

  # source://railties//lib/rails/paths.rb#231
  def existent_directories; end

  # source://railties//lib/rails/paths.rb#201
  def expanded; end

  # source://railties//lib/rails/paths.rb#196
  def extensions; end

  # source://railties//lib/rails/paths.rb#143
  def first; end

  # source://railties//lib/rails/paths.rb#117
  def glob; end

  # source://railties//lib/rails/paths.rb#117
  def glob=(_arg0); end

  # source://railties//lib/rails/paths.rb#147
  def last; end

  # source://railties//lib/rails/paths.rb#153
  def load_path!; end

  # source://railties//lib/rails/paths.rb#161
  def load_path?; end

  # source://railties//lib/rails/paths.rb#188
  def paths; end

  # source://railties//lib/rails/paths.rb#171
  def push(path); end

  # source://railties//lib/rails/paths.rb#157
  def skip_autoload!; end

  # source://railties//lib/rails/paths.rb#157
  def skip_autoload_once!; end

  # source://railties//lib/rails/paths.rb#157
  def skip_eager_load!; end

  # source://railties//lib/rails/paths.rb#157
  def skip_load_path!; end

  # source://railties//lib/rails/paths.rb#201
  def to_a; end

  # source://railties//lib/rails/paths.rb#184
  def to_ary; end

  # source://railties//lib/rails/paths.rb#180
  def unshift(*paths); end

  private

  # source://railties//lib/rails/paths.rb#238
  def files_in(path); end
end

# source://railties//lib/rails/paths.rb#51
class Rails::Paths::Root
  # source://railties//lib/rails/paths.rb#54
  def initialize(path); end

  # source://railties//lib/rails/paths.rb#69
  def [](path); end

  # source://railties//lib/rails/paths.rb#59
  def []=(path, value); end

  # source://railties//lib/rails/paths.rb#64
  def add(path, options = T.unsafe(nil)); end

  # source://railties//lib/rails/paths.rb#85
  def all_paths; end

  # source://railties//lib/rails/paths.rb#89
  def autoload_once; end

  # source://railties//lib/rails/paths.rb#97
  def autoload_paths; end

  # source://railties//lib/rails/paths.rb#93
  def eager_load; end

  # source://railties//lib/rails/paths.rb#77
  def keys; end

  # source://railties//lib/rails/paths.rb#101
  def load_paths; end

  # source://railties//lib/rails/paths.rb#52
  def path; end

  # source://railties//lib/rails/paths.rb#52
  def path=(_arg0); end

  # source://railties//lib/rails/paths.rb#73
  def values; end

  # source://railties//lib/rails/paths.rb#81
  def values_at(*list); end

  private

  # source://railties//lib/rails/paths.rb#106
  def filter_by(&block); end
end

# source://railties//lib/rails/rack.rb#4
module Rails::Rack; end

# source://railties//lib/rails/rack/logger.rb#14
class Rails::Rack::Logger < ::ActiveSupport::LogSubscriber
  # source://railties//lib/rails/rack/logger.rb#15
  def initialize(app, taggers = T.unsafe(nil)); end

  # source://railties//lib/rails/rack/logger.rb#20
  def call(env); end

  private

  # source://railties//lib/rails/rack/logger.rb#31
  def call_app(request, env); end

  # source://railties//lib/rails/rack/logger.rb#62
  def compute_tags(request); end

  # source://railties//lib/rails/rack/logger.rb#75
  def logger; end

  # source://railties//lib/rails/rack/logger.rb#54
  def started_request_message(request); end
end

# source://railties//lib/rails/railtie.rb#136
class Rails::Railtie
  include ::Rails::Initializable
  extend ::ActiveSupport::DescendantsTracker
  extend ::Rails::Initializable::ClassMethods

  # source://railties//lib/rails/railtie.rb#246
  def initialize; end

  # source://railties//lib/rails/railtie.rb#263
  def config; end

  # source://railties//lib/rails/railtie.rb#256
  def configure(&block); end

  # source://railties//lib/rails/railtie.rb#252
  def inspect; end

  # source://railties//lib/rails/railtie.rb#244
  def railtie_name(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/railtie.rb#267
  def railtie_namespace; end

  protected

  # source://railties//lib/rails/railtie.rb#272
  def run_console_blocks(app); end

  # source://railties//lib/rails/railtie.rb#276
  def run_generators_blocks(app); end

  # source://railties//lib/rails/railtie.rb#280
  def run_runner_blocks(app); end

  # source://railties//lib/rails/railtie.rb#289
  def run_server_blocks(app); end

  # source://railties//lib/rails/railtie.rb#284
  def run_tasks_blocks(app); end

  private

  # source://railties//lib/rails/railtie.rb#295
  def each_registered_block(type, &block); end

  class << self
    # source://railties//lib/rails/railtie.rb#194
    def <=>(other); end

    # source://railties//lib/rails/railtie.rb#172
    def abstract_railtie?; end

    # source://railties//lib/rails/railtie.rb#146
    def config(*_arg0, **_arg1, &_arg2); end

    # source://railties//lib/rails/railtie.rb#190
    def configure(&block); end

    # source://railties//lib/rails/railtie.rb#156
    def console(&blk); end

    # source://railties//lib/rails/railtie.rb#164
    def generators(&blk); end

    # source://railties//lib/rails/railtie.rb#198
    def inherited(subclass); end

    # source://railties//lib/rails/railtie.rb#183
    def instance; end

    # source://railties//lib/rails/railtie.rb#176
    def railtie_name(name = T.unsafe(nil)); end

    # source://railties//lib/rails/railtie.rb#152
    def rake_tasks(&blk); end

    # source://railties//lib/rails/railtie.rb#160
    def runner(&blk); end

    # source://railties//lib/rails/railtie.rb#168
    def server(&blk); end

    # source://railties//lib/rails/railtie.rb#148
    def subclasses; end

    protected

    # source://railties//lib/rails/railtie.rb#206
    def increment_load_index; end

    # source://railties//lib/rails/railtie.rb#204
    def load_index; end

    private

    # source://railties//lib/rails/railtie.rb#212
    def generate_railtie_name(string); end

    # source://railties//lib/rails/railtie.rb#224
    def method_missing(name, *args, **_arg2, &block); end

    def new(*_arg0); end

    # source://railties//lib/rails/railtie.rb#236
    def register_block_for(type, &blk); end

    # source://railties//lib/rails/railtie.rb#216
    def respond_to_missing?(name, _); end
  end
end

# source://railties//lib/rails/railtie.rb#142
Rails::Railtie::ABSTRACT_RAILTIES = T.let(T.unsafe(nil), Array)

# source://railties//lib/rails/railtie/configuration.rb#7
class Rails::Railtie::Configuration
  # source://railties//lib/rails/railtie/configuration.rb#8
  def initialize; end

  # source://railties//lib/rails/railtie/configuration.rb#70
  def after_initialize(&block); end

  # source://railties//lib/rails/railtie/configuration.rb#75
  def after_routes_loaded(&block); end

  # source://railties//lib/rails/railtie/configuration.rb#47
  def app_generators; end

  # source://railties//lib/rails/railtie/configuration.rb#39
  def app_middleware; end

  # source://railties//lib/rails/railtie/configuration.rb#54
  def before_configuration(&block); end

  # source://railties//lib/rails/railtie/configuration.rb#60
  def before_eager_load(&block); end

  # source://railties//lib/rails/railtie/configuration.rb#65
  def before_initialize(&block); end

  # source://railties//lib/rails/railtie/configuration.rb#18
  def eager_load_namespaces; end

  # source://railties//lib/rails/railtie/configuration.rb#90
  def respond_to?(name, include_private = T.unsafe(nil)); end

  # source://railties//lib/rails/railtie/configuration.rb#86
  def to_prepare(&blk); end

  # source://railties//lib/rails/railtie/configuration.rb#80
  def to_prepare_blocks; end

  # source://railties//lib/rails/railtie/configuration.rb#30
  def watchable_dirs; end

  # source://railties//lib/rails/railtie/configuration.rb#23
  def watchable_files; end

  private

  # source://railties//lib/rails/railtie/configuration.rb#95
  def actual_method?(key); end

  # source://railties//lib/rails/railtie/configuration.rb#99
  def method_missing(name, *args, &blk); end

  class << self
    # source://railties//lib/rails/railtie/configuration.rb#13
    def eager_load_namespaces; end
  end
end

# source://railties//lib/rails/secrets.rb#9
class Rails::Secrets
  class << self
    # source://railties//lib/rails/secrets.rb#46
    def decrypt(data); end

    # source://railties//lib/rails/secrets.rb#42
    def encrypt(data); end

    # source://railties//lib/rails/secrets.rb#38
    def key; end

    # source://railties//lib/rails/secrets.rb#25
    def parse(paths, env:); end

    # source://railties//lib/rails/secrets.rb#50
    def read; end

    # source://railties//lib/rails/secrets.rb#59
    def read_for_editing(&block); end

    # source://railties//lib/rails/secrets.rb#23
    def root=(_arg0); end

    # source://railties//lib/rails/secrets.rb#54
    def write(contents); end

    private

    # source://railties//lib/rails/secrets.rb#105
    def encryptor; end

    # source://railties//lib/rails/secrets.rb#64
    def handle_missing_key; end

    # source://railties//lib/rails/secrets.rb#74
    def key_path; end

    # source://railties//lib/rails/secrets.rb#78
    def path; end

    # source://railties//lib/rails/secrets.rb#82
    def preprocess(path); end

    # source://railties//lib/rails/secrets.rb#68
    def read_key_file; end

    # source://railties//lib/rails/secrets.rb#90
    def writing(contents); end
  end
end

# source://railties//lib/rails/secrets.rb#10
class Rails::Secrets::MissingKeyError < ::RuntimeError
  # source://railties//lib/rails/secrets.rb#11
  def initialize; end
end

# source://railties//lib/rails/source_annotation_extractor.rb#15
class Rails::SourceAnnotationExtractor
  # source://railties//lib/rails/source_annotation_extractor.rb#137
  def initialize(tag); end

  # source://railties//lib/rails/source_annotation_extractor.rb#186
  def display(results, options = T.unsafe(nil)); end

  # source://railties//lib/rails/source_annotation_extractor.rb#143
  def find(dirs); end

  # source://railties//lib/rails/source_annotation_extractor.rb#151
  def find_in(dir); end

  # source://railties//lib/rails/source_annotation_extractor.rb#135
  def tag; end

  class << self
    # source://railties//lib/rails/source_annotation_extractor.rb#128
    def enumerate(tag = T.unsafe(nil), options = T.unsafe(nil)); end
  end
end

# source://railties//lib/rails/source_annotation_extractor.rb#54
class Rails::SourceAnnotationExtractor::Annotation < ::Struct
  # source://railties//lib/rails/source_annotation_extractor.rb#107
  def to_s(options = T.unsafe(nil)); end

  class << self
    # source://railties//lib/rails/source_annotation_extractor.rb#55
    def directories; end

    # source://railties//lib/rails/source_annotation_extractor.rb#75
    def extensions; end

    # source://railties//lib/rails/source_annotation_extractor.rb#61
    def register_directories(*dirs); end

    # source://railties//lib/rails/source_annotation_extractor.rb#81
    def register_extensions(*exts, &block); end

    # source://railties//lib/rails/source_annotation_extractor.rb#71
    def register_tags(*additional_tags); end

    # source://railties//lib/rails/source_annotation_extractor.rb#65
    def tags; end
  end
end

# source://railties//lib/rails/source_annotation_extractor.rb#18
class Rails::SourceAnnotationExtractor::ParserExtractor < ::Struct
  # source://railties//lib/rails/source_annotation_extractor.rb#33
  def annotations(file); end
end

# source://railties//lib/rails/source_annotation_extractor.rb#19
class Rails::SourceAnnotationExtractor::ParserExtractor::Parser < ::Ripper
  # source://railties//lib/rails/source_annotation_extractor.rb#22
  def initialize(source, pattern:); end

  # source://railties//lib/rails/source_annotation_extractor.rb#20
  def comments; end

  # source://railties//lib/rails/source_annotation_extractor.rb#28
  def on_comment(value); end

  # source://railties//lib/rails/source_annotation_extractor.rb#20
  def pattern; end
end

# source://railties//lib/rails/source_annotation_extractor.rb#42
class Rails::SourceAnnotationExtractor::PatternExtractor < ::Struct
  # source://railties//lib/rails/source_annotation_extractor.rb#43
  def annotations(file); end
end

# source://railties//lib/rails/test_unit/test_parser.rb#6
module Rails::TestUnit; end

# source://railties//lib/rails/test_unit/runner.rb#122
class Rails::TestUnit::CompositeFilter
  # source://railties//lib/rails/test_unit/runner.rb#125
  def initialize(runnable, filter, patterns); end

  # source://railties//lib/rails/test_unit/runner.rb#132
  def ===(method); end

  # source://railties//lib/rails/test_unit/runner.rb#123
  def named_filter; end

  private

  # source://railties//lib/rails/test_unit/runner.rb#147
  def derive_line_filters(patterns); end

  # source://railties//lib/rails/test_unit/runner.rb#137
  def derive_named_filter(filter); end
end

# source://railties//lib/rails/test_unit/runner.rb#158
class Rails::TestUnit::Filter
  # source://railties//lib/rails/test_unit/runner.rb#159
  def initialize(runnable, file, line_or_range); end

  # source://railties//lib/rails/test_unit/runner.rb#168
  def ===(method); end

  private

  # source://railties//lib/rails/test_unit/runner.rb#180
  def definition_for(method); end
end

# source://railties//lib/rails/test_unit/runner.rb#12
class Rails::TestUnit::Runner
  # source://railties//lib/rails/test_unit/runner.rb#15
  def filters; end

  class << self
    # source://railties//lib/rails/test_unit/runner.rb#18
    def attach_before_load_options(opts); end

    # source://railties//lib/rails/test_unit/runner.rb#54
    def compose_filter(runnable, filter); end

    # source://railties//lib/rails/test_unit/runner.rb#15
    def filters; end

    # source://railties//lib/rails/test_unit/runner.rb#48
    def load_tests(argv); end

    # source://railties//lib/rails/test_unit/runner.rb#23
    def parse_options(argv); end

    # source://railties//lib/rails/test_unit/runner.rb#42
    def run(argv = T.unsafe(nil)); end

    # source://railties//lib/rails/test_unit/runner.rb#36
    def run_from_rake(test_command, argv = T.unsafe(nil)); end

    private

    # source://railties//lib/rails/test_unit/runner.rb#89
    def default_test_exclude_glob; end

    # source://railties//lib/rails/test_unit/runner.rb#85
    def default_test_glob; end

    # source://railties//lib/rails/test_unit/runner.rb#65
    def extract_filters(argv); end

    # source://railties//lib/rails/test_unit/runner.rb#101
    def list_tests(patterns); end

    # source://railties//lib/rails/test_unit/runner.rb#107
    def normalize_declarative_test_filter(filter); end

    # source://railties//lib/rails/test_unit/runner.rb#97
    def path_argument?(arg); end

    # source://railties//lib/rails/test_unit/runner.rb#93
    def regexp_filter?(arg); end
  end
end

# source://railties//lib/rails/test_unit/runner.rb#14
Rails::TestUnit::Runner::PATH_ARGUMENT_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://railties//lib/rails/test_unit/runner.rb#13
Rails::TestUnit::Runner::TEST_FOLDERS = T.let(T.unsafe(nil), Array)

# source://railties//lib/rails/test_unit/test_parser.rb#11
class Rails::TestUnit::TestParser < ::Ripper
  # source://railties//lib/rails/test_unit/test_parser.rb#19
  def initialize(*_arg0); end

  # source://railties//lib/rails/test_unit/test_parser.rb#56
  def first_arg(arg, *_arg1); end

  # source://railties//lib/rails/test_unit/test_parser.rb#60
  def just_lineno(*_arg0); end

  # source://railties//lib/rails/test_unit/test_parser.rb#56
  def on_arg_paren(arg, *_arg1); end

  # source://railties//lib/rails/test_unit/test_parser.rb#79
  def on_args_add(parts, part); end

  # source://railties//lib/rails/test_unit/test_parser.rb#83
  def on_args_add_block(args, *rest); end

  # source://railties//lib/rails/test_unit/test_parser.rb#75
  def on_args_new; end

  # source://railties//lib/rails/test_unit/test_parser.rb#56
  def on_bodystmt(arg, *_arg1); end

  # source://railties//lib/rails/test_unit/test_parser.rb#60
  def on_brace_block(*_arg0); end

  # source://railties//lib/rails/test_unit/test_parser.rb#56
  def on_command(arg, *_arg1); end

  # source://railties//lib/rails/test_unit/test_parser.rb#52
  def on_command_call(*_arg0, begin_lineno, _args); end

  # source://railties//lib/rails/test_unit/test_parser.rb#34
  def on_def(begin_line, *_arg1); end

  # source://railties//lib/rails/test_unit/test_parser.rb#60
  def on_do_block(*_arg0); end

  # source://railties//lib/rails/test_unit/test_parser.rb#60
  def on_ident(*_arg0); end

  # source://railties//lib/rails/test_unit/test_parser.rb#56
  def on_method_add_arg(arg, *_arg1); end

  # source://railties//lib/rails/test_unit/test_parser.rb#46
  def on_method_add_block(begin_line, end_line); end

  # source://railties//lib/rails/test_unit/test_parser.rb#56
  def on_stmts_add(arg, *_arg1); end

  # source://railties//lib/rails/test_unit/test_parser.rb#60
  def on_stmts_new(*_arg0); end

  # source://railties//lib/rails/test_unit/test_parser.rb#25
  def parse; end

  class << self
    # source://railties//lib/rails/test_unit/test_parser.rb#12
    def definition_for(method_obj); end
  end
end

# source://railties//lib/rails/test_unit/railtie.rb#6
class Rails::TestUnitRailtie < ::Rails::Railtie; end

# source://railties//lib/rails/gem_version.rb#9
module Rails::VERSION; end

# source://railties//lib/rails/gem_version.rb#10
Rails::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://railties//lib/rails/gem_version.rb#11
Rails::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://railties//lib/rails/gem_version.rb#13
Rails::VERSION::PRE = T.let(T.unsafe(nil), String)

# source://railties//lib/rails/gem_version.rb#15
Rails::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://railties//lib/rails/gem_version.rb#12
Rails::VERSION::TINY = T.let(T.unsafe(nil), Integer)

# source://railties//lib/rails/welcome_controller.rb#5
class Rails::WelcomeController < ::Rails::ApplicationController
  # source://railties//lib/rails/welcome_controller.rb#9
  def index; end

  private

  # source://actionview/7.1.3.3/lib/action_view/layouts.rb#330
  def _layout(lookup_context, formats); end

  class << self
    # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://actionview/7.1.3.3/lib/action_view/layouts.rb#211
    def _layout; end

    # source://actionview/7.1.3.3/lib/action_view/layouts.rb#212
    def _layout_conditions; end

    # source://actionpack/7.1.3.3/lib/action_controller/metal.rb#262
    def middleware_stack; end
  end
end
