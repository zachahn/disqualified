# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `mocktail` gem.
# Please instead update this file by running `bin/tapioca gem mocktail`.

# source://mocktail//lib/mocktail/collects_calls.rb#1
module Mocktail
  class << self
    # source://mocktail//lib/mocktail.rb#82
    def cabinet; end

    # source://mocktail//lib/mocktail.rb#75
    def calls(double, method_name = T.unsafe(nil)); end

    # source://mocktail//lib/mocktail.rb#45
    def captor; end

    # source://mocktail//lib/mocktail.rb#64
    def explain(thing); end

    # source://mocktail//lib/mocktail.rb#68
    def explain_nils; end

    # source://mocktail//lib/mocktail.rb#41
    def matchers; end

    # source://mocktail//lib/mocktail.rb#27
    def of(type); end

    # source://mocktail//lib/mocktail.rb#33
    def of_next(type, count: T.unsafe(nil)); end

    # source://mocktail//lib/mocktail.rb#49
    def register_matcher(matcher); end

    # source://mocktail//lib/mocktail.rb#55
    def replace(type); end

    # source://mocktail//lib/mocktail.rb#60
    def reset; end

    # source://mocktail//lib/mocktail/dsl.rb#3
    def stubs(ignore_block: T.unsafe(nil), ignore_extra_args: T.unsafe(nil), ignore_arity: T.unsafe(nil), times: T.unsafe(nil), &demo); end

    # source://mocktail//lib/mocktail/dsl.rb#12
    def verify(ignore_block: T.unsafe(nil), ignore_extra_args: T.unsafe(nil), ignore_arity: T.unsafe(nil), times: T.unsafe(nil), &demo); end
  end
end

# source://mocktail//lib/mocktail/errors.rb#10
class Mocktail::AmbiguousDemonstrationError < ::Mocktail::Error; end

# source://mocktail//lib/mocktail/share/bind.rb#2
module Mocktail::Bind
  class << self
    # source://mocktail//lib/mocktail/share/bind.rb#3
    def call(mock, method_name, *args, **kwargs, &blk); end
  end
end

# source://mocktail//lib/mocktail/value/cabinet.rb#6
class Mocktail::Cabinet
  # source://mocktail//lib/mocktail/value/cabinet.rb#10
  def initialize; end

  # source://mocktail//lib/mocktail/value/cabinet.rb#8
  def calls; end

  # source://mocktail//lib/mocktail/value/cabinet.rb#62
  def calls_for_double(double); end

  # source://mocktail//lib/mocktail/value/cabinet.rb#7
  def demonstration_in_progress=(_arg0); end

  # source://mocktail//lib/mocktail/value/cabinet.rb#45
  def demonstration_in_progress?; end

  # source://mocktail//lib/mocktail/value/cabinet.rb#49
  def double_for_instance(thing); end

  # source://mocktail//lib/mocktail/value/cabinet.rb#18
  def reset!; end

  # source://mocktail//lib/mocktail/value/cabinet.rb#33
  def store_call(call); end

  # source://mocktail//lib/mocktail/value/cabinet.rb#29
  def store_double(double); end

  # source://mocktail//lib/mocktail/value/cabinet.rb#37
  def store_stubbing(stubbing); end

  # source://mocktail//lib/mocktail/value/cabinet.rb#41
  def store_unsatisfying_call(unsatisfying_call); end

  # source://mocktail//lib/mocktail/value/cabinet.rb#8
  def stubbings; end

  # source://mocktail//lib/mocktail/value/cabinet.rb#56
  def stubbings_for_double(double); end

  # source://mocktail//lib/mocktail/value/cabinet.rb#8
  def unsatisfying_calls; end
end

# source://mocktail//lib/mocktail/value/call.rb#13
class Mocktail::Call < ::Struct; end

# source://mocktail//lib/mocktail/share/cleans_backtrace.rb#4
class Mocktail::CleansBacktrace
  # source://mocktail//lib/mocktail/share/cleans_backtrace.rb#7
  def clean(error); end
end

# source://mocktail//lib/mocktail/share/cleans_backtrace.rb#5
Mocktail::CleansBacktrace::BASE_PATH = T.let(T.unsafe(nil), String)

# source://mocktail//lib/mocktail/collects_calls.rb#2
class Mocktail::CollectsCalls
  # source://mocktail//lib/mocktail/collects_calls.rb#3
  def collect(double, method_name); end
end

# source://mocktail//lib/mocktail/share/creates_identifier.rb#2
class Mocktail::CreatesIdentifier
  # source://mocktail//lib/mocktail/share/creates_identifier.rb#5
  def create(s, default: T.unsafe(nil), max_length: T.unsafe(nil)); end

  private

  # source://mocktail//lib/mocktail/share/creates_identifier.rb#22
  def unreserved(id, default); end
end

# source://mocktail//lib/mocktail/share/creates_identifier.rb#3
Mocktail::CreatesIdentifier::KEYWORDS = T.let(T.unsafe(nil), Array)

# source://mocktail//lib/mocktail/dsl.rb#2
module Mocktail::DSL
  # source://mocktail//lib/mocktail/dsl.rb#3
  def stubs(ignore_block: T.unsafe(nil), ignore_extra_args: T.unsafe(nil), ignore_arity: T.unsafe(nil), times: T.unsafe(nil), &demo); end

  # source://mocktail//lib/mocktail/dsl.rb#12
  def verify(ignore_block: T.unsafe(nil), ignore_extra_args: T.unsafe(nil), ignore_arity: T.unsafe(nil), times: T.unsafe(nil), &demo); end
end

# source://mocktail//lib/mocktail/debug.rb#2
module Mocktail::Debug
  class << self
    # source://mocktail//lib/mocktail/debug.rb#15
    def guard_against_mocktail_accidentally_calling_mocks_if_debugging!; end
  end
end

# source://mocktail//lib/mocktail/imitates_type/makes_double/declares_dry_class.rb#4
class Mocktail::DeclaresDryClass
  # source://mocktail//lib/mocktail/imitates_type/makes_double/declares_dry_class.rb#5
  def initialize; end

  # source://mocktail//lib/mocktail/imitates_type/makes_double/declares_dry_class.rb#11
  def declare(type, instance_methods); end

  private

  # source://mocktail//lib/mocktail/imitates_type/makes_double/declares_dry_class.rb#73
  def add_stringify_methods!(dry_class, method_name, type, instance_methods); end

  # source://mocktail//lib/mocktail/imitates_type/makes_double/declares_dry_class.rb#44
  def define_double_methods!(dry_class, type, instance_methods); end

  # source://mocktail//lib/mocktail/imitates_type/makes_double/declares_dry_class.rb#93
  def define_method_missing_errors!(dry_class, type, instance_methods); end
end

# source://mocktail//lib/mocktail/value/demo_config.rb#8
class Mocktail::DemoConfig < ::Struct; end

# source://mocktail//lib/mocktail/handles_dry_call/fulfills_stubbing/describes_unsatisfied_stubbing.rb#5
class Mocktail::DescribesUnsatisfiedStubbing
  # source://mocktail//lib/mocktail/handles_dry_call/fulfills_stubbing/describes_unsatisfied_stubbing.rb#6
  def initialize; end

  # source://mocktail//lib/mocktail/handles_dry_call/fulfills_stubbing/describes_unsatisfied_stubbing.rb#10
  def describe(dry_call); end
end

# source://mocktail//lib/mocktail/share/determines_matching_calls.rb#4
class Mocktail::DeterminesMatchingCalls
  # source://mocktail//lib/mocktail/share/determines_matching_calls.rb#5
  def determine(real_call, demo_call, demo_config); end

  private

  # source://mocktail//lib/mocktail/share/determines_matching_calls.rb#17
  def args_match?(real_args, demo_args, ignore_extra_args); end

  # source://mocktail//lib/mocktail/share/determines_matching_calls.rb#42
  def blocks_match?(real_block, demo_block, ignore_block); end

  # source://mocktail//lib/mocktail/share/determines_matching_calls.rb#30
  def kwargs_match?(real_kwargs, demo_kwargs, ignore_extra_args); end

  # source://mocktail//lib/mocktail/share/determines_matching_calls.rb#54
  def match?(real_arg, demo_arg); end
end

# source://mocktail//lib/mocktail/value/double.rb#8
class Mocktail::Double < ::Struct; end

# source://mocktail//lib/mocktail/value/double_data.rb#8
class Mocktail::DoubleData < ::Struct; end

# source://mocktail//lib/mocktail/value/explanation.rb#21
class Mocktail::DoubleExplanation < ::Mocktail::Explanation; end

# source://mocktail//lib/mocktail/imitates_type/ensures_imitation_support.rb#2
class Mocktail::EnsuresImitationSupport
  # source://mocktail//lib/mocktail/imitates_type/ensures_imitation_support.rb#3
  def ensure(type); end
end

# source://mocktail//lib/mocktail/errors.rb#2
class Mocktail::Error < ::StandardError; end

# source://mocktail//lib/mocktail/explains_nils.rb#5
class Mocktail::ExplainsNils
  # source://mocktail//lib/mocktail/explains_nils.rb#6
  def initialize; end

  # source://mocktail//lib/mocktail/explains_nils.rb#11
  def explain; end
end

# source://mocktail//lib/mocktail/explains_thing.rb#5
class Mocktail::ExplainsThing
  # source://mocktail//lib/mocktail/explains_thing.rb#6
  def initialize; end

  # source://mocktail//lib/mocktail/explains_thing.rb#11
  def explain(thing); end

  private

  # source://mocktail//lib/mocktail/explains_thing.rb#45
  def data_for_double(double); end

  # source://mocktail//lib/mocktail/explains_thing.rb#67
  def data_for_type_replacement(type_replacement); end

  # source://mocktail//lib/mocktail/explains_thing.rb#93
  def describe_dry_method(double_data, method); end

  # source://mocktail//lib/mocktail/explains_thing.rb#54
  def double_explanation(double); end

  # source://mocktail//lib/mocktail/explains_thing.rb#25
  def fake_method_explanation_for(thing); end

  # source://mocktail//lib/mocktail/explains_thing.rb#118
  def no_explanation(thing); end

  # source://mocktail//lib/mocktail/explains_thing.rb#80
  def replaced_type_explanation(type_replacement); end
end

# source://mocktail//lib/mocktail/value/explanation.rb#2
class Mocktail::Explanation
  # source://mocktail//lib/mocktail/value/explanation.rb#5
  def initialize(reference, message); end

  # source://mocktail//lib/mocktail/value/explanation.rb#3
  def message; end

  # source://mocktail//lib/mocktail/value/explanation.rb#3
  def reference; end

  # source://mocktail//lib/mocktail/value/explanation.rb#10
  def type; end
end

# source://mocktail//lib/mocktail/value/fake_method_data.rb#7
class Mocktail::FakeMethodData < ::Struct; end

# source://mocktail//lib/mocktail/value/explanation.rb#27
class Mocktail::FakeMethodExplanation < ::Mocktail::Explanation; end

# source://mocktail//lib/mocktail/handles_dry_call/fulfills_stubbing/finds_satisfaction.rb#4
class Mocktail::FindsSatisfaction
  # source://mocktail//lib/mocktail/handles_dry_call/fulfills_stubbing/finds_satisfaction.rb#5
  def initialize; end

  # source://mocktail//lib/mocktail/handles_dry_call/fulfills_stubbing/finds_satisfaction.rb#9
  def find(dry_call); end
end

# source://mocktail//lib/mocktail/verifies_call/finds_verifiable_calls.rb#4
class Mocktail::FindsVerifiableCalls
  # source://mocktail//lib/mocktail/verifies_call/finds_verifiable_calls.rb#5
  def initialize; end

  # source://mocktail//lib/mocktail/verifies_call/finds_verifiable_calls.rb#9
  def find(recording, demo_config); end
end

# source://mocktail//lib/mocktail/handles_dry_call/fulfills_stubbing.rb#5
class Mocktail::FulfillsStubbing
  # source://mocktail//lib/mocktail/handles_dry_call/fulfills_stubbing.rb#6
  def initialize; end

  # source://mocktail//lib/mocktail/handles_dry_call/fulfills_stubbing.rb#11
  def fulfill(dry_call); end

  # source://mocktail//lib/mocktail/handles_dry_call/fulfills_stubbing.rb#21
  def satisfaction(dry_call); end

  private

  # source://mocktail//lib/mocktail/handles_dry_call/fulfills_stubbing.rb#29
  def store_unsatisfying_call!(dry_call); end
end

# source://mocktail//lib/mocktail/verifies_call/raises_verification_error/gathers_calls_of_method.rb#2
class Mocktail::GathersCallsOfMethod
  # source://mocktail//lib/mocktail/verifies_call/raises_verification_error/gathers_calls_of_method.rb#3
  def gather(dry_call); end
end

# source://mocktail//lib/mocktail/imitates_type/makes_double/gathers_fakeable_instance_methods.rb#2
class Mocktail::GathersFakeableInstanceMethods
  # source://mocktail//lib/mocktail/imitates_type/makes_double/gathers_fakeable_instance_methods.rb#3
  def gather(type); end

  # source://mocktail//lib/mocktail/imitates_type/makes_double/gathers_fakeable_instance_methods.rb#13
  def ignore?(type, method_name); end

  # source://mocktail//lib/mocktail/imitates_type/makes_double/gathers_fakeable_instance_methods.rb#17
  def ignored_ancestors; end
end

# source://mocktail//lib/mocktail/handles_dry_call.rb#6
class Mocktail::HandlesDryCall
  # source://mocktail//lib/mocktail/handles_dry_call.rb#7
  def initialize; end

  # source://mocktail//lib/mocktail/handles_dry_call.rb#13
  def handle(dry_call); end
end

# source://mocktail//lib/mocktail/handles_dry_new_call.rb#2
class Mocktail::HandlesDryNewCall
  # source://mocktail//lib/mocktail/handles_dry_new_call.rb#3
  def initialize; end

  # source://mocktail//lib/mocktail/handles_dry_new_call.rb#10
  def handle(type, args, kwargs, block); end
end

# source://mocktail//lib/mocktail/imitates_type.rb#5
class Mocktail::ImitatesType
  # source://mocktail//lib/mocktail/imitates_type.rb#6
  def initialize; end

  # source://mocktail//lib/mocktail/imitates_type.rb#12
  def imitate(type); end
end

# source://mocktail//lib/mocktail/initializes_mocktail.rb#2
class Mocktail::InitializesMocktail
  # source://mocktail//lib/mocktail/initializes_mocktail.rb#3
  def init; end
end

# source://mocktail//lib/mocktail/errors.rb#12
class Mocktail::InvalidMatcherError < ::Mocktail::Error; end

# source://mocktail//lib/mocktail/handles_dry_call/logs_call.rb#2
class Mocktail::LogsCall
  # source://mocktail//lib/mocktail/handles_dry_call/logs_call.rb#3
  def log(dry_call); end
end

# source://mocktail//lib/mocktail/imitates_type/makes_double.rb#5
class Mocktail::MakesDouble
  # source://mocktail//lib/mocktail/imitates_type/makes_double.rb#6
  def initialize; end

  # source://mocktail//lib/mocktail/imitates_type/makes_double.rb#11
  def make(type); end
end

# source://mocktail//lib/mocktail/matcher_presentation.rb#2
class Mocktail::MatcherPresentation
  # source://mocktail//lib/mocktail/matcher_presentation.rb#7
  def method_missing(name, *args, **kwargs, &blk); end

  private

  # source://mocktail//lib/mocktail/matcher_presentation.rb#3
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end
end

# source://mocktail//lib/mocktail/value/matcher_registry.rb#2
class Mocktail::MatcherRegistry
  # source://mocktail//lib/mocktail/value/matcher_registry.rb#7
  def initialize; end

  # source://mocktail//lib/mocktail/value/matcher_registry.rb#11
  def add(matcher_type); end

  # source://mocktail//lib/mocktail/value/matcher_registry.rb#15
  def get(name); end

  class << self
    # source://mocktail//lib/mocktail/value/matcher_registry.rb#3
    def instance; end
  end
end

# source://mocktail//lib/mocktail/matchers.rb#2
module Mocktail::Matchers; end

# source://mocktail//lib/mocktail/matchers/any.rb#2
class Mocktail::Matchers::Any < ::Mocktail::Matchers::Base
  # source://mocktail//lib/mocktail/matchers/any.rb#9
  def initialize; end

  # source://mocktail//lib/mocktail/matchers/any.rb#16
  def inspect; end

  # source://mocktail//lib/mocktail/matchers/any.rb#12
  def match?(actual); end

  class << self
    # source://mocktail//lib/mocktail/matchers/any.rb#3
    def matcher_name; end
  end
end

# source://mocktail//lib/mocktail/matchers/base.rb#2
class Mocktail::Matchers::Base
  # source://mocktail//lib/mocktail/matchers/base.rb#5
  def initialize(expected); end

  # source://mocktail//lib/mocktail/matchers/base.rb#17
  def inspect; end

  # source://mocktail//lib/mocktail/matchers/base.rb#21
  def is_mocktail_matcher?; end

  # source://mocktail//lib/mocktail/matchers/base.rb#13
  def match?(actual); end

  class << self
    # source://mocktail//lib/mocktail/matchers/base.rb#9
    def matcher_name; end
  end
end

# source://mocktail//lib/mocktail/matchers/captor.rb#15
class Mocktail::Matchers::Captor
  # source://mocktail//lib/mocktail/matchers/captor.rb#44
  def initialize; end

  # source://mocktail//lib/mocktail/matchers/captor.rb#43
  def capture; end

  # source://mocktail//lib/mocktail/matchers/captor.rb#48
  def captured?; end

  # source://mocktail//lib/mocktail/matchers/captor.rb#52
  def value; end
end

# source://mocktail//lib/mocktail/matchers/captor.rb#16
class Mocktail::Matchers::Captor::Capture < ::Mocktail::Matchers::Base
  # source://mocktail//lib/mocktail/matchers/captor.rb#23
  def initialize; end

  # source://mocktail//lib/mocktail/matchers/captor.rb#34
  def captured?; end

  # source://mocktail//lib/mocktail/matchers/captor.rb#38
  def inspect; end

  # source://mocktail//lib/mocktail/matchers/captor.rb#28
  def match?(actual); end

  # source://mocktail//lib/mocktail/matchers/captor.rb#21
  def value; end

  class << self
    # source://mocktail//lib/mocktail/matchers/captor.rb#17
    def matcher_name; end
  end
end

# source://mocktail//lib/mocktail/matchers/includes.rb#2
class Mocktail::Matchers::Includes < ::Mocktail::Matchers::Base
  # source://mocktail//lib/mocktail/matchers/includes.rb#7
  def initialize(*expecteds); end

  # source://mocktail//lib/mocktail/matchers/includes.rb#20
  def inspect; end

  # source://mocktail//lib/mocktail/matchers/includes.rb#11
  def match?(actual); end

  class << self
    # source://mocktail//lib/mocktail/matchers/includes.rb#3
    def matcher_name; end
  end
end

# source://mocktail//lib/mocktail/matchers/is_a.rb#2
class Mocktail::Matchers::IsA < ::Mocktail::Matchers::Base
  # source://mocktail//lib/mocktail/matchers/is_a.rb#7
  def match?(actual); end

  class << self
    # source://mocktail//lib/mocktail/matchers/is_a.rb#3
    def matcher_name; end
  end
end

# source://mocktail//lib/mocktail/matchers/matches.rb#2
class Mocktail::Matchers::Matches < ::Mocktail::Matchers::Base
  # source://mocktail//lib/mocktail/matchers/matches.rb#7
  def match?(actual); end

  class << self
    # source://mocktail//lib/mocktail/matchers/matches.rb#3
    def matcher_name; end
  end
end

# source://mocktail//lib/mocktail/matchers/not.rb#2
class Mocktail::Matchers::Not < ::Mocktail::Matchers::Base
  # source://mocktail//lib/mocktail/matchers/not.rb#7
  def match?(actual); end

  class << self
    # source://mocktail//lib/mocktail/matchers/not.rb#3
    def matcher_name; end
  end
end

# source://mocktail//lib/mocktail/matchers/numeric.rb#2
class Mocktail::Matchers::Numeric < ::Mocktail::Matchers::Base
  # source://mocktail//lib/mocktail/matchers/numeric.rb#9
  def initialize; end

  # source://mocktail//lib/mocktail/matchers/numeric.rb#16
  def inspect; end

  # source://mocktail//lib/mocktail/matchers/numeric.rb#12
  def match?(actual); end

  class << self
    # source://mocktail//lib/mocktail/matchers/numeric.rb#3
    def matcher_name; end
  end
end

# source://mocktail//lib/mocktail/matchers/that.rb#2
class Mocktail::Matchers::That < ::Mocktail::Matchers::Base
  # source://mocktail//lib/mocktail/matchers/that.rb#7
  def initialize(&blk); end

  # source://mocktail//lib/mocktail/matchers/that.rb#20
  def inspect; end

  # source://mocktail//lib/mocktail/matchers/that.rb#14
  def match?(actual); end

  class << self
    # source://mocktail//lib/mocktail/matchers/that.rb#3
    def matcher_name; end
  end
end

# source://mocktail//lib/mocktail/errors.rb#8
class Mocktail::MissingDemonstrationError < ::Mocktail::Error; end

# source://mocktail//lib/mocktail/value/explanation.rb#15
class Mocktail::NoExplanation < ::Mocktail::Explanation; end

# source://mocktail//lib/mocktail/value/signature.rb#22
class Mocktail::Params < ::Struct
  # source://mocktail//lib/mocktail/value/signature.rb#24
  def initialize(**params); end

  # source://mocktail//lib/mocktail/value/signature.rb#31
  def allowed; end

  # source://mocktail//lib/mocktail/value/signature.rb#35
  def rest?; end
end

# source://mocktail//lib/mocktail/raises_neato_no_method_error.rb#6
class Mocktail::RaisesNeatoNoMethodError
  # source://mocktail//lib/mocktail/raises_neato_no_method_error.rb#7
  def initialize; end

  # source://mocktail//lib/mocktail/raises_neato_no_method_error.rb#13
  def call(call); end

  private

  # source://mocktail//lib/mocktail/raises_neato_no_method_error.rb#53
  def block_param(block); end

  # source://mocktail//lib/mocktail/raises_neato_no_method_error.rb#69
  def corrections(call); end

  # source://mocktail//lib/mocktail/raises_neato_no_method_error.rb#59
  def count_repeats(identifiers); end

  # source://mocktail//lib/mocktail/raises_neato_no_method_error.rb#47
  def kwparams_list(kwargs); end

  # source://mocktail//lib/mocktail/raises_neato_no_method_error.rb#29
  def params(call); end

  # source://mocktail//lib/mocktail/raises_neato_no_method_error.rb#39
  def params_list(args); end
end

# source://mocktail//lib/mocktail/verifies_call/raises_verification_error.rb#6
class Mocktail::RaisesVerificationError
  # source://mocktail//lib/mocktail/verifies_call/raises_verification_error.rb#7
  def initialize; end

  # source://mocktail//lib/mocktail/verifies_call/raises_verification_error.rb#13
  def raise(recording, verifiable_calls, demo_config); end

  private

  # source://mocktail//lib/mocktail/verifies_call/raises_verification_error.rb#42
  def describe_other_calls(recording, verifiable_calls, demo_config); end

  # source://mocktail//lib/mocktail/verifies_call/raises_verification_error.rb#32
  def describe_verifiable_times_called(demo_config, count); end

  # source://mocktail//lib/mocktail/verifies_call/raises_verification_error.rb#57
  def pl(s, count); end
end

# source://mocktail//lib/mocktail/simulates_argument_error/reconciles_args_with_params.rb#2
class Mocktail::ReconcilesArgsWithParams
  # source://mocktail//lib/mocktail/simulates_argument_error/reconciles_args_with_params.rb#3
  def reconcile(signature); end

  private

  # source://mocktail//lib/mocktail/simulates_argument_error/reconciles_args_with_params.rb#10
  def args_match?(arg_params, args); end

  # source://mocktail//lib/mocktail/simulates_argument_error/reconciles_args_with_params.rb#15
  def kwargs_match?(kwarg_params, kwargs); end
end

# source://mocktail//lib/mocktail/imitates_type/makes_double/declares_dry_class/reconstructs_call.rb#2
class Mocktail::ReconstructsCall
  # source://mocktail//lib/mocktail/imitates_type/makes_double/declares_dry_class/reconstructs_call.rb#3
  def reconstruct(double:, call_binding:, default_args:, dry_class:, type:, method:, original_method:, signature:); end

  private

  # source://mocktail//lib/mocktail/imitates_type/makes_double/declares_dry_class/reconstructs_call.rb#19
  def args_for(signature, call_binding, default_args); end

  # source://mocktail//lib/mocktail/imitates_type/makes_double/declares_dry_class/reconstructs_call.rb#28
  def kwargs_for(signature, call_binding, default_args); end

  # source://mocktail//lib/mocktail/imitates_type/makes_double/declares_dry_class/reconstructs_call.rb#37
  def non_default_args(params, default_args); end
end

# source://mocktail//lib/mocktail/records_demonstration.rb#2
class Mocktail::RecordsDemonstration
  # source://mocktail//lib/mocktail/records_demonstration.rb#3
  def record(demonstration, demo_config); end
end

# source://mocktail//lib/mocktail/simulates_argument_error/recreates_message.rb#2
class Mocktail::RecreatesMessage
  # source://mocktail//lib/mocktail/simulates_argument_error/recreates_message.rb#3
  def recreate(signature); end
end

# source://mocktail//lib/mocktail/replaces_type/redefines_new.rb#2
class Mocktail::RedefinesNew
  # source://mocktail//lib/mocktail/replaces_type/redefines_new.rb#3
  def initialize; end

  # source://mocktail//lib/mocktail/replaces_type/redefines_new.rb#7
  def redefine(type); end
end

# source://mocktail//lib/mocktail/replaces_type/redefines_singleton_methods.rb#2
class Mocktail::RedefinesSingletonMethods
  # source://mocktail//lib/mocktail/replaces_type/redefines_singleton_methods.rb#3
  def initialize; end

  # source://mocktail//lib/mocktail/replaces_type/redefines_singleton_methods.rb#40
  def declare_singleton_method_missing_errors!(type); end

  # source://mocktail//lib/mocktail/replaces_type/redefines_singleton_methods.rb#7
  def redefine(type); end
end

# source://mocktail//lib/mocktail/registers_matcher.rb#2
class Mocktail::RegistersMatcher
  # source://mocktail//lib/mocktail/registers_matcher.rb#3
  def register(matcher_type); end

  private

  # source://mocktail//lib/mocktail/registers_matcher.rb#46
  def invalid_flag?(matcher_type); end

  # source://mocktail//lib/mocktail/registers_matcher.rb#39
  def invalid_match?(matcher_type); end

  # source://mocktail//lib/mocktail/registers_matcher.rb#31
  def invalid_name?(matcher_type); end

  # source://mocktail//lib/mocktail/registers_matcher.rb#27
  def invalid_type?(matcher_type); end
end

# source://mocktail//lib/mocktail/registers_stubbing.rb#4
class Mocktail::RegistersStubbing
  # source://mocktail//lib/mocktail/registers_stubbing.rb#5
  def initialize; end

  # source://mocktail//lib/mocktail/registers_stubbing.rb#9
  def register(demonstration, demo_config); end
end

# source://mocktail//lib/mocktail/value/explanation.rb#24
class Mocktail::ReplacedTypeExplanation < ::Mocktail::Explanation; end

# source://mocktail//lib/mocktail/replaces_next.rb#2
class Mocktail::ReplacesNext
  # source://mocktail//lib/mocktail/replaces_next.rb#3
  def initialize; end

  # source://mocktail//lib/mocktail/replaces_next.rb#9
  def replace(type, count); end
end

# source://mocktail//lib/mocktail/replaces_type.rb#5
class Mocktail::ReplacesType
  # source://mocktail//lib/mocktail/replaces_type.rb#6
  def initialize; end

  # source://mocktail//lib/mocktail/replaces_type.rb#12
  def replace(type); end
end

# source://mocktail//lib/mocktail/resets_state.rb#2
class Mocktail::ResetsState
  # source://mocktail//lib/mocktail/resets_state.rb#3
  def reset; end
end

# source://mocktail//lib/mocktail/value/signature.rb#10
class Mocktail::Signature < ::Struct; end

# source://mocktail//lib/mocktail/value/signature.rb#13
Mocktail::Signature::DEFAULT_BLOCK_PARAM = T.let(T.unsafe(nil), String)

# source://mocktail//lib/mocktail/value/signature.rb#11
Mocktail::Signature::DEFAULT_REST_ARGS = T.let(T.unsafe(nil), String)

# source://mocktail//lib/mocktail/value/signature.rb#12
Mocktail::Signature::DEFAULT_REST_KWARGS = T.let(T.unsafe(nil), String)

# source://mocktail//lib/mocktail/simulates_argument_error.rb#8
class Mocktail::SimulatesArgumentError
  # source://mocktail//lib/mocktail/simulates_argument_error.rb#9
  def initialize; end

  # source://mocktail//lib/mocktail/simulates_argument_error.rb#17
  def simulate(dry_call); end
end

# source://mocktail//lib/mocktail/share/stringifies_call.rb#2
class Mocktail::StringifiesCall
  # source://mocktail//lib/mocktail/share/stringifies_call.rb#3
  def stringify(call, anonymous_blocks: T.unsafe(nil), always_parens: T.unsafe(nil)); end

  # source://mocktail//lib/mocktail/share/stringifies_call.rb#7
  def stringify_multiple(calls, nonzero_message:, zero_message:, anonymous_blocks: T.unsafe(nil), always_parens: T.unsafe(nil)); end

  private

  # source://mocktail//lib/mocktail/share/stringifies_call.rb#37
  def argify(args); end

  # source://mocktail//lib/mocktail/share/stringifies_call.rb#23
  def args_to_s(call, parens: T.unsafe(nil)); end

  # source://mocktail//lib/mocktail/share/stringifies_call.rb#52
  def blockify(block, anonymous:); end

  # source://mocktail//lib/mocktail/share/stringifies_call.rb#42
  def kwargify(kwargs); end

  # source://mocktail//lib/mocktail/share/stringifies_call.rb#47
  def lambdafy(block); end

  # source://mocktail//lib/mocktail/share/stringifies_call.rb#62
  def source_locationify(block); end

  # source://mocktail//lib/mocktail/share/stringifies_call.rb#66
  def strip_pwd(path); end
end

# source://mocktail//lib/mocktail/share/stringifies_method_name.rb#2
class Mocktail::StringifiesMethodName
  # source://mocktail//lib/mocktail/share/stringifies_method_name.rb#3
  def stringify(call); end
end

# source://mocktail//lib/mocktail/stringifies_method_signature.rb#2
class Mocktail::StringifiesMethodSignature
  # source://mocktail//lib/mocktail/stringifies_method_signature.rb#3
  def stringify(signature); end

  private

  # source://mocktail//lib/mocktail/stringifies_method_signature.rb#37
  def block(signature); end

  # source://mocktail//lib/mocktail/stringifies_method_signature.rb#25
  def keyword(signature); end

  # source://mocktail//lib/mocktail/stringifies_method_signature.rb#13
  def positional(signature); end
end

# source://mocktail//lib/mocktail/value/stubbing.rb#9
class Mocktail::Stubbing < ::Struct
  # source://mocktail//lib/mocktail/value/stubbing.rb#11
  def initialize(**kwargs); end

  # source://mocktail//lib/mocktail/value/stubbing.rb#16
  def satisfied!; end

  # source://mocktail//lib/mocktail/value/stubbing.rb#20
  def with(&block); end
end

# source://mocktail//lib/mocktail/value/top_shelf.rb#2
class Mocktail::TopShelf
  # source://mocktail//lib/mocktail/value/top_shelf.rb#10
  def initialize; end

  # source://mocktail//lib/mocktail/value/top_shelf.rb#36
  def new_replaced?(type); end

  # source://mocktail//lib/mocktail/value/top_shelf.rb#44
  def of_next_registered?(type); end

  # source://mocktail//lib/mocktail/value/top_shelf.rb#32
  def register_new_replacement!(type); end

  # source://mocktail//lib/mocktail/value/top_shelf.rb#40
  def register_of_next_replacement!(type); end

  # source://mocktail//lib/mocktail/value/top_shelf.rb#52
  def register_singleton_method_replacement!(type); end

  # source://mocktail//lib/mocktail/value/top_shelf.rb#28
  def reset_current_thread!; end

  # source://mocktail//lib/mocktail/value/top_shelf.rb#56
  def singleton_methods_replaced?(type); end

  # source://mocktail//lib/mocktail/value/top_shelf.rb#16
  def type_replacement_for(type); end

  # source://mocktail//lib/mocktail/value/top_shelf.rb#22
  def type_replacement_if_exists_for(type); end

  # source://mocktail//lib/mocktail/value/top_shelf.rb#48
  def unregister_of_next_replacement!(type); end

  class << self
    # source://mocktail//lib/mocktail/value/top_shelf.rb#3
    def instance; end
  end
end

# source://mocktail//lib/mocktail/simulates_argument_error/transforms_params.rb#4
class Mocktail::TransformsParams
  # source://mocktail//lib/mocktail/simulates_argument_error/transforms_params.rb#5
  def transform(dry_call, params: T.unsafe(nil)); end

  private

  # source://mocktail//lib/mocktail/simulates_argument_error/transforms_params.rb#36
  def name_unnamed_params(params); end
end

# source://mocktail//lib/mocktail/value/type_replacement.rb#9
class Mocktail::TypeReplacement < ::Struct; end

# source://mocktail//lib/mocktail/value/type_replacement_data.rb#8
class Mocktail::TypeReplacementData < ::Struct
  # source://mocktail//lib/mocktail/value/type_replacement_data.rb#9
  def double; end
end

# source://mocktail//lib/mocktail/errors.rb#4
class Mocktail::UnexpectedError < ::Mocktail::Error; end

# source://mocktail//lib/mocktail/value/unsatisfying_call.rb#7
class Mocktail::UnsatisfyingCall < ::Struct; end

# source://mocktail//lib/mocktail/value/explanation.rb#18
class Mocktail::UnsatisfyingCallExplanation < ::Mocktail::Explanation; end

# source://mocktail//lib/mocktail/errors.rb#6
class Mocktail::UnsupportedMocktail < ::Mocktail::Error; end

# source://mocktail//lib/mocktail/version.rb#2
Mocktail::VERSION = T.let(T.unsafe(nil), String)

# source://mocktail//lib/mocktail/handles_dry_call/validates_arguments.rb#2
class Mocktail::ValidatesArguments
  # source://mocktail//lib/mocktail/handles_dry_call/validates_arguments.rb#24
  def initialize; end

  # source://mocktail//lib/mocktail/handles_dry_call/validates_arguments.rb#28
  def validate(dry_call); end

  class << self
    # source://mocktail//lib/mocktail/handles_dry_call/validates_arguments.rb#3
    def disable!; end

    # source://mocktail//lib/mocktail/handles_dry_call/validates_arguments.rb#11
    def disabled?; end

    # source://mocktail//lib/mocktail/handles_dry_call/validates_arguments.rb#7
    def enable!; end

    # source://mocktail//lib/mocktail/handles_dry_call/validates_arguments.rb#15
    def optional(disable, &blk); end
  end
end

# source://mocktail//lib/mocktail/errors.rb#14
class Mocktail::VerificationError < ::Mocktail::Error; end

# source://mocktail//lib/mocktail/verifies_call.rb#6
class Mocktail::VerifiesCall
  # source://mocktail//lib/mocktail/verifies_call.rb#7
  def initialize; end

  # source://mocktail//lib/mocktail/verifies_call.rb#13
  def verify(demo, demo_config); end

  private

  # source://mocktail//lib/mocktail/verifies_call.rb#24
  def verification_satisfied?(verifiable_call_count, demo_config); end
end
