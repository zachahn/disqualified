# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sqlite3` gem.
# Please instead update this file by running `bin/tapioca gem sqlite3`.


# source://sqlite3//lib/sqlite3/constants.rb#1
module SQLite3
  class << self
    def libversion; end
    def sqlcipher?; end
    def status(*_arg0); end
    def threadsafe; end

    # source://sqlite3//lib/sqlite3.rb#14
    def threadsafe?; end
  end
end

# source://sqlite3//lib/sqlite3/errors.rb#15
class SQLite3::AbortException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#53
class SQLite3::AuthorizationException < ::SQLite3::Exception; end

class SQLite3::Backup
  def initialize(_arg0, _arg1, _arg2, _arg3); end

  def finish; end
  def pagecount; end
  def remaining; end
  def step(_arg0); end
end

class SQLite3::Blob < ::String; end

# source://sqlite3//lib/sqlite3/errors.rb#17
class SQLite3::BusyException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#35
class SQLite3::CantOpenException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/constants.rb#2
module SQLite3::Constants; end

# source://sqlite3//lib/sqlite3/constants.rb#39
module SQLite3::Constants::ColumnType; end

# source://sqlite3//lib/sqlite3/constants.rb#43
SQLite3::Constants::ColumnType::BLOB = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#41
SQLite3::Constants::ColumnType::FLOAT = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#40
SQLite3::Constants::ColumnType::INTEGER = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#44
SQLite3::Constants::ColumnType::NULL = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#42
SQLite3::Constants::ColumnType::TEXT = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#55
module SQLite3::Constants::ErrorCode; end

# source://sqlite3//lib/sqlite3/constants.rb#65
SQLite3::Constants::ErrorCode::ABORT = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#103
SQLite3::Constants::ErrorCode::AUTH = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#67
SQLite3::Constants::ErrorCode::BUSY = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#85
SQLite3::Constants::ErrorCode::CANTOPEN = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#95
SQLite3::Constants::ErrorCode::CONSTRAINT = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#79
SQLite3::Constants::ErrorCode::CORRUPT = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#117
SQLite3::Constants::ErrorCode::DONE = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#89
SQLite3::Constants::ErrorCode::EMPTY = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#59
SQLite3::Constants::ErrorCode::ERROR = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#105
SQLite3::Constants::ErrorCode::FORMAT = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#83
SQLite3::Constants::ErrorCode::FULL = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#61
SQLite3::Constants::ErrorCode::INTERNAL = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#75
SQLite3::Constants::ErrorCode::INTERRUPT = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#77
SQLite3::Constants::ErrorCode::IOERR = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#69
SQLite3::Constants::ErrorCode::LOCKED = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#97
SQLite3::Constants::ErrorCode::MISMATCH = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#99
SQLite3::Constants::ErrorCode::MISUSE = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#101
SQLite3::Constants::ErrorCode::NOLFS = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#71
SQLite3::Constants::ErrorCode::NOMEM = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#109
SQLite3::Constants::ErrorCode::NOTADB = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#81
SQLite3::Constants::ErrorCode::NOTFOUND = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#111
SQLite3::Constants::ErrorCode::NOTICE = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#57
SQLite3::Constants::ErrorCode::OK = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#63
SQLite3::Constants::ErrorCode::PERM = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#87
SQLite3::Constants::ErrorCode::PROTOCOL = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#107
SQLite3::Constants::ErrorCode::RANGE = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#73
SQLite3::Constants::ErrorCode::READONLY = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#115
SQLite3::Constants::ErrorCode::ROW = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#91
SQLite3::Constants::ErrorCode::SCHEMA = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#93
SQLite3::Constants::ErrorCode::TOOBIG = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#113
SQLite3::Constants::ErrorCode::WARNING = T.let(T.unsafe(nil), Integer)

module SQLite3::Constants::Open; end
SQLite3::Constants::Open::AUTOPROXY = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::CREATE = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::DELETEONCLOSE = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::EXCLUSIVE = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::FULLMUTEX = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::MAIN_DB = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::MAIN_JOURNAL = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::MASTER_JOURNAL = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::MEMORY = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::NOMUTEX = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::PRIVATECACHE = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::READONLY = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::READWRITE = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::SHAREDCACHE = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::SUBJOURNAL = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::SUPER_JOURNAL = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::TEMP_DB = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::TEMP_JOURNAL = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::TRANSIENT_DB = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::URI = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::WAL = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#126
module SQLite3::Constants::Status; end

# source://sqlite3//lib/sqlite3/constants.rb#171
SQLite3::Constants::Status::MALLOC_COUNT = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#155
SQLite3::Constants::Status::MALLOC_SIZE = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#132
SQLite3::Constants::Status::MEMORY_USED = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#143
SQLite3::Constants::Status::PAGECACHE_OVERFLOW = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#165
SQLite3::Constants::Status::PAGECACHE_SIZE = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#136
SQLite3::Constants::Status::PAGECACHE_USED = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#160
SQLite3::Constants::Status::PARSER_STACK = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#149
SQLite3::Constants::Status::SCRATCH_OVERFLOW = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#168
SQLite3::Constants::Status::SCRATCH_SIZE = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#146
SQLite3::Constants::Status::SCRATCH_USED = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#9
module SQLite3::Constants::TextRep; end

# source://sqlite3//lib/sqlite3/constants.rb#19
SQLite3::Constants::TextRep::ANY = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#21
SQLite3::Constants::TextRep::DETERMINISTIC = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#17
SQLite3::Constants::TextRep::UTF16 = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#15
SQLite3::Constants::TextRep::UTF16BE = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#13
SQLite3::Constants::TextRep::UTF16LE = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#11
SQLite3::Constants::TextRep::UTF8 = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/errors.rb#45
class SQLite3::ConstraintException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#29
class SQLite3::CorruptException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/database.rb#43
class SQLite3::Database
  include ::SQLite3::Pragmas

  # source://sqlite3//lib/sqlite3/database.rb#96
  def initialize(file, options = T.unsafe(nil), zvfs = T.unsafe(nil)); end

  # source://sqlite3//lib/sqlite3/database.rb#158
  def authorizer(&block); end

  def authorizer=(_arg0); end

  # source://sqlite3//lib/sqlite3/database.rb#695
  def build_result_set(stmt); end

  def busy_handler(*_arg0); end

  # source://sqlite3//lib/sqlite3/database.rb#644
  def busy_handler_timeout=(milliseconds); end

  def busy_timeout(_arg0); end
  def busy_timeout=(_arg0); end
  def changes; end
  def close; end
  def closed?; end
  def collation(_arg0, _arg1); end

  # source://sqlite3//lib/sqlite3/database.rb#44
  def collations; end

  # source://sqlite3//lib/sqlite3/database.rb#620
  def commit; end

  def complete?(_arg0); end

  # source://sqlite3//lib/sqlite3/database.rb#408
  def create_aggregate(name, arity, step = T.unsafe(nil), finalize = T.unsafe(nil), text_rep = T.unsafe(nil), &block); end

  # source://sqlite3//lib/sqlite3/database.rb#506
  def create_aggregate_handler(handler); end

  # source://sqlite3//lib/sqlite3/database.rb#363
  def create_function(name, arity, text_rep = T.unsafe(nil), &block); end

  # source://sqlite3//lib/sqlite3/database.rb#543
  def define_aggregator(name, aggregator); end

  def define_function(_arg0); end
  def define_function_with_flags(_arg0, _arg1); end
  def enable_load_extension(_arg0); end

  # source://sqlite3//lib/sqlite3/database.rb#150
  def encoding; end

  def errcode; end
  def errmsg; end

  # source://sqlite3//lib/sqlite3/database.rb#199
  def execute(sql, bind_vars = T.unsafe(nil), &block); end

  # source://sqlite3//lib/sqlite3/database.rb#224
  def execute2(sql, *bind_vars); end

  # source://sqlite3//lib/sqlite3/database.rb#248
  def execute_batch(sql, bind_vars = T.unsafe(nil)); end

  # source://sqlite3//lib/sqlite3/database.rb#281
  def execute_batch2(sql, &block); end

  def extended_result_codes=(_arg0); end

  # source://sqlite3//lib/sqlite3/database.rb#181
  def filename(db_name = T.unsafe(nil)); end

  # source://sqlite3//lib/sqlite3/database.rb#320
  def get_first_row(sql, *bind_vars); end

  # source://sqlite3//lib/sqlite3/database.rb#329
  def get_first_value(sql, *bind_vars); end

  def interrupt; end
  def last_insert_row_id; end
  def load_extension(_arg0); end

  # source://sqlite3//lib/sqlite3/database.rb#167
  def prepare(sql); end

  # source://sqlite3//lib/sqlite3/database.rb#303
  def query(sql, bind_vars = T.unsafe(nil)); end

  # source://sqlite3//lib/sqlite3/database.rb#636
  def readonly?; end

  # source://sqlite3//lib/sqlite3/database.rb#76
  def results_as_hash; end

  # source://sqlite3//lib/sqlite3/database.rb#76
  def results_as_hash=(_arg0); end

  # source://sqlite3//lib/sqlite3/database.rb#629
  def rollback; end

  def statement_timeout=(_arg0); end
  def total_changes; end
  def trace(*_arg0); end

  # source://sqlite3//lib/sqlite3/database.rb#597
  def transaction(mode = T.unsafe(nil)); end

  def transaction_active?; end

  private

  def db_filename(_arg0); end
  def define_aggregator2(_arg0, _arg1); end
  def disable_quirk_mode; end
  def exec_batch(_arg0, _arg1); end
  def open16(_arg0); end
  def open_v2(_arg0, _arg1, _arg2); end

  class << self
    # source://sqlite3//lib/sqlite3/database.rb#52
    def open(*args); end

    # source://sqlite3//lib/sqlite3/database.rb#69
    def quote(string); end
  end
end

# source://sqlite3//lib/sqlite3/database.rb#667
class SQLite3::Database::FunctionProxy
  # source://sqlite3//lib/sqlite3/database.rb#674
  def initialize; end

  # source://sqlite3//lib/sqlite3/database.rb#681
  def [](key); end

  # source://sqlite3//lib/sqlite3/database.rb#687
  def []=(key, value); end

  # source://sqlite3//lib/sqlite3/database.rb#668
  def result; end

  # source://sqlite3//lib/sqlite3/database.rb#668
  def result=(_arg0); end
end

# source://sqlite3//lib/sqlite3/errors.rb#39
class SQLite3::EmptyException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#4
class SQLite3::Exception < ::StandardError
  # source://sqlite3//lib/sqlite3/errors.rb#6
  def code; end
end

# source://sqlite3//lib/sqlite3/errors.rb#55
class SQLite3::FormatException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#33
class SQLite3::FullException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/resultset.rb#93
class SQLite3::HashResultSet < ::SQLite3::ResultSet
  # source://sqlite3//lib/sqlite3/resultset.rb#85
  def next; end
end

# source://sqlite3//lib/sqlite3/errors.rb#27
class SQLite3::IOException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#11
class SQLite3::InternalException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#25
class SQLite3::InterruptException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#19
class SQLite3::LockedException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#21
class SQLite3::MemoryException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#47
class SQLite3::MismatchException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#49
class SQLite3::MisuseException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#59
class SQLite3::NotADatabaseException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#31
class SQLite3::NotFoundException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#13
class SQLite3::PermissionException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/pragmas.rb#9
module SQLite3::Pragmas
  # source://sqlite3//lib/sqlite3/pragmas.rb#101
  def application_id; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#105
  def application_id=(integer); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#109
  def auto_vacuum; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#113
  def auto_vacuum=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#117
  def automatic_index; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#121
  def automatic_index=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#125
  def busy_timeout; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#129
  def busy_timeout=(milliseconds); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#133
  def cache_size; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#137
  def cache_size=(size); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#141
  def cache_spill; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#145
  def cache_spill=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#149
  def case_sensitive_like=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#153
  def cell_size_check; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#157
  def cell_size_check=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#161
  def checkpoint_fullfsync; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#165
  def checkpoint_fullfsync=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#169
  def collation_list(&block); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#173
  def compile_options(&block); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#177
  def count_changes; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#181
  def count_changes=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#185
  def data_version; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#189
  def database_list(&block); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#193
  def default_cache_size; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#197
  def default_cache_size=(size); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#201
  def default_synchronous; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#205
  def default_synchronous=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#209
  def default_temp_store; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#213
  def default_temp_store=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#217
  def defer_foreign_keys; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#221
  def defer_foreign_keys=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#225
  def encoding; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#229
  def encoding=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#233
  def foreign_key_check(*table, &block); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#237
  def foreign_key_list(table, &block); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#241
  def foreign_keys; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#245
  def foreign_keys=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#249
  def freelist_count; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#253
  def full_column_names; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#257
  def full_column_names=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#261
  def fullfsync; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#265
  def fullfsync=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#11
  def get_boolean_pragma(name); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#51
  def get_enum_pragma(name); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#69
  def get_int_pragma(name); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#41
  def get_query_pragma(name, *params, &block); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#269
  def ignore_check_constraints=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#273
  def incremental_vacuum(pages, &block); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#277
  def index_info(index, &block); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#281
  def index_list(table, &block); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#285
  def index_xinfo(index, &block); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#289
  def integrity_check(*num_errors, &block); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#293
  def journal_mode; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#297
  def journal_mode=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#301
  def journal_size_limit; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#305
  def journal_size_limit=(size); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#309
  def legacy_file_format; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#313
  def legacy_file_format=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#317
  def locking_mode; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#321
  def locking_mode=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#325
  def max_page_count; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#329
  def max_page_count=(size); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#333
  def mmap_size; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#337
  def mmap_size=(size); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#341
  def page_count; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#345
  def page_size; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#349
  def page_size=(size); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#353
  def parser_trace=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#357
  def query_only; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#361
  def query_only=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#365
  def quick_check(*num_errors, &block); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#369
  def read_uncommitted; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#373
  def read_uncommitted=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#377
  def recursive_triggers; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#381
  def recursive_triggers=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#385
  def reverse_unordered_selects; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#389
  def reverse_unordered_selects=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#393
  def schema_cookie; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#397
  def schema_cookie=(cookie); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#401
  def schema_version; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#405
  def schema_version=(version); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#409
  def secure_delete; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#413
  def secure_delete=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#18
  def set_boolean_pragma(name, mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#60
  def set_enum_pragma(name, mode, enums); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#75
  def set_int_pragma(name, value); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#417
  def short_column_names; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#421
  def short_column_names=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#425
  def shrink_memory; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#429
  def soft_heap_limit; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#433
  def soft_heap_limit=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#437
  def stats(&block); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#441
  def synchronous; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#445
  def synchronous=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#524
  def table_info(table); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#449
  def temp_store; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#453
  def temp_store=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#457
  def threads; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#461
  def threads=(count); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#465
  def user_cookie; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#469
  def user_cookie=(cookie); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#473
  def user_version; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#477
  def user_version=(version); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#481
  def vdbe_addoptrace=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#485
  def vdbe_debug=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#489
  def vdbe_listing=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#493
  def vdbe_trace; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#497
  def vdbe_trace=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#501
  def wal_autocheckpoint; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#505
  def wal_autocheckpoint=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#509
  def wal_checkpoint; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#513
  def wal_checkpoint=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#517
  def writable_schema=(mode); end

  private

  # source://sqlite3//lib/sqlite3/pragmas.rb#574
  def tweak_default(hash); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#558
  def version_compare(v1, v2); end
end

# source://sqlite3//lib/sqlite3/pragmas.rb#86
SQLite3::Pragmas::AUTO_VACUUM_MODES = T.let(T.unsafe(nil), Array)

# source://sqlite3//lib/sqlite3/pragmas.rb#96
SQLite3::Pragmas::ENCODINGS = T.let(T.unsafe(nil), Array)

# source://sqlite3//lib/sqlite3/pragmas.rb#89
SQLite3::Pragmas::JOURNAL_MODES = T.let(T.unsafe(nil), Array)

# source://sqlite3//lib/sqlite3/pragmas.rb#93
SQLite3::Pragmas::LOCKING_MODES = T.let(T.unsafe(nil), Array)

# source://sqlite3//lib/sqlite3/pragmas.rb#80
SQLite3::Pragmas::SYNCHRONOUS_MODES = T.let(T.unsafe(nil), Array)

# source://sqlite3//lib/sqlite3/pragmas.rb#83
SQLite3::Pragmas::TEMP_STORE_MODES = T.let(T.unsafe(nil), Array)

# source://sqlite3//lib/sqlite3/pragmas.rb#99
SQLite3::Pragmas::WAL_CHECKPOINTS = T.let(T.unsafe(nil), Array)

# source://sqlite3//lib/sqlite3/errors.rb#37
class SQLite3::ProtocolException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#57
class SQLite3::RangeException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#23
class SQLite3::ReadOnlyException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/resultset.rb#9
class SQLite3::ResultSet
  include ::Enumerable

  # source://sqlite3//lib/sqlite3/resultset.rb#14
  def initialize(db, stmt); end

  # source://sqlite3//lib/sqlite3/resultset.rb#65
  def close; end

  # source://sqlite3//lib/sqlite3/resultset.rb#70
  def closed?; end

  # source://sqlite3//lib/sqlite3/resultset.rb#80
  def columns; end

  # source://sqlite3//lib/sqlite3/resultset.rb#48
  def each; end

  # source://sqlite3//lib/sqlite3/resultset.rb#56
  def each_hash; end

  # source://sqlite3//lib/sqlite3/resultset.rb#27
  def eof?; end

  # source://sqlite3//lib/sqlite3/resultset.rb#42
  def next; end

  # source://sqlite3//lib/sqlite3/resultset.rb#85
  def next_hash; end

  # source://sqlite3//lib/sqlite3/resultset.rb#21
  def reset(*bind_params); end

  # source://sqlite3//lib/sqlite3/resultset.rb#75
  def types; end
end

# source://sqlite3//lib/sqlite3/errors.rb#9
class SQLite3::SQLException < ::SQLite3::Exception; end

SQLite3::SQLITE_LOADED_VERSION = T.let(T.unsafe(nil), String)
SQLite3::SQLITE_VERSION = T.let(T.unsafe(nil), String)
SQLite3::SQLITE_VERSION_NUMBER = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/errors.rb#41
class SQLite3::SchemaChangedException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/statement.rb#14
class SQLite3::Statement
  include ::Enumerable

  # source://sqlite3//lib/sqlite3/statement.rb#28
  def initialize(db, sql); end

  # source://sqlite3//lib/sqlite3/statement.rb#111
  def active?; end

  def bind_param(_arg0, _arg1); end
  def bind_parameter_count; end

  # source://sqlite3//lib/sqlite3/statement.rb#52
  def bind_params(*bind_vars); end

  def clear_bindings!; end
  def close; end
  def closed?; end
  def column_count; end
  def column_decltype(_arg0); end
  def column_name(_arg0); end

  # source://sqlite3//lib/sqlite3/statement.rb#118
  def columns; end

  def done?; end

  # source://sqlite3//lib/sqlite3/statement.rb#123
  def each; end

  # source://sqlite3//lib/sqlite3/statement.rb#78
  def execute(*bind_vars); end

  # source://sqlite3//lib/sqlite3/statement.rb#104
  def execute!(*bind_vars, &block); end

  def expanded_sql; end
  def memused; end

  # source://sqlite3//lib/sqlite3/statement.rb#142
  def must_be_open!; end

  # source://sqlite3//lib/sqlite3/statement.rb#20
  def remainder; end

  def reset!; end
  def sql; end

  # source://sqlite3//lib/sqlite3/statement.rb#167
  def stat(key = T.unsafe(nil)); end

  def step; end

  # source://sqlite3//lib/sqlite3/statement.rb#134
  def types; end

  private

  # source://sqlite3//lib/sqlite3/statement.rb#180
  def get_metadata; end

  def prepare(_arg0, _arg1); end
  def stat_for(_arg0); end
  def stats_as_hash; end
end

# source://sqlite3//lib/sqlite3/errors.rb#43
class SQLite3::TooBigException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#51
class SQLite3::UnsupportedException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/version.rb#2
SQLite3::VERSION = T.let(T.unsafe(nil), String)

# source://sqlite3//lib/sqlite3/value.rb#4
class SQLite3::Value
  # source://sqlite3//lib/sqlite3/value.rb#7
  def initialize(db, handle); end

  # source://sqlite3//lib/sqlite3/value.rb#5
  def handle; end

  # source://sqlite3//lib/sqlite3/value.rb#20
  def length(utf16 = T.unsafe(nil)); end

  # source://sqlite3//lib/sqlite3/value.rb#12
  def null?; end

  # source://sqlite3//lib/sqlite3/value.rb#16
  def to_blob; end

  # source://sqlite3//lib/sqlite3/value.rb#28
  def to_f; end

  # source://sqlite3//lib/sqlite3/value.rb#32
  def to_i; end

  # source://sqlite3//lib/sqlite3/value.rb#36
  def to_int64; end

  # source://sqlite3//lib/sqlite3/value.rb#40
  def to_s(utf16 = T.unsafe(nil)); end

  # source://sqlite3//lib/sqlite3/value.rb#44
  def type; end
end

# source://sqlite3//lib/sqlite3/statement.rb#4
class String
  include ::Comparable

  # source://sqlite3//lib/sqlite3/statement.rb#5
  def to_blob; end
end
