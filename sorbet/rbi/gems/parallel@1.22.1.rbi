# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `parallel` gem.
# Please instead update this file by running `bin/tapioca gem parallel`.

# source://parallel//lib/parallel/version.rb#2
module Parallel
  extend ::Parallel::ProcessorCount

  class << self
    # source://parallel//lib/parallel.rb#246
    def all?(*args, &block); end

    # source://parallel//lib/parallel.rb#241
    def any?(*args, &block); end

    # source://parallel//lib/parallel.rb#237
    def each(array, options = T.unsafe(nil), &block); end

    # source://parallel//lib/parallel.rb#251
    def each_with_index(array, options = T.unsafe(nil), &block); end

    # source://parallel//lib/parallel.rb#306
    def flat_map(*args, &block); end

    # source://parallel//lib/parallel.rb#231
    def in_processes(options = T.unsafe(nil), &block); end

    # source://parallel//lib/parallel.rb#215
    def in_threads(options = T.unsafe(nil)); end

    # source://parallel//lib/parallel.rb#255
    def map(source, options = T.unsafe(nil), &block); end

    # source://parallel//lib/parallel.rb#302
    def map_with_index(array, options = T.unsafe(nil), &block); end

    # source://parallel//lib/parallel.rb#310
    def worker_number; end

    # source://parallel//lib/parallel.rb#315
    def worker_number=(worker_num); end

    private

    # source://parallel//lib/parallel.rb#321
    def add_progress_bar!(job_factory, options); end

    # source://parallel//lib/parallel.rb#584
    def call_with_index(item, index, options, &block); end

    # source://parallel//lib/parallel.rb#516
    def create_workers(job_factory, options, &block); end

    # source://parallel//lib/parallel.rb#574
    def extract_count_from_options(options); end

    # source://parallel//lib/parallel.rb#602
    def instrument_finish(item, index, result, options); end

    # source://parallel//lib/parallel.rb#607
    def instrument_start(item, index, options); end

    # source://parallel//lib/parallel.rb#550
    def process_incoming_jobs(read, write, job_factory, options, &block); end

    # source://parallel//lib/parallel.rb#504
    def replace_worker(job_factory, workers, index, options, blk); end

    # source://parallel//lib/parallel.rb#595
    def with_instrumentation(item, index, options); end

    # source://parallel//lib/parallel.rb#346
    def work_direct(job_factory, options, &block); end

    # source://parallel//lib/parallel.rb#456
    def work_in_processes(job_factory, options, &blk); end

    # source://parallel//lib/parallel.rb#390
    def work_in_ractors(job_factory, options); end

    # source://parallel//lib/parallel.rb#365
    def work_in_threads(job_factory, options, &block); end

    # source://parallel//lib/parallel.rb#524
    def worker(job_factory, options, &block); end
  end
end

# source://parallel//lib/parallel.rb#14
class Parallel::Break < ::StandardError
  # source://parallel//lib/parallel.rb#17
  def initialize(value = T.unsafe(nil)); end

  # source://parallel//lib/parallel.rb#15
  def value; end
end

# source://parallel//lib/parallel.rb#11
class Parallel::DeadWorker < ::StandardError; end

# source://parallel//lib/parallel.rb#35
class Parallel::ExceptionWrapper
  # source://parallel//lib/parallel.rb#38
  def initialize(exception); end

  # source://parallel//lib/parallel.rb#36
  def exception; end
end

# source://parallel//lib/parallel.rb#101
class Parallel::JobFactory
  # source://parallel//lib/parallel.rb#102
  def initialize(source, mutex); end

  # source://parallel//lib/parallel.rb#110
  def next; end

  # source://parallel//lib/parallel.rb#139
  def pack(item, index); end

  # source://parallel//lib/parallel.rb#129
  def size; end

  # source://parallel//lib/parallel.rb#144
  def unpack(data); end

  private

  # source://parallel//lib/parallel.rb#150
  def producer?; end

  # source://parallel//lib/parallel.rb#154
  def queue_wrapper(array); end
end

# source://parallel//lib/parallel.rb#23
class Parallel::Kill < ::Parallel::Break; end

# source://parallel//lib/parallel/processor_count.rb#4
module Parallel::ProcessorCount
  # source://parallel//lib/parallel/processor_count.rb#12
  def physical_processor_count; end

  # source://parallel//lib/parallel/processor_count.rb#6
  def processor_count; end
end

# source://parallel//lib/parallel.rb#9
Parallel::Stop = T.let(T.unsafe(nil), Object)

# source://parallel//lib/parallel.rb#26
class Parallel::UndumpableException < ::StandardError
  # source://parallel//lib/parallel.rb#29
  def initialize(original); end

  # source://parallel//lib/parallel.rb#27
  def backtrace; end
end

# source://parallel//lib/parallel.rb#159
class Parallel::UserInterruptHandler
  class << self
    # source://parallel//lib/parallel.rb#184
    def kill(thing); end

    # source://parallel//lib/parallel.rb#164
    def kill_on_ctrl_c(pids, options); end

    private

    # source://parallel//lib/parallel.rb#208
    def restore_interrupt(old, signal); end

    # source://parallel//lib/parallel.rb#193
    def trap_interrupt(signal); end
  end
end

# source://parallel//lib/parallel.rb#160
Parallel::UserInterruptHandler::INTERRUPT_SIGNAL = T.let(T.unsafe(nil), Symbol)

# source://parallel//lib/parallel/version.rb#3
Parallel::VERSION = T.let(T.unsafe(nil), String)

# source://parallel//lib/parallel/version.rb#3
Parallel::Version = T.let(T.unsafe(nil), String)

# source://parallel//lib/parallel.rb#54
class Parallel::Worker
  # source://parallel//lib/parallel.rb#58
  def initialize(read, write, pid); end

  # source://parallel//lib/parallel.rb#71
  def close_pipes; end

  # source://parallel//lib/parallel.rb#55
  def pid; end

  # source://parallel//lib/parallel.rb#55
  def read; end

  # source://parallel//lib/parallel.rb#64
  def stop; end

  # source://parallel//lib/parallel.rb#56
  def thread; end

  # source://parallel//lib/parallel.rb#56
  def thread=(_arg0); end

  # source://parallel//lib/parallel.rb#76
  def work(data); end

  # source://parallel//lib/parallel.rb#55
  def write; end

  private

  # source://parallel//lib/parallel.rb#94
  def wait; end
end
