# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sprockets` gem.
# Please instead update this file by running `bin/tapioca gem sprockets`.


# source://sprockets//lib/sprockets/version.rb#2
module Sprockets
  extend ::Sprockets::Utils
  extend ::Sprockets::URIUtils
  extend ::Sprockets::PathUtils
  extend ::Sprockets::DigestUtils
  extend ::Sprockets::PathDigestUtils
  extend ::Sprockets::Dependencies
  extend ::Sprockets::Compressing
  extend ::Sprockets::Exporting
  extend ::Sprockets::ProcessorUtils
  extend ::Sprockets::Processing
  extend ::Sprockets::HTTPUtils
  extend ::Sprockets::Transformers
  extend ::Sprockets::Mime
  extend ::Sprockets::Paths
  extend ::Sprockets::Configuration
end

# source://sprockets//lib/sprockets/add_source_map_comment_to_asset_processor.rb#28
class Sprockets::AddSourceMapCommentToAssetProcessor
  class << self
    # source://sprockets//lib/sprockets/add_source_map_comment_to_asset_processor.rb#29
    def call(input); end
  end
end

# source://sprockets//lib/sprockets/errors.rb#5
class Sprockets::ArgumentError < ::Sprockets::Error; end

# source://sprockets//lib/sprockets/asset.rb#6
class Sprockets::Asset
  # source://sprockets//lib/sprockets/asset.rb#17
  def initialize(attributes = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/asset.rb#207
  def ==(other); end

  # source://sprockets//lib/sprockets/asset.rb#152
  def base64digest; end

  # source://sprockets//lib/sprockets/asset.rb#120
  def bytesize; end

  # source://sprockets//lib/sprockets/asset.rb#115
  def charset; end

  # source://sprockets//lib/sprockets/asset.rb#82
  def content_type; end

  # source://sprockets//lib/sprockets/asset.rb#126
  def digest; end

  # source://sprockets//lib/sprockets/asset.rb#66
  def digest_path; end

  # source://sprockets//lib/sprockets/asset.rb#168
  def each; end

  # source://sprockets//lib/sprockets/asset.rb#131
  def environment_version; end

  # source://sprockets//lib/sprockets/asset.rb#207
  def eql?(other); end

  # source://sprockets//lib/sprockets/asset.rb#141
  def etag; end

  # source://sprockets//lib/sprockets/asset.rb#47
  def filename; end

  # source://sprockets//lib/sprockets/asset.rb#77
  def full_digest_path; end

  # source://sprockets//lib/sprockets/asset.rb#198
  def hash; end

  # source://sprockets//lib/sprockets/asset.rb#136
  def hexdigest; end

  # source://sprockets//lib/sprockets/asset.rb#52
  def id; end

  # source://sprockets//lib/sprockets/asset.rb#190
  def inspect; end

  # source://sprockets//lib/sprockets/asset.rb#157
  def integrity; end

  # source://sprockets//lib/sprockets/asset.rb#120
  def length; end

  # source://sprockets//lib/sprockets/asset.rb#89
  def links; end

  # source://sprockets//lib/sprockets/asset.rb#7
  def logical_path; end

  # source://sprockets//lib/sprockets/asset.rb#44
  def metadata; end

  # source://sprockets//lib/sprockets/asset.rb#96
  def source; end

  # source://sprockets//lib/sprockets/asset.rb#33
  def to_hash; end

  # source://sprockets//lib/sprockets/asset.rb#108
  def to_s; end

  # source://sprockets//lib/sprockets/asset.rb#59
  def uri; end

  # source://sprockets//lib/sprockets/asset.rb#177
  def write_to(filename); end
end

# source://sprockets//lib/sprockets/autoload.rb#3
module Sprockets::Autoload; end

# source://sprockets//lib/sprockets/babel_processor.rb#8
class Sprockets::BabelProcessor
  # source://sprockets//lib/sprockets/babel_processor.rb#25
  def initialize(options = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/babel_processor.rb#23
  def cache_key; end

  # source://sprockets//lib/sprockets/babel_processor.rb#40
  def call(input); end

  class << self
    # source://sprockets//lib/sprockets/babel_processor.rb#19
    def cache_key; end

    # source://sprockets//lib/sprockets/babel_processor.rb#15
    def call(input); end

    # source://sprockets//lib/sprockets/babel_processor.rb#11
    def instance; end
  end
end

# source://sprockets//lib/sprockets/babel_processor.rb#9
Sprockets::BabelProcessor::VERSION = T.let(T.unsafe(nil), String)

# source://sprockets//lib/sprockets/base.rb#32
class Sprockets::Base
  include ::Sprockets::SourceMapUtils
  include ::Sprockets::Utils
  include ::Sprockets::PathUtils
  include ::Sprockets::DigestUtils
  include ::Sprockets::PathDigestUtils
  include ::Sprockets::URIUtils
  include ::Sprockets::PathDependencyUtils
  include ::Sprockets::Dependencies
  include ::Sprockets::Compressing
  include ::Sprockets::Exporting
  include ::Sprockets::ProcessorUtils
  include ::Sprockets::Resolve
  include ::Sprockets::Processing
  include ::Sprockets::HTTPUtils
  include ::Sprockets::Transformers
  include ::Sprockets::Mime
  include ::Sprockets::Paths
  include ::Sprockets::Configuration
  include ::Sprockets::Server
  include ::Sprockets::Loader
  include ::Sprockets::Bower
  include ::Sprockets::Npm

  # source://sprockets//lib/sprockets/base.rb#118
  def [](*args, **options); end

  # source://sprockets//lib/sprockets/base.rb#41
  def cache; end

  # source://sprockets//lib/sprockets/base.rb#48
  def cache=(cache); end

  # source://sprockets//lib/sprockets/base.rb#53
  def cached; end

  # source://sprockets//lib/sprockets/base.rb#139
  def compress_from_root(uri); end

  # source://sprockets//lib/sprockets/base.rb#143
  def expand_from_root(uri); end

  # source://sprockets//lib/sprockets/base.rb#63
  def file_digest(path); end

  # source://sprockets//lib/sprockets/base.rb#85
  def find_all_linked_assets(*args); end

  # source://sprockets//lib/sprockets/base.rb#78
  def find_asset(*args, **options); end

  # source://sprockets//lib/sprockets/base.rb#125
  def find_asset!(*args); end

  # source://sprockets//lib/sprockets/base.rb#53
  def index; end

  # source://sprockets//lib/sprockets/base.rb#133
  def inspect; end
end

# source://sprockets//lib/sprockets/bower.rb#5
module Sprockets::Bower
  # source://sprockets//lib/sprockets/bower.rb#48
  def read_bower_main(dirname, filename); end

  # source://sprockets//lib/sprockets/bower.rb#17
  def resolve_alternates(load_path, logical_path); end
end

# source://sprockets//lib/sprockets/bower.rb#9
Sprockets::Bower::POSSIBLE_BOWER_JSONS = T.let(T.unsafe(nil), Array)

# source://sprockets//lib/sprockets/bundle.rb#16
class Sprockets::Bundle
  class << self
    # source://sprockets//lib/sprockets/bundle.rb#17
    def call(input); end

    # source://sprockets//lib/sprockets/bundle.rb#61
    def dedup(required); end

    # source://sprockets//lib/sprockets/bundle.rb#80
    def process_bundle_reducers(input, assets, reducers); end
  end
end

# source://sprockets//lib/sprockets/cache.rb#45
class Sprockets::Cache
  # source://sprockets//lib/sprockets/cache.rb#68
  def initialize(cache = T.unsafe(nil), logger = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/cache.rb#156
  def clear(options = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/cache.rb#85
  def fetch(key); end

  # source://sprockets//lib/sprockets/cache.rb#115
  def get(key, local = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/cache.rb#149
  def inspect; end

  # source://sprockets//lib/sprockets/cache.rb#140
  def set(key, value, local = T.unsafe(nil)); end

  private

  # source://sprockets//lib/sprockets/cache.rb#170
  def expand_key(key); end

  # source://sprockets//lib/sprockets/cache.rb#196
  def get_cache_wrapper(cache); end

  # source://sprockets//lib/sprockets/cache.rb#181
  def peek_key(key); end

  class << self
    # source://sprockets//lib/sprockets/cache.rb#56
    def default_logger; end
  end
end

# source://sprockets//lib/sprockets/cache/file_store.rb#20
class Sprockets::Cache::FileStore
  # source://sprockets//lib/sprockets/cache/file_store.rb#42
  def initialize(root, max_size = T.unsafe(nil), logger = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/cache/file_store.rb#139
  def clear(options = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/cache/file_store.rb#56
  def get(key); end

  # source://sprockets//lib/sprockets/cache/file_store.rb#126
  def inspect; end

  # source://sprockets//lib/sprockets/cache/file_store.rb#85
  def set(key, value); end

  private

  # source://sprockets//lib/sprockets/cache/file_store.rb#166
  def compute_size(caches); end

  # source://sprockets//lib/sprockets/cache/file_store.rb#152
  def find_caches; end

  # source://sprockets//lib/sprockets/cache/file_store.rb#183
  def gc!; end

  # source://sprockets//lib/sprockets/cache/file_store.rb#176
  def safe_open(path, &block); end

  # source://sprockets//lib/sprockets/cache/file_store.rb#170
  def safe_stat(fn); end

  # source://sprockets//lib/sprockets/cache/file_store.rb#162
  def size; end

  class << self
    # source://sprockets//lib/sprockets/cache/file_store.rb#29
    def default_logger; end
  end
end

# source://sprockets//lib/sprockets/cache/file_store.rb#22
Sprockets::Cache::FileStore::DEFAULT_MAX_SIZE = T.let(T.unsafe(nil), Integer)

# source://sprockets//lib/sprockets/cache/file_store.rb#23
Sprockets::Cache::FileStore::EXCLUDED_DIRS = T.let(T.unsafe(nil), Array)

# source://sprockets//lib/sprockets/cache/file_store.rb#24
Sprockets::Cache::FileStore::GITKEEP_FILES = T.let(T.unsafe(nil), Array)

# source://sprockets//lib/sprockets/cache.rb#221
class Sprockets::Cache::GetWrapper < ::Sprockets::Cache::Wrapper
  # source://sprockets//lib/sprockets/cache.rb#230
  def clear(options = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/cache.rb#222
  def get(key); end

  # source://sprockets//lib/sprockets/cache.rb#226
  def set(key, value); end
end

# source://sprockets//lib/sprockets/cache.rb#241
class Sprockets::Cache::HashWrapper < ::Sprockets::Cache::Wrapper
  # source://sprockets//lib/sprockets/cache.rb#250
  def clear(options = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/cache.rb#242
  def get(key); end

  # source://sprockets//lib/sprockets/cache.rb#246
  def set(key, value); end
end

# source://sprockets//lib/sprockets/cache/memory_store.rb#14
class Sprockets::Cache::MemoryStore
  # source://sprockets//lib/sprockets/cache/memory_store.rb#22
  def initialize(max_size = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/cache/memory_store.rb#76
  def clear(options = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/cache/memory_store.rb#35
  def get(key); end

  # source://sprockets//lib/sprockets/cache/memory_store.rb#67
  def inspect; end

  # source://sprockets//lib/sprockets/cache/memory_store.rb#55
  def set(key, value); end
end

# source://sprockets//lib/sprockets/cache/memory_store.rb#16
Sprockets::Cache::MemoryStore::DEFAULT_MAX_SIZE = T.let(T.unsafe(nil), Integer)

# source://sprockets//lib/sprockets/cache/null_store.rb#15
class Sprockets::Cache::NullStore
  # source://sprockets//lib/sprockets/cache/null_store.rb#49
  def clear(options = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/cache/null_store.rb#23
  def get(key); end

  # source://sprockets//lib/sprockets/cache/null_store.rb#42
  def inspect; end

  # source://sprockets//lib/sprockets/cache/null_store.rb#35
  def set(key, value); end
end

# source://sprockets//lib/sprockets/cache.rb#176
Sprockets::Cache::PEEK_SIZE = T.let(T.unsafe(nil), Integer)

# source://sprockets//lib/sprockets/cache.rb#256
class Sprockets::Cache::ReadWriteWrapper < ::Sprockets::Cache::Wrapper
  # source://sprockets//lib/sprockets/cache.rb#265
  def clear(options = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/cache.rb#257
  def get(key); end

  # source://sprockets//lib/sprockets/cache.rb#261
  def set(key, value); end
end

# source://sprockets//lib/sprockets/cache.rb#54
Sprockets::Cache::VERSION = T.let(T.unsafe(nil), String)

# source://sprockets//lib/sprockets/cache.rb#218
class Sprockets::Cache::Wrapper < ::Struct; end

# source://sprockets//lib/sprockets/cached_environment.rb#14
class Sprockets::CachedEnvironment < ::Sprockets::Base
  # source://sprockets//lib/sprockets/cached_environment.rb#15
  def initialize(environment); end

  # source://sprockets//lib/sprockets/cached_environment.rb#27
  def cached; end

  # source://sprockets//lib/sprockets/cached_environment.rb#33
  def entries(path); end

  # source://sprockets//lib/sprockets/cached_environment.rb#27
  def index; end

  # source://sprockets//lib/sprockets/cached_environment.rb#43
  def load(uri); end

  # source://sprockets//lib/sprockets/cached_environment.rb#48
  def processor_cache_key(str); end

  # source://sprockets//lib/sprockets/cached_environment.rb#53
  def resolve_dependency(str); end

  # source://sprockets//lib/sprockets/cached_environment.rb#38
  def stat(path); end

  private

  # source://sprockets//lib/sprockets/cached_environment.rb#60
  def config=(config); end
end

# source://sprockets//lib/sprockets/closure_compressor.rb#18
class Sprockets::ClosureCompressor
  # source://sprockets//lib/sprockets/closure_compressor.rb#38
  def initialize(options = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/closure_compressor.rb#36
  def cache_key; end

  # source://sprockets//lib/sprockets/closure_compressor.rb#43
  def call(input); end

  class << self
    # source://sprockets//lib/sprockets/closure_compressor.rb#32
    def cache_key; end

    # source://sprockets//lib/sprockets/closure_compressor.rb#28
    def call(input); end

    # source://sprockets//lib/sprockets/closure_compressor.rb#24
    def instance; end
  end
end

# source://sprockets//lib/sprockets/closure_compressor.rb#19
Sprockets::ClosureCompressor::VERSION = T.let(T.unsafe(nil), String)

# source://sprockets//lib/sprockets/coffee_script_processor.rb#13
module Sprockets::CoffeeScriptProcessor
  class << self
    # source://sprockets//lib/sprockets/coffee_script_processor.rb#16
    def cache_key; end

    # source://sprockets//lib/sprockets/coffee_script_processor.rb#20
    def call(input); end
  end
end

# source://sprockets//lib/sprockets/coffee_script_processor.rb#14
Sprockets::CoffeeScriptProcessor::VERSION = T.let(T.unsafe(nil), String)

# source://sprockets//lib/sprockets/compressing.rb#7
module Sprockets::Compressing
  include ::Sprockets::Utils

  # source://sprockets//lib/sprockets/compressing.rb#10
  def compressors; end

  # source://sprockets//lib/sprockets/compressing.rb#40
  def css_compressor; end

  # source://sprockets//lib/sprockets/compressing.rb#49
  def css_compressor=(compressor); end

  # source://sprockets//lib/sprockets/compressing.rb#116
  def gzip=(gzip); end

  # source://sprockets//lib/sprockets/compressing.rb#94
  def gzip?; end

  # source://sprockets//lib/sprockets/compressing.rb#67
  def js_compressor; end

  # source://sprockets//lib/sprockets/compressing.rb#76
  def js_compressor=(compressor); end

  # source://sprockets//lib/sprockets/compressing.rb#32
  def register_compressor(mime_type, sym, klass); end

  # source://sprockets//lib/sprockets/compressing.rb#99
  def skip_gzip?; end
end

# source://sprockets//lib/sprockets/configuration.rb#12
module Sprockets::Configuration
  include ::Sprockets::Utils
  include ::Sprockets::URIUtils
  include ::Sprockets::PathUtils
  include ::Sprockets::DigestUtils
  include ::Sprockets::PathDigestUtils
  include ::Sprockets::Dependencies
  include ::Sprockets::Compressing
  include ::Sprockets::Exporting
  include ::Sprockets::ProcessorUtils
  include ::Sprockets::Processing
  include ::Sprockets::HTTPUtils
  include ::Sprockets::Transformers
  include ::Sprockets::Mime
  include ::Sprockets::Paths

  # source://sprockets//lib/sprockets/configuration.rb#21
  def config; end

  # source://sprockets//lib/sprockets/configuration.rb#23
  def config=(config); end

  # source://sprockets//lib/sprockets/configuration.rb#77
  def context_class; end

  # source://sprockets//lib/sprockets/configuration.rb#56
  def digest_class; end

  # source://sprockets//lib/sprockets/configuration.rb#66
  def digest_class=(klass); end

  # source://sprockets//lib/sprockets/configuration.rb#15
  def initialize_configuration(parent); end

  # source://sprockets//lib/sprockets/configuration.rb#29
  def logger; end

  # source://sprockets//lib/sprockets/configuration.rb#29
  def logger=(_arg0); end

  # source://sprockets//lib/sprockets/configuration.rb#41
  def version; end

  # source://sprockets//lib/sprockets/configuration.rb#49
  def version=(version); end
end

# source://sprockets//lib/sprockets/errors.rb#6
class Sprockets::ContentTypeMismatch < ::Sprockets::Error; end

# source://sprockets//lib/sprockets/context.rb#21
class Sprockets::Context
  # source://sprockets//lib/sprockets/context.rb#42
  def initialize(input); end

  # source://sprockets//lib/sprockets/context.rb#201
  def asset_data_uri(path); end

  # source://sprockets//lib/sprockets/context.rb#216
  def asset_path(path, options = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/context.rb#241
  def audio_path(path); end

  # source://sprockets//lib/sprockets/context.rb#88
  def content_type; end

  # source://sprockets//lib/sprockets/context.rb#128
  def depend_on(path); end

  # source://sprockets//lib/sprockets/context.rb#144
  def depend_on_asset(path); end

  # source://sprockets//lib/sprockets/context.rb#153
  def depend_on_env(key); end

  # source://sprockets//lib/sprockets/context.rb#64
  def env_proxy; end

  # source://sprockets//lib/sprockets/context.rb#40
  def environment; end

  # source://sprockets//lib/sprockets/context.rb#40
  def filename; end

  # source://sprockets//lib/sprockets/context.rb#246
  def font_path(path); end

  # source://sprockets//lib/sprockets/context.rb#231
  def image_path(path); end

  # source://sprockets//lib/sprockets/context.rb#251
  def javascript_path(path); end

  # source://sprockets//lib/sprockets/context.rb#184
  def link_asset(path); end

  # source://sprockets//lib/sprockets/context.rb#116
  def load(uri); end

  # source://sprockets//lib/sprockets/context.rb#73
  def load_path; end

  # source://sprockets//lib/sprockets/context.rb#81
  def logical_path; end

  # source://sprockets//lib/sprockets/context.rb#57
  def metadata; end

  # source://sprockets//lib/sprockets/context.rb#166
  def require_asset(path); end

  # source://sprockets//lib/sprockets/context.rb#104
  def resolve(path, **kargs); end

  # source://sprockets//lib/sprockets/context.rb#73
  def root_path; end

  # source://sprockets//lib/sprockets/context.rb#174
  def stub_asset(path); end

  # source://sprockets//lib/sprockets/context.rb#256
  def stylesheet_path(path); end

  # source://sprockets//lib/sprockets/context.rb#236
  def video_path(path); end

  protected

  # source://sprockets//lib/sprockets/context.rb#272
  def base64_asset_data_uri(asset); end

  # source://sprockets//lib/sprockets/context.rb#297
  def optimize_quoted_uri_escapes!(escaped); end

  # source://sprockets//lib/sprockets/context.rb#283
  def optimize_svg_for_uri_escaping!(svg); end

  # source://sprockets//lib/sprockets/context.rb#263
  def svg_asset_data_uri(asset); end
end

# source://sprockets//lib/sprockets/context.rb#23
class Sprockets::Context::ENVProxy < ::SimpleDelegator
  # source://sprockets//lib/sprockets/context.rb#24
  def initialize(context); end

  # source://sprockets//lib/sprockets/context.rb#29
  def [](key); end

  # source://sprockets//lib/sprockets/context.rb#34
  def fetch(key, *_arg1); end
end

# source://sprockets//lib/sprockets/errors.rb#9
class Sprockets::ConversionError < ::Sprockets::NotFound; end

# source://sprockets//lib/sprockets/dependencies.rb#9
module Sprockets::Dependencies
  include ::Sprockets::URIUtils
  include ::Sprockets::PathUtils
  include ::Sprockets::DigestUtils
  include ::Sprockets::PathDigestUtils

  # source://sprockets//lib/sprockets/dependencies.rb#48
  def add_dependency(uri); end

  # source://sprockets//lib/sprockets/dependencies.rb#48
  def depend_on(uri); end

  # source://sprockets//lib/sprockets/dependencies.rb#25
  def dependencies; end

  # source://sprockets//lib/sprockets/dependencies.rb#18
  def dependency_resolvers; end

  # source://sprockets//lib/sprockets/dependencies.rb#37
  def register_dependency_resolver(scheme, &block); end

  # source://sprockets//lib/sprockets/dependencies.rb#58
  def resolve_dependency(str); end
end

# source://sprockets//lib/sprockets/digest_utils.rb#9
module Sprockets::DigestUtils
  extend ::Sprockets::DigestUtils

  # source://sprockets//lib/sprockets/digest_utils.rb#185
  def already_digested?(name); end

  # source://sprockets//lib/sprockets/digest_utils.rb#32
  def detect_digest_class(bytes); end

  # source://sprockets//lib/sprockets/digest_utils.rb#87
  def digest(obj); end

  # source://sprockets//lib/sprockets/digest_utils.rb#15
  def digest_class; end

  # source://sprockets//lib/sprockets/digest_utils.rb#98
  def hexdigest(obj); end

  # source://sprockets//lib/sprockets/digest_utils.rb#176
  def hexdigest_integrity_uri(hexdigest); end

  # source://sprockets//lib/sprockets/digest_utils.rb#154
  def integrity_uri(digest); end

  # source://sprockets//lib/sprockets/digest_utils.rb#125
  def pack_base64digest(bin); end

  # source://sprockets//lib/sprockets/digest_utils.rb#107
  def pack_hexdigest(bin); end

  # source://sprockets//lib/sprockets/digest_utils.rb#134
  def pack_urlsafe_base64digest(bin); end

  # source://sprockets//lib/sprockets/digest_utils.rb#116
  def unpack_hexdigest(hex); end

  private

  # source://sprockets//lib/sprockets/digest_utils.rb#190
  def build_digest(obj); end
end

# source://sprockets//lib/sprockets/digest_utils.rb#36
Sprockets::DigestUtils::ADD_VALUE_TO_DIGEST = T.let(T.unsafe(nil), Hash)

# source://sprockets//lib/sprockets/digest_utils.rb#20
Sprockets::DigestUtils::DIGEST_SIZES = T.let(T.unsafe(nil), Hash)

# source://sprockets//lib/sprockets/digest_utils.rb#142
Sprockets::DigestUtils::HASH_ALGORITHMS = T.let(T.unsafe(nil), Hash)

# source://sprockets//lib/sprockets/directive_processor.rb#37
class Sprockets::DirectiveProcessor
  # source://sprockets//lib/sprockets/directive_processor.rb#60
  def initialize(comments: T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/directive_processor.rb#68
  def _call(input); end

  # source://sprockets//lib/sprockets/directive_processor.rb#64
  def call(input); end

  protected

  # source://sprockets//lib/sprockets/directive_processor.rb#104
  def compile_header_pattern(comments); end

  # source://sprockets//lib/sprockets/directive_processor.rb#141
  def extract_directives(header); end

  # source://sprockets//lib/sprockets/directive_processor.rb#284
  def process_depend_on_asset_directive(path); end

  # source://sprockets//lib/sprockets/directive_processor.rb#269
  def process_depend_on_directive(path); end

  # source://sprockets//lib/sprockets/directive_processor.rb#300
  def process_depend_on_directory_directive(path = T.unsafe(nil), accept = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/directive_processor.rb#186
  def process_directives(directives); end

  # source://sprockets//lib/sprockets/directive_processor.rb#326
  def process_link_directive(path); end

  # source://sprockets//lib/sprockets/directive_processor.rb#342
  def process_link_directory_directive(path = T.unsafe(nil), accept = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/directive_processor.rb#358
  def process_link_tree_directive(path = T.unsafe(nil), accept = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/directive_processor.rb#215
  def process_require_directive(path); end

  # source://sprockets//lib/sprockets/directive_processor.rb#242
  def process_require_directory_directive(path = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/directive_processor.rb#229
  def process_require_self_directive; end

  # source://sprockets//lib/sprockets/directive_processor.rb#252
  def process_require_tree_directive(path = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/directive_processor.rb#118
  def process_source(source); end

  # source://sprockets//lib/sprockets/directive_processor.rb#314
  def process_stub_directive(path); end

  private

  # source://sprockets//lib/sprockets/directive_processor.rb#365
  def expand_accept_shorthand(accept); end

  # source://sprockets//lib/sprockets/directive_processor.rb#399
  def expand_relative_dirname(directive, path); end

  # source://sprockets//lib/sprockets/directive_processor.rb#383
  def link_paths(paths, deps, accept); end

  # source://sprockets//lib/sprockets/directive_processor.rb#377
  def require_paths(paths, deps); end

  # source://sprockets//lib/sprockets/directive_processor.rb#420
  def resolve(path, **kargs); end

  # source://sprockets//lib/sprockets/directive_processor.rb#389
  def resolve_paths(paths, deps, **kargs); end

  # source://sprockets//lib/sprockets/directive_processor.rb#415
  def to_load(uri); end

  class << self
    # source://sprockets//lib/sprockets/directive_processor.rb#56
    def call(input); end

    # source://sprockets//lib/sprockets/directive_processor.rb#51
    def instance; end
  end
end

# source://sprockets//lib/sprockets/directive_processor.rb#47
Sprockets::DirectiveProcessor::DIRECTIVE_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://sprockets//lib/sprockets/base.rb#20
class Sprockets::DoubleLinkError < ::Sprockets::Error
  # source://sprockets//lib/sprockets/base.rb#21
  def initialize(parent_filename:, logical_path:, last_filename:, filename:); end
end

# source://sprockets//lib/sprockets/erb_processor.rb#4
class Sprockets::ERBProcessor
  # source://sprockets//lib/sprockets/erb_processor.rb#16
  def initialize(&block); end

  # source://sprockets//lib/sprockets/erb_processor.rb#20
  def call(input); end

  private

  # source://sprockets//lib/sprockets/erb_processor.rb#39
  def keyword_constructor?; end

  class << self
    # source://sprockets//lib/sprockets/erb_processor.rb#12
    def call(input); end

    # source://sprockets//lib/sprockets/erb_processor.rb#8
    def instance; end
  end
end

# source://sprockets//lib/sprockets/eco_processor.rb#12
module Sprockets::EcoProcessor
  class << self
    # source://sprockets//lib/sprockets/eco_processor.rb#15
    def cache_key; end

    # source://sprockets//lib/sprockets/eco_processor.rb#26
    def call(input); end
  end
end

# source://sprockets//lib/sprockets/eco_processor.rb#13
Sprockets::EcoProcessor::VERSION = T.let(T.unsafe(nil), String)

# source://sprockets//lib/sprockets/ejs_processor.rb#11
module Sprockets::EjsProcessor
  class << self
    # source://sprockets//lib/sprockets/ejs_processor.rb#14
    def cache_key; end

    # source://sprockets//lib/sprockets/ejs_processor.rb#25
    def call(input); end
  end
end

# source://sprockets//lib/sprockets/ejs_processor.rb#12
Sprockets::EjsProcessor::VERSION = T.let(T.unsafe(nil), String)

# source://sprockets//lib/sprockets/encoding_utils.rb#9
module Sprockets::EncodingUtils
  extend ::Sprockets::EncodingUtils

  # source://sprockets//lib/sprockets/encoding_utils.rb#73
  def base64(str); end

  # source://sprockets//lib/sprockets/encoding_utils.rb#122
  def charlock_detect(str); end

  # source://sprockets//lib/sprockets/encoding_utils.rb#19
  def deflate(str); end

  # source://sprockets//lib/sprockets/encoding_utils.rb#100
  def detect(str); end

  # source://sprockets//lib/sprockets/encoding_utils.rb#178
  def detect_css(str); end

  # source://sprockets//lib/sprockets/encoding_utils.rb#245
  def detect_html(str); end

  # source://sprockets//lib/sprockets/encoding_utils.rb#139
  def detect_unicode(str); end

  # source://sprockets//lib/sprockets/encoding_utils.rb#157
  def detect_unicode_bom(str); end

  # source://sprockets//lib/sprockets/encoding_utils.rb#59
  def gzip(str); end

  # source://sprockets//lib/sprockets/encoding_utils.rb#208
  def scan_css_charset(str); end

  # source://sprockets//lib/sprockets/encoding_utils.rb#39
  def unmarshaled_deflated(str, window_bits = T.unsafe(nil)); end
end

# source://sprockets//lib/sprockets/encoding_utils.rb#84
Sprockets::EncodingUtils::BOM = T.let(T.unsafe(nil), Hash)

# source://sprockets//lib/sprockets/encoding_utils.rb#81
Sprockets::EncodingUtils::CHARSET_DETECT = T.let(T.unsafe(nil), Hash)

# source://sprockets//lib/sprockets/encoding_utils.rb#201
Sprockets::EncodingUtils::CHARSET_SIZE = T.let(T.unsafe(nil), Integer)

# source://sprockets//lib/sprockets/encoding_utils.rb#200
Sprockets::EncodingUtils::CHARSET_START = T.let(T.unsafe(nil), Array)

# source://sprockets//lib/sprockets/environment.rb#7
class Sprockets::Environment < ::Sprockets::Base
  # source://sprockets//lib/sprockets/environment.rb#13
  def initialize(root = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/environment.rb#25
  def cached; end

  # source://sprockets//lib/sprockets/environment.rb#38
  def find_all_linked_assets(*args, &block); end

  # source://sprockets//lib/sprockets/environment.rb#30
  def find_asset(*args, **options); end

  # source://sprockets//lib/sprockets/environment.rb#34
  def find_asset!(*args); end

  # source://sprockets//lib/sprockets/environment.rb#25
  def index; end

  # source://sprockets//lib/sprockets/environment.rb#42
  def load(*args); end
end

# source://sprockets//lib/sprockets/errors.rb#4
class Sprockets::Error < ::StandardError; end

# source://sprockets//lib/sprockets/exporters/base.rb#2
module Sprockets::Exporters; end

# source://sprockets//lib/sprockets/exporters/base.rb#9
class Sprockets::Exporters::Base
  # source://sprockets//lib/sprockets/exporters/base.rb#24
  def initialize(asset: T.unsafe(nil), environment: T.unsafe(nil), directory: T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/exporters/base.rb#10
  def asset; end

  # source://sprockets//lib/sprockets/exporters/base.rb#55
  def call; end

  # source://sprockets//lib/sprockets/exporters/base.rb#10
  def directory; end

  # source://sprockets//lib/sprockets/exporters/base.rb#10
  def environment; end

  # source://sprockets//lib/sprockets/exporters/base.rb#36
  def setup; end

  # source://sprockets//lib/sprockets/exporters/base.rb#46
  def skip?(logger); end

  # source://sprockets//lib/sprockets/exporters/base.rb#10
  def target; end

  # source://sprockets//lib/sprockets/exporters/base.rb#63
  def write(filename = T.unsafe(nil)); end
end

# source://sprockets//lib/sprockets/exporters/file_exporter.rb#6
class Sprockets::Exporters::FileExporter < ::Sprockets::Exporters::Base
  # source://sprockets//lib/sprockets/exporters/file_exporter.rb#17
  def call; end

  # source://sprockets//lib/sprockets/exporters/file_exporter.rb#7
  def skip?(logger); end
end

# source://sprockets//lib/sprockets/exporters/zlib_exporter.rb#8
class Sprockets::Exporters::ZlibExporter < ::Sprockets::Exporters::Base
  # source://sprockets//lib/sprockets/exporters/zlib_exporter.rb#26
  def call; end

  # source://sprockets//lib/sprockets/exporters/zlib_exporter.rb#9
  def setup; end

  # source://sprockets//lib/sprockets/exporters/zlib_exporter.rb#14
  def skip?(logger); end
end

# source://sprockets//lib/sprockets/exporters/zopfli_exporter.rb#7
class Sprockets::Exporters::ZopfliExporter < ::Sprockets::Exporters::ZlibExporter
  # source://sprockets//lib/sprockets/exporters/zopfli_exporter.rb#8
  def setup; end
end

# source://sprockets//lib/sprockets/exporting.rb#4
module Sprockets::Exporting
  # source://sprockets//lib/sprockets/exporting.rb#59
  def export_concurrent; end

  # source://sprockets//lib/sprockets/exporting.rb#69
  def export_concurrent=(export_concurrent); end

  # source://sprockets//lib/sprockets/exporting.rb#6
  def exporters; end

  # source://sprockets//lib/sprockets/exporting.rb#19
  def register_exporter(mime_types, klass = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/exporting.rb#38
  def unregister_exporter(mime_types, exporter = T.unsafe(nil)); end
end

# source://sprockets//lib/sprockets/errors.rb#10
class Sprockets::FileNotFound < ::Sprockets::NotFound; end

# source://sprockets//lib/sprockets/errors.rb#11
class Sprockets::FileOutsidePaths < ::Sprockets::NotFound; end

# source://sprockets//lib/sprockets/file_reader.rb#7
class Sprockets::FileReader
  class << self
    # source://sprockets//lib/sprockets/file_reader.rb#8
    def call(input); end
  end
end

# source://sprockets//lib/sprockets/http_utils.rb#5
module Sprockets::HTTPUtils
  extend ::Sprockets::HTTPUtils

  # source://sprockets//lib/sprockets/http_utils.rb#129
  def find_best_mime_type_match(q_value_header, available); end

  # source://sprockets//lib/sprockets/http_utils.rb#107
  def find_best_q_match(q_values, available, &matcher); end

  # source://sprockets//lib/sprockets/http_utils.rb#117
  def find_mime_type_matches(q_value_header, available); end

  # source://sprockets//lib/sprockets/http_utils.rb#74
  def find_q_matches(q_values, available, &matcher); end

  # source://sprockets//lib/sprockets/http_utils.rb#16
  def match_mime_type?(value, matcher); end

  # source://sprockets//lib/sprockets/http_utils.rb#28
  def match_mime_type_keys(hash, mime_type); end

  # source://sprockets//lib/sprockets/http_utils.rb#58
  def parse_q_values(values); end
end

# source://sprockets//lib/sprockets/jsminc_compressor.rb#6
class Sprockets::JSMincCompressor
  # source://sprockets//lib/sprockets/jsminc_compressor.rb#23
  def initialize(options = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/jsminc_compressor.rb#21
  def cache_key; end

  # source://sprockets//lib/sprockets/jsminc_compressor.rb#28
  def call(input); end

  class << self
    # source://sprockets//lib/sprockets/jsminc_compressor.rb#17
    def cache_key; end

    # source://sprockets//lib/sprockets/jsminc_compressor.rb#13
    def call(input); end

    # source://sprockets//lib/sprockets/jsminc_compressor.rb#9
    def instance; end
  end
end

# source://sprockets//lib/sprockets/jsminc_compressor.rb#7
Sprockets::JSMincCompressor::VERSION = T.let(T.unsafe(nil), String)

# source://sprockets//lib/sprockets/jst_processor.rb#21
class Sprockets::JstProcessor
  # source://sprockets//lib/sprockets/jst_processor.rb#37
  def initialize(namespace: T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/jst_processor.rb#41
  def call(input); end

  class << self
    # source://sprockets//lib/sprockets/jst_processor.rb#33
    def call(input); end

    # source://sprockets//lib/sprockets/jst_processor.rb#22
    def default_namespace; end

    # source://sprockets//lib/sprockets/jst_processor.rb#29
    def instance; end
  end
end

# source://sprockets//lib/sprockets/loader.rb#19
module Sprockets::Loader
  include ::Sprockets::URIUtils
  include ::Sprockets::Utils
  include ::Sprockets::ProcessorUtils
  include ::Sprockets::PathUtils
  include ::Sprockets::DigestUtils
  include ::Sprockets::PathDependencyUtils
  include ::Sprockets::HTTPUtils
  include ::Sprockets::Transformers
  include ::Sprockets::Resolve
  include ::Sprockets::Processing
  include ::Sprockets::Mime

  # source://sprockets//lib/sprockets/loader.rb#31
  def load(uri); end

  private

  # source://sprockets//lib/sprockets/loader.rb#111
  def asset_from_cache(key); end

  # source://sprockets//lib/sprockets/loader.rb#67
  def compress_key_from_hash(hash, key); end

  # source://sprockets//lib/sprockets/loader.rb#87
  def expand_key_from_hash(hash, key); end

  # source://sprockets//lib/sprockets/loader.rb#325
  def fetch_asset_from_dependency_cache(unloaded, limit = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/loader.rb#139
  def load_from_unloaded(unloaded); end

  # source://sprockets//lib/sprockets/loader.rb#289
  def resolve_dependencies(uris); end

  # source://sprockets//lib/sprockets/loader.rb#239
  def store_asset(asset, unloaded); end
end

# source://sprockets//lib/sprockets/manifest.rb#19
class Sprockets::Manifest
  include ::Sprockets::ManifestUtils

  # source://sprockets//lib/sprockets/manifest.rb#32
  def initialize(*args); end

  # source://sprockets//lib/sprockets/manifest.rb#91
  def assets; end

  # source://sprockets//lib/sprockets/manifest.rb#246
  def clean(count = T.unsafe(nil), age = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/manifest.rb#269
  def clobber; end

  # source://sprockets//lib/sprockets/manifest.rb#161
  def compile(*args); end

  # source://sprockets//lib/sprockets/manifest.rb#80
  def dir; end

  # source://sprockets//lib/sprockets/manifest.rb#80
  def directory; end

  # source://sprockets//lib/sprockets/manifest.rb#22
  def environment; end

  # source://sprockets//lib/sprockets/manifest.rb#77
  def filename; end

  # source://sprockets//lib/sprockets/manifest.rb#108
  def files; end

  # source://sprockets//lib/sprockets/manifest.rb#115
  def find(*args, &block); end

  # source://sprockets//lib/sprockets/manifest.rb#139
  def find_sources(*args); end

  # source://sprockets//lib/sprockets/manifest.rb#77
  def path; end

  # source://sprockets//lib/sprockets/manifest.rb#216
  def remove(filename); end

  # source://sprockets//lib/sprockets/manifest.rb#278
  def save; end

  private

  # source://sprockets//lib/sprockets/manifest.rb#335
  def executor; end

  # source://sprockets//lib/sprockets/manifest.rb#299
  def exporters_for_asset(asset); end

  # source://sprockets//lib/sprockets/manifest.rb#317
  def json_decode(obj); end

  # source://sprockets//lib/sprockets/manifest.rb#321
  def json_encode(obj); end

  # source://sprockets//lib/sprockets/manifest.rb#325
  def logger; end
end

# source://sprockets//lib/sprockets/manifest_utils.rb#7
module Sprockets::ManifestUtils
  extend ::Sprockets::ManifestUtils

  # source://sprockets//lib/sprockets/manifest_utils.rb#37
  def find_directory_manifest(dirname, logger = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/manifest_utils.rb#23
  def generate_manifest_path; end
end

# source://sprockets//lib/sprockets/manifest_utils.rb#10
Sprockets::ManifestUtils::MANIFEST_RE = T.let(T.unsafe(nil), Regexp)

# source://sprockets//lib/sprockets/mime.rb#7
module Sprockets::Mime
  include ::Sprockets::Utils
  include ::Sprockets::HTTPUtils

  # source://sprockets//lib/sprockets/mime.rb#34
  def mime_exts; end

  # source://sprockets//lib/sprockets/mime.rb#71
  def mime_type_charset_detecter(mime_type); end

  # source://sprockets//lib/sprockets/mime.rb#18
  def mime_types; end

  # source://sprockets//lib/sprockets/mime.rb#86
  def read_file(filename, content_type = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/mime.rb#46
  def register_mime_type(mime_type, extensions: T.unsafe(nil), charset: T.unsafe(nil)); end
end

# source://sprockets//lib/sprockets/errors.rb#8
class Sprockets::NotFound < ::Sprockets::Error; end

# source://sprockets//lib/sprockets/errors.rb#7
class Sprockets::NotImplementedError < ::Sprockets::Error; end

# source://sprockets//lib/sprockets/npm.rb#5
module Sprockets::Npm
  # source://sprockets//lib/sprockets/npm.rb#39
  def read_package_directives(dirname, filename); end

  # source://sprockets//lib/sprockets/npm.rb#12
  def resolve_alternates(load_path, logical_path); end
end

# source://sprockets//lib/sprockets/path_dependency_utils.rb#32
module Sprockets::PathDependencyUtils
  include ::Sprockets::PathUtils
  include ::Sprockets::URIUtils

  # source://sprockets//lib/sprockets/path_dependency_utils.rb#44
  def entries_with_dependencies(path); end

  # source://sprockets//lib/sprockets/path_dependency_utils.rb#56
  def stat_directory_with_dependencies(dir); end

  # source://sprockets//lib/sprockets/path_dependency_utils.rb#68
  def stat_sorted_tree_with_dependencies(dir); end
end

# source://sprockets//lib/sprockets/path_digest_utils.rb#7
module Sprockets::PathDigestUtils
  include ::Sprockets::PathUtils
  include ::Sprockets::DigestUtils

  # source://sprockets//lib/sprockets/path_digest_utils.rb#33
  def file_digest(path); end

  # source://sprockets//lib/sprockets/path_digest_utils.rb#44
  def files_digest(paths); end

  # source://sprockets//lib/sprockets/path_digest_utils.rb#16
  def stat_digest(path, stat); end
end

# source://sprockets//lib/sprockets/path_utils.rb#7
module Sprockets::PathUtils
  extend ::Sprockets::PathUtils

  # source://sprockets//lib/sprockets/path_utils.rb#83
  def absolute_path?(path); end

  # source://sprockets//lib/sprockets/path_utils.rb#348
  def atomic_write(filename); end

  # source://sprockets//lib/sprockets/path_utils.rb#42
  def directory?(path); end

  # source://sprockets//lib/sprockets/path_utils.rb#56
  def entries(path); end

  # source://sprockets//lib/sprockets/path_utils.rb#29
  def file?(path); end

  # source://sprockets//lib/sprockets/path_utils.rb#231
  def find_matching_path_for_extensions(path, basename, extensions); end

  # source://sprockets//lib/sprockets/path_utils.rb#273
  def find_upwards(basename, path, root = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/path_utils.rb#127
  def join(base, path); end

  # source://sprockets//lib/sprockets/path_utils.rb#202
  def match_path_extname(path, extensions); end

  # source://sprockets//lib/sprockets/path_utils.rb#192
  def path_extnames(path); end

  # source://sprockets//lib/sprockets/path_utils.rb#252
  def path_parents(path, root = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/path_utils.rb#178
  def paths_split(paths, filename); end

  # source://sprockets//lib/sprockets/path_utils.rb#100
  def relative_path?(path); end

  # source://sprockets//lib/sprockets/path_utils.rb#110
  def relative_path_from(start, dest); end

  # source://sprockets//lib/sprockets/path_utils.rb#146
  def set_pipeline(path, mime_exts, pipeline_exts, pipeline); end

  # source://sprockets//lib/sprockets/path_utils.rb#162
  def split_subpath(path, subpath); end

  # source://sprockets//lib/sprockets/path_utils.rb#16
  def stat(path); end

  # source://sprockets//lib/sprockets/path_utils.rb#286
  def stat_directory(dir); end

  # source://sprockets//lib/sprockets/path_utils.rb#324
  def stat_sorted_tree(dir, &block); end

  # source://sprockets//lib/sprockets/path_utils.rb#304
  def stat_tree(dir, &block); end
end

# source://sprockets//lib/sprockets/path_utils.rb#91
Sprockets::PathUtils::SEPARATOR_PATTERN = T.let(T.unsafe(nil), String)

# source://sprockets//lib/sprockets/paths.rb#6
module Sprockets::Paths
  include ::Sprockets::Utils
  include ::Sprockets::PathUtils

  # source://sprockets//lib/sprockets/paths.rb#47
  def append_path(path); end

  # source://sprockets//lib/sprockets/paths.rb#59
  def clear_paths; end

  # source://sprockets//lib/sprockets/paths.rb#68
  def each_file; end

  # source://sprockets//lib/sprockets/paths.rb#30
  def paths; end

  # source://sprockets//lib/sprockets/paths.rb#37
  def prepend_path(path); end

  # source://sprockets//lib/sprockets/paths.rb#13
  def root; end

  private

  # source://sprockets//lib/sprockets/paths.rb#20
  def root=(path); end
end

# source://sprockets//lib/sprockets/preprocessors/default_source_map.rb#3
module Sprockets::Preprocessors; end

# source://sprockets//lib/sprockets/preprocessors/default_source_map.rb#10
class Sprockets::Preprocessors::DefaultSourceMap
  # source://sprockets//lib/sprockets/preprocessors/default_source_map.rb#11
  def call(input); end

  private

  # source://sprockets//lib/sprockets/preprocessors/default_source_map.rb#38
  def default_mappings(lines); end
end

# source://sprockets//lib/sprockets/processing.rb#11
module Sprockets::Processing
  include ::Sprockets::Utils
  include ::Sprockets::URIUtils
  include ::Sprockets::ProcessorUtils

  # source://sprockets//lib/sprockets/processing.rb#95
  def bundle_processors; end

  # source://sprockets//lib/sprockets/processing.rb#14
  def pipelines; end

  # source://sprockets//lib/sprockets/processing.rb#39
  def postprocessors; end

  # source://sprockets//lib/sprockets/processing.rb#33
  def preprocessors; end

  # source://sprockets//lib/sprockets/processing.rb#33
  def processors; end

  # source://sprockets//lib/sprockets/processing.rb#137
  def register_bundle_metadata_reducer(mime_type, key, *args, &block); end

  # source://sprockets//lib/sprockets/processing.rb#109
  def register_bundle_processor(*args, &block); end

  # source://sprockets//lib/sprockets/processing.rb#19
  def register_pipeline(name, proc = T.unsafe(nil), &block); end

  # source://sprockets//lib/sprockets/processing.rb#69
  def register_postprocessor(*args, &block); end

  # source://sprockets//lib/sprockets/processing.rb#53
  def register_preprocessor(*args, &block); end

  # source://sprockets//lib/sprockets/processing.rb#53
  def register_processor(*args, &block); end

  # source://sprockets//lib/sprockets/processing.rb#117
  def unregister_bundle_processor(*args); end

  # source://sprockets//lib/sprockets/processing.rb#88
  def unregister_postprocessor(*args); end

  # source://sprockets//lib/sprockets/processing.rb#78
  def unregister_preprocessor(*args); end

  # source://sprockets//lib/sprockets/processing.rb#78
  def unregister_processor(*args); end

  protected

  # source://sprockets//lib/sprockets/processing.rb#168
  def build_processors_uri(type, file_type, pipeline); end

  # source://sprockets//lib/sprockets/processing.rb#186
  def default_processors_for(type, file_type); end

  # source://sprockets//lib/sprockets/processing.rb#177
  def processors_for(type, file_type, pipeline); end

  # source://sprockets//lib/sprockets/processing.rb#162
  def resolve_processors_cache_key_uri(uri); end

  # source://sprockets//lib/sprockets/processing.rb#195
  def self_processors_for(type, file_type); end

  private

  # source://sprockets//lib/sprockets/processing.rb#212
  def register_config_processor(type, mime_type, processor = T.unsafe(nil), &block); end

  # source://sprockets//lib/sprockets/processing.rb#221
  def unregister_config_processor(type, mime_type, processor); end
end

# source://sprockets//lib/sprockets/processor_utils.rb#17
module Sprockets::ProcessorUtils
  extend ::Sprockets::ProcessorUtils

  # source://sprockets//lib/sprockets/processor_utils.rb#80
  def call_processor(processor, input); end

  # source://sprockets//lib/sprockets/processor_utils.rb#61
  def call_processors(processors, input); end

  # source://sprockets//lib/sprockets/processor_utils.rb#46
  def compose_processors(*processors); end

  # source://sprockets//lib/sprockets/processor_utils.rb#101
  def processor_cache_key(processor); end

  # source://sprockets//lib/sprockets/processor_utils.rb#110
  def processors_cache_keys(processors); end

  # source://sprockets//lib/sprockets/processor_utils.rb#152
  def validate_processor_result!(result); end
end

# source://sprockets//lib/sprockets/processor_utils.rb#20
class Sprockets::ProcessorUtils::CompositeProcessor < ::Struct
  # source://sprockets//lib/sprockets/processor_utils.rb#36
  def cache_key; end

  # source://sprockets//lib/sprockets/processor_utils.rb#32
  def call(input); end

  class << self
    # source://sprockets//lib/sprockets/processor_utils.rb#24
    def create(processors); end
  end
end

# source://sprockets//lib/sprockets/processor_utils.rb#22
Sprockets::ProcessorUtils::CompositeProcessor::PLURAL = T.let(T.unsafe(nil), Proc)

# source://sprockets//lib/sprockets/processor_utils.rb#21
Sprockets::ProcessorUtils::CompositeProcessor::SINGULAR = T.let(T.unsafe(nil), Proc)

# source://sprockets//lib/sprockets/processor_utils.rb#126
Sprockets::ProcessorUtils::VALID_METADATA_COMPOUND_TYPES = T.let(T.unsafe(nil), Set)

# source://sprockets//lib/sprockets/processor_utils.rb#139
Sprockets::ProcessorUtils::VALID_METADATA_COMPOUND_TYPES_HASH = T.let(T.unsafe(nil), Hash)

# source://sprockets//lib/sprockets/processor_utils.rb#144
Sprockets::ProcessorUtils::VALID_METADATA_TYPES = T.let(T.unsafe(nil), Set)

# source://sprockets//lib/sprockets/processor_utils.rb#116
Sprockets::ProcessorUtils::VALID_METADATA_VALUE_TYPES = T.let(T.unsafe(nil), Set)

# source://sprockets//lib/sprockets/processor_utils.rb#134
Sprockets::ProcessorUtils::VALID_METADATA_VALUE_TYPES_HASH = T.let(T.unsafe(nil), Hash)

# source://sprockets//lib/sprockets/resolve.rb#8
module Sprockets::Resolve
  include ::Sprockets::PathUtils
  include ::Sprockets::URIUtils
  include ::Sprockets::PathDependencyUtils
  include ::Sprockets::HTTPUtils

  # source://sprockets//lib/sprockets/resolve.rb#24
  def resolve(path, load_paths: T.unsafe(nil), accept: T.unsafe(nil), pipeline: T.unsafe(nil), base_path: T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/resolve.rb#46
  def resolve!(path, **kargs); end

  protected

  # source://sprockets//lib/sprockets/resolve.rb#279
  def parse_accept_options(mime_type, explicit_type); end

  # source://sprockets//lib/sprockets/resolve.rb#92
  def resolve_absolute_path(paths, filename, accept); end

  # source://sprockets//lib/sprockets/resolve.rb#291
  def resolve_alternates(load_path, logical_name); end

  # source://sprockets//lib/sprockets/resolve.rb#257
  def resolve_alts_under_path(load_path, logical_name, mime_exts); end

  # source://sprockets//lib/sprockets/resolve.rb#77
  def resolve_asset_uri(uri); end

  # source://sprockets//lib/sprockets/resolve.rb#239
  def resolve_index_under_path(load_path, logical_name, mime_exts); end

  # source://sprockets//lib/sprockets/resolve.rb#142
  def resolve_logical_path(paths, logical_path, accept); end

  # source://sprockets//lib/sprockets/resolve.rb#217
  def resolve_main_under_path(load_path, logical_name, mime_exts); end

  # source://sprockets//lib/sprockets/resolve.rb#120
  def resolve_relative_path(paths, path, dirname, accept); end

  # source://sprockets//lib/sprockets/resolve.rb#176
  def resolve_under_paths(paths, logical_name, accepts); end
end

# source://sprockets//lib/sprockets/sass_compressor.rb#19
class Sprockets::SassCompressor
  # source://sprockets//lib/sprockets/sass_compressor.rb#39
  def initialize(options = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/sass_compressor.rb#37
  def cache_key; end

  # source://sprockets//lib/sprockets/sass_compressor.rb#49
  def call(input); end

  class << self
    # source://sprockets//lib/sprockets/sass_compressor.rb#33
    def cache_key; end

    # source://sprockets//lib/sprockets/sass_compressor.rb#29
    def call(input); end

    # source://sprockets//lib/sprockets/sass_compressor.rb#25
    def instance; end
  end
end

# source://sprockets//lib/sprockets/sass_compressor.rb#20
Sprockets::SassCompressor::VERSION = T.let(T.unsafe(nil), String)

# source://sprockets//lib/sprockets/sassc_compressor.rb#18
class Sprockets::SasscCompressor
  # source://sprockets//lib/sprockets/sassc_compressor.rb#30
  def initialize(options = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/sassc_compressor.rb#39
  def call(input); end

  class << self
    # source://sprockets//lib/sprockets/sassc_compressor.rb#26
    def call(input); end

    # source://sprockets//lib/sprockets/sassc_compressor.rb#22
    def instance; end
  end
end

# source://sprockets//lib/sprockets/sassc_processor.rb#15
class Sprockets::SasscProcessor
  # source://sprockets//lib/sprockets/sassc_processor.rb#40
  def initialize(options = T.unsafe(nil), &block); end

  # source://sprockets//lib/sprockets/sassc_processor.rb#38
  def cache_key; end

  # source://sprockets//lib/sprockets/sassc_processor.rb#52
  def call(input); end

  private

  # source://sprockets//lib/sprockets/sassc_processor.rb#273
  def engine_options(input, context); end

  # source://sprockets//lib/sprockets/sassc_processor.rb#78
  def merge_options(options); end

  class << self
    # source://sprockets//lib/sprockets/sassc_processor.rb#34
    def cache_key; end

    # source://sprockets//lib/sprockets/sassc_processor.rb#30
    def call(input); end

    # source://sprockets//lib/sprockets/sassc_processor.rb#26
    def instance; end

    # source://sprockets//lib/sprockets/sassc_processor.rb#19
    def syntax; end
  end
end

# source://sprockets//lib/sprockets/sassc_processor.rb#100
module Sprockets::SasscProcessor::Functions
  # source://sprockets//lib/sprockets/sassc_processor.rb#243
  def asset_data_url(path); end

  # source://sprockets//lib/sprockets/sassc_processor.rb#110
  def asset_path(path, options = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/sassc_processor.rb#126
  def asset_url(path, options = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/sassc_processor.rb#171
  def audio_path(path); end

  # source://sprockets//lib/sprockets/sassc_processor.rb#180
  def audio_url(path); end

  # source://sprockets//lib/sprockets/sassc_processor.rb#189
  def font_path(path); end

  # source://sprockets//lib/sprockets/sassc_processor.rb#198
  def font_url(path); end

  # source://sprockets//lib/sprockets/sassc_processor.rb#135
  def image_path(path); end

  # source://sprockets//lib/sprockets/sassc_processor.rb#144
  def image_url(path); end

  # source://sprockets//lib/sprockets/sassc_processor.rb#207
  def javascript_path(path); end

  # source://sprockets//lib/sprockets/sassc_processor.rb#216
  def javascript_url(path); end

  # source://sprockets//lib/sprockets/sassc_processor.rb#225
  def stylesheet_path(path); end

  # source://sprockets//lib/sprockets/sassc_processor.rb#234
  def stylesheet_url(path); end

  # source://sprockets//lib/sprockets/sassc_processor.rb#153
  def video_path(path); end

  # source://sprockets//lib/sprockets/sassc_processor.rb#162
  def video_url(path); end

  protected

  # source://sprockets//lib/sprockets/sassc_processor.rb#267
  def sprockets_context; end

  # source://sprockets//lib/sprockets/sassc_processor.rb#259
  def sprockets_dependencies; end

  # source://sprockets//lib/sprockets/sassc_processor.rb#252
  def sprockets_environment; end
end

# source://sprockets//lib/sprockets/sassc_processor.rb#292
class Sprockets::ScsscProcessor < ::Sprockets::SasscProcessor
  class << self
    # source://sprockets//lib/sprockets/sassc_processor.rb#293
    def syntax; end
  end
end

# source://sprockets//lib/sprockets/server.rb#10
module Sprockets::Server
  # source://sprockets//lib/sprockets/server.rb#37
  def call(env); end

  private

  # source://sprockets//lib/sprockets/server.rb#159
  def bad_request_response(env); end

  # source://sprockets//lib/sprockets/server.rb#267
  def cache_headers(env, etag); end

  # source://sprockets//lib/sprockets/server.rb#207
  def css_exception_response(exception); end

  # source://sprockets//lib/sprockets/server.rb#259
  def escape_css_content(content); end

  # source://sprockets//lib/sprockets/server.rb#132
  def forbidden_request?(path); end

  # source://sprockets//lib/sprockets/server.rb#168
  def forbidden_response(env); end

  # source://sprockets//lib/sprockets/server.rb#140
  def head_request?(env); end

  # source://sprockets//lib/sprockets/server.rb#288
  def headers(env, asset, length); end

  # source://sprockets//lib/sprockets/server.rb#199
  def javascript_exception_response(exception); end

  # source://sprockets//lib/sprockets/server.rb#185
  def method_not_allowed_response; end

  # source://sprockets//lib/sprockets/server.rb#177
  def not_found_response(env); end

  # source://sprockets//lib/sprockets/server.rb#154
  def not_modified_response(env, etag); end

  # source://sprockets//lib/sprockets/server.rb#145
  def ok_response(asset, env); end

  # source://sprockets//lib/sprockets/server.rb#311
  def path_fingerprint(path); end

  # source://sprockets//lib/sprockets/server.rb#189
  def precondition_failed_response(env); end
end

# source://sprockets//lib/sprockets/server.rb#12
Sprockets::Server::ALLOWED_REQUEST_METHODS = T.let(T.unsafe(nil), Set)

# source://sprockets//lib/sprockets/server.rb#20
Sprockets::Server::VARY = T.let(T.unsafe(nil), String)

# source://sprockets//lib/sprockets/server.rb#19
Sprockets::Server::X_CASCADE = T.let(T.unsafe(nil), String)

# source://sprockets//lib/sprockets/source_map_processor.rb#25
class Sprockets::SourceMapProcessor
  class << self
    # source://sprockets//lib/sprockets/source_map_processor.rb#26
    def call(input); end

    # source://sprockets//lib/sprockets/source_map_processor.rb#54
    def original_content_type(source_map_content_type, error_when_not_found: T.unsafe(nil)); end
  end
end

# source://sprockets//lib/sprockets/source_map_utils.rb#6
module Sprockets::SourceMapUtils
  extend ::Sprockets::SourceMapUtils

  # source://sprockets//lib/sprockets/source_map_utils.rb#273
  def bsearch_mappings(mappings, offset, from = T.unsafe(nil), to = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/source_map_utils.rb#156
  def combine_source_maps(first, second); end

  # source://sprockets//lib/sprockets/source_map_utils.rb#254
  def compare_source_offsets(a, b); end

  # source://sprockets//lib/sprockets/source_map_utils.rb#73
  def concat_source_maps(a, b); end

  # source://sprockets//lib/sprockets/source_map_utils.rb#192
  def decode_source_map(map); end

  # source://sprockets//lib/sprockets/source_map_utils.rb#297
  def decode_vlq_mappings(str, sources: T.unsafe(nil), names: T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/source_map_utils.rb#235
  def encode_source_map(map); end

  # source://sprockets//lib/sprockets/source_map_utils.rb#346
  def encode_vlq_mappings(mappings, sources: T.unsafe(nil), names: T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/source_map_utils.rb#37
  def format_source_map(map, input); end

  # source://sprockets//lib/sprockets/source_map_utils.rb#129
  def make_index_map(map); end

  # source://sprockets//lib/sprockets/source_map_utils.rb#429
  def vlq_decode(str); end

  # source://sprockets//lib/sprockets/source_map_utils.rb#470
  def vlq_decode_mappings(str); end

  # source://sprockets//lib/sprockets/source_map_utils.rb#408
  def vlq_encode(ary); end

  # source://sprockets//lib/sprockets/source_map_utils.rb#457
  def vlq_encode_mappings(ary); end
end

# source://sprockets//lib/sprockets/source_map_utils.rb#400
Sprockets::SourceMapUtils::BASE64_DIGITS = T.let(T.unsafe(nil), Array)

# source://sprockets//lib/sprockets/source_map_utils.rb#401
Sprockets::SourceMapUtils::BASE64_VALUES = T.let(T.unsafe(nil), Hash)

# source://sprockets//lib/sprockets/source_map_utils.rb#396
Sprockets::SourceMapUtils::VLQ_BASE = T.let(T.unsafe(nil), Integer)

# source://sprockets//lib/sprockets/source_map_utils.rb#397
Sprockets::SourceMapUtils::VLQ_BASE_MASK = T.let(T.unsafe(nil), Integer)

# source://sprockets//lib/sprockets/source_map_utils.rb#395
Sprockets::SourceMapUtils::VLQ_BASE_SHIFT = T.let(T.unsafe(nil), Integer)

# source://sprockets//lib/sprockets/source_map_utils.rb#398
Sprockets::SourceMapUtils::VLQ_CONTINUATION_BIT = T.let(T.unsafe(nil), Integer)

# source://sprockets//lib/sprockets/transformers.rb#7
module Sprockets::Transformers
  include ::Sprockets::Utils
  include ::Sprockets::ProcessorUtils
  include ::Sprockets::HTTPUtils

  # source://sprockets//lib/sprockets/transformers.rb#115
  def compose_transformers(transformers, types, preprocessors, postprocessors); end

  # source://sprockets//lib/sprockets/transformers.rb#97
  def expand_transform_accepts(parsed_accepts); end

  # source://sprockets//lib/sprockets/transformers.rb#38
  def register_transformer(from, to, proc); end

  # source://sprockets//lib/sprockets/transformers.rb#53
  def register_transformer_suffix(types, type_format, extname, processor); end

  # source://sprockets//lib/sprockets/transformers.rb#83
  def resolve_transform_type(type, accept); end

  # source://sprockets//lib/sprockets/transformers.rb#18
  def transformers; end

  private

  # source://sprockets//lib/sprockets/transformers.rb#131
  def compose_transformer_list(transformers, preprocessors, postprocessors); end

  # source://sprockets//lib/sprockets/transformers.rb#147
  def compute_transformers!(registered_transformers); end
end

# source://sprockets//lib/sprockets/transformers.rb#22
class Sprockets::Transformers::Transformer < ::Struct
  def from; end
  def from=(_); end
  def proc; end
  def proc=(_); end
  def to; end
  def to=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://sprockets//lib/sprockets/uri_tar.rb#6
class Sprockets::URITar
  # source://sprockets//lib/sprockets/uri_tar.rb#13
  def initialize(uri, env); end

  # source://sprockets//lib/sprockets/uri_tar.rb#44
  def absolute_path?; end

  # source://sprockets//lib/sprockets/uri_tar.rb#35
  def compress; end

  # source://sprockets//lib/sprockets/uri_tar.rb#84
  def compressed_path; end

  # source://sprockets//lib/sprockets/uri_tar.rb#60
  def expand; end

  # source://sprockets//lib/sprockets/uri_tar.rb#7
  def path; end

  # source://sprockets//lib/sprockets/uri_tar.rb#7
  def root; end

  # source://sprockets//lib/sprockets/uri_tar.rb#7
  def scheme; end
end

# source://sprockets//lib/sprockets/uri_utils.rb#21
module Sprockets::URIUtils
  extend ::Sprockets::URIUtils

  # source://sprockets//lib/sprockets/uri_utils.rb#114
  def build_asset_uri(path, params = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/uri_utils.rb#148
  def build_file_digest_uri(path); end

  # source://sprockets//lib/sprockets/uri_utils.rb#157
  def encode_uri_query_params(params); end

  # source://sprockets//lib/sprockets/uri_utils.rb#62
  def join_file_uri(scheme, host, path, query); end

  # source://sprockets//lib/sprockets/uri_utils.rb#36
  def join_uri(scheme, userinfo, host, port, registry, path, opaque, query, fragment); end

  # source://sprockets//lib/sprockets/uri_utils.rb#93
  def parse_asset_uri(uri); end

  # source://sprockets//lib/sprockets/uri_utils.rb#128
  def parse_file_digest_uri(uri); end

  # source://sprockets//lib/sprockets/uri_utils.rb#182
  def parse_uri_query_params(query); end

  # source://sprockets//lib/sprockets/uri_utils.rb#45
  def split_file_uri(uri); end

  # source://sprockets//lib/sprockets/uri_utils.rb#29
  def split_uri(uri); end

  # source://sprockets//lib/sprockets/uri_utils.rb#76
  def valid_asset_uri?(str); end
end

# source://sprockets//lib/sprockets/uglifier_compressor.rb#19
class Sprockets::UglifierCompressor
  # source://sprockets//lib/sprockets/uglifier_compressor.rb#39
  def initialize(options = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/uglifier_compressor.rb#37
  def cache_key; end

  # source://sprockets//lib/sprockets/uglifier_compressor.rb#46
  def call(input); end

  class << self
    # source://sprockets//lib/sprockets/uglifier_compressor.rb#33
    def cache_key; end

    # source://sprockets//lib/sprockets/uglifier_compressor.rb#29
    def call(input); end

    # source://sprockets//lib/sprockets/uglifier_compressor.rb#25
    def instance; end
  end
end

# source://sprockets//lib/sprockets/uglifier_compressor.rb#20
Sprockets::UglifierCompressor::VERSION = T.let(T.unsafe(nil), String)

# source://sprockets//lib/sprockets/unloaded_asset.rb#8
class Sprockets::UnloadedAsset
  # source://sprockets//lib/sprockets/unloaded_asset.rb#22
  def initialize(uri, env); end

  # source://sprockets//lib/sprockets/unloaded_asset.rb#77
  def asset_key; end

  # source://sprockets//lib/sprockets/unloaded_asset.rb#29
  def compressed_path; end

  # source://sprockets//lib/sprockets/unloaded_asset.rb#104
  def dependency_history_key; end

  # source://sprockets//lib/sprockets/unloaded_asset.rb#117
  def digest_key(digest); end

  # source://sprockets//lib/sprockets/unloaded_asset.rb#127
  def file_digest_key(stat); end

  # source://sprockets//lib/sprockets/unloaded_asset.rb#43
  def filename; end

  # source://sprockets//lib/sprockets/unloaded_asset.rb#63
  def params; end

  # source://sprockets//lib/sprockets/unloaded_asset.rb#29
  def uri; end

  private

  # source://sprockets//lib/sprockets/unloaded_asset.rb#135
  def load_file_params; end
end

# source://sprockets//lib/sprockets/utils.rb#7
module Sprockets::Utils
  extend ::Sprockets::Utils

  # source://sprockets//lib/sprockets/utils.rb#100
  def concat_javascript_sources(buf, source); end

  # source://sprockets//lib/sprockets/utils.rb#165
  def dfs(initial); end

  # source://sprockets//lib/sprockets/utils.rb#192
  def dfs_paths(path); end

  # source://sprockets//lib/sprockets/utils.rb#17
  def duplicable?(obj); end

  # source://sprockets//lib/sprockets/utils.rb#61
  def hash_reassoc(hash, key_a, key_b = T.unsafe(nil), &block); end

  # source://sprockets//lib/sprockets/utils.rb#34
  def hash_reassoc1(hash, key); end

  # source://sprockets//lib/sprockets/utils.rb#129
  def module_include(base, mod); end

  # source://sprockets//lib/sprockets/utils.rb#79
  def string_end_with_semicolon?(str); end
end

# source://sprockets//lib/sprockets/utils/gzip.rb#4
class Sprockets::Utils::Gzip
  # source://sprockets//lib/sprockets/utils/gzip.rb#43
  def initialize(asset, archiver: T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/utils/gzip.rb#40
  def archiver; end

  # source://sprockets//lib/sprockets/utils/gzip.rb#68
  def can_compress?; end

  # source://sprockets//lib/sprockets/utils/gzip.rb#80
  def cannot_compress?; end

  # source://sprockets//lib/sprockets/utils/gzip.rb#40
  def charset; end

  # source://sprockets//lib/sprockets/utils/gzip.rb#91
  def compress(file, target); end

  # source://sprockets//lib/sprockets/utils/gzip.rb#40
  def content_type; end

  # source://sprockets//lib/sprockets/utils/gzip.rb#40
  def source; end
end

# source://sprockets//lib/sprockets/utils/gzip.rb#52
Sprockets::Utils::Gzip::COMPRESSABLE_MIME_TYPES = T.let(T.unsafe(nil), Hash)

# source://sprockets//lib/sprockets/utils/gzip.rb#12
module Sprockets::Utils::Gzip::ZlibArchiver
  class << self
    # source://sprockets//lib/sprockets/utils/gzip.rb#13
    def call(file, source, mtime); end
  end
end

# source://sprockets//lib/sprockets/utils/gzip.rb#30
module Sprockets::Utils::Gzip::ZopfliArchiver
  class << self
    # source://sprockets//lib/sprockets/utils/gzip.rb#31
    def call(file, source, mtime); end
  end
end

# source://sprockets//lib/sprockets/utils.rb#121
Sprockets::Utils::MODULE_INCLUDE_MUTEX = T.let(T.unsafe(nil), Thread::Mutex)

# source://sprockets//lib/sprockets/utils.rb#71
Sprockets::Utils::WHITESPACE_ORDINALS = T.let(T.unsafe(nil), Hash)

# source://sprockets//lib/sprockets/version.rb#3
Sprockets::VERSION = T.let(T.unsafe(nil), String)

# source://sprockets//lib/sprockets/yui_compressor.rb#18
class Sprockets::YUICompressor
  # source://sprockets//lib/sprockets/yui_compressor.rb#38
  def initialize(options = T.unsafe(nil)); end

  # source://sprockets//lib/sprockets/yui_compressor.rb#36
  def cache_key; end

  # source://sprockets//lib/sprockets/yui_compressor.rb#43
  def call(input); end

  class << self
    # source://sprockets//lib/sprockets/yui_compressor.rb#32
    def cache_key; end

    # source://sprockets//lib/sprockets/yui_compressor.rb#28
    def call(input); end

    # source://sprockets//lib/sprockets/yui_compressor.rb#24
    def instance; end
  end
end

# source://sprockets//lib/sprockets/yui_compressor.rb#19
Sprockets::YUICompressor::VERSION = T.let(T.unsafe(nil), String)
