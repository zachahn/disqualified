# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activerecord` gem.
# Please instead update this file by running `bin/tapioca gem activerecord`.


# source://activerecord//lib/active_record/gem_version.rb#3
module ActiveRecord
  include ::ActiveSupport::Deprecation::DeprecatedConstantAccessor
  extend ::ActiveSupport::Autoload

  class << self
    # source://activerecord//lib/active_record.rb#377
    def action_on_strict_loading_violation; end

    # source://activerecord//lib/active_record.rb#377
    def action_on_strict_loading_violation=(_arg0); end

    # source://activerecord//lib/active_record.rb#557
    def after_all_transactions_commit(&block); end

    # source://activerecord//lib/active_record.rb#577
    def all_open_transactions; end

    # source://activerecord//lib/active_record.rb#447
    def allow_deprecated_singular_associations_name; end

    # source://activerecord//lib/active_record.rb#454
    def allow_deprecated_singular_associations_name=(value); end

    # source://activerecord//lib/active_record.rb#370
    def application_record_class; end

    # source://activerecord//lib/active_record.rb#370
    def application_record_class=(_arg0); end

    # source://activerecord//lib/active_record.rb#276
    def async_query_executor; end

    # source://activerecord//lib/active_record.rb#276
    def async_query_executor=(_arg0); end

    # source://activerecord//lib/active_record.rb#341
    def before_committed_on_all_records; end

    # source://activerecord//lib/active_record.rb#341
    def before_committed_on_all_records=(_arg0); end

    # source://activerecord//lib/active_record.rb#338
    def belongs_to_required_validates_foreign_key; end

    # source://activerecord//lib/active_record.rb#338
    def belongs_to_required_validates_foreign_key=(_arg0); end

    # source://activerecord//lib/active_record.rb#347
    def commit_transaction_on_non_local_return; end

    # source://activerecord//lib/active_record.rb#354
    def commit_transaction_on_non_local_return=(value); end

    # source://activerecord//lib/active_record.rb#218
    def db_warnings_action; end

    # source://activerecord//lib/active_record.rb#220
    def db_warnings_action=(action); end

    # source://activerecord//lib/active_record.rb#247
    def db_warnings_ignore; end

    # source://activerecord//lib/active_record.rb#247
    def db_warnings_ignore=(_arg0); end

    # source://activerecord//lib/active_record.rb#199
    def default_timezone; end

    # source://activerecord//lib/active_record.rb#203
    def default_timezone=(default_timezone); end

    # source://activerecord//lib/active_record/deprecator.rb#4
    def deprecator; end

    # source://activerecord//lib/active_record.rb#181
    def disable_prepared_statements; end

    # source://activerecord//lib/active_record.rb#181
    def disable_prepared_statements=(_arg0); end

    # source://activerecord//lib/active_record.rb#540
    def disconnect_all!; end

    # source://activerecord//lib/active_record.rb#425
    def dump_schema_after_migration; end

    # source://activerecord//lib/active_record.rb#425
    def dump_schema_after_migration=(_arg0); end

    # source://activerecord//lib/active_record.rb#435
    def dump_schemas; end

    # source://activerecord//lib/active_record.rb#435
    def dump_schemas=(_arg0); end

    # source://activerecord//lib/active_record.rb#529
    def eager_load!; end

    # source://activerecord//lib/active_record.rb#396
    def error_on_ignored_order; end

    # source://activerecord//lib/active_record.rb#396
    def error_on_ignored_order=(_arg0); end

    # source://activerecord//lib/active_record/gem_version.rb#5
    def gem_version; end

    # source://activerecord//lib/active_record.rb#490
    def generate_secure_token_on; end

    # source://activerecord//lib/active_record.rb#490
    def generate_secure_token_on=(_arg0); end

    # source://activerecord//lib/active_record.rb#299
    def global_executor_concurrency; end

    # source://activerecord//lib/active_record.rb#291
    def global_executor_concurrency=(global_executor_concurrency); end

    # source://activerecord//lib/active_record.rb#279
    def global_thread_pool_async_query_executor; end

    # source://activerecord//lib/active_record.rb#314
    def index_nested_attribute_errors; end

    # source://activerecord//lib/active_record.rb#314
    def index_nested_attribute_errors=(_arg0); end

    # source://activerecord//lib/active_record.rb#188
    def lazily_load_schema_cache; end

    # source://activerecord//lib/active_record.rb#188
    def lazily_load_schema_cache=(_arg0); end

    # source://activerecord//lib/active_record.rb#256
    def legacy_connection_handling=(_); end

    # source://activerecord//lib/active_record.rb#332
    def maintain_test_schema; end

    # source://activerecord//lib/active_record.rb#332
    def maintain_test_schema=(_arg0); end

    # source://activerecord//lib/active_record.rb#493
    def marshalling_format_version; end

    # source://activerecord//lib/active_record.rb#497
    def marshalling_format_version=(value); end

    # source://activerecord//lib/active_record.rb#416
    def migration_strategy; end

    # source://activerecord//lib/active_record.rb#416
    def migration_strategy=(_arg0); end

    # source://activerecord//lib/active_record.rb#304
    def permanent_connection_checkout; end

    # source://activerecord//lib/active_record.rb#307
    def permanent_connection_checkout=(value); end

    # source://activerecord//lib/active_record.rb#520
    def protocol_adapters; end

    # source://activerecord//lib/active_record.rb#520
    def protocol_adapters=(_arg0); end

    # source://activerecord//lib/active_record.rb#461
    def query_transformers; end

    # source://activerecord//lib/active_record.rb#461
    def query_transformers=(_arg0); end

    # source://activerecord//lib/active_record.rb#329
    def queues; end

    # source://activerecord//lib/active_record.rb#329
    def queues=(_arg0); end

    # source://activerecord//lib/active_record.rb#476
    def raise_int_wider_than_64bit; end

    # source://activerecord//lib/active_record.rb#476
    def raise_int_wider_than_64bit=(_arg0); end

    # source://activerecord//lib/active_record.rb#335
    def raise_on_assign_to_attr_readonly; end

    # source://activerecord//lib/active_record.rb#335
    def raise_on_assign_to_attr_readonly=(_arg0); end

    # source://activerecord//lib/active_record.rb#253
    def reading_role; end

    # source://activerecord//lib/active_record.rb#253
    def reading_role=(_arg0); end

    # source://activerecord//lib/active_record.rb#344
    def run_after_transaction_callbacks_in_order_defined; end

    # source://activerecord//lib/active_record.rb#344
    def run_after_transaction_callbacks_in_order_defined=(_arg0); end

    # source://activerecord//lib/active_record.rb#196
    def schema_cache_ignored_tables; end

    # source://activerecord//lib/active_record.rb#196
    def schema_cache_ignored_tables=(_arg0); end

    # source://activerecord//lib/active_record.rb#388
    def schema_format; end

    # source://activerecord//lib/active_record.rb#388
    def schema_format=(_arg0); end

    # source://activerecord//lib/active_record.rb#402
    def timestamped_migrations; end

    # source://activerecord//lib/active_record.rb#402
    def timestamped_migrations=(_arg0); end

    # source://activerecord//lib/active_record.rb#468
    def use_yaml_unsafe_load; end

    # source://activerecord//lib/active_record.rb#468
    def use_yaml_unsafe_load=(_arg0); end

    # source://activerecord//lib/active_record.rb#410
    def validate_migration_timestamps; end

    # source://activerecord//lib/active_record.rb#410
    def validate_migration_timestamps=(_arg0); end

    # source://activerecord//lib/active_record.rb#322
    def verbose_query_logs; end

    # source://activerecord//lib/active_record.rb#322
    def verbose_query_logs=(_arg0); end

    # source://activerecord//lib/active_record.rb#444
    def verify_foreign_keys_for_fixtures; end

    # source://activerecord//lib/active_record.rb#444
    def verify_foreign_keys_for_fixtures=(_arg0); end

    # source://activerecord//lib/active_record/version.rb#7
    def version; end

    # source://activerecord//lib/active_record.rb#367
    def warn_on_records_fetched_greater_than; end

    # source://activerecord//lib/active_record.rb#367
    def warn_on_records_fetched_greater_than=(_arg0); end

    # source://activerecord//lib/active_record.rb#250
    def writing_role; end

    # source://activerecord//lib/active_record.rb#250
    def writing_role=(_arg0); end

    # source://activerecord//lib/active_record.rb#483
    def yaml_column_permitted_classes; end

    # source://activerecord//lib/active_record.rb#483
    def yaml_column_permitted_classes=(_arg0); end
  end
end

# source://activerecord//lib/active_record/errors.rb#11
class ActiveRecord::ActiveRecordError < ::StandardError; end

# source://activerecord//lib/active_record/errors.rb#55
class ActiveRecord::AdapterError < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/errors.rb#56
  def initialize(message = T.unsafe(nil), connection_pool: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/errors.rb#61
  def connection_pool; end
end

# source://activerecord//lib/active_record/errors.rb#51
class ActiveRecord::AdapterNotFound < ::ActiveRecord::ActiveRecordError; end

# source://activerecord//lib/active_record/errors.rb#42
class ActiveRecord::AdapterNotSpecified < ::ActiveRecord::ActiveRecordError; end

# source://activerecord//lib/active_record/errors.rb#569
class ActiveRecord::AdapterTimeout < ::ActiveRecord::QueryAborted; end

# source://activerecord//lib/active_record/aggregations.rb#5
module ActiveRecord::Aggregations
  # source://activerecord//lib/active_record/aggregations.rb#11
  def reload(*_arg0); end

  private

  # source://activerecord//lib/active_record/aggregations.rb#17
  def clear_aggregation_cache; end

  # source://activerecord//lib/active_record/aggregations.rb#21
  def init_internals; end

  # source://activerecord//lib/active_record/aggregations.rb#6
  def initialize_dup(*_arg0); end
end

# source://activerecord//lib/active_record/aggregations.rb#183
module ActiveRecord::Aggregations::ClassMethods
  # source://activerecord//lib/active_record/aggregations.rb#225
  def composed_of(part_id, options = T.unsafe(nil)); end

  private

  # source://activerecord//lib/active_record/aggregations.rb#248
  def reader_method(name, class_name, mapping, allow_nil, constructor); end

  # source://activerecord//lib/active_record/aggregations.rb#261
  def writer_method(name, class_name, mapping, allow_nil, converter); end
end

# source://activerecord//lib/active_record/associations/errors.rb#203
class ActiveRecord::AmbiguousSourceReflectionForThroughAssociation < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/associations/errors.rb#204
  def initialize(klass, macro, association_name, options, possible_sources); end
end

# source://activerecord//lib/active_record/associations/errors.rb#4
class ActiveRecord::AssociationNotFoundError < ::ActiveRecord::ConfigurationError
  include ::DidYouMean::Correctable

  # source://activerecord//lib/active_record/associations/errors.rb#7
  def initialize(record = T.unsafe(nil), association_name = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/associations/errors.rb#5
  def association_name; end

  # source://activerecord//lib/active_record/associations/errors.rb#20
  def corrections; end

  # source://activerecord//lib/active_record/associations/errors.rb#5
  def record; end
end

# source://activerecord//lib/active_record/association_relation.rb#4
class ActiveRecord::AssociationRelation < ::ActiveRecord::Relation
  # source://activerecord//lib/active_record/association_relation.rb#5
  def initialize(klass, association, **_arg2); end

  # source://activerecord//lib/active_record/association_relation.rb#14
  def ==(other); end

  # source://activerecord//lib/active_record/association_relation.rb#20
  def insert(attributes, **kwargs); end

  # source://activerecord//lib/active_record/association_relation.rb#20
  def insert!(attributes, **kwargs); end

  # source://activerecord//lib/active_record/association_relation.rb#20
  def insert_all(attributes, **kwargs); end

  # source://activerecord//lib/active_record/association_relation.rb#20
  def insert_all!(attributes, **kwargs); end

  # source://activerecord//lib/active_record/association_relation.rb#10
  def proxy_association; end

  # source://activerecord//lib/active_record/association_relation.rb#20
  def upsert(attributes, **kwargs); end

  # source://activerecord//lib/active_record/association_relation.rb#20
  def upsert_all(attributes, **kwargs); end

  private

  # source://activerecord//lib/active_record/association_relation.rb#35
  def _create(attributes, &block); end

  # source://activerecord//lib/active_record/association_relation.rb#39
  def _create!(attributes, &block); end

  # source://activerecord//lib/active_record/association_relation.rb#31
  def _new(attributes, &block); end

  # source://activerecord//lib/active_record/association_relation.rb#43
  def exec_queries; end
end

# source://activerecord//lib/active_record/errors.rb#33
class ActiveRecord::AssociationTypeMismatch < ::ActiveRecord::ActiveRecordError; end

# source://activerecord//lib/active_record/associations.rb#5
module ActiveRecord::Associations
  extend ::ActiveSupport::Autoload
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Associations::ClassMethods

  # source://activerecord//lib/active_record/associations.rb#51
  def association(name); end

  # source://activerecord//lib/active_record/associations.rb#65
  def association_cached?(name); end

  private

  # source://activerecord//lib/active_record/associations.rb#81
  def association_instance_get(name); end

  # source://activerecord//lib/active_record/associations.rb#86
  def association_instance_set(name, association); end

  # source://activerecord//lib/active_record/associations.rb#75
  def init_internals; end

  # source://activerecord//lib/active_record/associations.rb#69
  def initialize_dup(*_arg0); end

  class << self
    # source://activerecord//lib/active_record/associations.rb#44
    def eager_load!; end
  end
end

# source://activerecord//lib/active_record/associations/alias_tracker.rb#8
class ActiveRecord::Associations::AliasTracker
  # source://activerecord//lib/active_record/associations/alias_tracker.rb#51
  def initialize(table_alias_length, aliases); end

  # source://activerecord//lib/active_record/associations/alias_tracker.rb#56
  def aliased_table_for(arel_table, table_name = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/associations/alias_tracker.rb#78
  def aliases; end

  private

  # source://activerecord//lib/active_record/associations/alias_tracker.rb#81
  def table_alias_for(table_name); end

  # source://activerecord//lib/active_record/associations/alias_tracker.rb#85
  def truncate(name); end

  class << self
    # source://activerecord//lib/active_record/associations/alias_tracker.rb#9
    def create(pool, initial_table, joins, aliases = T.unsafe(nil)); end

    # source://activerecord//lib/active_record/associations/alias_tracker.rb#28
    def initial_count_for(connection, name, table_joins); end
  end
end

# source://activerecord//lib/active_record/associations/association.rb#35
class ActiveRecord::Associations::Association
  # source://activerecord//lib/active_record/associations/association.rb#41
  def initialize(owner, reflection); end

  # source://activerecord//lib/active_record/associations/association.rb#215
  def collection?; end

  # source://activerecord//lib/active_record/associations/association.rb#205
  def create(attributes = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/associations/association.rb#209
  def create!(attributes = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/associations/association.rb#37
  def disable_joins; end

  # source://activerecord//lib/active_record/associations/association.rb#154
  def extensions; end

  # source://activerecord//lib/active_record/associations/association.rb#195
  def initialize_attributes(record, except_from_scope_attributes = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/associations/association.rb#138
  def inversed_from(record); end

  # source://activerecord//lib/active_record/associations/association.rb#142
  def inversed_from_queries(record); end

  # source://activerecord//lib/active_record/associations/association.rb#150
  def klass; end

  # source://activerecord//lib/active_record/associations/association.rb#174
  def load_target; end

  # source://activerecord//lib/active_record/associations/association.rb#79
  def loaded!; end

  # source://activerecord//lib/active_record/associations/association.rb#74
  def loaded?; end

  # source://activerecord//lib/active_record/associations/association.rb#184
  def marshal_dump; end

  # source://activerecord//lib/active_record/associations/association.rb#189
  def marshal_load(data); end

  # source://activerecord//lib/active_record/associations/association.rb#39
  def options(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/association.rb#36
  def owner; end

  # source://activerecord//lib/active_record/associations/association.rb#36
  def owner=(_arg0); end

  # source://activerecord//lib/active_record/associations/association.rb#37
  def reflection; end

  # source://activerecord//lib/active_record/associations/association.rb#65
  def reload(force = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/associations/association.rb#132
  def remove_inverse_instance(record); end

  # source://activerecord//lib/active_record/associations/association.rb#54
  def reset; end

  # source://activerecord//lib/active_record/associations/association.rb#59
  def reset_negative_cache; end

  # source://activerecord//lib/active_record/associations/association.rb#112
  def reset_scope; end

  # source://activerecord//lib/active_record/associations/association.rb#100
  def scope; end

  # source://activerecord//lib/active_record/associations/association.rb#117
  def set_inverse_instance(record); end

  # source://activerecord//lib/active_record/associations/association.rb#124
  def set_inverse_instance_from_queries(record); end

  # source://activerecord//lib/active_record/associations/association.rb#90
  def stale_target?; end

  # source://activerecord//lib/active_record/associations/association.rb#37
  def target; end

  # source://activerecord//lib/active_record/associations/association.rb#95
  def target=(target); end

  private

  # source://activerecord//lib/active_record/associations/association.rb#276
  def association_scope; end

  # source://activerecord//lib/active_record/associations/association.rb#359
  def build_record(attributes); end

  # source://activerecord//lib/active_record/associations/association.rb#374
  def enqueue_destroy_association(options); end

  # source://activerecord//lib/active_record/associations/association.rb#222
  def ensure_klass_exists!; end

  # source://activerecord//lib/active_record/associations/association.rb#226
  def find_target; end

  # source://activerecord//lib/active_record/associations/association.rb#296
  def find_target?; end

  # source://activerecord//lib/active_record/associations/association.rb#346
  def foreign_key_for?(record); end

  # source://activerecord//lib/active_record/associations/association.rb#308
  def foreign_key_present?; end

  # source://activerecord//lib/active_record/associations/association.rb#382
  def inversable?(record); end

  # source://activerecord//lib/active_record/associations/association.rb#326
  def inverse_association_for(record); end

  # source://activerecord//lib/active_record/associations/association.rb#335
  def inverse_reflection_for(record); end

  # source://activerecord//lib/active_record/associations/association.rb#341
  def invertible_for?(record); end

  # source://activerecord//lib/active_record/associations/association.rb#387
  def matches_foreign_key?(record); end

  # source://activerecord//lib/active_record/associations/association.rb#315
  def raise_on_type_mismatch!(record); end

  # source://activerecord//lib/active_record/associations/association.rb#292
  def scope_for_create; end

  # source://activerecord//lib/active_record/associations/association.rb#367
  def skip_statement_cache?(scope); end

  # source://activerecord//lib/active_record/associations/association.rb#252
  def skip_strict_loading(&block); end

  # source://activerecord//lib/active_record/associations/association.rb#356
  def stale_state; end

  # source://activerecord//lib/active_record/associations/association.rb#288
  def target_scope; end

  # source://activerecord//lib/active_record/associations/association.rb#260
  def violates_strict_loading?; end
end

# source://activerecord//lib/active_record/associations/association_scope.rb#5
class ActiveRecord::Associations::AssociationScope
  # source://activerecord//lib/active_record/associations/association_scope.rb#15
  def initialize(value_transformation); end

  # source://activerecord//lib/active_record/associations/association_scope.rb#21
  def scope(association); end

  private

  # source://activerecord//lib/active_record/associations/association_scope.rb#124
  def add_constraints(scope, owner, chain); end

  # source://activerecord//lib/active_record/associations/association_scope.rb#161
  def apply_scope(scope, table, key, value); end

  # source://activerecord//lib/active_record/associations/association_scope.rb#169
  def eval_scope(reflection, scope, owner); end

  # source://activerecord//lib/active_record/associations/association_scope.rb#112
  def get_chain(reflection, association, tracker); end

  # source://activerecord//lib/active_record/associations/association_scope.rb#54
  def join(table, constraint); end

  # source://activerecord//lib/active_record/associations/association_scope.rb#58
  def last_chain_scope(scope, reflection, owner); end

  # source://activerecord//lib/active_record/associations/association_scope.rb#81
  def next_chain_scope(scope, reflection, next_reflection); end

  # source://activerecord//lib/active_record/associations/association_scope.rb#77
  def transform_value(value); end

  # source://activerecord//lib/active_record/associations/association_scope.rb#52
  def value_transformation; end

  class << self
    # source://activerecord//lib/active_record/associations/association_scope.rb#10
    def create(&block); end

    # source://activerecord//lib/active_record/associations/association_scope.rb#34
    def get_bind_values(owner, chain); end

    # source://activerecord//lib/active_record/associations/association_scope.rb#6
    def scope(association); end
  end
end

# source://activerecord//lib/active_record/associations/association_scope.rb#19
ActiveRecord::Associations::AssociationScope::INSTANCE = T.let(T.unsafe(nil), ActiveRecord::Associations::AssociationScope)

# source://activerecord//lib/active_record/associations/association_scope.rb#101
class ActiveRecord::Associations::AssociationScope::ReflectionProxy < ::SimpleDelegator
  # source://activerecord//lib/active_record/associations/association_scope.rb#104
  def initialize(reflection, aliased_table); end

  # source://activerecord//lib/active_record/associations/association_scope.rb#102
  def aliased_table; end

  # source://activerecord//lib/active_record/associations/association_scope.rb#109
  def all_includes; end
end

# source://activerecord//lib/active_record/associations/belongs_to_association.rb#6
class ActiveRecord::Associations::BelongsToAssociation < ::ActiveRecord::Associations::SingularAssociation
  # source://activerecord//lib/active_record/associations/belongs_to_association.rb#53
  def decrement_counters; end

  # source://activerecord//lib/active_record/associations/belongs_to_association.rb#61
  def decrement_counters_before_last_save; end

  # source://activerecord//lib/active_record/associations/belongs_to_association.rb#40
  def default(&block); end

  # source://activerecord//lib/active_record/associations/belongs_to_association.rb#7
  def handle_dependency; end

  # source://activerecord//lib/active_record/associations/belongs_to_association.rb#57
  def increment_counters; end

  # source://activerecord//lib/active_record/associations/belongs_to_association.rb#35
  def inversed_from(record); end

  # source://activerecord//lib/active_record/associations/belongs_to_association.rb#44
  def reset; end

  # source://activerecord//lib/active_record/associations/belongs_to_association.rb#84
  def saved_change_to_target?; end

  # source://activerecord//lib/active_record/associations/belongs_to_association.rb#76
  def target_changed?; end

  # source://activerecord//lib/active_record/associations/belongs_to_association.rb#80
  def target_previously_changed?; end

  # source://activerecord//lib/active_record/associations/belongs_to_association.rb#49
  def updated?; end

  private

  # source://activerecord//lib/active_record/associations/belongs_to_association.rb#118
  def find_target?; end

  # source://activerecord//lib/active_record/associations/belongs_to_association.rb#149
  def foreign_key_present?; end

  # source://activerecord//lib/active_record/associations/belongs_to_association.rb#153
  def invertible_for?(record); end

  # source://activerecord//lib/active_record/associations/belongs_to_association.rb#145
  def primary_key(klass); end

  # source://activerecord//lib/active_record/associations/belongs_to_association.rb#89
  def replace(record); end

  # source://activerecord//lib/active_record/associations/belongs_to_association.rb#126
  def replace_keys(record, force: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/associations/belongs_to_association.rb#122
  def require_counter_update?; end

  # source://activerecord//lib/active_record/associations/belongs_to_association.rb#158
  def stale_state; end

  # source://activerecord//lib/active_record/associations/belongs_to_association.rb#103
  def update_counters(by); end

  # source://activerecord//lib/active_record/associations/belongs_to_association.rb#113
  def update_counters_via_scope(klass, foreign_key, by); end
end

# source://activerecord//lib/active_record/associations/belongs_to_polymorphic_association.rb#6
class ActiveRecord::Associations::BelongsToPolymorphicAssociation < ::ActiveRecord::Associations::BelongsToAssociation
  # source://activerecord//lib/active_record/associations/belongs_to_polymorphic_association.rb#7
  def klass; end

  # source://activerecord//lib/active_record/associations/belongs_to_polymorphic_association.rb#20
  def saved_change_to_target?; end

  # source://activerecord//lib/active_record/associations/belongs_to_polymorphic_association.rb#12
  def target_changed?; end

  # source://activerecord//lib/active_record/associations/belongs_to_polymorphic_association.rb#16
  def target_previously_changed?; end

  private

  # source://activerecord//lib/active_record/associations/belongs_to_polymorphic_association.rb#35
  def inverse_reflection_for(record); end

  # source://activerecord//lib/active_record/associations/belongs_to_polymorphic_association.rb#39
  def raise_on_type_mismatch!(record); end

  # source://activerecord//lib/active_record/associations/belongs_to_polymorphic_association.rb#25
  def replace_keys(record, force: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/associations/belongs_to_polymorphic_association.rb#43
  def stale_state; end
end

# source://activerecord//lib/active_record/associations.rb#18
module ActiveRecord::Associations::Builder; end

# source://activerecord//lib/active_record/associations/builder/association.rb#15
class ActiveRecord::Associations::Builder::Association
  class << self
    # source://activerecord//lib/active_record/associations/builder/association.rb#25
    def build(model, name, scope, options, &block); end

    # source://activerecord//lib/active_record/associations/builder/association.rb#40
    def create_reflection(model, name, scope, options, &block); end

    # source://activerecord//lib/active_record/associations/builder/association.rb#17
    def extensions; end

    # source://activerecord//lib/active_record/associations/builder/association.rb#17
    def extensions=(_arg0); end

    private

    # source://activerecord//lib/active_record/associations/builder/association.rb#144
    def add_after_commit_jobs_callback(model, dependent); end

    # source://activerecord//lib/active_record/associations/builder/association.rb#139
    def add_destroy_callbacks(model, reflection); end

    # source://activerecord//lib/active_record/associations/builder/association.rb#53
    def build_scope(scope); end

    # source://activerecord//lib/active_record/associations/builder/association.rb#129
    def check_dependent_options(dependent, model); end

    # source://activerecord//lib/active_record/associations/builder/association.rb#94
    def define_accessors(model, reflection); end

    # source://activerecord//lib/active_record/associations/builder/association.rb#76
    def define_callbacks(model, reflection); end

    # source://activerecord//lib/active_record/associations/builder/association.rb#121
    def define_change_tracking_methods(model, reflection); end

    # source://activerecord//lib/active_record/associations/builder/association.rb#73
    def define_extensions(model, name); end

    # source://activerecord//lib/active_record/associations/builder/association.rb#101
    def define_readers(mixin, name); end

    # source://activerecord//lib/active_record/associations/builder/association.rb#117
    def define_validations(model, reflection); end

    # source://activerecord//lib/active_record/associations/builder/association.rb#109
    def define_writers(mixin, name); end

    # source://activerecord//lib/active_record/associations/builder/association.rb#61
    def macro; end

    # source://activerecord//lib/active_record/associations/builder/association.rb#125
    def valid_dependent_options; end

    # source://activerecord//lib/active_record/associations/builder/association.rb#65
    def valid_options(options); end

    # source://activerecord//lib/active_record/associations/builder/association.rb#69
    def validate_options(options); end
  end
end

# source://activerecord//lib/active_record/associations/builder/association.rb#21
ActiveRecord::Associations::Builder::Association::VALID_OPTIONS = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/active_record/associations/builder/belongs_to.rb#4
class ActiveRecord::Associations::Builder::BelongsTo < ::ActiveRecord::Associations::Builder::SingularAssociation
  class << self
    # source://activerecord//lib/active_record/associations/builder/belongs_to.rb#44
    def touch_record(o, changes, foreign_key, name, touch); end

    private

    # source://activerecord//lib/active_record/associations/builder/belongs_to.rb#27
    def add_counter_cache_callbacks(model, reflection); end

    # source://activerecord//lib/active_record/associations/builder/belongs_to.rb#103
    def add_default_callbacks(model, reflection); end

    # source://activerecord//lib/active_record/associations/builder/belongs_to.rb#109
    def add_destroy_callbacks(model, reflection); end

    # source://activerecord//lib/active_record/associations/builder/belongs_to.rb#79
    def add_touch_callbacks(model, reflection); end

    # source://activerecord//lib/active_record/associations/builder/belongs_to.rb#20
    def define_callbacks(model, reflection); end

    # source://activerecord//lib/active_record/associations/builder/belongs_to.rb#144
    def define_change_tracking_methods(model, reflection); end

    # source://activerecord//lib/active_record/associations/builder/belongs_to.rb#113
    def define_validations(model, reflection); end

    # source://activerecord//lib/active_record/associations/builder/belongs_to.rb#5
    def macro; end

    # source://activerecord//lib/active_record/associations/builder/belongs_to.rb#16
    def valid_dependent_options; end

    # source://activerecord//lib/active_record/associations/builder/belongs_to.rb#9
    def valid_options(options); end
  end
end

# source://activerecord//lib/active_record/associations/builder/collection_association.rb#6
class ActiveRecord::Associations::Builder::CollectionAssociation < ::ActiveRecord::Associations::Builder::Association
  class << self
    # source://activerecord//lib/active_record/associations/builder/collection_association.rb#13
    def define_callbacks(model, reflection); end

    private

    # source://activerecord//lib/active_record/associations/builder/collection_association.rb#30
    def define_callback(model, callback_name, name, options); end

    # source://activerecord//lib/active_record/associations/builder/collection_association.rb#22
    def define_extensions(model, name, &block); end

    # source://activerecord//lib/active_record/associations/builder/collection_association.rb#58
    def define_readers(mixin, name); end

    # source://activerecord//lib/active_record/associations/builder/collection_association.rb#68
    def define_writers(mixin, name); end

    # source://activerecord//lib/active_record/associations/builder/collection_association.rb#9
    def valid_options(options); end
  end
end

# source://activerecord//lib/active_record/associations/builder/collection_association.rb#7
ActiveRecord::Associations::Builder::CollectionAssociation::CALLBACKS = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/active_record/associations/builder/has_and_belongs_to_many.rb#4
class ActiveRecord::Associations::Builder::HasAndBelongsToMany
  # source://activerecord//lib/active_record/associations/builder/has_and_belongs_to_many.rb#7
  def initialize(association_name, lhs_model, options); end

  # source://activerecord//lib/active_record/associations/builder/has_and_belongs_to_many.rb#5
  def association_name; end

  # source://activerecord//lib/active_record/associations/builder/has_and_belongs_to_many.rb#5
  def lhs_model; end

  # source://activerecord//lib/active_record/associations/builder/has_and_belongs_to_many.rb#59
  def middle_reflection(join_model); end

  # source://activerecord//lib/active_record/associations/builder/has_and_belongs_to_many.rb#5
  def options; end

  # source://activerecord//lib/active_record/associations/builder/has_and_belongs_to_many.rb#13
  def through_model; end

  private

  # source://activerecord//lib/active_record/associations/builder/has_and_belongs_to_many.rb#92
  def belongs_to_options(options); end

  # source://activerecord//lib/active_record/associations/builder/has_and_belongs_to_many.rb#71
  def middle_options(join_model); end

  # source://activerecord//lib/active_record/associations/builder/has_and_belongs_to_many.rb#80
  def table_name; end
end

# source://activerecord//lib/active_record/associations/builder/has_many.rb#4
class ActiveRecord::Associations::Builder::HasMany < ::ActiveRecord::Associations::Builder::CollectionAssociation
  class << self
    private

    # source://activerecord//lib/active_record/associations/builder/has_many.rb#5
    def macro; end

    # source://activerecord//lib/active_record/associations/builder/has_many.rb#17
    def valid_dependent_options; end

    # source://activerecord//lib/active_record/associations/builder/has_many.rb#9
    def valid_options(options); end
  end
end

# source://activerecord//lib/active_record/associations/builder/has_one.rb#4
class ActiveRecord::Associations::Builder::HasOne < ::ActiveRecord::Associations::Builder::SingularAssociation
  class << self
    # source://activerecord//lib/active_record/associations/builder/has_one.rb#37
    def touch_record(record, name, touch); end

    private

    # source://activerecord//lib/active_record/associations/builder/has_one.rb#26
    def add_destroy_callbacks(model, reflection); end

    # source://activerecord//lib/active_record/associations/builder/has_one.rb#46
    def add_touch_callbacks(model, reflection); end

    # source://activerecord//lib/active_record/associations/builder/has_one.rb#21
    def define_callbacks(model, reflection); end

    # source://activerecord//lib/active_record/associations/builder/has_one.rb#30
    def define_validations(model, reflection); end

    # source://activerecord//lib/active_record/associations/builder/has_one.rb#5
    def macro; end

    # source://activerecord//lib/active_record/associations/builder/has_one.rb#17
    def valid_dependent_options; end

    # source://activerecord//lib/active_record/associations/builder/has_one.rb#9
    def valid_options(options); end
  end
end

# source://activerecord//lib/active_record/associations/builder/singular_association.rb#6
class ActiveRecord::Associations::Builder::SingularAssociation < ::ActiveRecord::Associations::Builder::Association
  class << self
    private

    # source://activerecord//lib/active_record/associations/builder/singular_association.rb#11
    def define_accessors(model, reflection); end

    # source://activerecord//lib/active_record/associations/builder/singular_association.rb#30
    def define_constructors(mixin, name); end

    # source://activerecord//lib/active_record/associations/builder/singular_association.rb#7
    def valid_options(options); end
  end
end

# source://activerecord//lib/active_record/associations.rb#1010
module ActiveRecord::Associations::ClassMethods
  # source://activerecord//lib/active_record/associations.rb#1659
  def belongs_to(name, scope = T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/associations.rb#1840
  def has_and_belongs_to_many(name, scope = T.unsafe(nil), **options, &extension); end

  # source://activerecord//lib/active_record/associations.rb#1272
  def has_many(name, scope = T.unsafe(nil), **options, &extension); end

  # source://activerecord//lib/active_record/associations.rb#1468
  def has_one(name, scope = T.unsafe(nil), **options); end
end

# source://activerecord//lib/active_record/associations/collection_association.rb#30
class ActiveRecord::Associations::CollectionAssociation < ::ActiveRecord::Associations::Association
  # source://activerecord//lib/active_record/associations/collection_association.rb#279
  def add_to_target(record, skip_callbacks: T.unsafe(nil), replace: T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/associations/collection_association.rb#117
  def build(attributes = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/associations/collection_association.rb#314
  def collection?; end

  # source://activerecord//lib/active_record/associations/collection_association.rb#127
  def concat(*records); end

  # source://activerecord//lib/active_record/associations/collection_association.rb#186
  def delete(*records); end

  # source://activerecord//lib/active_record/associations/collection_association.rb#150
  def delete_all(dependent = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/associations/collection_association.rb#195
  def destroy(*records); end

  # source://activerecord//lib/active_record/associations/collection_association.rb#172
  def destroy_all; end

  # source://activerecord//lib/active_record/associations/collection_association.rb#232
  def empty?; end

  # source://activerecord//lib/active_record/associations/collection_association.rb#94
  def find(*args); end

  # source://activerecord//lib/active_record/associations/collection_association.rb#306
  def find_from_target?; end

  # source://activerecord//lib/active_record/associations/collection_association.rb#51
  def ids_reader; end

  # source://activerecord//lib/active_record/associations/collection_association.rb#62
  def ids_writer(ids); end

  # source://activerecord//lib/active_record/associations/collection_association.rb#258
  def include?(record); end

  # source://activerecord//lib/active_record/associations/collection_association.rb#270
  def load_target; end

  # source://activerecord//lib/active_record/associations/collection_association.rb#31
  def nested_attributes_target; end

  # source://activerecord//lib/active_record/associations/collection_association.rb#31
  def nested_attributes_target=(_arg0); end

  # source://activerecord//lib/active_record/associations/collection_association.rb#302
  def null_scope?; end

  # source://activerecord//lib/active_record/associations/collection_association.rb#34
  def reader; end

  # source://activerecord//lib/active_record/associations/collection_association.rb#242
  def replace(other_array); end

  # source://activerecord//lib/active_record/associations/collection_association.rb#87
  def reset; end

  # source://activerecord//lib/active_record/associations/collection_association.rb#296
  def scope; end

  # source://activerecord//lib/active_record/associations/collection_association.rb#209
  def size; end

  # source://activerecord//lib/active_record/associations/collection_association.rb#283
  def target=(record); end

  # source://activerecord//lib/active_record/associations/collection_association.rb#46
  def writer(records); end

  private

  # source://activerecord//lib/active_record/associations/collection_association.rb#352
  def _create_record(attributes, raise = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/associations/collection_association.rb#490
  def callback(method, record); end

  # source://activerecord//lib/active_record/associations/collection_association.rb#496
  def callbacks_for(callback_name); end

  # source://activerecord//lib/active_record/associations/collection_association.rb#436
  def concat_records(records, raise = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/associations/collection_association.rb#383
  def delete_or_destroy(records, method); end

  # source://activerecord//lib/active_record/associations/collection_association.rb#412
  def delete_records(records, method); end

  # source://activerecord//lib/active_record/associations/collection_association.rb#519
  def find_by_scan(*args); end

  # source://activerecord//lib/active_record/associations/collection_association.rb#505
  def include_in_memory?(record); end

  # source://activerecord//lib/active_record/associations/collection_association.rb#375
  def insert_record(record, validate = T.unsafe(nil), raise = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/associations/collection_association.rb#333
  def merge_target_lists(persisted, memory); end

  # source://activerecord//lib/active_record/associations/collection_association.rb#397
  def remove_records(existing_records, records, method); end

  # source://activerecord//lib/active_record/associations/collection_association.rb#428
  def replace_common_records_in_memory(new_target, original_target); end

  # source://activerecord//lib/active_record/associations/collection_association.rb#455
  def replace_on_target(record, skip_callbacks, replace:, inversing: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/associations/collection_association.rb#416
  def replace_records(new_target, original_target); end

  # source://activerecord//lib/active_record/associations/collection_association.rb#319
  def transaction(&block); end
end

# source://activerecord//lib/active_record/associations/collection_proxy.rb#31
class ActiveRecord::Associations::CollectionProxy < ::ActiveRecord::Relation
  # source://activerecord//lib/active_record/associations/collection_proxy.rb#32
  def initialize(klass, association, **_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1049
  def <<(*records); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#980
  def ==(other); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def _select!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def and(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def and!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def annotate(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def annotate!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def annotate_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def annotate_values=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1049
  def append(*records); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def arel(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#318
  def build(attributes = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#724
  def calculate(operation, column_name); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1066
  def clear; end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1049
  def concat(*records); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def construct_join_dependency(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#349
  def create(attributes = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#365
  def create!(attributes = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def create_with(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def create_with!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def create_with_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def create_with_value=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#620
  def delete(*records); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#474
  def delete_all(dependent = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#692
  def destroy(*records); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#501
  def destroy_all; end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def distinct(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def distinct!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def distinct_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def distinct_value=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def eager_load(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def eager_load!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def eager_load_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def eager_load_values=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#831
  def empty?; end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def except(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def excluding(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def excluding!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def extending(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def extending!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def extending_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def extending_values=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def extensions(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def extract_associated(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#138
  def find(*args); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def from(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def from!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def from_clause(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def from_clause=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def group(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def group!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def group_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def group_values=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def having(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def having!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def having_clause(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def having_clause=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def in_order_of(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#927
  def include?(record); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def includes(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def includes!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def includes_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def includes_values=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def insert(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def insert!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def insert_all(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def insert_all!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1118
  def inspect; end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def invert_where(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def invert_where!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def joins(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def joins!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def joins_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def joins_values=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#259
  def last(limit = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def left_joins(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def left_outer_joins(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def left_outer_joins!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def left_outer_joins_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def left_outer_joins_values=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def limit(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def limit!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def limit_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def limit_value=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def load_async(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#44
  def load_target; end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#53
  def loaded; end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#53
  def loaded?; end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def lock(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def lock!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def lock_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def lock_value=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def merge(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def merge!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#318
  def new(attributes = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def none(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def none!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def null_relation?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def offset(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def offset!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def offset_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def offset_value=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def only(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def optimizer_hints(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def optimizer_hints!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def optimizer_hints_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def optimizer_hints_values=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def or(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def or!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def order(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def order!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def order_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def order_values=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#728
  def pluck(*column_names); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def preload(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def preload!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def preload_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def preload_values=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1056
  def prepend(*args); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1123
  def pretty_print(pp); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#944
  def proxy_association; end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1049
  def push(*records); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def readonly(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def readonly!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def readonly_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def readonly_value=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1024
  def records; end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def references(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def references!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def references_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def references_values=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def regroup(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def regroup!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1085
  def reload; end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def reorder(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def reorder!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def reordering_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def reordering_value=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#391
  def replace(other_array); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def reselect(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def reselect!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1106
  def reset; end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1112
  def reset_scope; end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def reverse_order(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def reverse_order!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def reverse_order_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def reverse_order_value=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def rewhere(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#949
  def scope; end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def scoping(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def select_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def select_values=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#782
  def size; end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def skip_preloading!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def skip_query_cache!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def skip_query_cache_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def skip_query_cache_value=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def spawn(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def strict_loading(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def strict_loading!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def strict_loading_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def strict_loading_value=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def structurally_compatible?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#289
  def take(limit = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#40
  def target; end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def uniq!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def unscope(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def unscope!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def unscope_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def unscope_values=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def upsert(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def upsert_all(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def where(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def where!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def where_clause(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def where_clause=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def with(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def with!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def with_recursive(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def with_recursive!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def with_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def with_values=(arg); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1137
  def without(*_arg0, **_arg1, &_arg2); end

  private

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1158
  def exec_queries; end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1154
  def find_from_target?; end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1145
  def find_nth_from_last(index); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1140
  def find_nth_with_limit(index, limit); end

  # source://activerecord//lib/active_record/associations/collection_proxy.rb#1150
  def null_scope?; end
end

# source://activerecord//lib/active_record/associations/disable_joins_association_scope.rb#5
class ActiveRecord::Associations::DisableJoinsAssociationScope < ::ActiveRecord::Associations::AssociationScope
  # source://activerecord//lib/active_record/associations/disable_joins_association_scope.rb#6
  def scope(association); end

  private

  # source://activerecord//lib/active_record/associations/disable_joins_association_scope.rb#33
  def add_constraints(reflection, key, join_ids, owner, ordered); end

  # source://activerecord//lib/active_record/associations/disable_joins_association_scope.rb#18
  def last_scope_chain(reverse_chain, owner); end
end

# source://activerecord//lib/active_record/associations/foreign_association.rb#4
module ActiveRecord::Associations::ForeignAssociation
  # source://activerecord//lib/active_record/associations/foreign_association.rb#5
  def foreign_key_present?; end

  # source://activerecord//lib/active_record/associations/foreign_association.rb#13
  def nullified_owner_attributes; end

  private

  # source://activerecord//lib/active_record/associations/foreign_association.rb#22
  def set_owner_attributes(record); end
end

# source://activerecord//lib/active_record/associations/has_many_association.rb#11
class ActiveRecord::Associations::HasManyAssociation < ::ActiveRecord::Associations::CollectionAssociation
  include ::ActiveRecord::Associations::ForeignAssociation

  # source://activerecord//lib/active_record/associations/has_many_association.rb#14
  def handle_dependency; end

  # source://activerecord//lib/active_record/associations/has_many_association.rb#61
  def insert_record(record, validate = T.unsafe(nil), raise = T.unsafe(nil)); end

  private

  # source://activerecord//lib/active_record/associations/has_many_association.rb#143
  def _create_record(attributes, *_arg1); end

  # source://activerecord//lib/active_record/associations/has_many_association.rb#139
  def concat_records(records, *_arg1); end

  # source://activerecord//lib/active_record/associations/has_many_association.rb#80
  def count_records; end

  # source://activerecord//lib/active_record/associations/has_many_association.rb#112
  def delete_count(method, scope); end

  # source://activerecord//lib/active_record/associations/has_many_association.rb#120
  def delete_or_nullify_all_records(method); end

  # source://activerecord//lib/active_record/associations/has_many_association.rb#127
  def delete_records(records, method); end

  # source://activerecord//lib/active_record/associations/has_many_association.rb#158
  def difference(a, b); end

  # source://activerecord//lib/active_record/associations/has_many_association.rb#162
  def intersection(a, b); end

  # source://activerecord//lib/active_record/associations/has_many_association.rb#98
  def update_counter(difference, reflection = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/associations/has_many_association.rb#151
  def update_counter_if_success(saved_successfully, difference); end

  # source://activerecord//lib/active_record/associations/has_many_association.rb#104
  def update_counter_in_memory(difference, reflection = T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/associations/has_many_through_association.rb#6
class ActiveRecord::Associations::HasManyThroughAssociation < ::ActiveRecord::Associations::HasManyAssociation
  include ::ActiveRecord::Associations::ThroughAssociation

  # source://activerecord//lib/active_record/associations/has_many_through_association.rb#9
  def initialize(owner, reflection); end

  # source://activerecord//lib/active_record/associations/has_many_through_association.rb#14
  def concat(*records); end

  # source://activerecord//lib/active_record/associations/has_many_through_association.rb#24
  def insert_record(record, validate = T.unsafe(nil), raise = T.unsafe(nil)); end

  private

  # source://activerecord//lib/active_record/associations/has_many_through_association.rb#90
  def build_record(attributes); end

  # source://activerecord//lib/active_record/associations/has_many_through_association.rb#56
  def build_through_record(record); end

  # source://activerecord//lib/active_record/associations/has_many_through_association.rb#37
  def concat_records(records); end

  # source://activerecord//lib/active_record/associations/has_many_through_association.rb#136
  def delete_or_nullify_all_records(method); end

  # source://activerecord//lib/active_record/associations/has_many_through_association.rb#140
  def delete_records(records, method); end

  # source://activerecord//lib/active_record/associations/has_many_through_association.rb#209
  def delete_through_records(records); end

  # source://activerecord//lib/active_record/associations/has_many_through_association.rb#177
  def difference(a, b); end

  # source://activerecord//lib/active_record/associations/has_many_through_association.rb#193
  def distribution(array); end

  # source://activerecord//lib/active_record/associations/has_many_through_association.rb#225
  def find_target; end

  # source://activerecord//lib/active_record/associations/has_many_through_association.rb#183
  def intersection(a, b); end

  # source://activerecord//lib/active_record/associations/has_many_through_association.rb#232
  def invertible_for?(record); end

  # source://activerecord//lib/active_record/associations/has_many_through_association.rb#189
  def mark_occurrence(distribution, record); end

  # source://activerecord//lib/active_record/associations/has_many_through_association.rb#116
  def remove_records(existing_records, records, method); end

  # source://activerecord//lib/active_record/associations/has_many_through_association.rb#81
  def save_through_record(record); end

  # source://activerecord//lib/active_record/associations/has_many_through_association.rb#121
  def target_reflection_has_associated_record?; end

  # source://activerecord//lib/active_record/associations/has_many_through_association.rb#199
  def through_records_for(record); end

  # source://activerecord//lib/active_record/associations/has_many_through_association.rb#69
  def through_scope; end

  # source://activerecord//lib/active_record/associations/has_many_through_association.rb#71
  def through_scope_attributes; end

  # source://activerecord//lib/active_record/associations/has_many_through_association.rb#125
  def update_through_counter?(method); end
end

# source://activerecord//lib/active_record/associations/has_one_association.rb#6
class ActiveRecord::Associations::HasOneAssociation < ::ActiveRecord::Associations::SingularAssociation
  include ::ActiveRecord::Associations::ForeignAssociation

  # source://activerecord//lib/active_record/associations/has_one_association.rb#26
  def delete(method = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/associations/has_one_association.rb#9
  def handle_dependency; end

  private

  # source://activerecord//lib/active_record/associations/has_one_association.rb#133
  def _create_record(attributes, raise_error = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/associations/has_one_association.rb#119
  def nullify_owner_attributes(record); end

  # source://activerecord//lib/active_record/associations/has_one_association.rb#95
  def remove_target!(method); end

  # source://activerecord//lib/active_record/associations/has_one_association.rb#59
  def replace(record, save = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/associations/has_one_association.rb#91
  def set_new_record(record); end

  # source://activerecord//lib/active_record/associations/has_one_association.rb#125
  def transaction_if(value, &block); end
end

# source://activerecord//lib/active_record/associations/has_one_through_association.rb#6
class ActiveRecord::Associations::HasOneThroughAssociation < ::ActiveRecord::Associations::HasOneAssociation
  include ::ActiveRecord::Associations::ThroughAssociation

  private

  # source://activerecord//lib/active_record/associations/has_one_through_association.rb#15
  def create_through_record(record, save); end

  # source://activerecord//lib/active_record/associations/has_one_through_association.rb#10
  def replace(record, save = T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/associations/join_dependency.rb#5
class ActiveRecord::Associations::JoinDependency
  extend ::ActiveSupport::Autoload

  # source://activerecord//lib/active_record/associations/join_dependency.rb#71
  def initialize(base, table, associations, join_type); end

  # source://activerecord//lib/active_record/associations/join_dependency.rb#153
  def apply_column_aliases(relation); end

  # source://activerecord//lib/active_record/associations/join_dependency.rb#77
  def base_klass; end

  # source://activerecord//lib/active_record/associations/join_dependency.rb#158
  def each(&block); end

  # source://activerecord//lib/active_record/associations/join_dependency.rb#105
  def instantiate(result_set, strict_loading_value, &block); end

  # source://activerecord//lib/active_record/associations/join_dependency.rb#85
  def join_constraints(joins_to_add, alias_tracker, references); end

  # source://activerecord//lib/active_record/associations/join_dependency.rb#81
  def reflections; end

  protected

  # source://activerecord//lib/active_record/associations/join_dependency.rb#163
  def join_root; end

  # source://activerecord//lib/active_record/associations/join_dependency.rb#163
  def join_type; end

  private

  # source://activerecord//lib/active_record/associations/join_dependency.rb#166
  def alias_tracker; end

  # source://activerecord//lib/active_record/associations/join_dependency.rb#168
  def aliases; end

  # source://activerecord//lib/active_record/associations/join_dependency.rb#228
  def build(associations, base_klass); end

  # source://activerecord//lib/active_record/associations/join_dependency.rb#242
  def construct(ar_parent, parent, row, seen, model_cache, strict_loading_value); end

  # source://activerecord//lib/active_record/associations/join_dependency.rb#278
  def construct_model(record, node, row, model_cache, id, strict_loading_value); end

  # source://activerecord//lib/active_record/associations/join_dependency.rb#223
  def find_reflection(klass, name); end

  # source://activerecord//lib/active_record/associations/join_dependency.rb#166
  def join_root_alias; end

  # source://activerecord//lib/active_record/associations/join_dependency.rb#190
  def make_constraints(parent, child, join_type); end

  # source://activerecord//lib/active_record/associations/join_dependency.rb#184
  def make_join_constraints(join_root, join_type); end

  # source://activerecord//lib/active_record/associations/join_dependency.rb#214
  def walk(left, right, join_type); end

  class << self
    # source://activerecord//lib/active_record/associations/join_dependency.rb#47
    def make_tree(associations); end

    # source://activerecord//lib/active_record/associations/join_dependency.rb#53
    def walk_tree(associations, hash); end
  end
end

# source://activerecord//lib/active_record/associations/join_dependency.rb#13
class ActiveRecord::Associations::JoinDependency::Aliases
  # source://activerecord//lib/active_record/associations/join_dependency.rb#14
  def initialize(tables); end

  # source://activerecord//lib/active_record/associations/join_dependency.rb#34
  def column_alias(node, column); end

  # source://activerecord//lib/active_record/associations/join_dependency.rb#30
  def column_aliases(node); end

  # source://activerecord//lib/active_record/associations/join_dependency.rb#26
  def columns; end
end

# source://activerecord//lib/active_record/associations/join_dependency.rb#44
class ActiveRecord::Associations::JoinDependency::Aliases::Column < ::Struct
  def alias; end
  def alias=(_); end
  def name; end
  def name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activerecord//lib/active_record/associations/join_dependency.rb#38
class ActiveRecord::Associations::JoinDependency::Aliases::Table < ::Struct
  # source://activerecord//lib/active_record/associations/join_dependency.rb#39
  def column_aliases; end

  def columns; end
  def columns=(_); end
  def node; end
  def node=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activerecord//lib/active_record/associations/join_dependency/join_association.rb#9
class ActiveRecord::Associations::JoinDependency::JoinAssociation < ::ActiveRecord::Associations::JoinDependency::JoinPart
  # source://activerecord//lib/active_record/associations/join_dependency/join_association.rb#13
  def initialize(reflection, children); end

  # source://activerecord//lib/active_record/associations/join_dependency/join_association.rb#24
  def join_constraints(foreign_table, foreign_klass, join_type, alias_tracker); end

  # source://activerecord//lib/active_record/associations/join_dependency/join_association.rb#19
  def match?(other); end

  # source://activerecord//lib/active_record/associations/join_dependency/join_association.rb#81
  def readonly?; end

  # source://activerecord//lib/active_record/associations/join_dependency/join_association.rb#10
  def reflection; end

  # source://activerecord//lib/active_record/associations/join_dependency/join_association.rb#87
  def strict_loading?; end

  # source://activerecord//lib/active_record/associations/join_dependency/join_association.rb#11
  def table; end

  # source://activerecord//lib/active_record/associations/join_dependency/join_association.rb#11
  def table=(_arg0); end

  # source://activerecord//lib/active_record/associations/join_dependency/join_association.rb#10
  def tables; end

  private

  # source://activerecord//lib/active_record/associations/join_dependency/join_association.rb#94
  def append_constraints(connection, join, constraints); end
end

# source://activerecord//lib/active_record/associations/join_dependency/join_base.rb#8
class ActiveRecord::Associations::JoinDependency::JoinBase < ::ActiveRecord::Associations::JoinDependency::JoinPart
  # source://activerecord//lib/active_record/associations/join_dependency/join_base.rb#11
  def initialize(base_klass, table, children); end

  # source://activerecord//lib/active_record/associations/join_dependency/join_base.rb#16
  def match?(other); end

  # source://activerecord//lib/active_record/associations/join_dependency/join_base.rb#9
  def table; end
end

# source://activerecord//lib/active_record/associations/join_dependency/join_part.rb#12
class ActiveRecord::Associations::JoinDependency::JoinPart
  include ::Enumerable

  # source://activerecord//lib/active_record/associations/join_dependency/join_part.rb#22
  def initialize(base_klass, children); end

  # source://activerecord//lib/active_record/associations/join_dependency/join_part.rb#20
  def attribute_types(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/join_dependency/join_part.rb#18
  def base_klass; end

  # source://activerecord//lib/active_record/associations/join_dependency/join_part.rb#18
  def children; end

  # source://activerecord//lib/active_record/associations/join_dependency/join_part.rb#20
  def column_names(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/join_dependency/join_part.rb#31
  def each(&block); end

  # source://activerecord//lib/active_record/associations/join_dependency/join_part.rb#36
  def each_children(&block); end

  # source://activerecord//lib/active_record/associations/join_dependency/join_part.rb#48
  def extract_record(row, column_names_with_alias); end

  # source://activerecord//lib/active_record/associations/join_dependency/join_part.rb#65
  def instantiate(row, aliases, column_types = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/associations/join_dependency/join_part.rb#27
  def match?(other); end

  # source://activerecord//lib/active_record/associations/join_dependency/join_part.rb#20
  def primary_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/associations/join_dependency/join_part.rb#44
  def table; end

  # source://activerecord//lib/active_record/associations/join_dependency/join_part.rb#20
  def table_name(*_arg0, **_arg1, &_arg2); end
end

# source://activerecord//lib/active_record/associations/nested_error.rb#7
class ActiveRecord::Associations::NestedError < ::ActiveModel::NestedError
  # source://activerecord//lib/active_record/associations/nested_error.rb#8
  def initialize(association, inner_error); end

  private

  # source://activerecord//lib/active_record/associations/nested_error.rb#16
  def association; end

  # source://activerecord//lib/active_record/associations/nested_error.rb#18
  def compute_attribute(inner_error); end

  # source://activerecord//lib/active_record/associations/nested_error.rb#33
  def index; end

  # source://activerecord//lib/active_record/associations/nested_error.rb#28
  def index_errors_setting; end

  # source://activerecord//lib/active_record/associations/nested_error.rb#37
  def ordered_records; end
end

# source://activerecord//lib/active_record/associations/preloader.rb#46
class ActiveRecord::Associations::Preloader
  extend ::ActiveSupport::Autoload

  # source://activerecord//lib/active_record/associations/preloader.rb#99
  def initialize(records:, associations:, scope: T.unsafe(nil), available_records: T.unsafe(nil), associate_by_default: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/associations/preloader.rb#56
  def associate_by_default; end

  # source://activerecord//lib/active_record/associations/preloader.rb#56
  def associations; end

  # source://activerecord//lib/active_record/associations/preloader.rb#126
  def branches; end

  # source://activerecord//lib/active_record/associations/preloader.rb#120
  def call; end

  # source://activerecord//lib/active_record/associations/preloader.rb#116
  def empty?; end

  # source://activerecord//lib/active_record/associations/preloader.rb#130
  def loaders; end

  # source://activerecord//lib/active_record/associations/preloader.rb#56
  def records; end

  # source://activerecord//lib/active_record/associations/preloader.rb#56
  def scope; end
end

# source://activerecord//lib/active_record/associations/preloader/association.rb#8
class ActiveRecord::Associations::Preloader::Association
  # source://activerecord//lib/active_record/associations/preloader/association.rb#104
  def initialize(klass, owners, reflection, preload_scope, reflection_scope, associate_by_default); end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#218
  def associate_records_from_unscoped(unscoped_records); end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#161
  def association_key_name; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#119
  def future_classes; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#102
  def klass; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#197
  def load_records(raw_records = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#176
  def loaded?(owner); end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#165
  def loader_query; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#169
  def owners_by_key; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#154
  def preloaded_records; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#148
  def records_by_owner; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#135
  def run; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#131
  def run?; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#127
  def runnable_loaders; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#184
  def scope; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#188
  def set_inverse(record); end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#115
  def table_name; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#180
  def target_for(owner); end

  private

  # source://activerecord//lib/active_record/associations/preloader/association.rb#245
  def associate_records_to_owner(owner, records); end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#282
  def association_key_type; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#294
  def build_scope; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#310
  def cascade_strict_loading(scope); end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#274
  def convert_key(key); end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#266
  def derive_key(owner, key); end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#258
  def key_conversion_required?; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#238
  def model; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#241
  def owner_key_name; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#286
  def owner_key_type; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#238
  def owners; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#238
  def preload_scope; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#238
  def reflection; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#290
  def reflection_scope; end
end

# source://activerecord//lib/active_record/associations/preloader/association.rb#9
class ActiveRecord::Associations::Preloader::Association::LoaderQuery
  # source://activerecord//lib/active_record/associations/preloader/association.rb#12
  def initialize(scope, association_key_name); end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#10
  def association_key_name; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#17
  def eql?(other); end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#24
  def hash; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#41
  def load_records_for_keys(keys, &block); end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#32
  def load_records_in_batch(loaders); end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#28
  def records_for(loaders); end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#10
  def scope; end
end

# source://activerecord//lib/active_record/associations/preloader/association.rb#60
class ActiveRecord::Associations::Preloader::Association::LoaderRecords
  # source://activerecord//lib/active_record/associations/preloader/association.rb#61
  def initialize(loaders, loader_query); end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#70
  def records; end

  private

  # source://activerecord//lib/active_record/associations/preloader/association.rb#97
  def already_loaded_records; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#75
  def already_loaded_records_by_key; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#75
  def keys_to_load; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#91
  def load_records; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#75
  def loader_query; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#75
  def loaders; end

  # source://activerecord//lib/active_record/associations/preloader/association.rb#77
  def populate_keys_to_load_and_already_loaded_records; end
end

# source://activerecord//lib/active_record/associations/preloader/batch.rb#6
class ActiveRecord::Associations::Preloader::Batch
  # source://activerecord//lib/active_record/associations/preloader/batch.rb#7
  def initialize(preloaders, available_records:); end

  # source://activerecord//lib/active_record/associations/preloader/batch.rb#12
  def call; end

  private

  # source://activerecord//lib/active_record/associations/preloader/batch.rb#40
  def group_and_load_similar(loaders); end

  # source://activerecord//lib/active_record/associations/preloader/batch.rb#38
  def loaders; end
end

# source://activerecord//lib/active_record/associations/preloader/branch.rb#6
class ActiveRecord::Associations::Preloader::Branch
  # source://activerecord//lib/active_record/associations/preloader/branch.rb#11
  def initialize(association:, children:, parent:, associate_by_default:, scope:); end

  # source://activerecord//lib/active_record/associations/preloader/branch.rb#8
  def associate_by_default; end

  # source://activerecord//lib/active_record/associations/preloader/branch.rb#7
  def association; end

  # source://activerecord//lib/active_record/associations/preloader/branch.rb#7
  def children; end

  # source://activerecord//lib/active_record/associations/preloader/branch.rb#72
  def done?; end

  # source://activerecord//lib/active_record/associations/preloader/branch.rb#27
  def future_classes; end

  # source://activerecord//lib/active_record/associations/preloader/branch.rb#80
  def grouped_records; end

  # source://activerecord//lib/active_record/associations/preloader/branch.rb#31
  def immediate_future_classes; end

  # source://activerecord//lib/active_record/associations/preloader/branch.rb#53
  def likely_reflections; end

  # source://activerecord//lib/active_record/associations/preloader/branch.rb#118
  def loaders; end

  # source://activerecord//lib/active_record/associations/preloader/branch.rb#7
  def parent; end

  # source://activerecord//lib/active_record/associations/preloader/branch.rb#108
  def polymorphic?; end

  # source://activerecord//lib/active_record/associations/preloader/branch.rb#68
  def preloaded_records; end

  # source://activerecord//lib/active_record/associations/preloader/branch.rb#9
  def preloaded_records=(_arg0); end

  # source://activerecord//lib/active_record/associations/preloader/branch.rb#91
  def preloaders_for_reflection(reflection, reflection_records); end

  # source://activerecord//lib/active_record/associations/preloader/branch.rb#60
  def root?; end

  # source://activerecord//lib/active_record/associations/preloader/branch.rb#76
  def runnable_loaders; end

  # source://activerecord//lib/active_record/associations/preloader/branch.rb#8
  def scope; end

  # source://activerecord//lib/active_record/associations/preloader/branch.rb#64
  def source_records; end

  # source://activerecord//lib/active_record/associations/preloader/branch.rb#43
  def target_classes; end

  private

  # source://activerecord//lib/active_record/associations/preloader/branch.rb#126
  def build_children(children); end

  # source://activerecord//lib/active_record/associations/preloader/branch.rb#143
  def preloader_for(reflection); end
end

# source://activerecord//lib/active_record/associations/preloader/through_association.rb#6
class ActiveRecord::Associations::Preloader::ThroughAssociation < ::ActiveRecord::Associations::Preloader::Association
  # source://activerecord//lib/active_record/associations/preloader/through_association.rb#49
  def future_classes; end

  # source://activerecord//lib/active_record/associations/preloader/through_association.rb#7
  def preloaded_records; end

  # source://activerecord//lib/active_record/associations/preloader/through_association.rb#11
  def records_by_owner; end

  # source://activerecord//lib/active_record/associations/preloader/through_association.rb#39
  def runnable_loaders; end

  private

  # source://activerecord//lib/active_record/associations/preloader/through_association.rb#65
  def data_available?; end

  # source://activerecord//lib/active_record/associations/preloader/through_association.rb#74
  def middle_records; end

  # source://activerecord//lib/active_record/associations/preloader/through_association.rb#98
  def preload_index; end

  # source://activerecord//lib/active_record/associations/preloader/through_association.rb#70
  def source_preloaders; end

  # source://activerecord//lib/active_record/associations/preloader/through_association.rb#90
  def source_records_by_owner; end

  # source://activerecord//lib/active_record/associations/preloader/through_association.rb#86
  def source_reflection; end

  # source://activerecord//lib/active_record/associations/preloader/through_association.rb#78
  def through_preloaders; end

  # source://activerecord//lib/active_record/associations/preloader/through_association.rb#94
  def through_records_by_owner; end

  # source://activerecord//lib/active_record/associations/preloader/through_association.rb#82
  def through_reflection; end

  # source://activerecord//lib/active_record/associations/preloader/through_association.rb#104
  def through_scope; end
end

# source://activerecord//lib/active_record/associations/singular_association.rb#6
class ActiveRecord::Associations::SingularAssociation < ::ActiveRecord::Associations::Association
  # source://activerecord//lib/active_record/associations/singular_association.rb#28
  def build(attributes = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/associations/singular_association.rb#36
  def force_reload_reader; end

  # source://activerecord//lib/active_record/associations/singular_association.rb#7
  def reader; end

  # source://activerecord//lib/active_record/associations/singular_association.rb#18
  def reset; end

  # source://activerecord//lib/active_record/associations/singular_association.rb#24
  def writer(record); end

  private

  # source://activerecord//lib/active_record/associations/singular_association.rb#62
  def _create_record(attributes, raise_error = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/associations/singular_association.rb#46
  def find_target; end

  # source://activerecord//lib/active_record/associations/singular_association.rb#54
  def replace(record); end

  # source://activerecord//lib/active_record/associations/singular_association.rb#42
  def scope_for_create; end

  # source://activerecord//lib/active_record/associations/singular_association.rb#58
  def set_new_record(record); end
end

# source://activerecord//lib/active_record/associations/through_association.rb#6
module ActiveRecord::Associations::ThroughAssociation
  # source://activerecord//lib/active_record/associations/through_association.rb#7
  def source_reflection(*_arg0, **_arg1, &_arg2); end

  private

  # source://activerecord//lib/active_record/associations/through_association.rb#116
  def build_record(attributes); end

  # source://activerecord//lib/active_record/associations/through_association.rb#57
  def construct_join_attributes(*records); end

  # source://activerecord//lib/active_record/associations/through_association.rb#96
  def ensure_mutable; end

  # source://activerecord//lib/active_record/associations/through_association.rb#106
  def ensure_not_nested; end

  # source://activerecord//lib/active_record/associations/through_association.rb#90
  def foreign_key_present?; end

  # source://activerecord//lib/active_record/associations/through_association.rb#82
  def stale_state; end

  # source://activerecord//lib/active_record/associations/through_association.rb#34
  def target_scope; end

  # source://activerecord//lib/active_record/associations/through_association.rb#26
  def through_association; end

  # source://activerecord//lib/active_record/associations/through_association.rb#14
  def through_reflection; end

  # source://activerecord//lib/active_record/associations/through_association.rb#10
  def transaction(&block); end
end

# source://activerecord//lib/active_record/asynchronous_queries_tracker.rb#4
class ActiveRecord::AsynchronousQueriesTracker
  # source://activerecord//lib/active_record/asynchronous_queries_tracker.rb#46
  def initialize; end

  # source://activerecord//lib/active_record/asynchronous_queries_tracker.rb#44
  def current_session; end

  # source://activerecord//lib/active_record/asynchronous_queries_tracker.rb#55
  def finalize_session; end

  # source://activerecord//lib/active_record/asynchronous_queries_tracker.rb#50
  def start_session; end

  class << self
    # source://activerecord//lib/active_record/asynchronous_queries_tracker.rb#39
    def complete(asynchronous_queries_tracker); end

    # source://activerecord//lib/active_record/asynchronous_queries_tracker.rb#31
    def install_executor_hooks(executor = T.unsafe(nil)); end

    # source://activerecord//lib/active_record/asynchronous_queries_tracker.rb#35
    def run; end
  end
end

# source://activerecord//lib/active_record/asynchronous_queries_tracker.rb#5
module ActiveRecord::AsynchronousQueriesTracker::NullSession
  class << self
    # source://activerecord//lib/active_record/asynchronous_queries_tracker.rb#7
    def active?; end

    # source://activerecord//lib/active_record/asynchronous_queries_tracker.rb#11
    def finalize; end
  end
end

# source://activerecord//lib/active_record/asynchronous_queries_tracker.rb#16
class ActiveRecord::AsynchronousQueriesTracker::Session
  # source://activerecord//lib/active_record/asynchronous_queries_tracker.rb#17
  def initialize; end

  # source://activerecord//lib/active_record/asynchronous_queries_tracker.rb#21
  def active?; end

  # source://activerecord//lib/active_record/asynchronous_queries_tracker.rb#25
  def finalize; end
end

# source://activerecord//lib/active_record/errors.rb#528
class ActiveRecord::AsynchronousQueryInsideTransactionError < ::ActiveRecord::ActiveRecordError; end

# source://activerecord//lib/active_record/attribute_assignment.rb#4
module ActiveRecord::AttributeAssignment
  private

  # source://activerecord//lib/active_record/attribute_assignment.rb#6
  def _assign_attributes(attributes); end

  # source://activerecord//lib/active_record/attribute_assignment.rb#36
  def assign_multiparameter_attributes(pairs); end

  # source://activerecord//lib/active_record/attribute_assignment.rb#26
  def assign_nested_parameter_attributes(pairs); end

  # source://activerecord//lib/active_record/attribute_assignment.rb#42
  def execute_callstack_for_multiparameter_attributes(callstack); end

  # source://activerecord//lib/active_record/attribute_assignment.rb#60
  def extract_callstack_for_multiparameter_attributes(pairs); end

  # source://activerecord//lib/active_record/attribute_assignment.rb#78
  def find_parameter_position(multiparameter_name); end

  # source://activerecord//lib/active_record/attribute_assignment.rb#74
  def type_cast_attribute_value(multiparameter_name, value); end
end

# source://activerecord//lib/active_record/errors.rb#436
class ActiveRecord::AttributeAssignmentError < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/errors.rb#439
  def initialize(message = T.unsafe(nil), exception = T.unsafe(nil), attribute = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/errors.rb#437
  def attribute; end

  # source://activerecord//lib/active_record/errors.rb#437
  def exception; end
end

# source://activerecord//lib/active_record/attribute_methods.rb#7
module ActiveRecord::AttributeMethods
  extend ::ActiveSupport::Concern
  extend ::ActiveSupport::Autoload
  include GeneratedInstanceMethods
  include ::ActiveModel::AttributeMethods
  include ::ActiveRecord::AttributeMethods::Read
  include ::ActiveRecord::AttributeMethods::Write
  include ::ActiveRecord::AttributeMethods::BeforeTypeCast
  include ::ActiveRecord::AttributeMethods::Query
  include ::ActiveRecord::AttributeMethods::PrimaryKey
  include ::ActiveRecord::AttributeMethods::TimeZoneConversion
  include ::ActiveModel::Dirty
  include ::ActiveRecord::AttributeMethods::Dirty
  include ::ActiveRecord::AttributeMethods::Serialization

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeMethods::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Read::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Write::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Serialization::ClassMethods

  # source://activerecord//lib/active_record/attribute_methods.rb#414
  def [](attr_name); end

  # source://activerecord//lib/active_record/attribute_methods.rb#427
  def []=(attr_name, value); end

  # source://activerecord//lib/active_record/attribute_methods.rb#321
  def _has_attribute?(attr_name); end

  # source://activerecord//lib/active_record/attribute_methods.rb#459
  def accessed_fields; end

  # source://activerecord//lib/active_record/attribute_methods.rb#364
  def attribute_for_inspect(attr_name); end

  # source://activerecord//lib/active_record/attribute_methods.rb#333
  def attribute_names; end

  # source://activerecord//lib/active_record/attribute_methods.rb#386
  def attribute_present?(attr_name); end

  # source://activerecord//lib/active_record/attribute_methods.rb#345
  def attributes; end

  # source://activerecord//lib/active_record/attribute_methods.rb#315
  def has_attribute?(attr_name); end

  # source://activerecord//lib/active_record/attribute_methods.rb#290
  def respond_to?(name, include_private = T.unsafe(nil)); end

  private

  # source://activerecord//lib/active_record/attribute_methods.rb#494
  def attribute_method?(attr_name); end

  # source://activerecord//lib/active_record/attribute_methods.rb#514
  def attributes_for_create(attribute_names); end

  # source://activerecord//lib/active_record/attribute_methods.rb#503
  def attributes_for_update(attribute_names); end

  # source://activerecord//lib/active_record/attribute_methods.rb#498
  def attributes_with_values(attribute_names); end

  # source://activerecord//lib/active_record/attribute_methods.rb#522
  def format_for_inspect(name, value); end

  # source://activerecord//lib/active_record/attribute_methods.rb#474
  def method_missing(name, *_arg1, **_arg2, &_arg3); end

  # source://activerecord//lib/active_record/attribute_methods.rb#538
  def pk_attribute?(name); end

  # source://activerecord//lib/active_record/attribute_methods.rb#464
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end

  class << self
    # source://activerecord//lib/active_record/attribute_methods.rb#30
    def dangerous_attribute_methods; end
  end

  module GeneratedClassMethods
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_patterns; end
    def attribute_method_patterns=(value); end
    def attribute_method_patterns?; end
    def default_column_serializer; end
    def default_column_serializer=(value); end
    def default_column_serializer?; end
    def partial_inserts; end
    def partial_inserts=(value); end
    def partial_inserts?; end
    def partial_updates; end
    def partial_updates=(value); end
    def partial_updates?; end
    def skip_time_zone_conversion_for_attributes; end
    def skip_time_zone_conversion_for_attributes=(value); end
    def skip_time_zone_conversion_for_attributes?; end
    def time_zone_aware_attributes; end
    def time_zone_aware_attributes=(value); end
    def time_zone_aware_attributes?; end
    def time_zone_aware_types; end
    def time_zone_aware_types=(value); end
    def time_zone_aware_types?; end
  end

  module GeneratedInstanceMethods
    def attribute_aliases; end
    def attribute_aliases?; end
    def attribute_method_patterns; end
    def attribute_method_patterns?; end
    def partial_inserts; end
    def partial_inserts?; end
    def partial_updates; end
    def partial_updates?; end
    def skip_time_zone_conversion_for_attributes; end
    def skip_time_zone_conversion_for_attributes?; end
    def time_zone_aware_attributes; end
    def time_zone_aware_attributes?; end
    def time_zone_aware_types; end
    def time_zone_aware_types?; end
  end
end

# source://activerecord//lib/active_record/attribute_methods/before_type_cast.rb#28
module ActiveRecord::AttributeMethods::BeforeTypeCast
  extend ::ActiveSupport::Concern

  # source://activerecord//lib/active_record/attribute_methods/before_type_cast.rb#82
  def attributes_before_type_cast; end

  # source://activerecord//lib/active_record/attribute_methods/before_type_cast.rb#87
  def attributes_for_database; end

  # source://activerecord//lib/active_record/attribute_methods/before_type_cast.rb#48
  def read_attribute_before_type_cast(attr_name); end

  # source://activerecord//lib/active_record/attribute_methods/before_type_cast.rb#65
  def read_attribute_for_database(attr_name); end

  private

  # source://activerecord//lib/active_record/attribute_methods/before_type_cast.rb#93
  def attribute_before_type_cast(attr_name); end

  # source://activerecord//lib/active_record/attribute_methods/before_type_cast.rb#101
  def attribute_came_from_user?(attr_name); end

  # source://activerecord//lib/active_record/attribute_methods/before_type_cast.rb#97
  def attribute_for_database(attr_name); end
end

# source://activerecord//lib/active_record/attribute_methods.rb#41
module ActiveRecord::AttributeMethods::ClassMethods
  # source://activerecord//lib/active_record/attribute_methods.rb#259
  def _has_attribute?(attr_name); end

  # source://activerecord//lib/active_record/attribute_methods.rb#66
  def alias_attribute(new_name, old_name); end

  # source://activerecord//lib/active_record/attribute_methods.rb#87
  def alias_attribute_method_definition(code_generator, pattern, new_name, old_name); end

  # source://activerecord//lib/active_record/attribute_methods.rb#223
  def attribute_method?(attribute); end

  # source://activerecord//lib/active_record/attribute_methods.rb#98
  def attribute_methods_generated?; end

  # source://activerecord//lib/active_record/attribute_methods.rb#235
  def attribute_names; end

  # source://activerecord//lib/active_record/attribute_methods.rb#182
  def dangerous_attribute_method?(name); end

  # source://activerecord//lib/active_record/attribute_methods.rb#200
  def dangerous_class_method?(method_name); end

  # source://activerecord//lib/active_record/attribute_methods.rb#104
  def define_attribute_methods; end

  # source://activerecord//lib/active_record/attribute_methods.rb#76
  def eagerly_generate_alias_attribute_methods(_new_name, _old_name); end

  # source://activerecord//lib/active_record/attribute_methods.rb#80
  def generate_alias_attribute_methods(code_generator, new_name, old_name); end

  # source://activerecord//lib/active_record/attribute_methods.rb#126
  def generate_alias_attributes; end

  # source://activerecord//lib/active_record/attribute_methods.rb#253
  def has_attribute?(attr_name); end

  # source://activerecord//lib/active_record/attribute_methods.rb#42
  def initialize_generated_modules; end

  # source://activerecord//lib/active_record/attribute_methods.rb#164
  def instance_method_already_implemented?(method_name); end

  # source://activerecord//lib/active_record/attribute_methods.rb#186
  def method_defined_within?(name, klass, superklass = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/attribute_methods.rb#142
  def undefine_attribute_methods; end

  private

  # source://activerecord//lib/active_record/attribute_methods.rb#264
  def inherited(child_class); end
end

# source://activerecord//lib/active_record/attribute_methods/composite_primary_key.rb#5
module ActiveRecord::AttributeMethods::CompositePrimaryKey
  # source://activerecord//lib/active_record/attribute_methods/composite_primary_key.rb#8
  def id; end

  # source://activerecord//lib/active_record/attribute_methods/composite_primary_key.rb#26
  def id=(value); end

  # source://activerecord//lib/active_record/attribute_methods/composite_primary_key.rb#37
  def id?; end

  # source://activerecord//lib/active_record/attribute_methods/composite_primary_key.rb#47
  def id_before_type_cast; end

  # source://activerecord//lib/active_record/attribute_methods/composite_primary_key.rb#75
  def id_for_database; end

  # source://activerecord//lib/active_record/attribute_methods/composite_primary_key.rb#67
  def id_in_database; end

  # source://activerecord//lib/active_record/attribute_methods/composite_primary_key.rb#57
  def id_was; end

  # source://activerecord//lib/active_record/attribute_methods/composite_primary_key.rb#16
  def primary_key_values_present?; end
end

# source://activerecord//lib/active_record/attribute_methods/dirty.rb#39
module ActiveRecord::AttributeMethods::Dirty
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveModel::AttributeMethods
  include ::ActiveModel::Dirty

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeMethods::ClassMethods

  # source://activerecord//lib/active_record/attribute_methods/dirty.rb#108
  def attribute_before_last_save(attr_name); end

  # source://activerecord//lib/active_record/attribute_methods/dirty.rb#152
  def attribute_change_to_be_saved(attr_name); end

  # source://activerecord//lib/active_record/attribute_methods/dirty.rb#164
  def attribute_in_database(attr_name); end

  # source://activerecord//lib/active_record/attribute_methods/dirty.rb#191
  def attributes_in_database; end

  # source://activerecord//lib/active_record/attribute_methods/dirty.rb#181
  def changed_attribute_names_to_save; end

  # source://activerecord//lib/active_record/attribute_methods/dirty.rb#175
  def changes_to_save; end

  # source://activerecord//lib/active_record/attribute_methods/dirty.rb#169
  def has_changes_to_save?; end

  # source://activerecord//lib/active_record/attribute_methods/dirty.rb#63
  def reload(*_arg0); end

  # source://activerecord//lib/active_record/attribute_methods/dirty.rb#98
  def saved_change_to_attribute(attr_name); end

  # source://activerecord//lib/active_record/attribute_methods/dirty.rb#86
  def saved_change_to_attribute?(attr_name, **options); end

  # source://activerecord//lib/active_record/attribute_methods/dirty.rb#118
  def saved_changes; end

  # source://activerecord//lib/active_record/attribute_methods/dirty.rb#113
  def saved_changes?; end

  # source://activerecord//lib/active_record/attribute_methods/dirty.rb#138
  def will_save_change_to_attribute?(attr_name, **options); end

  private

  # source://activerecord//lib/active_record/attribute_methods/dirty.rb#239
  def _create_record(attribute_names = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/attribute_methods/dirty.rb#204
  def _touch_row(attribute_names, time); end

  # source://activerecord//lib/active_record/attribute_methods/dirty.rb#233
  def _update_record(attribute_names = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/attribute_methods/dirty.rb#249
  def attribute_names_for_partial_inserts; end

  # source://activerecord//lib/active_record/attribute_methods/dirty.rb#245
  def attribute_names_for_partial_updates; end

  # source://activerecord//lib/active_record/attribute_methods/dirty.rb#196
  def init_internals; end

  module GeneratedClassMethods
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_patterns; end
    def attribute_method_patterns=(value); end
    def attribute_method_patterns?; end
    def partial_inserts; end
    def partial_inserts=(value); end
    def partial_inserts?; end
    def partial_updates; end
    def partial_updates=(value); end
    def partial_updates?; end
  end

  module GeneratedInstanceMethods
    def attribute_aliases; end
    def attribute_aliases?; end
    def attribute_method_patterns; end
    def attribute_method_patterns?; end
    def partial_inserts; end
    def partial_inserts?; end
    def partial_updates; end
    def partial_updates?; end
  end
end

# source://activerecord//lib/active_record/attribute_methods.rb#25
class ActiveRecord::AttributeMethods::GeneratedAttributeMethods < ::Module; end

# source://activerecord//lib/active_record/attribute_methods.rb#26
ActiveRecord::AttributeMethods::GeneratedAttributeMethods::LOCK = T.let(T.unsafe(nil), Monitor)

# source://activerecord//lib/active_record/attribute_methods/primary_key.rb#8
module ActiveRecord::AttributeMethods::PrimaryKey
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods

  # source://activerecord//lib/active_record/attribute_methods/primary_key.rb#20
  def id; end

  # source://activerecord//lib/active_record/attribute_methods/primary_key.rb#30
  def id=(value); end

  # source://activerecord//lib/active_record/attribute_methods/primary_key.rb#36
  def id?; end

  # source://activerecord//lib/active_record/attribute_methods/primary_key.rb#42
  def id_before_type_cast; end

  # source://activerecord//lib/active_record/attribute_methods/primary_key.rb#58
  def id_for_database; end

  # source://activerecord//lib/active_record/attribute_methods/primary_key.rb#54
  def id_in_database; end

  # source://activerecord//lib/active_record/attribute_methods/primary_key.rb#48
  def id_was; end

  # source://activerecord//lib/active_record/attribute_methods/primary_key.rb#24
  def primary_key_values_present?; end

  # source://activerecord//lib/active_record/attribute_methods/primary_key.rb#13
  def to_key; end

  private

  # source://activerecord//lib/active_record/attribute_methods/primary_key.rb#63
  def attribute_method?(attr_name); end
end

# source://activerecord//lib/active_record/attribute_methods/primary_key.rb#67
module ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods
  # source://activerecord//lib/active_record/attribute_methods/primary_key.rb#87
  def composite_primary_key?; end

  # source://activerecord//lib/active_record/attribute_methods/primary_key.rb#75
  def dangerous_attribute_method?(method_name); end

  # source://activerecord//lib/active_record/attribute_methods/primary_key.rb#106
  def get_primary_key(base_name); end

  # source://activerecord//lib/active_record/attribute_methods/primary_key.rb#71
  def instance_method_already_implemented?(method_name); end

  # source://activerecord//lib/active_record/attribute_methods/primary_key.rb#82
  def primary_key; end

  # source://activerecord//lib/active_record/attribute_methods/primary_key.rb#133
  def primary_key=(value); end

  # source://activerecord//lib/active_record/attribute_methods/primary_key.rb#94
  def quoted_primary_key; end

  # source://activerecord//lib/active_record/attribute_methods/primary_key.rb#98
  def reset_primary_key; end

  private

  # source://activerecord//lib/active_record/attribute_methods/primary_key.rb#146
  def inherited(base); end
end

# source://activerecord//lib/active_record/attribute_methods/primary_key.rb#68
ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods::ID_ATTRIBUTE_METHODS = T.let(T.unsafe(nil), Set)

# source://activerecord//lib/active_record/attribute_methods/primary_key.rb#69
ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods::PRIMARY_KEY_NOT_SET = T.let(T.unsafe(nil), BasicObject)

# source://activerecord//lib/active_record/attribute_methods/query.rb#6
module ActiveRecord::AttributeMethods::Query
  extend ::ActiveSupport::Concern

  # source://activerecord//lib/active_record/attribute_methods/query.rb#19
  def _query_attribute(attr_name); end

  # source://activerecord//lib/active_record/attribute_methods/query.rb#13
  def query_attribute(attr_name); end

  private

  # source://activerecord//lib/active_record/attribute_methods/query.rb#13
  def attribute?(attr_name); end

  # source://activerecord//lib/active_record/attribute_methods/query.rb#29
  def query_cast_attribute(attr_name, value); end
end

# source://activerecord//lib/active_record/attribute_methods.rb#23
ActiveRecord::AttributeMethods::RESTRICTED_CLASS_METHODS = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/active_record/attribute_methods/read.rb#6
module ActiveRecord::AttributeMethods::Read
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Read::ClassMethods

  # source://activerecord//lib/active_record/attribute_methods/read.rb#38
  def _read_attribute(attr_name, &block); end

  # source://activerecord//lib/active_record/attribute_methods/read.rb#29
  def read_attribute(attr_name, &block); end

  private

  # source://activerecord//lib/active_record/attribute_methods/read.rb#38
  def attribute(attr_name, &block); end
end

# source://activerecord//lib/active_record/attribute_methods/read.rb#9
module ActiveRecord::AttributeMethods::Read::ClassMethods
  private

  # source://activerecord//lib/active_record/attribute_methods/read.rb#11
  def define_method_attribute(canonical_name, owner:, as: T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/attribute_methods/serialization.rb#6
module ActiveRecord::AttributeMethods::Serialization
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Serialization::ClassMethods

  module GeneratedClassMethods
    def default_column_serializer; end
    def default_column_serializer=(value); end
    def default_column_serializer?; end
  end

  module GeneratedInstanceMethods; end
end

# source://activerecord//lib/active_record/attribute_methods/serialization.rb#23
module ActiveRecord::AttributeMethods::Serialization::ClassMethods
  # source://activerecord//lib/active_record/attribute_methods/serialization.rb#183
  def serialize(attr_name, coder: T.unsafe(nil), type: T.unsafe(nil), yaml: T.unsafe(nil), **options); end

  private

  # source://activerecord//lib/active_record/attribute_methods/serialization.rb#208
  def build_column_serializer(attr_name, coder, type, yaml = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/attribute_methods/serialization.rb#225
  def type_incompatible_with_serialize?(cast_type, coder, type); end
end

# source://activerecord//lib/active_record/attribute_methods/serialization.rb#9
class ActiveRecord::AttributeMethods::Serialization::ColumnNotSerializableError < ::StandardError
  # source://activerecord//lib/active_record/attribute_methods/serialization.rb#10
  def initialize(name, type); end
end

# source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#7
module ActiveRecord::AttributeMethods::TimeZoneConversion
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods

  module GeneratedClassMethods
    def skip_time_zone_conversion_for_attributes; end
    def skip_time_zone_conversion_for_attributes=(value); end
    def skip_time_zone_conversion_for_attributes?; end
    def time_zone_aware_attributes; end
    def time_zone_aware_attributes=(value); end
    def time_zone_aware_attributes?; end
    def time_zone_aware_types; end
    def time_zone_aware_types=(value); end
    def time_zone_aware_types?; end
  end

  module GeneratedInstanceMethods
    def skip_time_zone_conversion_for_attributes; end
    def skip_time_zone_conversion_for_attributes?; end
    def time_zone_aware_attributes; end
    def time_zone_aware_attributes?; end
    def time_zone_aware_types; end
    def time_zone_aware_types?; end
  end
end

# source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#75
module ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods
  private

  # source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#85
  def create_time_zone_conversion_attribute?(name, cast_type); end

  # source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#77
  def hook_attribute_type(name, cast_type); end
end

# source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#8
class ActiveRecord::AttributeMethods::TimeZoneConversion::TimeZoneConverter
  # source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#35
  def ==(other); end

  # source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#17
  def cast(value); end

  # source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#13
  def deserialize(value); end

  private

  # source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#40
  def convert_time_to_time_zone(value); end

  # source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#56
  def map_avoiding_infinite_recursion(value); end

  # source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#52
  def set_time_zone_without_conversion(value); end

  class << self
    # source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#9
    def new(subtype); end
  end
end

# source://activerecord//lib/active_record/attribute_methods/write.rb#6
module ActiveRecord::AttributeMethods::Write
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Write::ClassMethods

  # source://activerecord//lib/active_record/attribute_methods/write.rb#41
  def _write_attribute(attr_name, value); end

  # source://activerecord//lib/active_record/attribute_methods/write.rb#31
  def write_attribute(attr_name, value); end

  private

  # source://activerecord//lib/active_record/attribute_methods/write.rb#41
  def attribute=(attr_name, value); end
end

# source://activerecord//lib/active_record/attribute_methods/write.rb#13
module ActiveRecord::AttributeMethods::Write::ClassMethods
  private

  # source://activerecord//lib/active_record/attribute_methods/write.rb#15
  def define_method_attribute=(canonical_name, owner:, as: T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/attributes.rb#7
module ActiveRecord::Attributes
  extend ::ActiveSupport::Concern
  include ::ActiveModel::AttributeRegistration

  mixes_in_class_methods ::ActiveModel::AttributeRegistration::ClassMethods
  mixes_in_class_methods ::ActiveRecord::Attributes::ClassMethods
end

# source://activerecord//lib/active_record/attributes.rb#12
module ActiveRecord::Attributes::ClassMethods
  # source://activerecord//lib/active_record/attributes.rb#241
  def _default_attributes; end

  # source://activerecord//lib/active_record/attributes.rb#231
  def define_attribute(name, cast_type, default: T.unsafe(nil), user_provided_default: T.unsafe(nil)); end

  protected

  # source://activerecord//lib/active_record/attributes.rb#268
  def reload_schema_from_cache(*_arg0); end

  private

  # source://activerecord//lib/active_record/attributes.rb#277
  def define_default_attribute(name, value, type, from_user:); end

  # source://activerecord//lib/active_record/attributes.rb#293
  def reset_default_attributes; end

  # source://activerecord//lib/active_record/attributes.rb#297
  def resolve_type_name(name, **options); end

  # source://activerecord//lib/active_record/attributes.rb#301
  def type_for_column(connection, column); end
end

# source://activerecord//lib/active_record/attributes.rb#274
ActiveRecord::Attributes::ClassMethods::NO_DEFAULT_PROVIDED = T.let(T.unsafe(nil), Object)

# source://activerecord//lib/active_record/autosave_association.rb#140
module ActiveRecord::AutosaveAssociation
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::AutosaveAssociation::ClassMethods

  # source://activerecord//lib/active_record/autosave_association.rb#273
  def changed_for_autosave?; end

  # source://activerecord//lib/active_record/autosave_association.rb#267
  def destroyed_by_association; end

  # source://activerecord//lib/active_record/autosave_association.rb#260
  def destroyed_by_association=(reflection); end

  # source://activerecord//lib/active_record/autosave_association.rb#247
  def mark_for_destruction; end

  # source://activerecord//lib/active_record/autosave_association.rb#254
  def marked_for_destruction?; end

  # source://activerecord//lib/active_record/autosave_association.rb#236
  def reload(options = T.unsafe(nil)); end

  private

  # source://activerecord//lib/active_record/autosave_association.rb#540
  def _ensure_no_duplicate_errors; end

  # source://activerecord//lib/active_record/autosave_association.rb#465
  def _record_changed?(reflection, record, key); end

  # source://activerecord//lib/active_record/autosave_association.rb#358
  def around_save_collection_association; end

  # source://activerecord//lib/active_record/autosave_association.rb#286
  def associated_records_to_validate_or_save(association, new_record, autosave); end

  # source://activerecord//lib/active_record/autosave_association.rb#472
  def association_foreign_key_changed?(reflection, record, key); end

  # source://activerecord//lib/active_record/autosave_association.rb#337
  def association_valid?(association, record); end

  # source://activerecord//lib/active_record/autosave_association.rb#524
  def compute_primary_key(reflection, record); end

  # source://activerecord//lib/active_record/autosave_association.rb#278
  def init_internals; end

  # source://activerecord//lib/active_record/autosave_association.rb#481
  def inverse_polymorphic_association_changed?(reflection, record); end

  # source://activerecord//lib/active_record/autosave_association.rb#299
  def nested_records_changed_for_autosave?; end

  # source://activerecord//lib/active_record/autosave_association.rb#492
  def save_belongs_to_association(reflection); end

  # source://activerecord//lib/active_record/autosave_association.rb#375
  def save_collection_association(reflection); end

  # source://activerecord//lib/active_record/autosave_association.rb#429
  def save_has_one_association(reflection); end

  # source://activerecord//lib/active_record/autosave_association.rb#326
  def validate_collection_association(reflection); end

  # source://activerecord//lib/active_record/autosave_association.rb#317
  def validate_single_association(reflection); end
end

# source://activerecord//lib/active_record/autosave_association.rb#143
module ActiveRecord::AutosaveAssociation::AssociationBuilderExtension
  class << self
    # source://activerecord//lib/active_record/autosave_association.rb#144
    def build(model, reflection); end

    # source://activerecord//lib/active_record/autosave_association.rb#148
    def valid_options; end
  end
end

# source://activerecord//lib/active_record/autosave_association.rb#157
module ActiveRecord::AutosaveAssociation::ClassMethods
  private

  # source://activerecord//lib/active_record/autosave_association.rb#189
  def add_autosave_association_callbacks(reflection); end

  # source://activerecord//lib/active_record/autosave_association.rb#219
  def define_autosave_validation_callbacks(reflection); end

  # source://activerecord//lib/active_record/autosave_association.rb#159
  def define_non_cyclic_method(name, &block); end
end

# source://activerecord//lib/active_record/base.rb#282
class ActiveRecord::Base
  include ::ActionText::Encryption
  include ::ActiveModel::Validations
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Conversion
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::API
  include ::ActiveModel::Access
  include ::ActiveRecord::Core
  include ::ActiveRecord::Persistence
  include ::ActiveRecord::ReadonlyAttributes
  include ::ActiveRecord::ModelSchema
  include ::ActiveRecord::Inheritance
  include ::ActiveRecord::Scoping
  include ::ActiveRecord::Scoping::Default
  include ::ActiveRecord::Scoping::Named
  include ::ActiveRecord::Sanitization
  include ::ActiveRecord::AttributeAssignment
  include ::ActiveRecord::Integration
  include ::ActiveRecord::Validations
  include ::ActiveRecord::CounterCache
  include ::ActiveModel::AttributeRegistration
  include ::ActiveRecord::Attributes
  include ::ActiveRecord::Locking::Optimistic
  include ::ActiveRecord::Locking::Pessimistic
  include ::ActiveRecord::Encryption::EncryptableRecord
  include ::ActiveModel::AttributeMethods
  include ::ActiveRecord::AttributeMethods
  include ::ActiveRecord::Base::GeneratedAttributeMethods
  include ::ActiveRecord::Base::GeneratedAssociationMethods
  include ::ActiveRecord::AttributeMethods::Read
  include ::ActiveRecord::AttributeMethods::Write
  include ::ActiveRecord::AttributeMethods::BeforeTypeCast
  include ::ActiveRecord::AttributeMethods::Query
  include ::ActiveRecord::AttributeMethods::PrimaryKey
  include ::ActiveRecord::AttributeMethods::TimeZoneConversion
  include ::ActiveModel::Dirty
  include ::ActiveRecord::AttributeMethods::Dirty
  include ::ActiveRecord::AttributeMethods::Serialization
  include ::ActiveRecord::Callbacks
  include ::ActiveModel::Validations::Callbacks
  include ::ActiveRecord::Timestamp
  include ::ActiveRecord::Associations
  include ::ActiveModel::SecurePassword
  include ::ActiveRecord::SecurePassword
  include ::ActiveRecord::AutosaveAssociation
  include ::ActiveRecord::NestedAttributes
  include ::ActiveRecord::Transactions
  include ::ActiveRecord::TouchLater
  include ::ActiveRecord::NoTouching
  include ::ActiveRecord::Reflection
  include ::ActiveModel::Serialization
  include ::ActiveModel::Serializers::JSON
  include ::ActiveRecord::Serialization
  include ::ActiveRecord::Store
  include ::ActiveRecord::SecureToken
  include ::ActiveRecord::TokenFor
  include ::ActiveRecord::SignedId
  include ::ActiveRecord::Suppressor
  include ::ActiveRecord::Normalization
  include ::ActiveRecord::Marshalling::Methods
  include ::ActiveStorage::Attached::Model
  include ::ActiveStorage::Reflection::ActiveRecordExtensions
  include ::ActionText::Attribute
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  extend ::ActiveSupport::Benchmarkable
  extend ::ActiveRecord::ConnectionHandling
  extend ::ActiveRecord::QueryCache::ClassMethods
  extend ::ActiveRecord::Querying
  extend ::ActiveRecord::Translation
  extend ::ActiveRecord::DynamicMatchers
  extend ::ActiveRecord::DelegatedType
  extend ::ActiveRecord::Explain
  extend ::ActiveRecord::Enum
  extend ::ActiveRecord::Delegation::DelegateCache
  extend ::ActiveRecord::Aggregations::ClassMethods
  extend ::ActiveRecord::Core::ClassMethods
  extend ::ActiveRecord::Persistence::ClassMethods
  extend ::ActiveRecord::ReadonlyAttributes::ClassMethods
  extend ::ActiveRecord::ModelSchema::ClassMethods
  extend ::ActiveRecord::Inheritance::ClassMethods
  extend ::ActiveRecord::Scoping::ClassMethods
  extend ::ActiveRecord::Scoping::Default::ClassMethods
  extend ::ActiveRecord::Scoping::Named::ClassMethods
  extend ::ActiveRecord::Sanitization::ClassMethods
  extend ::ActiveRecord::Integration::ClassMethods
  extend ::ActiveRecord::Validations::ClassMethods
  extend ::ActiveRecord::CounterCache::ClassMethods
  extend ::ActiveModel::AttributeRegistration::ClassMethods
  extend ::ActiveRecord::Attributes::ClassMethods
  extend ::ActiveRecord::Locking::Optimistic::ClassMethods
  extend ::ActiveRecord::Encryption::EncryptableRecord::ClassMethods
  extend ::ActiveModel::AttributeMethods::ClassMethods
  extend ::ActiveRecord::AttributeMethods::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Read::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Write::ClassMethods
  extend ::ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods
  extend ::ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Serialization::ClassMethods
  extend ::ActiveRecord::Callbacks::ClassMethods
  extend ::ActiveModel::Validations::Callbacks::ClassMethods
  extend ::ActiveRecord::Timestamp::ClassMethods
  extend ::ActiveRecord::Associations::ClassMethods
  extend ::ActiveModel::SecurePassword::ClassMethods
  extend ::ActiveRecord::SecurePassword::ClassMethods
  extend ::ActiveRecord::AutosaveAssociation::ClassMethods
  extend ::ActiveRecord::NestedAttributes::ClassMethods
  extend ::ActiveRecord::Transactions::ClassMethods
  extend ::ActiveRecord::NoTouching::ClassMethods
  extend ::ActiveRecord::Reflection::ClassMethods
  extend ::ActiveRecord::Store::ClassMethods
  extend ::ActiveRecord::SecureToken::ClassMethods
  extend ::ActiveRecord::TokenFor::ClassMethods
  extend ::ActiveRecord::SignedId::ClassMethods
  extend ::ActiveRecord::Suppressor::ClassMethods
  extend ::ActiveRecord::Normalization::ClassMethods
  extend ::ActiveStorage::Attached::Model::ClassMethods
  extend ::ActiveStorage::Reflection::ActiveRecordExtensions::ClassMethods
  extend ::ActionText::Attribute::ClassMethods

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#70
  def __callbacks; end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#70
  def __callbacks?; end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#924
  def _before_commit_callbacks; end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#924
  def _commit_callbacks; end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#924
  def _create_callbacks; end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#924
  def _destroy_callbacks; end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#924
  def _find_callbacks; end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#924
  def _initialize_callbacks; end

  # source://activerecord//lib/active_record/reflection.rb#11
  def _reflections; end

  # source://activerecord//lib/active_record/reflection.rb#11
  def _reflections?; end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#924
  def _rollback_callbacks; end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#912
  def _run_before_commit_callbacks(&block); end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#912
  def _run_commit_callbacks(&block); end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#912
  def _run_create_callbacks(&block); end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#912
  def _run_destroy_callbacks(&block); end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#912
  def _run_find_callbacks(&block); end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#912
  def _run_initialize_callbacks(&block); end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#912
  def _run_rollback_callbacks(&block); end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#912
  def _run_save_callbacks(&block); end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#912
  def _run_touch_callbacks(&block); end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#912
  def _run_update_callbacks(&block); end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#912
  def _run_validate_callbacks(&block); end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#912
  def _run_validation_callbacks(&block); end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#924
  def _save_callbacks; end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#924
  def _touch_callbacks; end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#924
  def _update_callbacks; end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#924
  def _validate_callbacks; end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#924
  def _validation_callbacks; end

  # source://activemodel/7.2.2/lib/active_model/validations.rb#71
  def _validators; end

  # source://activemodel/7.2.2/lib/active_model/validations.rb#71
  def _validators?; end

  # source://activerecord//lib/active_record/reflection.rb#12
  def aggregate_reflections; end

  # source://activerecord//lib/active_record/reflection.rb#12
  def aggregate_reflections?; end

  # source://activestorage/7.2.2/lib/active_storage/reflection.rb#53
  def attachment_reflections; end

  # source://activestorage/7.2.2/lib/active_storage/reflection.rb#53
  def attachment_reflections?; end

  # source://activemodel/7.2.2/lib/active_model/attribute_methods.rb#71
  def attribute_aliases; end

  # source://activemodel/7.2.2/lib/active_model/attribute_methods.rb#71
  def attribute_aliases?; end

  # source://activemodel/7.2.2/lib/active_model/attribute_methods.rb#72
  def attribute_method_patterns; end

  # source://activemodel/7.2.2/lib/active_model/attribute_methods.rb#72
  def attribute_method_patterns?; end

  # source://activerecord//lib/active_record/reflection.rb#13
  def automatic_scope_inversing; end

  # source://activerecord//lib/active_record/reflection.rb#13
  def automatic_scope_inversing?; end

  # source://activerecord//lib/active_record/reflection.rb#14
  def automatically_invert_plural_associations; end

  # source://activerecord//lib/active_record/reflection.rb#14
  def automatically_invert_plural_associations?; end

  # source://activerecord//lib/active_record/integration.rb#16
  def cache_timestamp_format; end

  # source://activerecord//lib/active_record/integration.rb#16
  def cache_timestamp_format?; end

  # source://activerecord//lib/active_record/integration.rb#24
  def cache_versioning; end

  # source://activerecord//lib/active_record/integration.rb#24
  def cache_versioning?; end

  # source://activerecord//lib/active_record/integration.rb#32
  def collection_cache_versioning; end

  # source://activerecord//lib/active_record/integration.rb#32
  def collection_cache_versioning?; end

  # source://activerecord//lib/active_record/model_schema.rb#183
  def column_for_attribute(name, &_arg1); end

  # source://activerecord//lib/active_record/counter_cache.rb#10
  def counter_cached_association_names; end

  # source://activerecord//lib/active_record/counter_cache.rb#10
  def counter_cached_association_names?; end

  # source://activerecord//lib/active_record/core.rb#97
  def default_connection_handler; end

  # source://activerecord//lib/active_record/core.rb#97
  def default_connection_handler?; end

  # source://activerecord//lib/active_record/core.rb#99
  def default_role; end

  # source://activerecord//lib/active_record/core.rb#99
  def default_role?; end

  # source://activerecord//lib/active_record/scoping/default.rb#20
  def default_scope_override; end

  # source://activerecord//lib/active_record/scoping/default.rb#19
  def default_scopes; end

  # source://activerecord//lib/active_record/core.rb#101
  def default_shard; end

  # source://activerecord//lib/active_record/core.rb#101
  def default_shard?; end

  # source://activerecord//lib/active_record/enum.rb#167
  def defined_enums; end

  # source://activerecord//lib/active_record/enum.rb#167
  def defined_enums?; end

  # source://activerecord//lib/active_record/core.rb#47
  def destroy_association_async_batch_size; end

  # source://activerecord//lib/active_record/core.rb#37
  def destroy_association_async_job(&_arg0); end

  # source://activerecord//lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes; end

  # source://activerecord//lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes=(_arg0); end

  # source://activerecord//lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes?; end

  # source://activemodel/7.2.2/lib/active_model/serializers/json.rb#15
  def include_root_in_json; end

  # source://activemodel/7.2.2/lib/active_model/serializers/json.rb#15
  def include_root_in_json?; end

  # source://activerecord//lib/active_record/locking/optimistic.rb#56
  def lock_optimistically; end

  # source://activerecord//lib/active_record/locking/optimistic.rb#56
  def lock_optimistically?; end

  # source://activerecord//lib/active_record/core.rb#22
  def logger; end

  # source://activerecord//lib/active_record/core.rb#22
  def logger?; end

  # source://activemodel/7.2.2/lib/active_model/naming.rb#255
  def model_name(&_arg0); end

  # source://activerecord//lib/active_record/nested_attributes.rb#15
  def nested_attributes_options; end

  # source://activerecord//lib/active_record/nested_attributes.rb#15
  def nested_attributes_options?; end

  # source://activerecord//lib/active_record/normalization.rb#8
  def normalized_attributes; end

  # source://activerecord//lib/active_record/normalization.rb#8
  def normalized_attributes=(_arg0); end

  # source://activerecord//lib/active_record/normalization.rb#8
  def normalized_attributes?; end

  # source://activemodel/7.2.2/lib/active_model/conversion.rb#32
  def param_delimiter=(_arg0); end

  # source://activerecord//lib/active_record/attribute_methods/dirty.rb#50
  def partial_inserts; end

  # source://activerecord//lib/active_record/attribute_methods/dirty.rb#50
  def partial_inserts?; end

  # source://activerecord//lib/active_record/attribute_methods/dirty.rb#49
  def partial_updates; end

  # source://activerecord//lib/active_record/attribute_methods/dirty.rb#49
  def partial_updates?; end

  # source://activerecord//lib/active_record/model_schema.rb#168
  def pluralize_table_names; end

  # source://activerecord//lib/active_record/model_schema.rb#168
  def pluralize_table_names?; end

  # source://activerecord//lib/active_record/model_schema.rb#163
  def primary_key_prefix_type; end

  # source://activerecord//lib/active_record/model_schema.rb#163
  def primary_key_prefix_type?; end

  # source://activerecord//lib/active_record/timestamp.rb#47
  def record_timestamps; end

  # source://activerecord//lib/active_record/timestamp.rb#47
  def record_timestamps=(_arg0); end

  # source://activerecord//lib/active_record/timestamp.rb#47
  def record_timestamps?; end

  # source://activerecord//lib/active_record/signed_id.rb#13
  def signed_id_verifier_secret; end

  # source://activerecord//lib/active_record/signed_id.rb#13
  def signed_id_verifier_secret?; end

  # source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#71
  def skip_time_zone_conversion_for_attributes; end

  # source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#71
  def skip_time_zone_conversion_for_attributes?; end

  # source://activerecord//lib/active_record/inheritance.rb#43
  def store_full_class_name; end

  # source://activerecord//lib/active_record/inheritance.rb#43
  def store_full_class_name?; end

  # source://activerecord//lib/active_record/inheritance.rb#47
  def store_full_sti_class; end

  # source://activerecord//lib/active_record/inheritance.rb#47
  def store_full_sti_class?; end

  # source://activerecord//lib/active_record/model_schema.rb#164
  def table_name_prefix; end

  # source://activerecord//lib/active_record/model_schema.rb#164
  def table_name_prefix?; end

  # source://activerecord//lib/active_record/model_schema.rb#165
  def table_name_suffix; end

  # source://activerecord//lib/active_record/model_schema.rb#165
  def table_name_suffix?; end

  # source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#70
  def time_zone_aware_attributes; end

  # source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#70
  def time_zone_aware_attributes?; end

  # source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#72
  def time_zone_aware_types; end

  # source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#72
  def time_zone_aware_types?; end

  # source://activerecord//lib/active_record/model_schema.rb#183
  def type_for_attribute(*_arg0, **_arg1, &_arg2); end

  # source://activemodel/7.2.2/lib/active_model/validations.rb#67
  def validation_context; end

  private

  # source://activemodel/7.2.2/lib/active_model/validations.rb#67
  def validation_context=(_arg0); end

  class << self
    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#70
    def __callbacks=(value); end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#70
    def __callbacks?; end

    # source://activerecord//lib/active_record/readonly_attributes.rb#11
    def _attr_readonly; end

    # source://activerecord//lib/active_record/readonly_attributes.rb#11
    def _attr_readonly=(value); end

    # source://activerecord//lib/active_record/readonly_attributes.rb#11
    def _attr_readonly?; end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#916
    def _before_commit_callbacks; end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#920
    def _before_commit_callbacks=(value); end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#916
    def _commit_callbacks; end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#920
    def _commit_callbacks=(value); end

    # source://activerecord//lib/active_record/counter_cache.rb#9
    def _counter_cache_columns; end

    # source://activerecord//lib/active_record/counter_cache.rb#9
    def _counter_cache_columns=(value); end

    # source://activerecord//lib/active_record/counter_cache.rb#9
    def _counter_cache_columns?; end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#916
    def _create_callbacks; end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#920
    def _create_callbacks=(value); end

    # source://activerecord//lib/active_record/core.rb#24
    def _destroy_association_async_job; end

    # source://activerecord//lib/active_record/core.rb#24
    def _destroy_association_async_job=(value); end

    # source://activerecord//lib/active_record/core.rb#24
    def _destroy_association_async_job?; end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#916
    def _destroy_callbacks; end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#920
    def _destroy_callbacks=(value); end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#916
    def _find_callbacks; end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#920
    def _find_callbacks=(value); end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#916
    def _initialize_callbacks; end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#920
    def _initialize_callbacks=(value); end

    # source://activerecord//lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activerecord//lib/active_record/reflection.rb#11
    def _reflections=(value); end

    # source://activerecord//lib/active_record/reflection.rb#11
    def _reflections?; end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#916
    def _rollback_callbacks; end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#920
    def _rollback_callbacks=(value); end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#916
    def _save_callbacks; end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#920
    def _save_callbacks=(value); end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#916
    def _touch_callbacks; end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#920
    def _touch_callbacks=(value); end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#916
    def _update_callbacks; end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#920
    def _update_callbacks=(value); end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#916
    def _validate_callbacks; end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#920
    def _validate_callbacks=(value); end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#916
    def _validation_callbacks; end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#920
    def _validation_callbacks=(value); end

    # source://activemodel/7.2.2/lib/active_model/validations.rb#71
    def _validators; end

    # source://activemodel/7.2.2/lib/active_model/validations.rb#71
    def _validators=(value); end

    # source://activemodel/7.2.2/lib/active_model/validations.rb#71
    def _validators?; end

    # source://activemodel/7.2.2/lib/active_model/callbacks.rb#144
    def after_create(*args, **options, &block); end

    # source://activemodel/7.2.2/lib/active_model/callbacks.rb#144
    def after_destroy(*args, **options, &block); end

    # source://activemodel/7.2.2/lib/active_model/callbacks.rb#144
    def after_find(*args, **options, &block); end

    # source://activemodel/7.2.2/lib/active_model/callbacks.rb#144
    def after_initialize(*args, **options, &block); end

    # source://activemodel/7.2.2/lib/active_model/callbacks.rb#144
    def after_save(*args, **options, &block); end

    # source://activemodel/7.2.2/lib/active_model/callbacks.rb#144
    def after_touch(*args, **options, &block); end

    # source://activemodel/7.2.2/lib/active_model/callbacks.rb#144
    def after_update(*args, **options, &block); end

    # source://activerecord//lib/active_record/reflection.rb#12
    def aggregate_reflections; end

    # source://activerecord//lib/active_record/reflection.rb#12
    def aggregate_reflections=(value); end

    # source://activerecord//lib/active_record/reflection.rb#12
    def aggregate_reflections?; end

    # source://activerecord//lib/active_record/core.rb#120
    def application_record_class?; end

    # source://activemodel/7.2.2/lib/active_model/callbacks.rb#137
    def around_create(*args, **options, &block); end

    # source://activemodel/7.2.2/lib/active_model/callbacks.rb#137
    def around_destroy(*args, **options, &block); end

    # source://activemodel/7.2.2/lib/active_model/callbacks.rb#137
    def around_save(*args, **options, &block); end

    # source://activemodel/7.2.2/lib/active_model/callbacks.rb#137
    def around_update(*args, **options, &block); end

    # source://activerecord//lib/active_record/core.rb#140
    def asynchronous_queries_session; end

    # source://activerecord//lib/active_record/core.rb#144
    def asynchronous_queries_tracker; end

    # source://activestorage/7.2.2/lib/active_storage/reflection.rb#53
    def attachment_reflections; end

    # source://activestorage/7.2.2/lib/active_storage/reflection.rb#53
    def attachment_reflections=(value); end

    # source://activestorage/7.2.2/lib/active_storage/reflection.rb#53
    def attachment_reflections?; end

    # source://activemodel/7.2.2/lib/active_model/attribute_methods.rb#71
    def attribute_aliases; end

    # source://activemodel/7.2.2/lib/active_model/attribute_methods.rb#71
    def attribute_aliases=(value); end

    # source://activemodel/7.2.2/lib/active_model/attribute_methods.rb#71
    def attribute_aliases?; end

    # source://activemodel/7.2.2/lib/active_model/attribute_methods.rb#72
    def attribute_method_patterns; end

    # source://activemodel/7.2.2/lib/active_model/attribute_methods.rb#72
    def attribute_method_patterns=(value); end

    # source://activemodel/7.2.2/lib/active_model/attribute_methods.rb#72
    def attribute_method_patterns?; end

    # source://activerecord//lib/active_record/core.rb#118
    def attributes_for_inspect; end

    # source://activerecord//lib/active_record/core.rb#118
    def attributes_for_inspect=(value); end

    # source://activerecord//lib/active_record/core.rb#118
    def attributes_for_inspect?; end

    # source://activerecord//lib/active_record/reflection.rb#13
    def automatic_scope_inversing; end

    # source://activerecord//lib/active_record/reflection.rb#13
    def automatic_scope_inversing=(value); end

    # source://activerecord//lib/active_record/reflection.rb#13
    def automatic_scope_inversing?; end

    # source://activerecord//lib/active_record/reflection.rb#14
    def automatically_invert_plural_associations; end

    # source://activerecord//lib/active_record/reflection.rb#14
    def automatically_invert_plural_associations=(value); end

    # source://activerecord//lib/active_record/reflection.rb#14
    def automatically_invert_plural_associations?; end

    # source://activemodel/7.2.2/lib/active_model/callbacks.rb#130
    def before_create(*args, **options, &block); end

    # source://activemodel/7.2.2/lib/active_model/callbacks.rb#130
    def before_destroy(*args, **options, &block); end

    # source://activemodel/7.2.2/lib/active_model/callbacks.rb#130
    def before_save(*args, **options, &block); end

    # source://activemodel/7.2.2/lib/active_model/callbacks.rb#130
    def before_update(*args, **options, &block); end

    # source://activerecord//lib/active_record/core.rb#89
    def belongs_to_required_by_default; end

    # source://activerecord//lib/active_record/core.rb#89
    def belongs_to_required_by_default=(value); end

    # source://activerecord//lib/active_record/core.rb#89
    def belongs_to_required_by_default?; end

    # source://activerecord//lib/active_record/integration.rb#16
    def cache_timestamp_format; end

    # source://activerecord//lib/active_record/integration.rb#16
    def cache_timestamp_format=(value); end

    # source://activerecord//lib/active_record/integration.rb#16
    def cache_timestamp_format?; end

    # source://activerecord//lib/active_record/integration.rb#24
    def cache_versioning; end

    # source://activerecord//lib/active_record/integration.rb#24
    def cache_versioning=(value); end

    # source://activerecord//lib/active_record/integration.rb#24
    def cache_versioning?; end

    # source://activerecord//lib/active_record/integration.rb#32
    def collection_cache_versioning; end

    # source://activerecord//lib/active_record/integration.rb#32
    def collection_cache_versioning=(value); end

    # source://activerecord//lib/active_record/integration.rb#32
    def collection_cache_versioning?; end

    # source://activerecord//lib/active_record/core.rb#77
    def configurations; end

    # source://activerecord//lib/active_record/core.rb#71
    def configurations=(config); end

    # source://activerecord//lib/active_record/core.rb#204
    def connected_to_stack; end

    # source://activerecord//lib/active_record/core.rb#218
    def connection_class; end

    # source://activerecord//lib/active_record/core.rb#214
    def connection_class=(b); end

    # source://activerecord//lib/active_record/core.rb#222
    def connection_class?; end

    # source://activerecord//lib/active_record/core.rb#226
    def connection_class_for_self; end

    # source://activerecord//lib/active_record/core.rb#132
    def connection_handler; end

    # source://activerecord//lib/active_record/core.rb#136
    def connection_handler=(handler); end

    # source://activerecord//lib/active_record/counter_cache.rb#10
    def counter_cached_association_names; end

    # source://activerecord//lib/active_record/counter_cache.rb#10
    def counter_cached_association_names=(value); end

    # source://activerecord//lib/active_record/counter_cache.rb#10
    def counter_cached_association_names?; end

    # source://activerecord//lib/active_record/core.rb#195
    def current_preventing_writes; end

    # source://activerecord//lib/active_record/core.rb#158
    def current_role; end

    # source://activerecord//lib/active_record/core.rb#176
    def current_shard; end

    # source://activerecord//lib/active_record/attribute_methods/serialization.rb#20
    def default_column_serializer; end

    # source://activerecord//lib/active_record/attribute_methods/serialization.rb#20
    def default_column_serializer=(value); end

    # source://activerecord//lib/active_record/attribute_methods/serialization.rb#20
    def default_column_serializer?; end

    # source://activerecord//lib/active_record/core.rb#97
    def default_connection_handler; end

    # source://activerecord//lib/active_record/core.rb#97
    def default_connection_handler=(value); end

    # source://activerecord//lib/active_record/core.rb#97
    def default_connection_handler?; end

    # source://activerecord//lib/active_record/core.rb#99
    def default_role; end

    # source://activerecord//lib/active_record/core.rb#99
    def default_role=(value); end

    # source://activerecord//lib/active_record/core.rb#99
    def default_role?; end

    # source://activerecord//lib/active_record/scoping/default.rb#20
    def default_scope_override; end

    # source://activerecord//lib/active_record/scoping/default.rb#20
    def default_scope_override=(value); end

    # source://activerecord//lib/active_record/scoping/default.rb#19
    def default_scopes; end

    # source://activerecord//lib/active_record/scoping/default.rb#19
    def default_scopes=(value); end

    # source://activerecord//lib/active_record/core.rb#101
    def default_shard; end

    # source://activerecord//lib/active_record/core.rb#101
    def default_shard=(value); end

    # source://activerecord//lib/active_record/core.rb#101
    def default_shard?; end

    # source://activerecord//lib/active_record/enum.rb#167
    def defined_enums; end

    # source://activerecord//lib/active_record/enum.rb#167
    def defined_enums=(value); end

    # source://activerecord//lib/active_record/enum.rb#167
    def defined_enums?; end

    # source://activerecord//lib/active_record/core.rb#47
    def destroy_association_async_batch_size; end

    # source://activerecord//lib/active_record/core.rb#47
    def destroy_association_async_batch_size=(value); end

    # source://activerecord//lib/active_record/core.rb#27
    def destroy_association_async_job; end

    # source://activerecord//lib/active_record/core.rb#24
    def destroy_association_async_job=(value); end

    # source://activerecord//lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes; end

    # source://activerecord//lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes=(value); end

    # source://activerecord//lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes?; end

    # source://activerecord//lib/active_record/core.rb#87
    def enumerate_columns_in_select_statements; end

    # source://activerecord//lib/active_record/core.rb#87
    def enumerate_columns_in_select_statements=(value); end

    # source://activerecord//lib/active_record/core.rb#87
    def enumerate_columns_in_select_statements?; end

    # source://activerecord//lib/active_record/token_for.rb#11
    def generated_token_verifier; end

    # source://activerecord//lib/active_record/token_for.rb#11
    def generated_token_verifier=(value); end

    # source://activerecord//lib/active_record/core.rb#93
    def has_many_inversing; end

    # source://activerecord//lib/active_record/core.rb#93
    def has_many_inversing=(value); end

    # source://activerecord//lib/active_record/core.rb#93
    def has_many_inversing?; end

    # source://activerecord//lib/active_record/model_schema.rb#170
    def immutable_strings_by_default; end

    # source://activerecord//lib/active_record/model_schema.rb#170
    def immutable_strings_by_default=(value); end

    # source://activerecord//lib/active_record/model_schema.rb#170
    def immutable_strings_by_default?; end

    # source://activerecord//lib/active_record/model_schema.rb#169
    def implicit_order_column; end

    # source://activerecord//lib/active_record/model_schema.rb#169
    def implicit_order_column=(value); end

    # source://activerecord//lib/active_record/model_schema.rb#169
    def implicit_order_column?; end

    # source://activemodel/7.2.2/lib/active_model/serializers/json.rb#15
    def include_root_in_json; end

    # source://activemodel/7.2.2/lib/active_model/serializers/json.rb#15
    def include_root_in_json=(value); end

    # source://activemodel/7.2.2/lib/active_model/serializers/json.rb#15
    def include_root_in_json?; end

    # source://activerecord//lib/active_record/model_schema.rb#172
    def inheritance_column; end

    # source://activerecord//lib/active_record/model_schema.rb#326
    def inheritance_column=(value); end

    # source://activerecord//lib/active_record/model_schema.rb#172
    def inheritance_column?; end

    # source://activerecord//lib/active_record/model_schema.rb#167
    def internal_metadata_table_name; end

    # source://activerecord//lib/active_record/model_schema.rb#167
    def internal_metadata_table_name=(value); end

    # source://activerecord//lib/active_record/model_schema.rb#167
    def internal_metadata_table_name?; end

    # source://activerecord//lib/active_record/store.rb#101
    def local_stored_attributes; end

    # source://activerecord//lib/active_record/store.rb#101
    def local_stored_attributes=(_arg0); end

    # source://activerecord//lib/active_record/locking/optimistic.rb#56
    def lock_optimistically; end

    # source://activerecord//lib/active_record/locking/optimistic.rb#56
    def lock_optimistically=(value); end

    # source://activerecord//lib/active_record/locking/optimistic.rb#56
    def lock_optimistically?; end

    # source://activerecord//lib/active_record/core.rb#22
    def logger; end

    # source://activerecord//lib/active_record/core.rb#22
    def logger=(value); end

    # source://activerecord//lib/active_record/core.rb#22
    def logger?; end

    # source://activerecord//lib/active_record/nested_attributes.rb#15
    def nested_attributes_options; end

    # source://activerecord//lib/active_record/nested_attributes.rb#15
    def nested_attributes_options=(value); end

    # source://activerecord//lib/active_record/nested_attributes.rb#15
    def nested_attributes_options?; end

    # source://activerecord//lib/active_record/normalization.rb#8
    def normalized_attributes; end

    # source://activerecord//lib/active_record/normalization.rb#8
    def normalized_attributes=(value); end

    # source://activerecord//lib/active_record/normalization.rb#8
    def normalized_attributes?; end

    # source://activemodel/7.2.2/lib/active_model/conversion.rb#32
    def param_delimiter; end

    # source://activemodel/7.2.2/lib/active_model/conversion.rb#32
    def param_delimiter=(value); end

    # source://activemodel/7.2.2/lib/active_model/conversion.rb#32
    def param_delimiter?; end

    # source://activerecord//lib/active_record/attribute_methods/dirty.rb#50
    def partial_inserts; end

    # source://activerecord//lib/active_record/attribute_methods/dirty.rb#50
    def partial_inserts=(value); end

    # source://activerecord//lib/active_record/attribute_methods/dirty.rb#50
    def partial_inserts?; end

    # source://activerecord//lib/active_record/attribute_methods/dirty.rb#49
    def partial_updates; end

    # source://activerecord//lib/active_record/attribute_methods/dirty.rb#49
    def partial_updates=(value); end

    # source://activerecord//lib/active_record/attribute_methods/dirty.rb#49
    def partial_updates?; end

    # source://activerecord//lib/active_record/model_schema.rb#168
    def pluralize_table_names; end

    # source://activerecord//lib/active_record/model_schema.rb#168
    def pluralize_table_names=(value); end

    # source://activerecord//lib/active_record/model_schema.rb#168
    def pluralize_table_names?; end

    # source://activerecord//lib/active_record/model_schema.rb#163
    def primary_key_prefix_type; end

    # source://activerecord//lib/active_record/model_schema.rb#163
    def primary_key_prefix_type=(value); end

    # source://activerecord//lib/active_record/model_schema.rb#163
    def primary_key_prefix_type?; end

    # source://activerecord//lib/active_record/timestamp.rb#47
    def record_timestamps; end

    # source://activerecord//lib/active_record/timestamp.rb#47
    def record_timestamps=(value); end

    # source://activerecord//lib/active_record/timestamp.rb#47
    def record_timestamps?; end

    # source://activerecord//lib/active_record/core.rb#95
    def run_commit_callbacks_on_first_saved_instances_in_transaction; end

    # source://activerecord//lib/active_record/core.rb#95
    def run_commit_callbacks_on_first_saved_instances_in_transaction=(value); end

    # source://activerecord//lib/active_record/core.rb#95
    def run_commit_callbacks_on_first_saved_instances_in_transaction?; end

    # source://activerecord//lib/active_record/model_schema.rb#166
    def schema_migrations_table_name; end

    # source://activerecord//lib/active_record/model_schema.rb#166
    def schema_migrations_table_name=(value); end

    # source://activerecord//lib/active_record/model_schema.rb#166
    def schema_migrations_table_name?; end

    # source://activerecord//lib/active_record/core.rb#103
    def shard_selector; end

    # source://activerecord//lib/active_record/core.rb#103
    def shard_selector=(value); end

    # source://activerecord//lib/active_record/core.rb#103
    def shard_selector?; end

    # source://activerecord//lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret; end

    # source://activerecord//lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret=(value); end

    # source://activerecord//lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret?; end

    # source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#71
    def skip_time_zone_conversion_for_attributes; end

    # source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#71
    def skip_time_zone_conversion_for_attributes=(value); end

    # source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#71
    def skip_time_zone_conversion_for_attributes?; end

    # source://activerecord//lib/active_record/inheritance.rb#43
    def store_full_class_name; end

    # source://activerecord//lib/active_record/inheritance.rb#43
    def store_full_class_name=(value); end

    # source://activerecord//lib/active_record/inheritance.rb#43
    def store_full_class_name?; end

    # source://activerecord//lib/active_record/inheritance.rb#47
    def store_full_sti_class; end

    # source://activerecord//lib/active_record/inheritance.rb#47
    def store_full_sti_class=(value); end

    # source://activerecord//lib/active_record/inheritance.rb#47
    def store_full_sti_class?; end

    # source://activerecord//lib/active_record/core.rb#91
    def strict_loading_by_default; end

    # source://activerecord//lib/active_record/core.rb#91
    def strict_loading_by_default=(value); end

    # source://activerecord//lib/active_record/core.rb#91
    def strict_loading_by_default?; end

    # source://activerecord//lib/active_record/core.rb#241
    def strict_loading_violation!(owner:, reflection:); end

    # source://activerecord//lib/active_record/model_schema.rb#164
    def table_name_prefix; end

    # source://activerecord//lib/active_record/model_schema.rb#164
    def table_name_prefix=(value); end

    # source://activerecord//lib/active_record/model_schema.rb#164
    def table_name_prefix?; end

    # source://activerecord//lib/active_record/model_schema.rb#165
    def table_name_suffix; end

    # source://activerecord//lib/active_record/model_schema.rb#165
    def table_name_suffix=(value); end

    # source://activerecord//lib/active_record/model_schema.rb#165
    def table_name_suffix?; end

    # source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#70
    def time_zone_aware_attributes; end

    # source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#70
    def time_zone_aware_attributes=(value); end

    # source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#70
    def time_zone_aware_attributes?; end

    # source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#72
    def time_zone_aware_types; end

    # source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#72
    def time_zone_aware_types=(value); end

    # source://activerecord//lib/active_record/attribute_methods/time_zone_conversion.rb#72
    def time_zone_aware_types?; end

    # source://activerecord//lib/active_record/token_for.rb#10
    def token_definitions; end

    # source://activerecord//lib/active_record/token_for.rb#10
    def token_definitions=(value); end

    private

    # source://activerecord//lib/active_record/model_schema.rb#172
    def _inheritance_column=(value); end
  end
end

# source://activerecord//lib/active_record/base.rb#0
module ActiveRecord::Base::GeneratedAssociationMethods; end

# source://activerecord//lib/active_record/base.rb#0
module ActiveRecord::Base::GeneratedAttributeMethods; end

# source://activerecord//lib/active_record/relation/batches/batch_enumerator.rb#4
module ActiveRecord::Batches
  # source://activerecord//lib/active_record/relation/batches.rb#79
  def find_each(start: T.unsafe(nil), finish: T.unsafe(nil), batch_size: T.unsafe(nil), error_on_ignore: T.unsafe(nil), order: T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/relation/batches.rb#148
  def find_in_batches(start: T.unsafe(nil), finish: T.unsafe(nil), batch_size: T.unsafe(nil), error_on_ignore: T.unsafe(nil), order: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/batches.rb#239
  def in_batches(of: T.unsafe(nil), start: T.unsafe(nil), finish: T.unsafe(nil), load: T.unsafe(nil), error_on_ignore: T.unsafe(nil), order: T.unsafe(nil), use_ranges: T.unsafe(nil), &block); end

  private

  # source://activerecord//lib/active_record/relation/batches.rb#325
  def act_on_ignored_order(error_on_ignore); end

  # source://activerecord//lib/active_record/relation/batches.rb#297
  def apply_finish_limit(relation, finish, batch_orders); end

  # source://activerecord//lib/active_record/relation/batches.rb#284
  def apply_limits(relation, start, finish, batch_orders); end

  # source://activerecord//lib/active_record/relation/batches.rb#290
  def apply_start_limit(relation, start, batch_orders); end

  # source://activerecord//lib/active_record/relation/batches.rb#304
  def batch_condition(relation, columns, values, operators); end

  # source://activerecord//lib/active_record/relation/batches.rb#339
  def batch_on_loaded_relation(relation:, start:, finish:, order:, batch_limit:); end

  # source://activerecord//lib/active_record/relation/batches.rb#370
  def batch_on_unloaded_relation(relation:, start:, finish:, load:, order:, use_ranges:, remaining:, batch_limit:); end

  # source://activerecord//lib/active_record/relation/batches.rb#319
  def build_batch_orders(order); end

  # source://activerecord//lib/active_record/relation/batches.rb#335
  def get_the_order_of_primary_key(order); end
end

# source://activerecord//lib/active_record/relation/batches/batch_enumerator.rb#5
class ActiveRecord::Batches::BatchEnumerator
  include ::Enumerable

  # source://activerecord//lib/active_record/relation/batches/batch_enumerator.rb#8
  def initialize(relation:, of: T.unsafe(nil), start: T.unsafe(nil), finish: T.unsafe(nil), order: T.unsafe(nil), use_ranges: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/batches/batch_enumerator.rb#27
  def batch_size; end

  # source://activerecord//lib/active_record/relation/batches/batch_enumerator.rb#65
  def delete_all; end

  # source://activerecord//lib/active_record/relation/batches/batch_enumerator.rb#96
  def destroy_all; end

  # source://activerecord//lib/active_record/relation/batches/batch_enumerator.rb#107
  def each(&block); end

  # source://activerecord//lib/active_record/relation/batches/batch_enumerator.rb#52
  def each_record(&block); end

  # source://activerecord//lib/active_record/relation/batches/batch_enumerator.rb#21
  def finish; end

  # source://activerecord//lib/active_record/relation/batches/batch_enumerator.rb#24
  def relation; end

  # source://activerecord//lib/active_record/relation/batches/batch_enumerator.rb#18
  def start; end

  # source://activerecord//lib/active_record/relation/batches/batch_enumerator.rb#85
  def touch_all(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/batches/batch_enumerator.rb#74
  def update_all(updates); end
end

# source://activerecord//lib/active_record/relation/batches.rb#9
ActiveRecord::Batches::DEFAULT_ORDER = T.let(T.unsafe(nil), Symbol)

# source://activerecord//lib/active_record/relation/batches.rb#8
ActiveRecord::Batches::ORDER_IGNORE_MESSAGE = T.let(T.unsafe(nil), String)

# source://activerecord//lib/active_record/relation/calculations.rb#7
module ActiveRecord::Calculations
  # source://activerecord//lib/active_record/relation/calculations.rb#122
  def async_average(column_name); end

  # source://activerecord//lib/active_record/relation/calculations.rb#108
  def async_count(column_name = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/calculations.rb#405
  def async_ids; end

  # source://activerecord//lib/active_record/relation/calculations.rb#152
  def async_maximum(column_name); end

  # source://activerecord//lib/active_record/relation/calculations.rb#137
  def async_minimum(column_name); end

  # source://activerecord//lib/active_record/relation/calculations.rb#359
  def async_pick(*column_names); end

  # source://activerecord//lib/active_record/relation/calculations.rb#330
  def async_pluck(*column_names); end

  # source://activerecord//lib/active_record/relation/calculations.rb#182
  def async_sum(identity_or_column = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/calculations.rb#116
  def average(column_name); end

  # source://activerecord//lib/active_record/relation/calculations.rb#217
  def calculate(operation, column_name); end

  # source://activerecord//lib/active_record/relation/calculations.rb#94
  def count(column_name = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/calculations.rb#367
  def ids; end

  # source://activerecord//lib/active_record/relation/calculations.rb#146
  def maximum(column_name); end

  # source://activerecord//lib/active_record/relation/calculations.rb#131
  def minimum(column_name); end

  # source://activerecord//lib/active_record/relation/calculations.rb#348
  def pick(*column_names); end

  # source://activerecord//lib/active_record/relation/calculations.rb#287
  def pluck(*column_names); end

  # source://activerecord//lib/active_record/relation/calculations.rb#172
  def sum(initial_value_or_column = T.unsafe(nil), &block); end

  private

  # source://activerecord//lib/active_record/relation/calculations.rb#449
  def aggregate_column(column_name); end

  # source://activerecord//lib/active_record/relation/calculations.rb#410
  def all_attributes?(column_names); end

  # source://activerecord//lib/active_record/relation/calculations.rb#659
  def build_count_subquery(relation, column_name, distinct); end

  # source://activerecord//lib/active_record/relation/calculations.rb#652
  def build_count_subquery?(operation, column_name, distinct); end

  # source://activerecord//lib/active_record/relation/calculations.rb#445
  def distinct_select?(column_name); end

  # source://activerecord//lib/active_record/relation/calculations.rb#502
  def execute_grouped_calculation(operation, column_name, distinct); end

  # source://activerecord//lib/active_record/relation/calculations.rb#461
  def execute_simple_calculation(operation, column_name, distinct); end

  # source://activerecord//lib/active_record/relation/calculations.rb#414
  def has_include?(column_name); end

  # source://activerecord//lib/active_record/relation/calculations.rb#589
  def lookup_cast_type_from_join_dependencies(name, join_dependencies = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/calculations.rb#457
  def operation_over_aggregate_column(column, operation, distinct); end

  # source://activerecord//lib/active_record/relation/calculations.rb#418
  def perform_calculation(operation, column_name); end

  # source://activerecord//lib/active_record/relation/calculations.rb#632
  def select_for_count; end

  # source://activerecord//lib/active_record/relation/calculations.rb#614
  def type_cast_calculated_value(value, operation, type); end

  # source://activerecord//lib/active_record/relation/calculations.rb#597
  def type_cast_pluck_values(result, columns); end

  # source://activerecord//lib/active_record/relation/calculations.rb#584
  def type_for(field, &block); end
end

# source://activerecord//lib/active_record/relation/calculations.rb#8
class ActiveRecord::Calculations::ColumnAliasTracker
  # source://activerecord//lib/active_record/relation/calculations.rb#9
  def initialize(connection); end

  # source://activerecord//lib/active_record/relation/calculations.rb#14
  def alias_for(field); end

  private

  # source://activerecord//lib/active_record/relation/calculations.rb#35
  def column_alias_for(field); end

  # source://activerecord//lib/active_record/relation/calculations.rb#44
  def truncate(name); end
end

# source://activerecord//lib/active_record/callbacks.rb#278
module ActiveRecord::Callbacks
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker

  # source://activerecord//lib/active_record/callbacks.rb#419
  def destroy; end

  # source://activerecord//lib/active_record/callbacks.rb#435
  def increment!(attribute, by = T.unsafe(nil), touch: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/callbacks.rb#431
  def touch(*_arg0, **_arg1); end

  private

  # source://activerecord//lib/active_record/callbacks.rb#444
  def _create_record; end

  # source://activerecord//lib/active_record/callbacks.rb#448
  def _update_record; end

  # source://activerecord//lib/active_record/callbacks.rb#440
  def create_or_update(**_arg0); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

# source://activerecord//lib/active_record/callbacks.rb#281
ActiveRecord::Callbacks::CALLBACKS = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/active_record/callbacks.rb#288
module ActiveRecord::Callbacks::ClassMethods
  include ::ActiveModel::Callbacks
end

# source://activerecord//lib/active_record.rb#124
module ActiveRecord::Coders; end

# source://activerecord//lib/active_record/coders/column_serializer.rb#5
class ActiveRecord::Coders::ColumnSerializer
  # source://activerecord//lib/active_record/coders/column_serializer.rb#9
  def initialize(attr_name, coder, object_class = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/coders/column_serializer.rb#46
  def assert_valid_value(object, action:); end

  # source://activerecord//lib/active_record/coders/column_serializer.rb#7
  def coder; end

  # source://activerecord//lib/active_record/coders/column_serializer.rb#22
  def dump(object); end

  # source://activerecord//lib/active_record/coders/column_serializer.rb#16
  def init_with(coder); end

  # source://activerecord//lib/active_record/coders/column_serializer.rb#29
  def load(payload); end

  # source://activerecord//lib/active_record/coders/column_serializer.rb#6
  def object_class; end

  private

  # source://activerecord//lib/active_record/coders/column_serializer.rb#54
  def check_arity_of_constructor; end
end

# source://activerecord//lib/active_record/coders/json.rb#5
module ActiveRecord::Coders::JSON
  class << self
    # source://activerecord//lib/active_record/coders/json.rb#6
    def dump(obj); end

    # source://activerecord//lib/active_record/coders/json.rb#10
    def load(json); end
  end
end

# source://activerecord//lib/active_record/coders/yaml_column.rb#7
class ActiveRecord::Coders::YAMLColumn < ::ActiveRecord::Coders::ColumnSerializer
  # source://activerecord//lib/active_record/coders/yaml_column.rb#59
  def initialize(attr_name, object_class = T.unsafe(nil), permitted_classes: T.unsafe(nil), unsafe_load: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/coders/yaml_column.rb#77
  def coder; end

  # source://activerecord//lib/active_record/coders/yaml_column.rb#68
  def init_with(coder); end

  private

  # source://activerecord//lib/active_record/coders/yaml_column.rb#88
  def check_arity_of_constructor; end
end

# source://activerecord//lib/active_record/coders/yaml_column.rb#8
class ActiveRecord::Coders::YAMLColumn::SafeCoder
  # source://activerecord//lib/active_record/coders/yaml_column.rb#9
  def initialize(permitted_classes: T.unsafe(nil), unsafe_load: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/coders/yaml_column.rb#15
  def dump(object); end

  # source://activerecord//lib/active_record/coders/yaml_column.rb#33
  def load(payload); end
end

# source://activerecord//lib/active_record/associations/errors.rb#187
class ActiveRecord::CompositePrimaryKeyMismatchError < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/associations/errors.rb#190
  def initialize(reflection = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/associations/errors.rb#188
  def reflection; end
end

# source://activerecord//lib/active_record/migration.rb#190
class ActiveRecord::ConcurrentMigrationError < ::ActiveRecord::MigrationError
  # source://activerecord//lib/active_record/migration.rb#194
  def initialize(message = T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/migration.rb#191
ActiveRecord::ConcurrentMigrationError::DEFAULT_MESSAGE = T.let(T.unsafe(nil), String)

# source://activerecord//lib/active_record/migration.rb#192
ActiveRecord::ConcurrentMigrationError::RELEASE_LOCK_FAILED_MESSAGE = T.let(T.unsafe(nil), String)

# source://activerecord//lib/active_record/errors.rb#377
class ActiveRecord::ConfigurationError < ::ActiveRecord::ActiveRecordError; end

# source://activerecord//lib/active_record/connection_adapters.rb#6
module ActiveRecord::ConnectionAdapters
  extend ::ActiveSupport::Autoload

  class << self
    # source://activerecord//lib/active_record/connection_adapters.rb#22
    def register(name, class_name, path = T.unsafe(nil)); end

    # source://activerecord//lib/active_record/connection_adapters.rb#26
    def resolve(adapter_name); end
  end
end

# source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#31
class ActiveRecord::ConnectionAdapters::AbstractAdapter
  include ::ActiveSupport::Callbacks
  include ::ActiveRecord::Migration::JoinTable
  include ::ActiveRecord::ConnectionAdapters::SchemaStatements
  include ::ActiveRecord::ConnectionAdapters::DatabaseStatements
  include ::ActiveRecord::ConnectionAdapters::Quoting
  include ::ActiveRecord::ConnectionAdapters::DatabaseLimits
  include ::ActiveRecord::ConnectionAdapters::QueryCache
  include ::ActiveRecord::ConnectionAdapters::Savepoints
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveRecord::ConnectionAdapters::Quoting::ClassMethods

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#126
  def initialize(config_or_deprecated_connection, deprecated_logger = T.unsafe(nil), deprecated_connection_options = T.unsafe(nil), deprecated_config = T.unsafe(nil)); end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#70
  def __callbacks; end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#70
  def __callbacks?; end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#924
  def _checkin_callbacks; end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#924
  def _checkout_callbacks; end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#912
  def _run_checkin_callbacks(&block); end

  # source://activesupport/7.2.2/lib/active_support/callbacks.rb#912
  def _run_checkout_callbacks(&block); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#651
  def active?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#356
  def adapter_name; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#591
  def add_enum_value(*_arg0); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#598
  def advisory_locks_enabled?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#565
  def async_enabled?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#835
  def build_insert_sql(insert); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#806
  def case_insensitive_comparison(attribute, value); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#802
  def case_sensitive_comparison(attribute, value); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#636
  def check_all_foreign_keys_valid!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#207
  def check_if_write_query(sql); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#850
  def check_version; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#775
  def clean!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#732
  def clear_cache!(new_connection: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#822
  def close; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#770
  def connect!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#644
  def connected?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#292
  def connection_class; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#217
  def connection_retries; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#23
  def create(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#579
  def create_enum(*_arg0); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#365
  def database_exists?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#846
  def database_version; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#826
  def default_index_type?(index); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#229
  def default_timezone; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#798
  def default_uniqueness_comparison(attribute, value); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#23
  def delete(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#571
  def disable_extension(name, **_arg1); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#629
  def disable_referential_integrity; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#707
  def discard!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#693
  def disconnect!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#583
  def drop_enum(*_arg0); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#575
  def enable_extension(name, **_arg1); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#23
  def exec_insert_all(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#23
  def exec_query(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#23
  def execute(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#313
  def expire; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#617
  def extensions; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#606
  def get_advisory_lock(lock_id); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#843
  def get_database_version; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#45
  def in_use?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#622
  def index_algorithms; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#23
  def insert(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#175
  def inspect; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#277
  def lease; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#45
  def lock; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#182
  def lock_thread=(lock_thread); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#45
  def logger; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#45
  def owner; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#44
  def pool; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#48
  def pool=(value); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#405
  def prefetch_primary_key?(table_name = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#244
  def prepared_statements; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#244
  def prepared_statements?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#249
  def prepared_statements_disabled_cache; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#237
  def preventing_writes?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#790
  def raw_connection; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#657
  def reconnect!(restore_transactions: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#613
  def release_advisory_lock(lock_id); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#587
  def rename_enum(*_arg0); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#595
  def rename_enum_value(*_arg0); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#213
  def replica?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#745
  def requires_reloading?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#719
  def reset!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#23
  def restart_db_transaction(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#221
  def retry_deadline; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#561
  def return_value_after_insert?(column); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#298
  def role; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#23
  def rollback_db_transaction(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#23
  def rollback_to_savepoint(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#389
  def savepoint_errors_invalidate_transactions?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#308
  def schema_cache; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#857
  def schema_version; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#342
  def seconds_idle; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#304
  def shard; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#329
  def steal!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#398
  def supports_advisory_locks?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#378
  def supports_bulk_alter?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#470
  def supports_check_constraints?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#505
  def supports_comments?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#510
  def supports_comments_in_create?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#529
  def supports_common_table_expressions?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#553
  def supports_concurrent_connections?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#495
  def supports_datetime_with_precision?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#374
  def supports_ddl_transactions?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#465
  def supports_deferrable_constraints?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#475
  def supports_exclusion_constraints?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#434
  def supports_explain?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#429
  def supports_expression_index?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#444
  def supports_extensions?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#455
  def supports_foreign_keys?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#520
  def supports_foreign_tables?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#424
  def supports_index_include?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#414
  def supports_index_sort_order?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#450
  def supports_indexes_in_create?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#549
  def supports_insert_conflict_target?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#541
  def supports_insert_on_duplicate_skip?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#545
  def supports_insert_on_duplicate_update?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#537
  def supports_insert_returning?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#500
  def supports_json?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#533
  def supports_lazy_transactions?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#490
  def supports_materialized_views?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#557
  def supports_nulls_not_distinct?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#525
  def supports_optimizer_hints?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#419
  def supports_partial_index?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#409
  def supports_partitioned_indexes?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#393
  def supports_restart_db_transaction?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#383
  def supports_savepoints?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#439
  def supports_transaction_isolation?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#480
  def supports_unique_constraints?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#460
  def supports_validate_constraints?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#485
  def supports_views?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#515
  def supports_virtual_columns?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#726
  def throw_away!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#23
  def truncate(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#23
  def truncate_tables(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#347
  def unprepared_statement; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#23
  def update(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#272
  def valid_type?(type); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#752
  def verify!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#45
  def visitor; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#197
  def with_instrumenter(instrumenter, &block); end

  private

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#1075
  def any_raw_connection; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#1182
  def arel_visitor; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#1064
  def backoff(counter); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#1193
  def build_result(columns:, rows:, column_types: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#1186
  def build_statement_pool; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#816
  def can_perform_case_insensitive_comparison_for?(column); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#1168
  def collector; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#1157
  def column_for(table_name, column_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#1163
  def column_for_attribute(attribute); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#1204
  def configure_connection; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#1208
  def default_prepared_statements; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#1092
  def extended_type_map_key; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#1050
  def invalidate_transaction(exception); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#1118
  def log(sql, name = T.unsafe(nil), binds = T.unsafe(nil), type_casted_binds = T.unsafe(nil), statement_name = T.unsafe(nil), async: T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#1068
  def reconnect; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#938
  def reconnect_can_restore_state?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#1046
  def retryable_connection_error?(exception); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#1057
  def retryable_query_error?(exception); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#1136
  def transform_query(sql); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#1143
  def translate_exception(exception, message:, sql:, binds:); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#1108
  def translate_exception_class(e, sql, binds); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#1098
  def type_map; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#1084
  def valid_raw_connection; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#1042
  def verified!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#1212
  def warning_ignored?(warning); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#975
  def with_raw_connection(allow_retry: T.unsafe(nil), materialize_transactions: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#1153
  def without_prepared_statement?(binds); end

  class << self
    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#70
    def __callbacks=(value); end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#70
    def __callbacks?; end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#916
    def _checkin_callbacks; end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#920
    def _checkin_callbacks=(value); end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#916
    def _checkout_callbacks; end

    # source://activesupport/7.2.2/lib/active_support/callbacks.rb#920
    def _checkout_callbacks=(value); end

    # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#87
    def build_read_query_regexp(*parts); end

    # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#361
    def database_exists?(config); end

    # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#122
    def dbconsole(config, options = T.unsafe(nil)); end

    # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#869
    def extended_type_map(default_timezone:); end

    # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#93
    def find_cmd_and_exec(commands, *args); end

    # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#862
    def register_class_with_precision(mapping, key, klass, **kwargs); end

    # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#66
    def type_cast_config_to_boolean(config); end

    # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#56
    def type_cast_config_to_integer(config); end

    # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#74
    def validate_default_timezone(config); end

    private

    # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#929
    def extract_limit(sql_type); end

    # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#925
    def extract_precision(sql_type); end

    # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#918
    def extract_scale(sql_type); end

    # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#878
    def initialize_type_map(m); end

    # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#911
    def register_class_with_limit(mapping, key, klass); end
  end
end

# source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#32
ActiveRecord::ConnectionAdapters::AbstractAdapter::ADAPTER_NAME = T.let(T.unsafe(nil), String)

# source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#42
ActiveRecord::ConnectionAdapters::AbstractAdapter::COMMENT_REGEX = T.let(T.unsafe(nil), Regexp)

# source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#84
ActiveRecord::ConnectionAdapters::AbstractAdapter::DEFAULT_READ_QUERY = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#195
ActiveRecord::ConnectionAdapters::AbstractAdapter::EXCEPTION_IMMEDIATE = T.let(T.unsafe(nil), Hash)

# source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#194
ActiveRecord::ConnectionAdapters::AbstractAdapter::EXCEPTION_NEVER = T.let(T.unsafe(nil), Hash)

# source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#935
ActiveRecord::ConnectionAdapters::AbstractAdapter::EXTENDED_TYPE_MAPS = T.let(T.unsafe(nil), Concurrent::Map)

# source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#41
ActiveRecord::ConnectionAdapters::AbstractAdapter::SIMPLE_INT = T.let(T.unsafe(nil), Regexp)

# source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#934
ActiveRecord::ConnectionAdapters::AbstractAdapter::TYPE_MAP = T.let(T.unsafe(nil), ActiveRecord::Type::TypeMap)

# source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#253
class ActiveRecord::ConnectionAdapters::AbstractAdapter::Version
  include ::Comparable

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#258
  def initialize(version_string, full_version_string = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#263
  def <=>(version_string); end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#256
  def full_version_string; end

  # source://activerecord//lib/active_record/connection_adapters/abstract_adapter.rb#267
  def to_s; end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#12
module ActiveRecord::ConnectionAdapters::AbstractPool; end

# source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#114
class ActiveRecord::ConnectionAdapters::AddColumnDefinition < ::Struct
  def column; end
  def column=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#621
class ActiveRecord::ConnectionAdapters::AlterTable
  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#626
  def initialize(td); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#645
  def add_check_constraint(expression, options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#653
  def add_column(name, type, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#637
  def add_foreign_key(to_table, options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#622
  def adds; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#624
  def check_constraint_adds; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#624
  def check_constraint_drops; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#649
  def drop_check_constraint(constraint_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#641
  def drop_foreign_key(name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#623
  def foreign_key_adds; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#623
  def foreign_key_drops; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#635
  def name; end
end

# source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#143
class ActiveRecord::ConnectionAdapters::BoundSchemaReflection
  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#160
  def initialize(abstract_schema_reflection, pool); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#185
  def add(name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#173
  def cached?(table_name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#165
  def clear!; end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#217
  def clear_data_source_cache!(name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#193
  def columns(table_name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#197
  def columns_hash(table_name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#201
  def columns_hash?(table_name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#181
  def data_source_exists?(name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#189
  def data_sources(name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#221
  def dump_to(filename); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#205
  def indexes(table_name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#169
  def load!; end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#177
  def primary_keys(table_name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#213
  def size; end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#209
  def version; end

  class << self
    # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#155
    def for_lone_connection(abstract_schema_reflection, connection); end
  end
end

# source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#144
class ActiveRecord::ConnectionAdapters::BoundSchemaReflection::FakePool
  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#145
  def initialize(connection); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#149
  def with_connection; end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#118
class ActiveRecord::ConnectionAdapters::ChangeColumnDefaultDefinition < ::Struct
  def column; end
  def column=(_); end
  def default; end
  def default=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#116
class ActiveRecord::ConnectionAdapters::ChangeColumnDefinition < ::Struct
  def column; end
  def column=(_); end
  def name; end
  def name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#174
class ActiveRecord::ConnectionAdapters::CheckConstraintDefinition < ::Struct
  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#188
  def defined_for?(name:, expression: T.unsafe(nil), validate: T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#184
  def export_name_on_schema_dump?; end

  def expression; end
  def expression=(_); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#175
  def name; end

  def options; end
  def options=(_); end
  def table_name; end
  def table_name=(_); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#179
  def validate?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#179
  def validated?; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activerecord//lib/active_record/connection_adapters/column.rb#7
class ActiveRecord::ConnectionAdapters::Column
  include ::ActiveRecord::ConnectionAdapters::Deduplicable
  extend ::ActiveRecord::ConnectionAdapters::Deduplicable::ClassMethods

  # source://activerecord//lib/active_record/connection_adapters/column.rb#20
  def initialize(name, default, sql_type_metadata = T.unsafe(nil), null = T.unsafe(nil), default_function = T.unsafe(nil), collation: T.unsafe(nil), comment: T.unsafe(nil), **_arg7); end

  # source://activerecord//lib/active_record/connection_adapters/column.rb#75
  def ==(other); end

  # source://activerecord//lib/active_record/connection_adapters/column.rb#67
  def auto_incremented_by_db?; end

  # source://activerecord//lib/active_record/connection_adapters/column.rb#71
  def auto_populated?; end

  # source://activerecord//lib/active_record/connection_adapters/column.rb#34
  def bigint?; end

  # source://activerecord//lib/active_record/connection_adapters/column.rb#10
  def collation; end

  # source://activerecord//lib/active_record/connection_adapters/column.rb#10
  def comment; end

  # source://activerecord//lib/active_record/connection_adapters/column.rb#10
  def default; end

  # source://activerecord//lib/active_record/connection_adapters/column.rb#10
  def default_function; end

  # source://activerecord//lib/active_record/connection_adapters/column.rb#56
  def encode_with(coder); end

  # source://activerecord//lib/active_record/connection_adapters/column.rb#75
  def eql?(other); end

  # source://activerecord//lib/active_record/connection_adapters/column.rb#30
  def has_default?; end

  # source://activerecord//lib/active_record/connection_adapters/column.rb#87
  def hash; end

  # source://activerecord//lib/active_record/connection_adapters/column.rb#42
  def human_name; end

  # source://activerecord//lib/active_record/connection_adapters/column.rb#46
  def init_with(coder); end

  # source://activerecord//lib/active_record/connection_adapters/column.rb#12
  def limit(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/column.rb#10
  def name; end

  # source://activerecord//lib/active_record/connection_adapters/column.rb#10
  def null; end

  # source://activerecord//lib/active_record/connection_adapters/column.rb#12
  def precision(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/column.rb#12
  def scale(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/column.rb#12
  def sql_type(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/column.rb#10
  def sql_type_metadata; end

  # source://activerecord//lib/active_record/connection_adapters/column.rb#12
  def type(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/column.rb#99
  def virtual?; end

  private

  # source://activerecord//lib/active_record/connection_adapters/column.rb#104
  def deduplicated; end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#79
class ActiveRecord::ConnectionAdapters::ColumnDefinition < ::Struct
  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#109
  def aliased_types(name, fallback); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#99
  def collation; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#103
  def collation=(value); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#99
  def comment; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#103
  def comment=(value); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#99
  def default; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#103
  def default=(value); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#99
  def if_exists; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#103
  def if_exists=(value); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#99
  def if_not_exists; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#103
  def if_not_exists=(value); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#99
  def limit; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#103
  def limit=(value); end

  def name; end
  def name=(_); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#99
  def null; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#103
  def null=(value); end

  def options; end
  def options=(_); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#99
  def precision; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#103
  def precision=(value); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#93
  def primary_key?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#99
  def scale; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#103
  def scale=(value); end

  def sql_type; end
  def sql_type=(_); end
  def type; end
  def type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#80
ActiveRecord::ConnectionAdapters::ColumnDefinition::OPTION_NAMES = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#300
module ActiveRecord::ConnectionAdapters::ColumnMethods
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::ConnectionAdapters::ColumnMethods::ClassMethods

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#305
  def primary_key(name, type = T.unsafe(nil), **options); end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#0
module ActiveRecord::ConnectionAdapters::ColumnMethods::ClassMethods
  private

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#329
  def define_column_methods(*column_types); end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#57
class ActiveRecord::ConnectionAdapters::ConnectionHandler
  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#74
  def initialize; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#155
  def active_connections?(role = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#162
  def clear_active_connections!(role = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#176
  def clear_all_connections!(role = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#172
  def clear_reloadable_connections!(role = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#198
  def connected?(connection_name, role: T.unsafe(nil), shard: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#93
  def connection_pool_list(role = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#87
  def connection_pool_names; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#93
  def connection_pools(role = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#102
  def each_connection_pool(role = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#113
  def establish_connection(config, owner_name: T.unsafe(nil), role: T.unsafe(nil), shard: T.unsafe(nil), clobber: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#183
  def flush_idle_connections!(role = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#79
  def prevent_writes; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#83
  def prevent_writes=(prevent_writes); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#203
  def remove_connection_pool(connection_name, role: T.unsafe(nil), shard: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#191
  def retrieve_connection(connection_name, role: T.unsafe(nil), shard: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#212
  def retrieve_connection_pool(connection_name, role: T.unsafe(nil), shard: T.unsafe(nil), strict: T.unsafe(nil)); end

  private

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#231
  def connection_name_to_pool_manager; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#273
  def determine_owner_name(owner_name, config); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#247
  def disconnect_pool_from_pool_manager(pool_manager, role, shard); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#234
  def get_pool_manager(connection_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#243
  def pool_managers; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#266
  def resolve_pool_config(config, connection_name, role, shard); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#239
  def set_pool_manager(connection_name); end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#58
class ActiveRecord::ConnectionAdapters::ConnectionHandler::StringConnectionName
  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#61
  def initialize(name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#69
  def current_preventing_writes; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#59
  def name; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_handler.rb#65
  def primary_class?; end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#8
class ActiveRecord::ConnectionAdapters::ConnectionPool
  include ::ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration
  include ::MonitorMixin
  include ::ActiveRecord::ConnectionAdapters::AbstractPool

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#117
  def initialize(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#379
  def active_connection; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#379
  def active_connection?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#217
  def async_executor; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#216
  def automatic_reconnect; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#216
  def automatic_reconnect=(_arg0); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#573
  def checkin(conn); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#550
  def checkout(checkout_timeout = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#132
  def checkout_and_verify(connection); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#216
  def checkout_timeout; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#216
  def checkout_timeout=(_arg0); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#508
  def clear_reloadable_connections(raise_on_acquisition_timeout = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#532
  def clear_reloadable_connections!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#430
  def connected?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#320
  def connection; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#370
  def connection_class; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#445
  def connections; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#217
  def db_config; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#487
  def discard!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#497
  def discarded?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#455
  def disconnect(raise_on_acquisition_timeout = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#478
  def disconnect!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#646
  def flush(minimum_idle = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#668
  def flush!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#273
  def inspect; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#301
  def internal_metadata; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#310
  def lease_connection; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#289
  def migration_context; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#293
  def migrations_paths; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#673
  def num_waiting_in_queue; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#316
  def permanent_lease?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#328
  def pin_connection!(lock_thread); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#217
  def pool_config; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#623
  def reap; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#217
  def reaper; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#391
  def release_connection(existing_lease = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#591
  def remove(conn); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#217
  def role; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#694
  def schedule_query(future_result); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#280
  def schema_cache; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#297
  def schema_migration; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#219
  def schema_reflection(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#284
  def schema_reflection=(schema_reflection); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#219
  def server_version(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#217
  def shard; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#217
  def size; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#680
  def stat; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#343
  def unpin_connection!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#408
  def with_connection(prevent_permanent_checkout: T.unsafe(nil)); end

  private

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#852
  def acquire_connection(checkout_timeout); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#922
  def adopt_connection(conn); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#743
  def attempt_to_checkout_all_existing_connections(raise_on_acquisition_timeout = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#704
  def build_async_executor; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#722
  def bulk_make_new_connections(num_new_conns_needed); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#792
  def checkout_for_exclusive_access(checkout_timeout); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#933
  def checkout_new_connection; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#700
  def connection_lease; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#882
  def new_connection; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#877
  def release(conn, owner_thread = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#877
  def remove_connection_from_thread_cache(conn, owner_thread = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#895
  def try_to_checkout_new_connection; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#736
  def with_exclusively_acquired_all_connections(raise_on_acquisition_timeout = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#812
  def with_new_connections_blocked; end

  class << self
    # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#207
    def install_executor_hooks(executor = T.unsafe(nil)); end
  end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#138
module ActiveRecord::ConnectionAdapters::ConnectionPool::BiasableQueue
  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#178
  def with_a_bias_for(thread); end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#139
class ActiveRecord::ConnectionAdapters::ConnectionPool::BiasableQueue::BiasedConditionVariable
  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#142
  def initialize(lock, other_cond, preferred_thread); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#149
  def broadcast; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#154
  def broadcast_on_biased; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#159
  def signal; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#168
  def wait(timeout); end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#199
class ActiveRecord::ConnectionAdapters::ConnectionPool::ConnectionLeasingQueue < ::ActiveRecord::ConnectionAdapters::ConnectionPool::Queue
  include ::ActiveRecord::ConnectionAdapters::ConnectionPool::BiasableQueue

  private

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#203
  def internal_poll(timeout); end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#187
module ActiveRecord::ConnectionAdapters::ConnectionPool::ExecutorHooks
  class << self
    # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#193
    def complete(_); end

    # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#189
    def run; end
  end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#142
class ActiveRecord::ConnectionAdapters::ConnectionPool::Lease
  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#145
  def initialize; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#157
  def clear(connection); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#143
  def connection; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#143
  def connection=(_arg0); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#150
  def release; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#143
  def sticky; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#143
  def sticky=(_arg0); end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#168
class ActiveRecord::ConnectionAdapters::ConnectionPool::LeaseRegistry
  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#169
  def initialize; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#174
  def [](context); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#180
  def clear; end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#13
class ActiveRecord::ConnectionAdapters::ConnectionPool::Queue
  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#14
  def initialize(lock = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#37
  def add(element); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#22
  def any_waiting?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#52
  def clear; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#45
  def delete(element); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#30
  def num_waiting; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#72
  def poll(timeout = T.unsafe(nil)); end

  private

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#86
  def any?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#94
  def can_remove_no_wait?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#77
  def internal_poll(timeout); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#106
  def no_wait_poll; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#99
  def remove; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#81
  def synchronize(&block); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#112
  def wait_poll(timeout); end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/reaper.rb#17
class ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper
  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/reaper.rb#20
  def initialize(pool, frequency); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/reaper.rb#18
  def frequency; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/reaper.rb#18
  def pool; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/reaper.rb#72
  def run; end

  class << self
    # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/reaper.rb#30
    def register_pool(pool, frequency); end

    private

    # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool/reaper.rb#41
    def spawn_thread(frequency); end
  end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#121
class ActiveRecord::ConnectionAdapters::ConnectionPool::WeakThreadKeyMap
  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#124
  def initialize; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#132
  def [](key); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#136
  def []=(key, value); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#128
  def clear; end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#120
class ActiveRecord::ConnectionAdapters::CreateIndexDefinition < ::Struct
  def algorithm; end
  def algorithm=(_); end
  def if_not_exists; end
  def if_not_exists=(_); end
  def index; end
  def index=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/database_limits.rb#5
module ActiveRecord::ConnectionAdapters::DatabaseLimits
  # source://activerecord//lib/active_record/connection_adapters/abstract/database_limits.rb#21
  def index_name_length; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_limits.rb#6
  def max_identifier_length; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_limits.rb#16
  def table_alias_length; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_limits.rb#11
  def table_name_length; end

  private

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_limits.rb#26
  def bind_params_length; end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#5
module ActiveRecord::ConnectionAdapters::DatabaseStatements
  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#6
  def initialize; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#407
  def add_transaction_record(record, ensure_finalize = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#412
  def begin_db_transaction; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#426
  def begin_isolated_db_transaction(isolation); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#369
  def begin_transaction(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#56
  def cacheable_query(klass, arel); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#431
  def commit_db_transaction; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#369
  def commit_transaction(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#195
  def create(arel, name = T.unsafe(nil), pk = T.unsafe(nil), id_value = T.unsafe(nil), sequence_name = T.unsafe(nil), binds = T.unsafe(nil), returning: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#369
  def current_transaction(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#453
  def default_sequence_name(table, column); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#212
  def delete(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#369
  def dirty_current_transaction(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#369
  def disable_lazy_transactions!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#485
  def empty_insert_statement_value(primary_key = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#369
  def enable_lazy_transactions!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#165
  def exec_delete(sql, name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#157
  def exec_insert(sql, name = T.unsafe(nil), binds = T.unsafe(nil), pk = T.unsafe(nil), sequence_name = T.unsafe(nil), returning: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#176
  def exec_insert_all(sql, name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#147
  def exec_query(sql, name = T.unsafe(nil), binds = T.unsafe(nil), prepare: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#447
  def exec_restart_db_transaction; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#441
  def exec_rollback_db_transaction; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#172
  def exec_update(sql, name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#136
  def execute(sql, name = T.unsafe(nil), allow_retry: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#180
  def explain(arel, binds = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#523
  def high_precision_current_timestamp; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#195
  def insert(arel, name = T.unsafe(nil), pk = T.unsafe(nil), id_value = T.unsafe(nil), sequence_name = T.unsafe(nil), binds = T.unsafe(nil), returning: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#467
  def insert_fixture(fixture, table_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#471
  def insert_fixtures_set(fixture_set, tables_to_delete = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#527
  def internal_exec_query(sql, name = T.unsafe(nil), binds = T.unsafe(nil), prepare: T.unsafe(nil), async: T.unsafe(nil), allow_retry: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#374
  def mark_transaction_written_if_write(sql); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#369
  def materialize_transactions(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#369
  def open_transactions(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#113
  def query(sql, name = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#105
  def query_value(sql, name = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#109
  def query_values(sql, name = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#458
  def reset_sequence!(table, column, sequence = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#385
  def reset_transaction(restore: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#443
  def restart_db_transaction; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#435
  def rollback_db_transaction; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#449
  def rollback_to_savepoint(name = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#369
  def rollback_transaction(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#495
  def sanitize_limit(limit); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#69
  def select_all(arel, name = T.unsafe(nil), binds = T.unsafe(nil), preparable: T.unsafe(nil), async: T.unsafe(nil), allow_retry: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#84
  def select_one(arel, name = T.unsafe(nil), binds = T.unsafe(nil), async: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#101
  def select_rows(arel, name = T.unsafe(nil), binds = T.unsafe(nil), async: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#89
  def select_value(arel, name = T.unsafe(nil), binds = T.unsafe(nil), async: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#95
  def select_values(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#12
  def to_sql(arel_or_sql_string, binds = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#354
  def transaction(requires_new: T.unsafe(nil), isolation: T.unsafe(nil), joinable: T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#414
  def transaction_isolation_levels; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#367
  def transaction_manager; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#381
  def transaction_open?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#218
  def truncate(table_name, name = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#222
  def truncate_tables(*table_names); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#206
  def update(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#506
  def with_yaml_fallback(value); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#369
  def within_new_transaction(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#118
  def write_query?(sql); end

  private

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#685
  def arel_from_relation(relation); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#558
  def build_fixture_sql(fixtures, table_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#600
  def build_fixture_statements(fixture_set); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#607
  def build_truncate_statement(table_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#611
  def build_truncate_statements(table_names); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#621
  def combine_multi_statements(total_sql); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#554
  def default_insert_value(column); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#541
  def execute_batch(statements, name = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#693
  def extract_table_ref_from_insert_sql(sql); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#532
  def internal_execute(sql, name = T.unsafe(nil), allow_retry: T.unsafe(nil), materialize_transactions: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#672
  def last_inserted_id(result); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#547
  def raw_execute(sql, name, async: T.unsafe(nil), allow_retry: T.unsafe(nil), materialize_transactions: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#676
  def returning_column_values(result); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#626
  def select(sql, name = T.unsafe(nil), binds = T.unsafe(nil), prepare: T.unsafe(nil), async: T.unsafe(nil), allow_retry: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#680
  def single_value_from_rows(rows); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#655
  def sql_for_insert(sql, pk, binds, returning); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#17
  def to_sql_and_binds(arel_or_sql_string, binds = T.unsafe(nil), preparable = T.unsafe(nil), allow_retry = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#617
  def with_multi_statements; end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#551
ActiveRecord::ConnectionAdapters::DatabaseStatements::DEFAULT_INSERT_VALUE = T.let(T.unsafe(nil), Arel::Nodes::SqlLiteral)

# source://activerecord//lib/active_record/connection_adapters/abstract/database_statements.rb#515
ActiveRecord::ConnectionAdapters::DatabaseStatements::HIGH_PRECISION_CURRENT_TIMESTAMP = T.let(T.unsafe(nil), Arel::Nodes::SqlLiteral)

# source://activerecord//lib/active_record/connection_adapters/deduplicable.rb#5
module ActiveRecord::ConnectionAdapters::Deduplicable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::ConnectionAdapters::Deduplicable::ClassMethods

  # source://activerecord//lib/active_record/connection_adapters/deduplicable.rb#18
  def -@; end

  # source://activerecord//lib/active_record/connection_adapters/deduplicable.rb#18
  def deduplicate; end

  private

  # source://activerecord//lib/active_record/connection_adapters/deduplicable.rb#24
  def deduplicated; end
end

# source://activerecord//lib/active_record/connection_adapters/deduplicable.rb#8
module ActiveRecord::ConnectionAdapters::Deduplicable::ClassMethods
  # source://activerecord//lib/active_record/connection_adapters/deduplicable.rb#13
  def new(*_arg0, **_arg1); end

  # source://activerecord//lib/active_record/connection_adapters/deduplicable.rb#9
  def registry; end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#124
class ActiveRecord::ConnectionAdapters::ForeignKeyDefinition < ::Struct
  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#129
  def column; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#149
  def custom_primary_key?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#145
  def deferrable; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#162
  def defined_for?(to_table: T.unsafe(nil), validate: T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#158
  def export_name_on_schema_dump?; end

  def from_table; end
  def from_table=(_); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#125
  def name; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#137
  def on_delete; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#141
  def on_update; end

  def options; end
  def options=(_); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#133
  def primary_key; end

  def to_table; end
  def to_table=(_); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#153
  def validate?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#153
  def validated?; end

  private

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#169
  def default_primary_key; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#9
class ActiveRecord::ConnectionAdapters::IndexDefinition
  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#12
  def initialize(table, name, unique = T.unsafe(nil), columns = T.unsafe(nil), lengths: T.unsafe(nil), orders: T.unsafe(nil), opclasses: T.unsafe(nil), where: T.unsafe(nil), type: T.unsafe(nil), using: T.unsafe(nil), include: T.unsafe(nil), nulls_not_distinct: T.unsafe(nil), comment: T.unsafe(nil), valid: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#47
  def column_options; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#10
  def columns; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#10
  def comment; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#55
  def defined_for?(columns = T.unsafe(nil), name: T.unsafe(nil), unique: T.unsafe(nil), valid: T.unsafe(nil), include: T.unsafe(nil), nulls_not_distinct: T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#10
  def include; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#10
  def lengths; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#10
  def name; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#10
  def nulls_not_distinct; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#10
  def opclasses; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#10
  def orders; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#10
  def table; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#10
  def type; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#10
  def unique; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#10
  def using; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#10
  def valid; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#43
  def valid?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#10
  def where; end

  private

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#66
  def concise_options(options); end
end

# source://activerecord//lib/active_record/connection_adapters/column.rb#115
class ActiveRecord::ConnectionAdapters::NullColumn < ::ActiveRecord::ConnectionAdapters::Column
  # source://activerecord//lib/active_record/connection_adapters/column.rb#116
  def initialize(name, **_arg1); end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#15
class ActiveRecord::ConnectionAdapters::NullPool
  include ::ActiveRecord::ConnectionAdapters::AbstractPool

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#25
  def initialize; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#43
  def async_executor; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#41
  def checkin(_); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#40
  def connection_class; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#45
  def db_config; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#49
  def dirties_query_cache; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#42
  def remove(_); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#39
  def schema_cache; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#35
  def schema_reflection; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#31
  def server_version(connection); end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#23
ActiveRecord::ConnectionAdapters::NullPool::NULL_CONFIG = T.let(T.unsafe(nil), ActiveRecord::ConnectionAdapters::NullPool::NullConfig)

# source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#18
class ActiveRecord::ConnectionAdapters::NullPool::NullConfig
  # source://activerecord//lib/active_record/connection_adapters/abstract/connection_pool.rb#19
  def method_missing(*_arg0, **_arg1, &_arg2); end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#110
class ActiveRecord::ConnectionAdapters::NullTransaction
  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#115
  def add_record(record, _ = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#123
  def after_commit; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#124
  def after_rollback; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#122
  def before_commit; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#112
  def closed?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#118
  def dirty!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#117
  def dirty?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#120
  def invalidate!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#119
  def invalidated?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#114
  def joinable?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#121
  def materialized?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#113
  def open?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#116
  def restartable?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#111
  def state; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#125
  def user_transaction; end
end

# source://activerecord//lib/active_record/connection_adapters/pool_config.rb#5
class ActiveRecord::ConnectionAdapters::PoolConfig
  include ::MonitorMixin

  # source://activerecord//lib/active_record/connection_adapters/pool_config.rb#29
  def initialize(connection_class, db_config, role, shard); end

  # source://activerecord//lib/active_record/connection_adapters/pool_config.rb#10
  def connection_class; end

  # source://activerecord//lib/active_record/connection_adapters/pool_config.rb#10
  def connection_class=(_arg0); end

  # source://activerecord//lib/active_record/connection_adapters/pool_config.rb#44
  def connection_name; end

  # source://activerecord//lib/active_record/connection_adapters/pool_config.rb#8
  def db_config; end

  # source://activerecord//lib/active_record/connection_adapters/pool_config.rb#69
  def discard_pool!; end

  # source://activerecord//lib/active_record/connection_adapters/pool_config.rb#52
  def disconnect!(automatic_reconnect: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/pool_config.rb#65
  def pool; end

  # source://activerecord//lib/active_record/connection_adapters/pool_config.rb#8
  def role; end

  # source://activerecord//lib/active_record/connection_adapters/pool_config.rb#12
  def schema_reflection; end

  # source://activerecord//lib/active_record/connection_adapters/pool_config.rb#9
  def schema_reflection=(_arg0); end

  # source://activerecord//lib/active_record/connection_adapters/pool_config.rb#40
  def server_version(connection); end

  # source://activerecord//lib/active_record/connection_adapters/pool_config.rb#9
  def server_version=(_arg0); end

  # source://activerecord//lib/active_record/connection_adapters/pool_config.rb#8
  def shard; end

  class << self
    # source://activerecord//lib/active_record/connection_adapters/pool_config.rb#20
    def discard_pools!; end

    # source://activerecord//lib/active_record/connection_adapters/pool_config.rb#24
    def disconnect_all!; end
  end
end

# source://activerecord//lib/active_record/connection_adapters/pool_config.rb#16
ActiveRecord::ConnectionAdapters::PoolConfig::INSTANCES = T.let(T.unsafe(nil), ObjectSpace::WeakMap)

# source://activerecord//lib/active_record/connection_adapters/pool_manager.rb#5
class ActiveRecord::ConnectionAdapters::PoolManager
  # source://activerecord//lib/active_record/connection_adapters/pool_manager.rb#6
  def initialize; end

  # source://activerecord//lib/active_record/connection_adapters/pool_manager.rb#26
  def each_pool_config(role = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/connection_adapters/pool_manager.rb#44
  def get_pool_config(role, shard); end

  # source://activerecord//lib/active_record/connection_adapters/pool_manager.rb#18
  def pool_configs(role = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/pool_manager.rb#40
  def remove_pool_config(role, shard); end

  # source://activerecord//lib/active_record/connection_adapters/pool_manager.rb#36
  def remove_role(role); end

  # source://activerecord//lib/active_record/connection_adapters/pool_manager.rb#14
  def role_names; end

  # source://activerecord//lib/active_record/connection_adapters/pool_manager.rb#48
  def set_pool_config(role, shard, pool_config); end

  # source://activerecord//lib/active_record/connection_adapters/pool_manager.rb#10
  def shard_names; end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#122
class ActiveRecord::ConnectionAdapters::PrimaryKeyDefinition < ::Struct
  def name; end
  def name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#8
module ActiveRecord::ConnectionAdapters::QueryCache
  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#196
  def initialize(*_arg0); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#206
  def cache(&block); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#232
  def clear_query_cache; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#222
  def disable_query_cache!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#210
  def enable_query_cache!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#194
  def query_cache; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#194
  def query_cache=(_arg0); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#201
  def query_cache_enabled; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#236
  def select_all(arel, name = T.unsafe(nil), binds = T.unsafe(nil), preparable: T.unsafe(nil), async: T.unsafe(nil), allow_retry: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#218
  def uncached(dirties: T.unsafe(nil), &block); end

  private

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#302
  def cache_notification_info(sql, name, binds); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#278
  def cache_sql(sql, name, binds); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#260
  def lookup_sql_cache(sql, name, binds); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#256
  def unset_query_cache!; end

  class << self
    # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#20
    def dirties_query_cache(base, *method_names); end

    # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#12
    def included(base); end
  end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#116
module ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration
  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#117
  def initialize(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#132
  def checkout_and_verify(connection); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#177
  def clear_query_cache; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#173
  def dirties_query_cache; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#139
  def disable_query_cache(dirties: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#164
  def disable_query_cache!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#149
  def enable_query_cache; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#159
  def enable_query_cache!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#187
  def query_cache; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#169
  def query_cache_enabled; end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#9
ActiveRecord::ConnectionAdapters::QueryCache::DEFAULT_SIZE = T.let(T.unsafe(nil), Integer)

# source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#97
class ActiveRecord::ConnectionAdapters::QueryCache::QueryCacheRegistry
  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#98
  def initialize; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#109
  def clear; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#103
  def compute_if_absent(context); end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#34
class ActiveRecord::ConnectionAdapters::QueryCache::Store
  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#39
  def initialize(version, max_size); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#58
  def [](key); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#83
  def clear; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#67
  def compute_if_absent(key); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#35
  def dirties; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#35
  def dirties=(_arg0); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#35
  def dirties?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#53
  def empty?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#35
  def enabled; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#35
  def enabled=(_arg0); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#35
  def enabled?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#48
  def size; end

  private

  # source://activerecord//lib/active_record/connection_adapters/abstract/query_cache.rb#89
  def check_version; end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/quoting.rb#9
module ActiveRecord::ConnectionAdapters::Quoting
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::ConnectionAdapters::Quoting::ClassMethods

  # source://activerecord//lib/active_record/connection_adapters/abstract/quoting.rb#112
  def cast_bound_value(value); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/quoting.rb#125
  def lookup_cast_type_from_column(column); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/quoting.rb#73
  def quote(value); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/quoting.rb#136
  def quote_column_name(column_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/quoting.rb#157
  def quote_default_expression(value, column); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/quoting.rb#131
  def quote_string(s); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/quoting.rb#141
  def quote_table_name(table_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/quoting.rb#153
  def quote_table_name_for_assignment(table, attr); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/quoting.rb#206
  def quoted_binary(value); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/quoting.rb#184
  def quoted_date(value); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/quoting.rb#174
  def quoted_false; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/quoting.rb#201
  def quoted_time(value); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/quoting.rb#166
  def quoted_true; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/quoting.rb#210
  def sanitize_as_sql_comment(value); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/quoting.rb#94
  def type_cast(value); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/quoting.rb#178
  def unquoted_false; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/quoting.rb#170
  def unquoted_true; end

  private

  # source://activerecord//lib/active_record/connection_adapters/abstract/quoting.rb#234
  def lookup_cast_type(sql_type); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/quoting.rb#224
  def type_casted_binds(binds); end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/quoting.rb#12
module ActiveRecord::ConnectionAdapters::Quoting::ClassMethods
  # source://activerecord//lib/active_record/connection_adapters/abstract/quoting.rb#18
  def column_name_matcher; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/quoting.rb#44
  def column_name_with_order_matcher; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/quoting.rb#61
  def quote_column_name(column_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/quoting.rb#66
  def quote_table_name(table_name); end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#449
class ActiveRecord::ConnectionAdapters::RealTransaction < ::ActiveRecord::ConnectionAdapters::Transaction
  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#480
  def commit; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#450
  def materialize!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#460
  def restart; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#474
  def rollback; end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#195
class ActiveRecord::ConnectionAdapters::ReferenceDefinition
  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#196
  def initialize(name, polymorphic: T.unsafe(nil), index: T.unsafe(nil), foreign_key: T.unsafe(nil), type: T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#216
  def add(table_name, connection); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#230
  def add_to(table); end

  private

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#247
  def as_options(value); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#285
  def column_name; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#289
  def column_names; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#277
  def columns; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#251
  def conditional_options; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#245
  def foreign_key; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#273
  def foreign_key_options; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#293
  def foreign_table_name; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#245
  def index; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#263
  def index_options(table_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#245
  def name; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#245
  def options; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#245
  def polymorphic; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#259
  def polymorphic_index_name(table_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#255
  def polymorphic_options; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#245
  def type; end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#376
class ActiveRecord::ConnectionAdapters::RestartParentTransaction < ::ActiveRecord::ConnectionAdapters::Transaction
  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#377
  def initialize(connection, parent_transaction, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#396
  def commit; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#400
  def full_rollback?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#389
  def materialize!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#389
  def materialized?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#389
  def restart(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#391
  def rollback; end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#404
class ActiveRecord::ConnectionAdapters::SavepointTransaction < ::ActiveRecord::ConnectionAdapters::Transaction
  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#405
  def initialize(connection, savepoint_name, parent_transaction, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#439
  def commit; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#445
  def full_rollback?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#417
  def materialize!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#422
  def restart; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#431
  def rollback; end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/savepoints.rb#6
module ActiveRecord::ConnectionAdapters::Savepoints
  # source://activerecord//lib/active_record/connection_adapters/abstract/savepoints.rb#11
  def create_savepoint(name = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/savepoints.rb#7
  def current_savepoint_name; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/savepoints.rb#15
  def exec_rollback_to_savepoint(name = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/savepoints.rb#19
  def release_savepoint(name = T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#227
class ActiveRecord::ConnectionAdapters::SchemaCache
  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#255
  def initialize; end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#326
  def add(pool, table_name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#396
  def add_all(pool); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#294
  def cached?(table_name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#388
  def clear_data_source_cache!(_connection, name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#338
  def columns(pool, table_name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#352
  def columns_hash(pool, table_name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#359
  def columns_hash?(_pool, table_name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#309
  def data_source_exists?(pool, name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#406
  def dump_to(filename); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#273
  def encode_with(coder); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#363
  def indexes(pool, table_name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#281
  def init_with(coder); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#416
  def marshal_dump; end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#420
  def marshal_load(array); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#298
  def primary_keys(pool, table_name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#379
  def schema_version; end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#383
  def size; end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#375
  def version(pool); end

  private

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#450
  def deep_deduplicate(value); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#442
  def derive_columns_hash_and_deduplicate_values; end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#436
  def ignored_table?(table_name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#264
  def initialize_dup(other); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#463
  def open(filename); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#428
  def tables_to_cache(pool); end

  class << self
    # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#228
    def _load_from(filename); end

    private

    # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#244
    def read(filename, &block); end
  end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#5
class ActiveRecord::ConnectionAdapters::SchemaCreation
  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#6
  def initialize(conn); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#11
  def accept(o); end

  private

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#176
  def action_sql(action, dependency); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#151
  def add_column_options!(sql, options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#142
  def add_table_options!(create_sql, o); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#147
  def column_options(o); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#16
  def options_include_default?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#16
  def quote_column_name(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#16
  def quote_default_expression(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#16
  def quote_table_name(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#134
  def quoted_columns(o); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#16
  def quoted_columns_for_index(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#16
  def supports_check_constraints?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#16
  def supports_exclusion_constraints?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#16
  def supports_index_include?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#138
  def supports_index_using?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#16
  def supports_indexes_in_create?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#16
  def supports_nulls_not_distinct?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#16
  def supports_partial_index?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#16
  def supports_unique_constraints?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#172
  def table_modifier_in_create(o); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#166
  def to_sql(sql); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#16
  def type_to_sql(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#16
  def use_foreign_keys?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#126
  def visit_AddCheckConstraint(o); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#40
  def visit_AddColumnDefinition(o); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#95
  def visit_AddForeignKey(o); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#24
  def visit_AlterTable(o); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#122
  def visit_CheckConstraintDefinition(o); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#33
  def visit_ColumnDefinition(o); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#103
  def visit_CreateIndexDefinition(o); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#130
  def visit_DropCheckConstraint(name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#99
  def visit_DropForeignKey(name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#82
  def visit_ForeignKeyDefinition(o); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#78
  def visit_PrimaryKeyDefinition(o); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_creation.rb#44
  def visit_TableDefinition(o); end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/schema_dumper.rb#5
class ActiveRecord::ConnectionAdapters::SchemaDumper < ::ActiveRecord::SchemaDumper
  private

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_dumper.rb#13
  def column_spec(column); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_dumper.rb#17
  def column_spec_for_primary_key(column); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_dumper.rb#38
  def default_primary_key?(column); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_dumper.rb#42
  def explicit_primary_key_default?(column); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_dumper.rb#25
  def prepare_column_options(column); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_dumper.rb#101
  def schema_collation(column); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_dumper.rb#86
  def schema_default(column); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_dumper.rb#97
  def schema_expression(column); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_dumper.rb#62
  def schema_limit(column); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_dumper.rb#67
  def schema_precision(column); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_dumper.rb#82
  def schema_scale(column); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_dumper.rb#54
  def schema_type(column); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_dumper.rb#46
  def schema_type_with_virtual(column); end

  class << self
    # source://activerecord//lib/active_record/connection_adapters/abstract/schema_dumper.rb#8
    def create(connection, options); end
  end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/schema_dumper.rb#6
ActiveRecord::ConnectionAdapters::SchemaDumper::DEFAULT_DATETIME_PRECISION = T.let(T.unsafe(nil), Integer)

# source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#7
class ActiveRecord::ConnectionAdapters::SchemaReflection
  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#16
  def initialize(cache_path, cache = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#41
  def add(pool, name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#79
  def cached?(table_name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#21
  def clear!; end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#73
  def clear_data_source_cache!(pool, name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#49
  def columns(pool, table_name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#53
  def columns_hash(pool, table_name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#57
  def columns_hash?(pool, table_name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#37
  def data_source_exists?(pool, name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#45
  def data_sources(pool, name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#91
  def dump_to(pool, filename); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#61
  def indexes(pool, table_name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#27
  def load!(pool); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#33
  def primary_keys(pool, table_name); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#69
  def size(pool); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#65
  def version(pool); end

  private

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#106
  def cache(pool); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#100
  def empty_cache; end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#116
  def load_cache(pool); end

  # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#110
  def possible_cache_available?; end

  class << self
    # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#10
    def check_schema_cache_dump_version; end

    # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#10
    def check_schema_cache_dump_version=(_arg0); end

    # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#9
    def use_schema_cache_dump; end

    # source://activerecord//lib/active_record/connection_adapters/schema_cache.rb#9
    def use_schema_cache_dump=(_arg0); end
  end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#8
module ActiveRecord::ConnectionAdapters::SchemaStatements
  include ::ActiveRecord::Migration::JoinTable

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1042
  def add_belongs_to(table_name, ref_name, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1272
  def add_check_constraint(table_name, expression, if_not_exists: T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#625
  def add_column(table_name, column_name, type, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#632
  def add_columns(table_name, *column_names, type:, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1152
  def add_foreign_key(from_table, to_table, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#894
  def add_index(table_name, column_name, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1449
  def add_index_options(table_name, column_name, name: T.unsafe(nil), if_not_exists: T.unsafe(nil), internal: T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1042
  def add_reference(table_name, ref_name, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1432
  def add_timestamps(table_name, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1337
  def assume_migrated_upto_version(version); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#643
  def build_add_column_definition(table_name, column_name, type, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#727
  def build_change_column_default_definition(table_name, column_name, default_or_changes); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#904
  def build_create_index_definition(table_name, column_name, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#399
  def build_create_join_table_definition(table_1, table_2, column_options: T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#333
  def build_create_table_definition(table_name, id: T.unsafe(nil), primary_key: T.unsafe(nil), force: T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1528
  def bulk_change_table(table_name, operations); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#700
  def change_column(table_name, column_name, type, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1510
  def change_column_comment(table_name, column_name, comment_or_changes); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#718
  def change_column_default(table_name, column_name, default_or_changes); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#747
  def change_column_null(table_name, column_name, null, default = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#501
  def change_table(table_name, base = T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1500
  def change_table_comment(table_name, comment_or_changes); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1321
  def check_constraint_exists?(table_name, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1284
  def check_constraint_options(table_name, expression, options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1252
  def check_constraints(table_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#132
  def column_exists?(table_name, column_name, type = T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#107
  def columns(table_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1398
  def columns_for_distinct(columns, orders); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#380
  def create_join_table(table_1, table_2, column_options: T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1514
  def create_schema_dumper(options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#293
  def create_table(table_name, id: T.unsafe(nil), primary_key: T.unsafe(nil), force: T.unsafe(nil), **options, &block); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#44
  def data_source_exists?(name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#34
  def data_sources; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1402
  def distinct_relation_for_primary_key(relation); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#418
  def drop_join_table(table_1, table_2, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#531
  def drop_table(table_name, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1328
  def dump_schema_information; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1220
  def foreign_key_column_for(table_name, column_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1216
  def foreign_key_exists?(from_table, to_table = T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1225
  def foreign_key_options(from_table, to_table, options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1082
  def foreign_keys(table_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1477
  def index_algorithm(algorithm); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#102
  def index_exists?(table_name, column_name, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#971
  def index_name(table_name, options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#990
  def index_name_exists?(table_name, index_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#81
  def indexes(table_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1333
  def internal_string_options_for_primary_key; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1566
  def max_index_name_size; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#14
  def native_database_types; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1490
  def options_include_default?(options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#145
  def primary_key(table_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1483
  def quoted_columns_for_index(column_names, options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1061
  def remove_belongs_to(table_name, ref_name, foreign_key: T.unsafe(nil), polymorphic: T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1303
  def remove_check_constraint(table_name, expression = T.unsafe(nil), if_exists: T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#688
  def remove_column(table_name, column_name, type = T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#664
  def remove_columns(table_name, *column_names, type: T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1193
  def remove_foreign_key(from_table, to_table = T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#945
  def remove_index(table_name, column_name = T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1061
  def remove_reference(table_name, ref_name, foreign_key: T.unsafe(nil), polymorphic: T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1441
  def remove_timestamps(table_name, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#755
  def rename_column(table_name, column_name, new_column_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#959
  def rename_index(table_name, old_name, new_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#515
  def rename_table(table_name, new_name, **_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1524
  def schema_creation; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#28
  def table_alias_for(table_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#23
  def table_comment(table_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#59
  def table_exists?(table_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#18
  def table_options(table_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#51
  def tables; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1358
  def type_to_sql(type, limit: T.unsafe(nil), precision: T.unsafe(nil), scale: T.unsafe(nil), **_arg4); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1445
  def update_table_definition(table_name, base); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1518
  def use_foreign_keys?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1557
  def valid_column_definition_options; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1561
  def valid_primary_key_options; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1553
  def valid_table_definition_options; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#74
  def view_exists?(view_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#66
  def views; end

  private

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1810
  def add_column_for_alter(table_name, column_name, type, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1595
  def add_index_sort_order(quoted_columns, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1612
  def add_options_for_index_columns(quoted_columns, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1833
  def add_timestamps_for_alter(table_name, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1802
  def can_remove_index_by_name?(column_name, options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1816
  def change_column_default_for_alter(table_name, column_name, default_or_changes); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1770
  def check_constraint_for(table_name, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1776
  def check_constraint_for!(table_name, expression: T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1760
  def check_constraint_name(table_name, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1591
  def column_options_keys; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1678
  def create_alter_table(name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1674
  def create_table_definition(name, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1863
  def data_source_sql(name = T.unsafe(nil), type: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1718
  def expression_column_name?(column_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1748
  def extract_foreign_key_action(specifier); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1793
  def extract_new_comment_value(default_or_changes); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1793
  def extract_new_default_value(default_or_changes); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1690
  def fetch_type_metadata(sql_type); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1738
  def foreign_key_for(from_table, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1743
  def foreign_key_for!(from_table, to_table: T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1728
  def foreign_key_name(table_name, options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1756
  def foreign_keys_enabled?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1571
  def generate_index_name(table_name, column); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1701
  def index_column_names(column_names); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1620
  def index_name_for_remove(table_name, column_name, options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1709
  def index_name_options(column_names); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1850
  def insert_versions_sql(versions); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1602
  def options_for_index_columns(options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1867
  def quoted_scope(name = T.unsafe(nil), type: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1806
  def reference_name_for_table(table_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1825
  def remove_column_for_alter(table_name, column_name, type = T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1829
  def remove_columns_for_alter(table_name, *column_names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1846
  def remove_timestamps_for_alter(table_name, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1661
  def rename_column_indexes(table_name, column_name, new_column_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1821
  def rename_column_sql(table_name, column_name, new_column_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1652
  def rename_table_indexes(table_name, new_name, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1722
  def strip_table_name_prefix_and_suffix(table_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1585
  def validate_change_column_null_argument!(value); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1682
  def validate_create_table_options!(options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1781
  def validate_index_length!(table_name, new_name, internal = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_statements.rb#1787
  def validate_table_length!(table_name); end
end

# source://activerecord//lib/active_record/connection_adapters/sql_type_metadata.rb#6
class ActiveRecord::ConnectionAdapters::SqlTypeMetadata
  include ::ActiveRecord::ConnectionAdapters::Deduplicable
  extend ::ActiveRecord::ConnectionAdapters::Deduplicable::ClassMethods

  # source://activerecord//lib/active_record/connection_adapters/sql_type_metadata.rb#11
  def initialize(sql_type: T.unsafe(nil), type: T.unsafe(nil), limit: T.unsafe(nil), precision: T.unsafe(nil), scale: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/sql_type_metadata.rb#19
  def ==(other); end

  # source://activerecord//lib/active_record/connection_adapters/sql_type_metadata.rb#19
  def eql?(other); end

  # source://activerecord//lib/active_record/connection_adapters/sql_type_metadata.rb#29
  def hash; end

  # source://activerecord//lib/active_record/connection_adapters/sql_type_metadata.rb#9
  def limit; end

  # source://activerecord//lib/active_record/connection_adapters/sql_type_metadata.rb#9
  def precision; end

  # source://activerecord//lib/active_record/connection_adapters/sql_type_metadata.rb#9
  def scale; end

  # source://activerecord//lib/active_record/connection_adapters/sql_type_metadata.rb#9
  def sql_type; end

  # source://activerecord//lib/active_record/connection_adapters/sql_type_metadata.rb#9
  def type; end

  private

  # source://activerecord//lib/active_record/connection_adapters/sql_type_metadata.rb#39
  def deduplicated; end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#706
class ActiveRecord::ConnectionAdapters::Table
  include ::ActiveRecord::ConnectionAdapters::ColumnMethods
  extend ::ActiveRecord::ConnectionAdapters::ColumnMethods::ClassMethods

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#711
  def initialize(table_name, base); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#862
  def belongs_to(*args, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def bigint(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def binary(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def blob(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def boolean(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#788
  def change(column_name, type, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#800
  def change_default(column_name, default_or_changes); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#810
  def change_null(column_name, null, default = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#920
  def check_constraint(*args, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#940
  def check_constraint_exists?(*args, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#721
  def column(column_name, type, index: T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#735
  def column_exists?(column_name, type = T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def date(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def datetime(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def decimal(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def float(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#890
  def foreign_key(*args, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#911
  def foreign_key_exists?(*args, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#747
  def index(column_name, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#759
  def index_exists?(column_name, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def integer(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def json(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#709
  def name; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def numeric(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#862
  def references(*args, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#820
  def remove(*column_names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#876
  def remove_belongs_to(*args, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#929
  def remove_check_constraint(*args, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#901
  def remove_foreign_key(*args, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#833
  def remove_index(column_name = T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#876
  def remove_references(*args, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#843
  def remove_timestamps(**options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#852
  def rename(column_name, new_column_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#768
  def rename_index(index_name, new_index_name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def string(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def text(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def time(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def timestamp(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#777
  def timestamps(**options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def virtual(*names, **options); end

  private

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#945
  def raise_on_if_exist_options(options); end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#363
class ActiveRecord::ConnectionAdapters::TableDefinition
  include ::ActiveRecord::ConnectionAdapters::ColumnMethods
  extend ::ActiveRecord::ConnectionAdapters::ColumnMethods::ClassMethods

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#368
  def initialize(conn, name, temporary: T.unsafe(nil), if_not_exists: T.unsafe(nil), options: T.unsafe(nil), as: T.unsafe(nil), comment: T.unsafe(nil), **_arg7); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#418
  def [](name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#366
  def as; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#548
  def belongs_to(*args, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def bigint(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def binary(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def blob(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def boolean(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#522
  def check_constraint(expression, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#366
  def check_constraints; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#489
  def column(name, type, index: T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#415
  def columns; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#366
  def comment; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def date(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def datetime(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def decimal(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def float(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#518
  def foreign_key(to_table, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#366
  def foreign_keys; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#366
  def if_not_exists; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#514
  def index(column_name, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#366
  def indexes; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def integer(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def json(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#366
  def name; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#580
  def new_check_constraint_definition(expression, options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#555
  def new_column_definition(name, type, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#572
  def new_foreign_key_definition(to_table, options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def numeric(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#366
  def options; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#409
  def primary_keys(name = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#548
  def references(*args, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#506
  def remove_column(name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#392
  def set_primary_key(table_name, id, primary_key, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def string(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#366
  def temporary; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def text(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def time(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def timestamp(*names, **options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#530
  def timestamps(**options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#332
  def virtual(*names, **options); end

  private

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#598
  def aliased_types(name, fallback); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#590
  def create_column_definition(name, type, options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#602
  def integer_like_primary_key?(type, options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#606
  def integer_like_primary_key_type(type, options); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#610
  def raise_on_duplicate_column(name); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/schema_definitions.rb#586
  def valid_column_definition_options; end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#128
class ActiveRecord::ConnectionAdapters::Transaction
  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#153
  def initialize(connection, isolation: T.unsafe(nil), joinable: T.unsafe(nil), run_commit_callbacks: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#185
  def add_record(record, ensure_finalize = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#203
  def after_commit(&block); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#211
  def after_rollback(&block); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#195
  def before_commit(&block); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#274
  def before_commit_records; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#181
  def closed?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#298
  def commit_records; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#148
  def connection; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#169
  def dirty!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#173
  def dirty?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#327
  def full_rollback?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#233
  def incomplete!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#151
  def invalidate!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#151
  def invalidated?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#148
  def isolation_level; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#328
  def joinable?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#237
  def materialize!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#242
  def materialized?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#177
  def open?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#219
  def records; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#229
  def restartable?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#246
  def restore!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#254
  def rollback_records; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#148
  def savepoint_name; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#148
  def state; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#148
  def user_transaction; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#149
  def written; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#149
  def written=(_arg0); end

  protected

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#331
  def append_callbacks(callbacks); end

  private

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#348
  def prepare_instances_to_run_callbacks_on(records); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#340
  def run_action_on_records(records, instances_to_run_callbacks_on); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#336
  def unique_records; end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#129
class ActiveRecord::ConnectionAdapters::Transaction::Callback
  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#130
  def initialize(event, callback); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#139
  def after_commit; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#143
  def after_rollback; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#135
  def before_commit; end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#79
class ActiveRecord::ConnectionAdapters::TransactionInstrumenter
  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#80
  def initialize(payload = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#101
  def finish(outcome); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#90
  def start; end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#88
class ActiveRecord::ConnectionAdapters::TransactionInstrumenter::InstrumentationAlreadyStartedError < ::ActiveRecord::ActiveRecordError; end

# source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#87
class ActiveRecord::ConnectionAdapters::TransactionInstrumenter::InstrumentationNotStartedError < ::ActiveRecord::ActiveRecordError; end

# source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#487
class ActiveRecord::ConnectionAdapters::TransactionManager
  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#488
  def initialize(connection); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#496
  def begin_transaction(isolation: T.unsafe(nil), joinable: T.unsafe(nil), _lazy: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#583
  def commit_transaction; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#651
  def current_transaction; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#551
  def dirty_current_transaction; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#538
  def disable_lazy_transactions!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#543
  def enable_lazy_transactions!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#547
  def lazy_transactions_enabled?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#567
  def materialize_transactions; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#647
  def open_transactions; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#563
  def restorable?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#555
  def restore_transactions; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#600
  def rollback_transaction(transaction = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#612
  def within_new_transaction(isolation: T.unsafe(nil), joinable: T.unsafe(nil)); end

  private

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#659
  def after_failure_actions(transaction, error); end
end

# source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#656
ActiveRecord::ConnectionAdapters::TransactionManager::NULL_TRANSACTION = T.let(T.unsafe(nil), ActiveRecord::ConnectionAdapters::NullTransaction)

# source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#8
class ActiveRecord::ConnectionAdapters::TransactionState
  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#9
  def initialize(state = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#14
  def add_child(state); end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#66
  def commit!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#23
  def committed?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#47
  def completed?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#19
  def finalized?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#70
  def full_commit!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#56
  def full_rollback!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#27
  def fully_committed?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#43
  def fully_completed?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#35
  def fully_rolledback?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#61
  def invalidate!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#39
  def invalidated?; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#74
  def nullify!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#51
  def rollback!; end

  # source://activerecord//lib/active_record/connection_adapters/abstract/transaction.rb#31
  def rolledback?; end
end

# source://activerecord//lib/active_record/errors.rb#574
class ActiveRecord::ConnectionFailed < ::ActiveRecord::QueryAborted; end

# source://activerecord//lib/active_record/connection_handling.rb#5
module ActiveRecord::ConnectionHandling
  # source://activerecord//lib/active_record/connection_handling.rb#324
  def adapter_class; end

  # source://activerecord//lib/active_record/connection_handling.rb#358
  def clear_cache!; end

  # source://activerecord//lib/active_record/connection_handling.rb#244
  def clear_query_caches_for_current_thread; end

  # source://activerecord//lib/active_record/connection_handling.rb#337
  def connected?; end

  # source://activerecord//lib/active_record/connection_handling.rb#134
  def connected_to(role: T.unsafe(nil), shard: T.unsafe(nil), prevent_writes: T.unsafe(nil), &blk); end

  # source://activerecord//lib/active_record/connection_handling.rb#239
  def connected_to?(role:, shard: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_handling.rb#163
  def connected_to_many(*classes, role:, shard: T.unsafe(nil), prevent_writes: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_handling.rb#185
  def connecting_to(role: T.unsafe(nil), shard: T.unsafe(nil), prevent_writes: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_handling.rb#260
  def connection; end

  # source://activerecord//lib/active_record/connection_handling.rb#320
  def connection_db_config; end

  # source://activerecord//lib/active_record/connection_handling.rb#328
  def connection_pool; end

  # source://activerecord//lib/active_record/connection_handling.rb#302
  def connection_specification_name; end

  # source://activerecord//lib/active_record/connection_handling.rb#299
  def connection_specification_name=(_arg0); end

  # source://activerecord//lib/active_record/connection_handling.rb#81
  def connects_to(database: T.unsafe(nil), shards: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_handling.rb#50
  def establish_connection(config_or_env = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_handling.rb#255
  def lease_connection; end

  # source://activerecord//lib/active_record/connection_handling.rb#309
  def primary_class?; end

  # source://activerecord//lib/active_record/connection_handling.rb#197
  def prohibit_shard_swapping(enabled = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/connection_handling.rb#284
  def release_connection; end

  # source://activerecord//lib/active_record/connection_handling.rb#341
  def remove_connection; end

  # source://activerecord//lib/active_record/connection_handling.rb#332
  def retrieve_connection; end

  # source://activerecord//lib/active_record/connection_handling.rb#354
  def schema_cache; end

  # source://activerecord//lib/active_record/connection_handling.rb#206
  def shard_swapping_prohibited?; end

  # source://activerecord//lib/active_record/connection_handling.rb#221
  def while_preventing_writes(enabled = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/connection_handling.rb#295
  def with_connection(prevent_permanent_checkout: T.unsafe(nil), &block); end

  private

  # source://activerecord//lib/active_record/connection_handling.rb#383
  def append_to_connected_to_stack(entry); end

  # source://activerecord//lib/active_record/connection_handling.rb#363
  def resolve_config_for_connection(config_or_env); end

  # source://activerecord//lib/active_record/connection_handling.rb#372
  def with_role_and_shard(role, shard, prevent_writes); end
end

# source://activerecord//lib/active_record/connection_handling.rb#7
ActiveRecord::ConnectionHandling::DEFAULT_ENV = T.let(T.unsafe(nil), Proc)

# source://activerecord//lib/active_record/connection_handling.rb#6
ActiveRecord::ConnectionHandling::RAILS_ENV = T.let(T.unsafe(nil), Proc)

# source://activerecord//lib/active_record/errors.rb#67
class ActiveRecord::ConnectionNotEstablished < ::ActiveRecord::AdapterError
  # source://activerecord//lib/active_record/errors.rb#68
  def initialize(message = T.unsafe(nil), connection_pool: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/errors.rb#72
  def set_pool(connection_pool); end
end

# source://activerecord//lib/active_record/errors.rb#84
class ActiveRecord::ConnectionTimeoutError < ::ActiveRecord::ConnectionNotEstablished; end

# source://activerecord//lib/active_record/core.rb#10
module ActiveRecord::Core
  include ::ActiveModel::Access
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Core::ClassMethods

  # source://activerecord//lib/active_record/core.rb#463
  def initialize(attributes = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/core.rb#650
  def <=>(other_object); end

  # source://activerecord//lib/active_record/core.rb#616
  def ==(comparison_object); end

  # source://activerecord//lib/active_record/core.rb#662
  def blank?; end

  # source://activerecord//lib/active_record/core.rb#735
  def connection_handler; end

  # source://activerecord//lib/active_record/core.rb#572
  def encode_with(coder); end

  # source://activerecord//lib/active_record/core.rb#616
  def eql?(comparison_object); end

  # source://activerecord//lib/active_record/core.rb#639
  def freeze; end

  # source://activerecord//lib/active_record/core.rb#645
  def frozen?; end

  # source://activerecord//lib/active_record/core.rb#759
  def full_inspect; end

  # source://activerecord//lib/active_record/core.rb#626
  def hash; end

  # source://activerecord//lib/active_record/core.rb#490
  def init_with(coder, &block); end

  # source://activerecord//lib/active_record/core.rb#500
  def init_with_attributes(attributes, new_record = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/core.rb#749
  def inspect; end

  # source://activerecord//lib/active_record/core.rb#658
  def present?; end

  # source://activerecord//lib/active_record/core.rb#765
  def pretty_print(pp); end

  # source://activerecord//lib/active_record/core.rb#731
  def readonly!; end

  # source://activerecord//lib/active_record/core.rb#667
  def readonly?; end

  # source://activerecord//lib/active_record/core.rb#705
  def strict_loading!(value = T.unsafe(nil), mode: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/core.rb#672
  def strict_loading?; end

  # source://activerecord//lib/active_record/core.rb#722
  def strict_loading_all?; end

  # source://activerecord//lib/active_record/core.rb#714
  def strict_loading_mode; end

  # source://activerecord//lib/active_record/core.rb#717
  def strict_loading_n_plus_one_only?; end

  private

  # source://activerecord//lib/active_record/core.rb#855
  def all_attributes_for_inspect; end

  # source://activerecord//lib/active_record/core.rb#851
  def attributes_for_inspect; end

  # source://activerecord//lib/active_record/core.rb#821
  def custom_inspect_method_defined?; end

  # source://activerecord//lib/active_record/core.rb#801
  def init_internals; end

  # source://activerecord//lib/active_record/core.rb#542
  def initialize_dup(other); end

  # source://activerecord//lib/active_record/core.rb#818
  def initialize_internals_callback; end

  # source://activerecord//lib/active_record/core.rb#836
  def inspect_with_attributes(attributes_to_list); end

  # source://activerecord//lib/active_record/core.rb#832
  def inspection_filter; end

  # source://activerecord//lib/active_record/core.rb#797
  def to_ary; end

  module GeneratedClassMethods
    def _destroy_association_async_job; end
    def _destroy_association_async_job=(value); end
    def _destroy_association_async_job?; end
    def attributes_for_inspect; end
    def attributes_for_inspect=(value); end
    def attributes_for_inspect?; end
    def belongs_to_required_by_default; end
    def belongs_to_required_by_default=(value); end
    def belongs_to_required_by_default?; end
    def default_connection_handler; end
    def default_connection_handler=(value); end
    def default_connection_handler?; end
    def default_role; end
    def default_role=(value); end
    def default_role?; end
    def default_shard; end
    def default_shard=(value); end
    def default_shard?; end
    def destroy_association_async_batch_size; end
    def destroy_association_async_batch_size=(value); end
    def enumerate_columns_in_select_statements; end
    def enumerate_columns_in_select_statements=(value); end
    def enumerate_columns_in_select_statements?; end
    def has_many_inversing; end
    def has_many_inversing=(value); end
    def has_many_inversing?; end
    def logger; end
    def logger=(value); end
    def logger?; end
    def run_commit_callbacks_on_first_saved_instances_in_transaction; end
    def run_commit_callbacks_on_first_saved_instances_in_transaction=(value); end
    def run_commit_callbacks_on_first_saved_instances_in_transaction?; end
    def shard_selector; end
    def shard_selector=(value); end
    def shard_selector?; end
    def strict_loading_by_default; end
    def strict_loading_by_default=(value); end
    def strict_loading_by_default?; end
  end

  module GeneratedInstanceMethods
    def default_connection_handler; end
    def default_connection_handler?; end
    def default_role; end
    def default_role?; end
    def default_shard; end
    def default_shard?; end
    def destroy_association_async_batch_size; end
    def logger; end
    def logger?; end
  end
end

# source://activerecord//lib/active_record/core.rb#253
module ActiveRecord::Core::ClassMethods
  # source://activerecord//lib/active_record/core.rb#379
  def arel_table; end

  # source://activerecord//lib/active_record/core.rb#391
  def cached_find_by_statement(connection, key, &block); end

  # source://activerecord//lib/active_record/core.rb#337
  def filter_attributes; end

  # source://activerecord//lib/active_record/core.rb#346
  def filter_attributes=(filter_attributes); end

  # source://activerecord//lib/active_record/core.rb#258
  def find(*ids); end

  # source://activerecord//lib/active_record/core.rb#271
  def find_by(*args); end

  # source://activerecord//lib/active_record/core.rb#318
  def find_by!(*args); end

  # source://activerecord//lib/active_record/core.rb#326
  def generated_association_methods; end

  # source://activerecord//lib/active_record/core.rb#254
  def initialize_find_by_cache; end

  # source://activerecord//lib/active_record/core.rb#322
  def initialize_generated_modules; end

  # source://activerecord//lib/active_record/core.rb#363
  def inspect; end

  # source://activerecord//lib/active_record/core.rb#351
  def inspection_filter; end

  # source://activerecord//lib/active_record/core.rb#383
  def predicate_builder; end

  # source://activerecord//lib/active_record/core.rb#387
  def type_caster; end

  private

  # source://activerecord//lib/active_record/core.rb#433
  def cached_find_by(keys, values); end

  # source://activerecord//lib/active_record/core.rb#397
  def inherited(subclass); end

  # source://activerecord//lib/active_record/core.rb#419
  def relation; end

  # source://activerecord//lib/active_record/core.rb#429
  def table_metadata; end
end

# source://activerecord//lib/active_record/core.rb#825
class ActiveRecord::Core::InspectionMask
  # source://activerecord//lib/active_record/core.rb#826
  def pretty_print(pp); end
end

# source://activerecord//lib/active_record/counter_cache.rb#5
module ActiveRecord::CounterCache
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::CounterCache::ClassMethods

  private

  # source://activerecord//lib/active_record/counter_cache.rb#200
  def _create_record(attribute_names = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/counter_cache.rb#226
  def _foreign_keys_equal?(fkey1, fkey2); end

  # source://activerecord//lib/active_record/counter_cache.rb#210
  def destroy_row; end

  module GeneratedClassMethods
    def _counter_cache_columns; end
    def _counter_cache_columns=(value); end
    def _counter_cache_columns?; end
    def counter_cached_association_names; end
    def counter_cached_association_names=(value); end
    def counter_cached_association_names?; end
  end

  module GeneratedInstanceMethods
    def counter_cached_association_names; end
    def counter_cached_association_names?; end
  end
end

# source://activerecord//lib/active_record/counter_cache.rb#13
module ActiveRecord::CounterCache::ClassMethods
  # source://activerecord//lib/active_record/counter_cache.rb#182
  def counter_cache_column?(name); end

  # source://activerecord//lib/active_record/counter_cache.rb#178
  def decrement_counter(counter_name, id, by: T.unsafe(nil), touch: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/counter_cache.rb#148
  def increment_counter(counter_name, id, by: T.unsafe(nil), touch: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/counter_cache.rb#186
  def load_schema!; end

  # source://activerecord//lib/active_record/counter_cache.rb#34
  def reset_counters(id, *counters, touch: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/counter_cache.rb#115
  def update_counters(id, counters); end
end

# source://activerecord//lib/active_record/errors.rb#427
class ActiveRecord::DangerousAttributeError < ::ActiveRecord::ActiveRecordError; end

# source://activerecord//lib/active_record/errors.rb#344
class ActiveRecord::DatabaseAlreadyExists < ::ActiveRecord::StatementInvalid; end

# source://activerecord//lib/active_record/database_configurations/database_config.rb#4
class ActiveRecord::DatabaseConfigurations
  # source://activerecord//lib/active_record/database_configurations.rb#73
  def initialize(configurations = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/database_configurations.rb#27
  def any?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/database_configurations.rb#150
  def blank?; end

  # source://activerecord//lib/active_record/database_configurations.rb#98
  def configs_for(env_name: T.unsafe(nil), name: T.unsafe(nil), config_key: T.unsafe(nil), include_hidden: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/database_configurations.rb#26
  def configurations; end

  # source://activerecord//lib/active_record/database_configurations.rb#150
  def empty?; end

  # source://activerecord//lib/active_record/database_configurations.rb#127
  def find_db_config(env); end

  # source://activerecord//lib/active_record/database_configurations.rb#142
  def primary?(name); end

  # source://activerecord//lib/active_record/database_configurations.rb#174
  def resolve(config); end

  private

  # source://activerecord//lib/active_record/database_configurations.rb#200
  def build_configs(configs); end

  # source://activerecord//lib/active_record/database_configurations.rb#239
  def build_configuration_sentence; end

  # source://activerecord//lib/active_record/database_configurations.rb#273
  def build_db_config_from_hash(env_name, name, config); end

  # source://activerecord//lib/active_record/database_configurations.rb#252
  def build_db_config_from_raw_config(env_name, name, config); end

  # source://activerecord//lib/active_record/database_configurations.rb#263
  def build_db_config_from_string(env_name, name, config); end

  # source://activerecord//lib/active_record/database_configurations.rb#188
  def default_env; end

  # source://activerecord//lib/active_record/database_configurations.rb#192
  def env_with_configs(env = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/database_configurations.rb#295
  def environment_url_config(env, name, config); end

  # source://activerecord//lib/active_record/database_configurations.rb#302
  def environment_value_for(name); end

  # source://activerecord//lib/active_record/database_configurations.rb#286
  def merge_db_environment_variables(current_env, configs); end

  # source://activerecord//lib/active_record/database_configurations.rb#225
  def resolve_symbol_connection(name); end

  # source://activerecord//lib/active_record/database_configurations.rb#219
  def walk_configs(env_name, config); end

  class << self
    # source://activerecord//lib/active_record/database_configurations.rb#29
    def db_config_handlers; end

    # source://activerecord//lib/active_record/database_configurations.rb#29
    def db_config_handlers=(_arg0); end

    # source://activerecord//lib/active_record/database_configurations.rb#61
    def register_db_config_handler(&block); end
  end
end

# source://activerecord//lib/active_record/database_configurations/connection_url_resolver.rb#10
class ActiveRecord::DatabaseConfigurations::ConnectionUrlResolver
  # source://activerecord//lib/active_record/database_configurations/connection_url_resolver.rb#25
  def initialize(url); end

  # source://activerecord//lib/active_record/database_configurations/connection_url_resolver.rb#38
  def to_hash; end

  private

  # source://activerecord//lib/active_record/database_configurations/connection_url_resolver.rb#89
  def database_from_path; end

  # source://activerecord//lib/active_record/database_configurations/connection_url_resolver.rb#60
  def query_hash; end

  # source://activerecord//lib/active_record/database_configurations/connection_url_resolver.rb#64
  def raw_config; end

  # source://activerecord//lib/active_record/database_configurations/connection_url_resolver.rb#82
  def resolved_adapter; end

  # source://activerecord//lib/active_record/database_configurations/connection_url_resolver.rb#45
  def uri; end

  # source://activerecord//lib/active_record/database_configurations/connection_url_resolver.rb#47
  def uri_parser; end
end

# source://activerecord//lib/active_record/database_configurations/database_config.rb#8
class ActiveRecord::DatabaseConfigurations::DatabaseConfig
  # source://activerecord//lib/active_record/database_configurations/database_config.rb#11
  def initialize(env_name, name); end

  # source://activerecord//lib/active_record/database_configurations/database_config.rb#43
  def _database=(database); end

  # source://activerecord//lib/active_record/database_configurations/database_config.rb#47
  def adapter; end

  # source://activerecord//lib/active_record/database_configurations/database_config.rb#17
  def adapter_class; end

  # source://activerecord//lib/active_record/database_configurations/database_config.rb#71
  def checkout_timeout; end

  # source://activerecord//lib/active_record/database_configurations/database_config.rb#39
  def database; end

  # source://activerecord//lib/active_record/database_configurations/database_config.rb#9
  def env_name; end

  # source://activerecord//lib/active_record/database_configurations/database_config.rb#91
  def for_current_env?; end

  # source://activerecord//lib/active_record/database_configurations/database_config.rb#35
  def host; end

  # source://activerecord//lib/active_record/database_configurations/database_config.rb#79
  def idle_timeout; end

  # source://activerecord//lib/active_record/database_configurations/database_config.rb#21
  def inspect; end

  # source://activerecord//lib/active_record/database_configurations/database_config.rb#63
  def max_queue; end

  # source://activerecord//lib/active_record/database_configurations/database_config.rb#59
  def max_threads; end

  # source://activerecord//lib/active_record/database_configurations/database_config.rb#87
  def migrations_paths; end

  # source://activerecord//lib/active_record/database_configurations/database_config.rb#55
  def min_threads; end

  # source://activerecord//lib/active_record/database_configurations/database_config.rb#9
  def name; end

  # source://activerecord//lib/active_record/database_configurations/database_config.rb#25
  def new_connection; end

  # source://activerecord//lib/active_record/database_configurations/database_config.rb#51
  def pool; end

  # source://activerecord//lib/active_record/database_configurations/database_config.rb#67
  def query_cache; end

  # source://activerecord//lib/active_record/database_configurations/database_config.rb#75
  def reaping_frequency; end

  # source://activerecord//lib/active_record/database_configurations/database_config.rb#83
  def replica?; end

  # source://activerecord//lib/active_record/database_configurations/database_config.rb#95
  def schema_cache_path; end

  # source://activerecord//lib/active_record/database_configurations/database_config.rb#99
  def use_metadata_table?; end

  # source://activerecord//lib/active_record/database_configurations/database_config.rb#29
  def validate!; end
end

# source://activerecord//lib/active_record/database_configurations/hash_config.rb#22
class ActiveRecord::DatabaseConfigurations::HashConfig < ::ActiveRecord::DatabaseConfigurations::DatabaseConfig
  # source://activerecord//lib/active_record/database_configurations/hash_config.rb#38
  def initialize(env_name, name, configuration_hash); end

  # source://activerecord//lib/active_record/database_configurations/hash_config.rb#68
  def _database=(database); end

  # source://activerecord//lib/active_record/database_configurations/hash_config.rb#107
  def adapter; end

  # source://activerecord//lib/active_record/database_configurations/hash_config.rb#92
  def checkout_timeout; end

  # source://activerecord//lib/active_record/database_configurations/hash_config.rb#23
  def configuration_hash; end

  # source://activerecord//lib/active_record/database_configurations/hash_config.rb#64
  def database; end

  # source://activerecord//lib/active_record/database_configurations/hash_config.rb#153
  def database_tasks?; end

  # source://activerecord//lib/active_record/database_configurations/hash_config.rb#117
  def default_schema_cache_path(db_dir = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/database_configurations/hash_config.rb#56
  def host; end

  # source://activerecord//lib/active_record/database_configurations/hash_config.rb#102
  def idle_timeout; end

  # source://activerecord//lib/active_record/database_configurations/hash_config.rb#125
  def lazy_schema_cache_path; end

  # source://activerecord//lib/active_record/database_configurations/hash_config.rb#88
  def max_queue; end

  # source://activerecord//lib/active_record/database_configurations/hash_config.rb#80
  def max_threads; end

  # source://activerecord//lib/active_record/database_configurations/hash_config.rb#52
  def migrations_paths; end

  # source://activerecord//lib/active_record/database_configurations/hash_config.rb#76
  def min_threads; end

  # source://activerecord//lib/active_record/database_configurations/hash_config.rb#72
  def pool; end

  # source://activerecord//lib/active_record/database_configurations/hash_config.rb#129
  def primary?; end

  # source://activerecord//lib/active_record/database_configurations/hash_config.rb#84
  def query_cache; end

  # source://activerecord//lib/active_record/database_configurations/hash_config.rb#98
  def reaping_frequency; end

  # source://activerecord//lib/active_record/database_configurations/hash_config.rb#46
  def replica?; end

  # source://activerecord//lib/active_record/database_configurations/hash_config.rb#113
  def schema_cache_path; end

  # source://activerecord//lib/active_record/database_configurations/hash_config.rb#141
  def schema_dump(format = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/database_configurations/hash_config.rb#60
  def socket; end

  # source://activerecord//lib/active_record/database_configurations/hash_config.rb#157
  def use_metadata_table?; end

  private

  # source://activerecord//lib/active_record/database_configurations/hash_config.rb#162
  def schema_file_type(format); end
end

# source://activerecord//lib/active_record/database_configurations.rb#24
class ActiveRecord::DatabaseConfigurations::InvalidConfigurationError < ::StandardError; end

# source://activerecord//lib/active_record/database_configurations/url_config.rb#24
class ActiveRecord::DatabaseConfigurations::UrlConfig < ::ActiveRecord::DatabaseConfigurations::HashConfig
  # source://activerecord//lib/active_record/database_configurations/url_config.rb#40
  def initialize(env_name, name, url, configuration_hash = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/database_configurations/url_config.rb#25
  def url; end

  private

  # source://activerecord//lib/active_record/database_configurations/url_config.rb#69
  def build_url_hash; end

  # source://activerecord//lib/active_record/database_configurations/url_config.rb#61
  def to_boolean!(configuration_hash, key); end
end

# source://activerecord//lib/active_record/errors.rb#89
class ActiveRecord::DatabaseConnectionError < ::ActiveRecord::ConnectionNotEstablished
  # source://activerecord//lib/active_record/errors.rb#90
  def initialize(message = T.unsafe(nil)); end

  class << self
    # source://activerecord//lib/active_record/errors.rb#95
    def hostname_error(hostname); end

    # source://activerecord//lib/active_record/errors.rb#102
    def username_error(username); end
  end
end

# source://activerecord//lib/active_record/errors.rb#602
class ActiveRecord::DatabaseVersionError < ::ActiveRecord::ActiveRecordError; end

# source://activerecord//lib/active_record/errors.rb#544
class ActiveRecord::Deadlocked < ::ActiveRecord::TransactionRollbackError; end

# source://activerecord//lib/active_record/delegated_type.rb#175
module ActiveRecord::DelegatedType
  # source://activerecord//lib/active_record/delegated_type.rb#231
  def delegated_type(role, types:, **options); end

  private

  # source://activerecord//lib/active_record/delegated_type.rb#237
  def define_delegated_type_methods(role, types:, options:); end
end

# source://activerecord//lib/active_record/relation/delegation.rb#6
module ActiveRecord::Delegation
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Delegation::ClassMethods

  # source://activerecord//lib/active_record/relation/delegation.rb#98
  def &(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#98
  def +(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#98
  def -(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#98
  def [](*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#98
  def as_json(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#98
  def compact(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#103
  def connection(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#98
  def each(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#98
  def encode_with(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#98
  def in_groups(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#98
  def in_groups_of(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#98
  def index(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#98
  def intersect?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#98
  def join(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#103
  def lease_connection(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#98
  def length(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#103
  def primary_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#98
  def reverse(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#98
  def rindex(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#98
  def rotate(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#98
  def sample(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#98
  def shuffle(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#98
  def slice(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#98
  def split(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#98
  def to_formatted_s(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#98
  def to_fs(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#98
  def to_sentence(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#98
  def to_xml(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#103
  def transaction(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#103
  def with_connection(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/delegation.rb#98
  def |(*_arg0, **_arg1, &_arg2); end

  private

  # source://activerecord//lib/active_record/relation/delegation.rb#139
  def respond_to_missing?(method, _); end

  class << self
    # source://activerecord//lib/active_record/relation/delegation.rb#8
    def delegated_classes; end

    # source://activerecord//lib/active_record/relation/delegation.rb#17
    def uncacheable_methods; end
  end
end

# source://activerecord//lib/active_record/relation/delegation.rb#127
module ActiveRecord::Delegation::ClassMethods
  # source://activerecord//lib/active_record/relation/delegation.rb#128
  def create(klass, *args, **kwargs); end

  private

  # source://activerecord//lib/active_record/relation/delegation.rb#133
  def relation_class_for(klass); end
end

# source://activerecord//lib/active_record/relation/delegation.rb#105
module ActiveRecord::Delegation::ClassSpecificRelation
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods

  private

  # source://activerecord//lib/active_record/relation/delegation.rb#115
  def method_missing(method, *_arg1, **_arg2, &_arg3); end
end

# source://activerecord//lib/active_record/relation/delegation.rb#108
module ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  # source://activerecord//lib/active_record/relation/delegation.rb#109
  def name; end
end

# source://activerecord//lib/active_record/relation/delegation.rb#24
module ActiveRecord::Delegation::DelegateCache
  # source://activerecord//lib/active_record/relation/delegation.rb#49
  def generate_relation_method(method); end

  # source://activerecord//lib/active_record/relation/delegation.rb#44
  def inherited(child_class); end

  # source://activerecord//lib/active_record/relation/delegation.rb#29
  def initialize_relation_delegate_cache; end

  # source://activerecord//lib/active_record/relation/delegation.rb#25
  def relation_delegate_class(klass); end

  protected

  # source://activerecord//lib/active_record/relation/delegation.rb#54
  def include_relation_methods(delegate); end

  private

  # source://activerecord//lib/active_record/relation/delegation.rb#60
  def generated_relation_methods; end
end

# source://activerecord//lib/active_record/relation/delegation.rb#68
class ActiveRecord::Delegation::GeneratedRelationMethods < ::Module
  # source://activerecord//lib/active_record/relation/delegation.rb#71
  def generate_method(method); end
end

# source://activerecord//lib/active_record/relation/delegation.rb#69
ActiveRecord::Delegation::GeneratedRelationMethods::MUTEX = T.let(T.unsafe(nil), Thread::Mutex)

# source://activerecord//lib/active_record/associations/errors.rb#256
class ActiveRecord::DeleteRestrictionError < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/associations/errors.rb#257
  def initialize(name = T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/destroy_association_async_job.rb#4
class ActiveRecord::DestroyAssociationAsyncError < ::StandardError; end

# source://activerecord//lib/active_record/destroy_association_async_job.rb#10
class ActiveRecord::DestroyAssociationAsyncJob < ::ActiveJob::Base
  # source://activerecord//lib/active_record/destroy_association_async_job.rb#15
  def perform(owner_model_name: T.unsafe(nil), owner_id: T.unsafe(nil), association_class: T.unsafe(nil), association_ids: T.unsafe(nil), association_primary_key_column: T.unsafe(nil), ensuring_owner_was_method: T.unsafe(nil)); end

  private

  # source://activerecord//lib/active_record/destroy_association_async_job.rb#34
  def owner_destroyed?(owner, ensuring_owner_was_method); end

  class << self
    # source://activejob/7.2.2/lib/active_job/queue_name.rb#55
    def queue_name; end

    # source://activesupport/7.2.2/lib/active_support/rescuable.rb#15
    def rescue_handlers; end
  end
end

# source://activerecord//lib/active_record/disable_joins_association_relation.rb#4
class ActiveRecord::DisableJoinsAssociationRelation < ::ActiveRecord::Relation
  # source://activerecord//lib/active_record/disable_joins_association_relation.rb#7
  def initialize(klass, key, ids); end

  # source://activerecord//lib/active_record/disable_joins_association_relation.rb#17
  def first(limit = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/disable_joins_association_relation.rb#5
  def ids; end

  # source://activerecord//lib/active_record/disable_joins_association_relation.rb#5
  def key; end

  # source://activerecord//lib/active_record/disable_joins_association_relation.rb#13
  def limit(value); end

  # source://activerecord//lib/active_record/disable_joins_association_relation.rb#25
  def load; end
end

# source://activerecord//lib/active_record/migration.rb#104
class ActiveRecord::DuplicateMigrationNameError < ::ActiveRecord::MigrationError
  # source://activerecord//lib/active_record/migration.rb#105
  def initialize(name = T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/migration.rb#94
class ActiveRecord::DuplicateMigrationVersionError < ::ActiveRecord::MigrationError
  # source://activerecord//lib/active_record/migration.rb#95
  def initialize(version = T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/dynamic_matchers.rb#4
module ActiveRecord::DynamicMatchers
  private

  # source://activerecord//lib/active_record/dynamic_matchers.rb#15
  def method_missing(name, *_arg1, **_arg2, &_arg3); end

  # source://activerecord//lib/active_record/dynamic_matchers.rb#6
  def respond_to_missing?(name, _); end
end

# source://activerecord//lib/active_record/dynamic_matchers.rb#93
class ActiveRecord::DynamicMatchers::FindBy < ::ActiveRecord::DynamicMatchers::Method
  # source://activerecord//lib/active_record/dynamic_matchers.rb#100
  def finder; end

  class << self
    # source://activerecord//lib/active_record/dynamic_matchers.rb#96
    def prefix; end
  end
end

# source://activerecord//lib/active_record/dynamic_matchers.rb#105
class ActiveRecord::DynamicMatchers::FindByBang < ::ActiveRecord::DynamicMatchers::Method
  # source://activerecord//lib/active_record/dynamic_matchers.rb#116
  def finder; end

  class << self
    # source://activerecord//lib/active_record/dynamic_matchers.rb#108
    def prefix; end

    # source://activerecord//lib/active_record/dynamic_matchers.rb#112
    def suffix; end
  end
end

# source://activerecord//lib/active_record/dynamic_matchers.rb#26
class ActiveRecord::DynamicMatchers::Method
  # source://activerecord//lib/active_record/dynamic_matchers.rb#52
  def initialize(model, method_name); end

  # source://activerecord//lib/active_record/dynamic_matchers.rb#50
  def attribute_names; end

  # source://activerecord//lib/active_record/dynamic_matchers.rb#63
  def define; end

  # source://activerecord//lib/active_record/dynamic_matchers.rb#50
  def model; end

  # source://activerecord//lib/active_record/dynamic_matchers.rb#50
  def name; end

  # source://activerecord//lib/active_record/dynamic_matchers.rb#59
  def valid?; end

  private

  # source://activerecord//lib/active_record/dynamic_matchers.rb#84
  def attributes_hash; end

  # source://activerecord//lib/active_record/dynamic_matchers.rb#72
  def body; end

  # source://activerecord//lib/active_record/dynamic_matchers.rb#88
  def finder; end

  # source://activerecord//lib/active_record/dynamic_matchers.rb#78
  def signature; end

  class << self
    # source://activerecord//lib/active_record/dynamic_matchers.rb#32
    def match(model, name); end

    # source://activerecord//lib/active_record/dynamic_matchers.rb#30
    def matchers; end

    # source://activerecord//lib/active_record/dynamic_matchers.rb#37
    def pattern; end

    # source://activerecord//lib/active_record/dynamic_matchers.rb#41
    def prefix; end

    # source://activerecord//lib/active_record/dynamic_matchers.rb#45
    def suffix; end
  end
end

# source://activerecord//lib/active_record/associations/errors.rb#243
class ActiveRecord::EagerLoadPolymorphicError < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/associations/errors.rb#244
  def initialize(reflection = T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/encryption.rb#7
module ActiveRecord::Encryption
  include ::ActiveRecord::Encryption::Configurable
  include ::ActiveRecord::Encryption::Contexts
  extend ::ActiveSupport::Autoload
  extend ::ActiveRecord::Encryption::Configurable::ClassMethods
  extend ::ActiveRecord::Encryption::Contexts::ClassMethods

  # source://activerecord//lib/active_record/encryption/configurable.rb#10
  def config; end

  # source://activesupport/7.2.2/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def custom_contexts; end

  # source://activesupport/7.2.2/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def custom_contexts=(obj); end

  # source://activerecord//lib/active_record/encryption/contexts.rb#17
  def default_context; end

  # source://activerecord//lib/active_record/encryption/contexts.rb#17
  def default_context=(val); end

  # source://activerecord//lib/active_record/encryption/configurable.rb#11
  def encrypted_attribute_declaration_listeners; end

  # source://activerecord//lib/active_record/encryption/configurable.rb#11
  def encrypted_attribute_declaration_listeners=(val); end

  class << self
    # source://activerecord//lib/active_record/encryption/configurable.rb#10
    def config; end

    # source://activesupport/7.2.2/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#49
    def custom_contexts; end

    # source://activesupport/7.2.2/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def custom_contexts=(obj); end

    # source://activerecord//lib/active_record/encryption/contexts.rb#17
    def default_context; end

    # source://activerecord//lib/active_record/encryption/contexts.rb#17
    def default_context=(val); end

    # source://activerecord//lib/active_record/encryption.rb#50
    def eager_load!; end

    # source://activerecord//lib/active_record/encryption/configurable.rb#11
    def encrypted_attribute_declaration_listeners; end

    # source://activerecord//lib/active_record/encryption/configurable.rb#11
    def encrypted_attribute_declaration_listeners=(val); end
  end
end

# source://activerecord//lib/active_record/encryption/auto_filtered_parameters.rb#5
class ActiveRecord::Encryption::AutoFilteredParameters
  # source://activerecord//lib/active_record/encryption/auto_filtered_parameters.rb#6
  def initialize(app); end

  # source://activerecord//lib/active_record/encryption/auto_filtered_parameters.rb#14
  def enable; end

  private

  # source://activerecord//lib/active_record/encryption/auto_filtered_parameters.rb#20
  def app; end

  # source://activerecord//lib/active_record/encryption/auto_filtered_parameters.rb#36
  def apply_collected_attributes; end

  # source://activerecord//lib/active_record/encryption/auto_filtered_parameters.rb#53
  def apply_filter(klass, attribute); end

  # source://activerecord//lib/active_record/encryption/auto_filtered_parameters.rb#28
  def attribute_was_declared(klass, attribute); end

  # source://activerecord//lib/active_record/encryption/auto_filtered_parameters.rb#48
  def collect_for_later(klass, attribute); end

  # source://activerecord//lib/active_record/encryption/auto_filtered_parameters.rb#44
  def collecting?; end

  # source://activerecord//lib/active_record/encryption/auto_filtered_parameters.rb#61
  def excluded_from_filter_parameters?(filter_parameter); end

  # source://activerecord//lib/active_record/encryption/auto_filtered_parameters.rb#22
  def install_collecting_hook; end
end

# source://activerecord//lib/active_record/encryption/cipher.rb#11
class ActiveRecord::Encryption::Cipher
  extend ::ActiveSupport::Autoload

  # source://activerecord//lib/active_record/encryption/cipher.rb#25
  def decrypt(encrypted_message, key:); end

  # source://activerecord//lib/active_record/encryption/cipher.rb#15
  def encrypt(clean_text, key:, deterministic: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/encryption/cipher.rb#35
  def iv_length; end

  # source://activerecord//lib/active_record/encryption/cipher.rb#31
  def key_length; end

  private

  # source://activerecord//lib/active_record/encryption/cipher.rb#48
  def cipher_for(secret, deterministic: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/encryption/cipher.rb#40
  def try_to_decrypt_with_each(encrypted_text, keys:); end
end

# source://activerecord//lib/active_record/encryption/cipher/aes256_gcm.rb#14
class ActiveRecord::Encryption::Cipher::Aes256Gcm
  # source://activerecord//lib/active_record/encryption/cipher/aes256_gcm.rb#29
  def initialize(secret, deterministic: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/encryption/cipher/aes256_gcm.rb#55
  def decrypt(encrypted_message); end

  # source://activerecord//lib/active_record/encryption/cipher/aes256_gcm.rb#34
  def encrypt(clear_text); end

  # source://activerecord//lib/active_record/encryption/cipher/aes256_gcm.rb#82
  def inspect; end

  private

  # source://activerecord//lib/active_record/encryption/cipher/aes256_gcm.rb#95
  def generate_deterministic_iv(clear_text); end

  # source://activerecord//lib/active_record/encryption/cipher/aes256_gcm.rb#87
  def generate_iv(cipher, clear_text); end

  class << self
    # source://activerecord//lib/active_record/encryption/cipher/aes256_gcm.rb#22
    def iv_length; end

    # source://activerecord//lib/active_record/encryption/cipher/aes256_gcm.rb#18
    def key_length; end
  end
end

# source://activerecord//lib/active_record/encryption/cipher/aes256_gcm.rb#15
ActiveRecord::Encryption::Cipher::Aes256Gcm::CIPHER_TYPE = T.let(T.unsafe(nil), String)

# source://activerecord//lib/active_record/encryption/cipher.rb#12
ActiveRecord::Encryption::Cipher::DEFAULT_ENCODING = T.let(T.unsafe(nil), Encoding)

# source://activerecord//lib/active_record/encryption/config.rb#8
class ActiveRecord::Encryption::Config
  # source://activerecord//lib/active_record/encryption/config.rb#13
  def initialize; end

  # source://activerecord//lib/active_record/encryption/config.rb#9
  def add_to_filter_parameters; end

  # source://activerecord//lib/active_record/encryption/config.rb#9
  def add_to_filter_parameters=(_arg0); end

  # source://activerecord//lib/active_record/encryption/config.rb#41
  def deterministic_key; end

  # source://activerecord//lib/active_record/encryption/config.rb#9
  def deterministic_key=(_arg0); end

  # source://activerecord//lib/active_record/encryption/config.rb#9
  def encrypt_fixtures; end

  # source://activerecord//lib/active_record/encryption/config.rb#9
  def encrypt_fixtures=(_arg0); end

  # source://activerecord//lib/active_record/encryption/config.rb#9
  def excluded_from_filter_parameters; end

  # source://activerecord//lib/active_record/encryption/config.rb#9
  def excluded_from_filter_parameters=(_arg0); end

  # source://activerecord//lib/active_record/encryption/config.rb#9
  def extend_queries; end

  # source://activerecord//lib/active_record/encryption/config.rb#9
  def extend_queries=(_arg0); end

  # source://activerecord//lib/active_record/encryption/config.rb#9
  def forced_encoding_for_deterministic_encryption; end

  # source://activerecord//lib/active_record/encryption/config.rb#9
  def forced_encoding_for_deterministic_encryption=(_arg0); end

  # source://activerecord//lib/active_record/encryption/config.rb#36
  def has_deterministic_key?; end

  # source://activerecord//lib/active_record/encryption/config.rb#36
  def has_key_derivation_salt?; end

  # source://activerecord//lib/active_record/encryption/config.rb#36
  def has_primary_key?; end

  # source://activerecord//lib/active_record/encryption/config.rb#9
  def hash_digest_class; end

  # source://activerecord//lib/active_record/encryption/config.rb#9
  def hash_digest_class=(_arg0); end

  # source://activerecord//lib/active_record/encryption/config.rb#41
  def key_derivation_salt; end

  # source://activerecord//lib/active_record/encryption/config.rb#9
  def key_derivation_salt=(_arg0); end

  # source://activerecord//lib/active_record/encryption/config.rb#20
  def previous=(previous_schemes_properties); end

  # source://activerecord//lib/active_record/encryption/config.rb#9
  def previous_schemes; end

  # source://activerecord//lib/active_record/encryption/config.rb#9
  def previous_schemes=(_arg0); end

  # source://activerecord//lib/active_record/encryption/config.rb#41
  def primary_key; end

  # source://activerecord//lib/active_record/encryption/config.rb#9
  def primary_key=(_arg0); end

  # source://activerecord//lib/active_record/encryption/config.rb#9
  def store_key_references; end

  # source://activerecord//lib/active_record/encryption/config.rb#9
  def store_key_references=(_arg0); end

  # source://activerecord//lib/active_record/encryption/config.rb#26
  def support_sha1_for_non_deterministic_encryption=(value); end

  # source://activerecord//lib/active_record/encryption/config.rb#9
  def support_unencrypted_data; end

  # source://activerecord//lib/active_record/encryption/config.rb#9
  def support_unencrypted_data=(_arg0); end

  # source://activerecord//lib/active_record/encryption/config.rb#9
  def validate_column_size; end

  # source://activerecord//lib/active_record/encryption/config.rb#9
  def validate_column_size=(_arg0); end

  private

  # source://activerecord//lib/active_record/encryption/config.rb#63
  def add_previous_scheme(**properties); end

  # source://activerecord//lib/active_record/encryption/config.rb#48
  def set_defaults; end
end

# source://activerecord//lib/active_record/encryption/configurable.rb#6
module ActiveRecord::Encryption::Configurable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Encryption::Configurable::ClassMethods
end

# source://activerecord//lib/active_record/encryption/configurable.rb#0
module ActiveRecord::Encryption::Configurable::ClassMethods
  # source://activerecord//lib/active_record/encryption/configurable.rb#17
  def cipher(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/encryption/configurable.rb#20
  def configure(primary_key: T.unsafe(nil), deterministic_key: T.unsafe(nil), key_derivation_salt: T.unsafe(nil), **properties); end

  # source://activerecord//lib/active_record/encryption/configurable.rb#52
  def encrypted_attribute_was_declared(klass, name); end

  # source://activerecord//lib/active_record/encryption/configurable.rb#17
  def encryptor(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/encryption/configurable.rb#17
  def frozen_encryption(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/encryption/configurable.rb#17
  def key_generator(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/encryption/configurable.rb#17
  def key_provider(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/encryption/configurable.rb#17
  def message_serializer(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/encryption/configurable.rb#47
  def on_encrypted_attribute_declared(&block); end
end

# source://activerecord//lib/active_record/encryption/context.rb#12
class ActiveRecord::Encryption::Context
  # source://activerecord//lib/active_record/encryption/context.rb#17
  def initialize; end

  # source://activerecord//lib/active_record/encryption/context.rb#15
  def cipher; end

  # source://activerecord//lib/active_record/encryption/context.rb#15
  def cipher=(_arg0); end

  # source://activerecord//lib/active_record/encryption/context.rb#15
  def encryptor; end

  # source://activerecord//lib/active_record/encryption/context.rb#15
  def encryptor=(_arg0); end

  # source://activerecord//lib/active_record/encryption/context.rb#15
  def frozen_encryption; end

  # source://activerecord//lib/active_record/encryption/context.rb#15
  def frozen_encryption=(_arg0); end

  # source://activerecord//lib/active_record/encryption/context.rb#15
  def frozen_encryption?; end

  # source://activerecord//lib/active_record/encryption/context.rb#15
  def key_generator; end

  # source://activerecord//lib/active_record/encryption/context.rb#15
  def key_generator=(_arg0); end

  # source://activerecord//lib/active_record/encryption/context.rb#24
  def key_provider; end

  # source://activerecord//lib/active_record/encryption/context.rb#15
  def key_provider=(_arg0); end

  # source://activerecord//lib/active_record/encryption/context.rb#15
  def message_serializer; end

  # source://activerecord//lib/active_record/encryption/context.rb#15
  def message_serializer=(_arg0); end

  private

  # source://activerecord//lib/active_record/encryption/context.rb#37
  def build_default_key_provider; end

  # source://activerecord//lib/active_record/encryption/context.rb#29
  def set_defaults; end
end

# source://activerecord//lib/active_record/encryption/context.rb#13
ActiveRecord::Encryption::Context::PROPERTIES = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/active_record/encryption/contexts.rb#13
module ActiveRecord::Encryption::Contexts
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Encryption::Contexts::ClassMethods
end

# source://activerecord//lib/active_record/encryption/contexts.rb#0
module ActiveRecord::Encryption::Contexts::ClassMethods
  # source://activerecord//lib/active_record/encryption/contexts.rb#62
  def context; end

  # source://activerecord//lib/active_record/encryption/contexts.rb#66
  def current_custom_context; end

  # source://activerecord//lib/active_record/encryption/contexts.rb#57
  def protecting_encrypted_data(&block); end

  # source://activerecord//lib/active_record/encryption/contexts.rb#70
  def reset_default_context; end

  # source://activerecord//lib/active_record/encryption/contexts.rb#33
  def with_encryption_context(properties); end

  # source://activerecord//lib/active_record/encryption/contexts.rb#49
  def without_encryption(&block); end
end

# source://activerecord//lib/active_record/encryption/derived_secret_key_provider.rb#6
class ActiveRecord::Encryption::DerivedSecretKeyProvider < ::ActiveRecord::Encryption::KeyProvider
  # source://activerecord//lib/active_record/encryption/derived_secret_key_provider.rb#7
  def initialize(passwords, key_generator: T.unsafe(nil)); end

  private

  # source://activerecord//lib/active_record/encryption/derived_secret_key_provider.rb#12
  def derive_key_from(password, using: T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/encryption/deterministic_key_provider.rb#6
class ActiveRecord::Encryption::DeterministicKeyProvider < ::ActiveRecord::Encryption::DerivedSecretKeyProvider
  # source://activerecord//lib/active_record/encryption/deterministic_key_provider.rb#7
  def initialize(password); end
end

# source://activerecord//lib/active_record/encryption/encryptable_record.rb#7
module ActiveRecord::Encryption::EncryptableRecord
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Encryption::EncryptableRecord::ClassMethods

  # source://activerecord//lib/active_record/encryption/encryptable_record.rb#157
  def ciphertext_for(attribute_name); end

  # source://activerecord//lib/active_record/encryption/encryptable_record.rb#171
  def decrypt; end

  # source://activerecord//lib/active_record/encryption/encryptable_record.rb#166
  def encrypt; end

  # source://activerecord//lib/active_record/encryption/encryptable_record.rb#146
  def encrypted_attribute?(attribute_name); end

  private

  # source://activerecord//lib/active_record/encryption/encryptable_record.rb#178
  def _create_record(attribute_names = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/encryption/encryptable_record.rb#214
  def build_decrypt_attribute_assignments; end

  # source://activerecord//lib/active_record/encryption/encryptable_record.rb#208
  def build_encrypt_attribute_assignments; end

  # source://activerecord//lib/active_record/encryption/encryptable_record.rb#223
  def cant_modify_encrypted_attributes_when_frozen; end

  # source://activerecord//lib/active_record/encryption/encryptable_record.rb#193
  def decrypt_attributes; end

  # source://activerecord//lib/active_record/encryption/encryptable_record.rb#187
  def encrypt_attributes; end

  # source://activerecord//lib/active_record/encryption/encryptable_record.rb#204
  def has_encrypted_attributes?; end

  # source://activerecord//lib/active_record/encryption/encryptable_record.rb#200
  def validate_encryption_allowed; end

  module GeneratedClassMethods
    def encrypted_attributes; end
    def encrypted_attributes=(value); end
    def encrypted_attributes?; end
  end

  module GeneratedInstanceMethods
    def encrypted_attributes; end
    def encrypted_attributes=(value); end
    def encrypted_attributes?; end
  end
end

# source://activerecord//lib/active_record/encryption/encryptable_record.rb#0
module ActiveRecord::Encryption::EncryptableRecord::ClassMethods
  # source://activerecord//lib/active_record/encryption/encryptable_record.rb#58
  def deterministic_encrypted_attributes; end

  # source://activerecord//lib/active_record/encryption/encryptable_record.rb#49
  def encrypts(*names, key_provider: T.unsafe(nil), key: T.unsafe(nil), deterministic: T.unsafe(nil), support_unencrypted_data: T.unsafe(nil), downcase: T.unsafe(nil), ignore_case: T.unsafe(nil), previous: T.unsafe(nil), **context_properties); end

  # source://activerecord//lib/active_record/encryption/encryptable_record.rb#65
  def source_attribute_from_preserved_attribute(attribute_name); end

  private

  # source://activerecord//lib/active_record/encryption/encryptable_record.rb#132
  def add_length_validation_for_encrypted_columns; end

  # source://activerecord//lib/active_record/encryption/encryptable_record.rb#84
  def encrypt_attribute(name, key_provider: T.unsafe(nil), key: T.unsafe(nil), deterministic: T.unsafe(nil), support_unencrypted_data: T.unsafe(nil), downcase: T.unsafe(nil), ignore_case: T.unsafe(nil), previous: T.unsafe(nil), **context_properties); end

  # source://activerecord//lib/active_record/encryption/encryptable_record.rb#78
  def global_previous_schemes_for(scheme); end

  # source://activerecord//lib/active_record/encryption/encryptable_record.rb#126
  def load_schema!; end

  # source://activerecord//lib/active_record/encryption/encryptable_record.rb#109
  def override_accessors_to_preserve_original(name, original_attribute_name); end

  # source://activerecord//lib/active_record/encryption/encryptable_record.rb#98
  def preserve_original_encrypted(name); end

  # source://activerecord//lib/active_record/encryption/encryptable_record.rb#70
  def scheme_for(key_provider: T.unsafe(nil), key: T.unsafe(nil), deterministic: T.unsafe(nil), support_unencrypted_data: T.unsafe(nil), downcase: T.unsafe(nil), ignore_case: T.unsafe(nil), previous: T.unsafe(nil), **context_properties); end

  # source://activerecord//lib/active_record/encryption/encryptable_record.rb#138
  def validate_column_size(attribute_name); end
end

# source://activerecord//lib/active_record/encryption/encryptable_record.rb#176
ActiveRecord::Encryption::EncryptableRecord::ORIGINAL_ATTRIBUTE_PREFIX = T.let(T.unsafe(nil), String)

# source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#10
class ActiveRecord::Encryption::EncryptedAttributeType < ::ActiveModel::Type::Value
  include ::ActiveModel::Type::Helpers::Mutable

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#23
  def initialize(scheme:, cast_type: T.unsafe(nil), previous_type: T.unsafe(nil), default: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#16
  def accessor(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#31
  def cast(value); end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#13
  def cast_type; end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#51
  def changed_in_place?(raw_old_value, new_value); end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#35
  def deserialize(value); end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#15
  def deterministic?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#15
  def downcase?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#47
  def encrypted?(value); end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#15
  def fixed?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#15
  def key_provider(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#15
  def previous_schemes(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#56
  def previous_types; end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#13
  def scheme; end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#39
  def serialize(value); end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#61
  def support_unencrypted_data?; end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#16
  def type(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#15
  def with_context(*_arg0, **_arg1, &_arg2); end

  private

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#74
  def build_previous_types_for(schemes); end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#162
  def clean_text_scheme; end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#102
  def decrypt(value); end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#84
  def decrypt_as_text(value); end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#158
  def decryption_options; end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#146
  def encrypt(value); end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#136
  def encrypt_as_text(value); end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#154
  def encryption_options; end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#150
  def encryptor; end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#114
  def handle_deserialize_error(error, value); end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#66
  def previous_schemes_including_clean_text; end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#80
  def previous_type?; end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#70
  def previous_types_without_clean_text; end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#130
  def serialize_with_current(value); end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#126
  def serialize_with_oldest(value); end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#122
  def serialize_with_oldest?; end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#166
  def text_to_database_type(value); end

  # source://activerecord//lib/active_record/encryption/encrypted_attribute_type.rb#106
  def try_to_deserialize_with_previous_encrypted_types(value); end
end

# source://activerecord//lib/active_record/encryption/encrypted_fixtures.rb#5
module ActiveRecord::Encryption::EncryptedFixtures
  # source://activerecord//lib/active_record/encryption/encrypted_fixtures.rb#6
  def initialize(fixture, model_class); end

  private

  # source://activerecord//lib/active_record/encryption/encrypted_fixtures.rb#14
  def encrypt_fixture_data(fixture, model_class); end

  # source://activerecord//lib/active_record/encryption/encrypted_fixtures.rb#26
  def process_preserved_original_columns(fixture, model_class); end
end

# source://activerecord//lib/active_record/encryption/encrypting_only_encryptor.rb#6
class ActiveRecord::Encryption::EncryptingOnlyEncryptor < ::ActiveRecord::Encryption::Encryptor
  # source://activerecord//lib/active_record/encryption/encrypting_only_encryptor.rb#7
  def decrypt(encrypted_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/encryption/encryptor.rb#14
class ActiveRecord::Encryption::Encryptor
  # source://activerecord//lib/active_record/encryption/encryptor.rb#19
  def initialize(compress: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/encryption/encryptor.rb#77
  def binary?; end

  # source://activerecord//lib/active_record/encryption/encryptor.rb#60
  def decrypt(encrypted_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/encryption/encryptor.rb#42
  def encrypt(clear_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/encryption/encryptor.rb#70
  def encrypted?(text); end

  private

  # source://activerecord//lib/active_record/encryption/encryptor.rb#100
  def build_encrypted_message(clear_text, key_provider:, cipher_options:); end

  # source://activerecord//lib/active_record/encryption/encryptor.rb#96
  def cipher; end

  # source://activerecord//lib/active_record/encryption/encryptor.rb#137
  def compress(data); end

  # source://activerecord//lib/active_record/encryption/encryptor.rb#133
  def compress?; end

  # source://activerecord//lib/active_record/encryption/encryptor.rb#125
  def compress_if_worth_it(string); end

  # source://activerecord//lib/active_record/encryption/encryptor.rb#86
  def default_key_provider; end

  # source://activerecord//lib/active_record/encryption/encryptor.rb#114
  def deserialize_message(message); end

  # source://activerecord//lib/active_record/encryption/encryptor.rb#157
  def force_encoding_if_needed(value); end

  # source://activerecord//lib/active_record/encryption/encryptor.rb#165
  def forced_encoding_for_deterministic_encryption; end

  # source://activerecord//lib/active_record/encryption/encryptor.rb#110
  def serialize_message(message); end

  # source://activerecord//lib/active_record/encryption/encryptor.rb#120
  def serializer; end

  # source://activerecord//lib/active_record/encryption/encryptor.rb#151
  def uncompress(data); end

  # source://activerecord//lib/active_record/encryption/encryptor.rb#143
  def uncompress_if_needed(data, compressed); end

  # source://activerecord//lib/active_record/encryption/encryptor.rb#90
  def validate_payload_type(clear_text); end
end

# source://activerecord//lib/active_record/encryption/encryptor.rb#82
ActiveRecord::Encryption::Encryptor::DECRYPT_ERRORS = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/active_record/encryption/encryptor.rb#83
ActiveRecord::Encryption::Encryptor::ENCODING_ERRORS = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/active_record/encryption/encryptor.rb#84
ActiveRecord::Encryption::Encryptor::THRESHOLD_TO_JUSTIFY_COMPRESSION = T.let(T.unsafe(nil), Integer)

# source://activerecord//lib/active_record/encryption/envelope_encryption_key_provider.rb#17
class ActiveRecord::Encryption::EnvelopeEncryptionKeyProvider
  # source://activerecord//lib/active_record/encryption/envelope_encryption_key_provider.rb#31
  def active_primary_key; end

  # source://activerecord//lib/active_record/encryption/envelope_encryption_key_provider.rb#26
  def decryption_keys(encrypted_message); end

  # source://activerecord//lib/active_record/encryption/envelope_encryption_key_provider.rb#18
  def encryption_key; end

  private

  # source://activerecord//lib/active_record/encryption/envelope_encryption_key_provider.rb#40
  def decrypt_data_key(encrypted_message); end

  # source://activerecord//lib/active_record/encryption/envelope_encryption_key_provider.rb#36
  def encrypt_data_key(random_secret); end

  # source://activerecord//lib/active_record/encryption/envelope_encryption_key_provider.rb#50
  def generate_random_secret; end

  # source://activerecord//lib/active_record/encryption/envelope_encryption_key_provider.rb#46
  def primary_key_provider; end
end

# source://activerecord//lib/active_record/encryption/errors.rb#5
module ActiveRecord::Encryption::Errors; end

# source://activerecord//lib/active_record/encryption/errors.rb#6
class ActiveRecord::Encryption::Errors::Base < ::StandardError; end

# source://activerecord//lib/active_record/encryption/errors.rb#10
class ActiveRecord::Encryption::Errors::Configuration < ::ActiveRecord::Encryption::Errors::Base; end

# source://activerecord//lib/active_record/encryption/errors.rb#8
class ActiveRecord::Encryption::Errors::Decryption < ::ActiveRecord::Encryption::Errors::Base; end

# source://activerecord//lib/active_record/encryption/errors.rb#7
class ActiveRecord::Encryption::Errors::Encoding < ::ActiveRecord::Encryption::Errors::Base; end

# source://activerecord//lib/active_record/encryption/errors.rb#12
class ActiveRecord::Encryption::Errors::EncryptedContentIntegrity < ::ActiveRecord::Encryption::Errors::Base; end

# source://activerecord//lib/active_record/encryption/errors.rb#9
class ActiveRecord::Encryption::Errors::Encryption < ::ActiveRecord::Encryption::Errors::Base; end

# source://activerecord//lib/active_record/encryption/errors.rb#11
class ActiveRecord::Encryption::Errors::ForbiddenClass < ::ActiveRecord::Encryption::Errors::Base; end

# source://activerecord//lib/active_record/encryption/extended_deterministic_queries.rb#23
module ActiveRecord::Encryption::ExtendedDeterministicQueries
  class << self
    # source://activerecord//lib/active_record/encryption/extended_deterministic_queries.rb#24
    def install_support; end
  end
end

# source://activerecord//lib/active_record/encryption/extended_deterministic_queries.rb#132
class ActiveRecord::Encryption::ExtendedDeterministicQueries::AdditionalValue
  # source://activerecord//lib/active_record/encryption/extended_deterministic_queries.rb#135
  def initialize(value, type); end

  # source://activerecord//lib/active_record/encryption/extended_deterministic_queries.rb#133
  def type; end

  # source://activerecord//lib/active_record/encryption/extended_deterministic_queries.rb#133
  def value; end

  private

  # source://activerecord//lib/active_record/encryption/extended_deterministic_queries.rb#141
  def process(value); end
end

# source://activerecord//lib/active_record/encryption/extended_deterministic_queries.rb#122
module ActiveRecord::Encryption::ExtendedDeterministicQueries::CoreQueries
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Encryption::ExtendedDeterministicQueries::CoreQueries::ClassMethods
end

# source://activerecord//lib/active_record/encryption/extended_deterministic_queries.rb#0
module ActiveRecord::Encryption::ExtendedDeterministicQueries::CoreQueries::ClassMethods
  # source://activerecord//lib/active_record/encryption/extended_deterministic_queries.rb#126
  def find_by(*args); end
end

# source://activerecord//lib/active_record/encryption/extended_deterministic_queries.rb#41
module ActiveRecord::Encryption::ExtendedDeterministicQueries::EncryptedQuery
  class << self
    # source://activerecord//lib/active_record/encryption/extended_deterministic_queries.rb#43
    def process_arguments(owner, args, check_for_additional_values); end

    private

    # source://activerecord//lib/active_record/encryption/extended_deterministic_queries.rb#87
    def additional_values_for(value, type); end

    # source://activerecord//lib/active_record/encryption/extended_deterministic_queries.rb#69
    def process_encrypted_query_argument(value, check_for_additional_values, type); end
  end
end

# source://activerecord//lib/active_record/encryption/extended_deterministic_queries.rb#146
module ActiveRecord::Encryption::ExtendedDeterministicQueries::ExtendedEncryptableType
  # source://activerecord//lib/active_record/encryption/extended_deterministic_queries.rb#147
  def serialize(data); end
end

# source://activerecord//lib/active_record/encryption/extended_deterministic_queries.rb#95
module ActiveRecord::Encryption::ExtendedDeterministicQueries::RelationQueries
  # source://activerecord//lib/active_record/encryption/extended_deterministic_queries.rb#100
  def exists?(*args); end

  # source://activerecord//lib/active_record/encryption/extended_deterministic_queries.rb#104
  def scope_for_create; end

  # source://activerecord//lib/active_record/encryption/extended_deterministic_queries.rb#96
  def where(*args); end
end

# source://activerecord//lib/active_record/encryption/extended_deterministic_uniqueness_validator.rb#5
module ActiveRecord::Encryption::ExtendedDeterministicUniquenessValidator
  class << self
    # source://activerecord//lib/active_record/encryption/extended_deterministic_uniqueness_validator.rb#6
    def install_support; end
  end
end

# source://activerecord//lib/active_record/encryption/extended_deterministic_uniqueness_validator.rb#10
module ActiveRecord::Encryption::ExtendedDeterministicUniquenessValidator::EncryptedUniquenessValidator
  # source://activerecord//lib/active_record/encryption/extended_deterministic_uniqueness_validator.rb#11
  def validate_each(record, attribute, value); end
end

# source://activerecord//lib/active_record/encryption/key.rb#10
class ActiveRecord::Encryption::Key
  # source://activerecord//lib/active_record/encryption/key.rb#13
  def initialize(secret); end

  # source://activerecord//lib/active_record/encryption/key.rb#23
  def id; end

  # source://activerecord//lib/active_record/encryption/key.rb#11
  def public_tags; end

  # source://activerecord//lib/active_record/encryption/key.rb#11
  def secret; end

  class << self
    # source://activerecord//lib/active_record/encryption/key.rb#18
    def derive_from(password); end
  end
end

# source://activerecord//lib/active_record/encryption/key_generator.rb#8
class ActiveRecord::Encryption::KeyGenerator
  # source://activerecord//lib/active_record/encryption/key_generator.rb#11
  def initialize(hash_digest_class: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/encryption/key_generator.rb#38
  def derive_key_from(password, length: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/encryption/key_generator.rb#30
  def generate_random_hex_key(length: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/encryption/key_generator.rb#16
  def generate_random_key(length: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/encryption/key_generator.rb#9
  def hash_digest_class; end

  private

  # source://activerecord//lib/active_record/encryption/key_generator.rb#44
  def key_derivation_salt; end

  # source://activerecord//lib/active_record/encryption/key_generator.rb#48
  def key_length; end
end

# source://activerecord//lib/active_record/encryption/key_provider.rb#10
class ActiveRecord::Encryption::KeyProvider
  # source://activerecord//lib/active_record/encryption/key_provider.rb#11
  def initialize(keys); end

  # source://activerecord//lib/active_record/encryption/key_provider.rb#32
  def decryption_keys(encrypted_message); end

  # source://activerecord//lib/active_record/encryption/key_provider.rb#20
  def encryption_key; end

  private

  # source://activerecord//lib/active_record/encryption/key_provider.rb#41
  def keys_grouped_by_id; end
end

# source://activerecord//lib/active_record/encryption/message.rb#11
class ActiveRecord::Encryption::Message
  # source://activerecord//lib/active_record/encryption/message.rb#14
  def initialize(payload: T.unsafe(nil), headers: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/encryption/message.rb#21
  def ==(other_message); end

  # source://activerecord//lib/active_record/encryption/message.rb#12
  def headers; end

  # source://activerecord//lib/active_record/encryption/message.rb#12
  def headers=(_arg0); end

  # source://activerecord//lib/active_record/encryption/message.rb#12
  def payload; end

  # source://activerecord//lib/active_record/encryption/message.rb#12
  def payload=(_arg0); end

  private

  # source://activerecord//lib/active_record/encryption/message.rb#26
  def validate_payload_type(payload); end
end

# source://activerecord//lib/active_record/encryption/message_serializer.rb#23
class ActiveRecord::Encryption::MessageSerializer
  # source://activerecord//lib/active_record/encryption/message_serializer.rb#36
  def binary?; end

  # source://activerecord//lib/active_record/encryption/message_serializer.rb#31
  def dump(message); end

  # source://activerecord//lib/active_record/encryption/message_serializer.rb#24
  def load(serialized_content); end

  private

  # source://activerecord//lib/active_record/encryption/message_serializer.rb#85
  def decode_if_needed(value); end

  # source://activerecord//lib/active_record/encryption/message_serializer.rb#77
  def encode_if_needed(value); end

  # source://activerecord//lib/active_record/encryption/message_serializer.rb#71
  def headers_to_json(headers); end

  # source://activerecord//lib/active_record/encryption/message_serializer.rb#64
  def message_to_json(message); end

  # source://activerecord//lib/active_record/encryption/message_serializer.rb#41
  def parse_message(data, level); end

  # source://activerecord//lib/active_record/encryption/message_serializer.rb#56
  def parse_properties(headers, level); end

  # source://activerecord//lib/active_record/encryption/message_serializer.rb#46
  def validate_message_data_format(data, level); end
end

# source://activerecord//lib/active_record/encryption/null_encryptor.rb#7
class ActiveRecord::Encryption::NullEncryptor
  # source://activerecord//lib/active_record/encryption/null_encryptor.rb#20
  def binary?; end

  # source://activerecord//lib/active_record/encryption/null_encryptor.rb#12
  def decrypt(encrypted_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/encryption/null_encryptor.rb#8
  def encrypt(clean_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/encryption/null_encryptor.rb#16
  def encrypted?(text); end
end

# source://activerecord//lib/active_record/encryption/properties.rb#16
class ActiveRecord::Encryption::Properties
  # source://activerecord//lib/active_record/encryption/properties.rb#42
  def initialize(initial_properties = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/encryption/properties.rb#20
  def ==(arg); end

  # source://activerecord//lib/active_record/encryption/properties.rb#20
  def [](*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/encryption/properties.rb#50
  def []=(key, value); end

  # source://activerecord//lib/active_record/encryption/properties.rb#62
  def add(other_properties); end

  # source://activerecord//lib/active_record/encryption/properties.rb#33
  def auth_tag; end

  # source://activerecord//lib/active_record/encryption/properties.rb#37
  def auth_tag=(value); end

  # source://activerecord//lib/active_record/encryption/properties.rb#33
  def compressed; end

  # source://activerecord//lib/active_record/encryption/properties.rb#37
  def compressed=(value); end

  # source://activerecord//lib/active_record/encryption/properties.rb#20
  def each(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/encryption/properties.rb#33
  def encoding; end

  # source://activerecord//lib/active_record/encryption/properties.rb#37
  def encoding=(value); end

  # source://activerecord//lib/active_record/encryption/properties.rb#33
  def encrypted_data_key; end

  # source://activerecord//lib/active_record/encryption/properties.rb#37
  def encrypted_data_key=(value); end

  # source://activerecord//lib/active_record/encryption/properties.rb#33
  def encrypted_data_key_id; end

  # source://activerecord//lib/active_record/encryption/properties.rb#37
  def encrypted_data_key_id=(value); end

  # source://activerecord//lib/active_record/encryption/properties.rb#33
  def iv; end

  # source://activerecord//lib/active_record/encryption/properties.rb#37
  def iv=(value); end

  # source://activerecord//lib/active_record/encryption/properties.rb#20
  def key?(*_arg0, **_arg1, &_arg2); end

  # source://activesupport/7.2.2/lib/active_support/delegation.rb#187
  def method_missing(method, *_arg1, **_arg2, &_arg3); end

  # source://activerecord//lib/active_record/encryption/properties.rb#68
  def to_h; end

  # source://activerecord//lib/active_record/encryption/properties.rb#56
  def validate_value_type(value); end

  private

  # source://activerecord//lib/active_record/encryption/properties.rb#73
  def data; end

  # source://activesupport/7.2.2/lib/active_support/delegation.rb#179
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/encryption/properties.rb#17
ActiveRecord::Encryption::Properties::ALLOWED_VALUE_CLASSES = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/active_record/encryption/properties.rb#23
ActiveRecord::Encryption::Properties::DEFAULT_PROPERTIES = T.let(T.unsafe(nil), Hash)

# source://activerecord//lib/active_record/encryption/read_only_null_encryptor.rb#10
class ActiveRecord::Encryption::ReadOnlyNullEncryptor
  # source://activerecord//lib/active_record/encryption/read_only_null_encryptor.rb#23
  def binary?; end

  # source://activerecord//lib/active_record/encryption/read_only_null_encryptor.rb#15
  def decrypt(encrypted_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/encryption/read_only_null_encryptor.rb#11
  def encrypt(clean_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/encryption/read_only_null_encryptor.rb#19
  def encrypted?(text); end
end

# source://activerecord//lib/active_record/encryption/scheme.rb#10
class ActiveRecord::Encryption::Scheme
  # source://activerecord//lib/active_record/encryption/scheme.rb#13
  def initialize(key_provider: T.unsafe(nil), key: T.unsafe(nil), deterministic: T.unsafe(nil), support_unencrypted_data: T.unsafe(nil), downcase: T.unsafe(nil), ignore_case: T.unsafe(nil), previous_schemes: T.unsafe(nil), **context_properties); end

  # source://activerecord//lib/active_record/encryption/scheme.rb#73
  def compatible_with?(other_scheme); end

  # source://activerecord//lib/active_record/encryption/scheme.rb#39
  def deterministic?; end

  # source://activerecord//lib/active_record/encryption/scheme.rb#35
  def downcase?; end

  # source://activerecord//lib/active_record/encryption/scheme.rb#47
  def fixed?; end

  # source://activerecord//lib/active_record/encryption/scheme.rb#31
  def ignore_case?; end

  # source://activerecord//lib/active_record/encryption/scheme.rb#52
  def key_provider; end

  # source://activerecord//lib/active_record/encryption/scheme.rb#56
  def merge(other_scheme); end

  # source://activerecord//lib/active_record/encryption/scheme.rb#11
  def previous_schemes; end

  # source://activerecord//lib/active_record/encryption/scheme.rb#11
  def previous_schemes=(_arg0); end

  # source://activerecord//lib/active_record/encryption/scheme.rb#43
  def support_unencrypted_data?; end

  # source://activerecord//lib/active_record/encryption/scheme.rb#60
  def to_h; end

  # source://activerecord//lib/active_record/encryption/scheme.rb#65
  def with_context(&block); end

  private

  # source://activerecord//lib/active_record/encryption/scheme.rb#95
  def default_key_provider; end

  # source://activerecord//lib/active_record/encryption/scheme.rb#89
  def deterministic_key_provider; end

  # source://activerecord//lib/active_record/encryption/scheme.rb#83
  def key_provider_from_key; end

  # source://activerecord//lib/active_record/encryption/scheme.rb#78
  def validate_config!; end
end

# source://activerecord//lib/active_record/enum.rb#165
module ActiveRecord::Enum
  # source://activerecord//lib/active_record/enum.rb#216
  def enum(name = T.unsafe(nil), values = T.unsafe(nil), **options); end

  private

  # source://activerecord//lib/active_record/enum.rb#241
  def _enum(name, values, prefix: T.unsafe(nil), suffix: T.unsafe(nil), scopes: T.unsafe(nil), instance_methods: T.unsafe(nil), validate: T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/enum.rb#339
  def _enum_methods_module; end

  # source://activerecord//lib/active_record/enum.rb#347
  def assert_valid_enum_definition_values(values); end

  # source://activerecord//lib/active_record/enum.rb#374
  def assert_valid_enum_options(options); end

  # source://activerecord//lib/active_record/enum.rb#387
  def detect_enum_conflict!(enum_name, method_name, klass_method = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/enum.rb#411
  def detect_negative_enum_conditions!(method_names); end

  # source://activerecord//lib/active_record/enum.rb#236
  def inherited(base); end

  # source://activerecord//lib/active_record/enum.rb#401
  def raise_conflict_error(enum_name, method_name, type: T.unsafe(nil), source: T.unsafe(nil)); end

  class << self
    # source://activerecord//lib/active_record/enum.rb#166
    def extended(base); end
  end
end

# source://activerecord//lib/active_record/enum.rb#381
ActiveRecord::Enum::ENUM_CONFLICT_MESSAGE = T.let(T.unsafe(nil), String)

# source://activerecord//lib/active_record/enum.rb#307
class ActiveRecord::Enum::EnumMethods < ::Module
  # source://activerecord//lib/active_record/enum.rb#308
  def initialize(klass); end

  private

  # source://activerecord//lib/active_record/enum.rb#315
  def define_enum_methods(name, value_method_name, value, scopes, instance_methods); end

  # source://activerecord//lib/active_record/enum.rb#313
  def klass; end
end

# source://activerecord//lib/active_record/enum.rb#170
class ActiveRecord::Enum::EnumType < ::ActiveModel::Type::Value
  # source://activerecord//lib/active_record/enum.rb#173
  def initialize(name, mapping, subtype, raise_on_invalid_values: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/enum.rb#202
  def assert_valid_value(value); end

  # source://activerecord//lib/active_record/enum.rb#180
  def cast(value); end

  # source://activerecord//lib/active_record/enum.rb#190
  def deserialize(value); end

  # source://activerecord//lib/active_record/enum.rb#198
  def serializable?(value, &block); end

  # source://activerecord//lib/active_record/enum.rb#194
  def serialize(value); end

  # source://activerecord//lib/active_record/enum.rb#210
  def subtype; end

  # source://activerecord//lib/active_record/enum.rb#171
  def type(*_arg0, **_arg1, &_arg2); end

  private

  # source://activerecord//lib/active_record/enum.rb#213
  def mapping; end

  # source://activerecord//lib/active_record/enum.rb#213
  def name; end
end

# source://activerecord//lib/active_record/migration.rb#219
class ActiveRecord::EnvironmentMismatchError < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/migration.rb#220
  def initialize(current: T.unsafe(nil), stored: T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/migration.rb#233
class ActiveRecord::EnvironmentStorageError < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/migration.rb#234
  def initialize; end
end

# source://activerecord//lib/active_record/errors.rb#115
class ActiveRecord::ExclusiveConnectionTimeoutError < ::ActiveRecord::ConnectionTimeoutError; end

# source://activerecord//lib/active_record/explain.rb#6
module ActiveRecord::Explain
  # source://activerecord//lib/active_record/explain.rb#9
  def collecting_queries_for_explain; end

  # source://activerecord//lib/active_record/explain.rb#19
  def exec_explain(queries, options = T.unsafe(nil)); end

  private

  # source://activerecord//lib/active_record/explain.rb#55
  def build_explain_clause(connection, options = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/explain.rb#40
  def render_bind(connection, attr); end
end

# source://activerecord//lib/active_record/explain_registry.rb#11
class ActiveRecord::ExplainRegistry
  # source://activerecord//lib/active_record/explain_registry.rb#24
  def initialize; end

  # source://activerecord//lib/active_record/explain_registry.rb#21
  def collect; end

  # source://activerecord//lib/active_record/explain_registry.rb#21
  def collect=(_arg0); end

  # source://activerecord//lib/active_record/explain_registry.rb#28
  def collect?; end

  # source://activerecord//lib/active_record/explain_registry.rb#22
  def queries; end

  # source://activerecord//lib/active_record/explain_registry.rb#32
  def reset; end

  class << self
    # source://activerecord//lib/active_record/explain_registry.rb#13
    def collect(*_arg0, **_arg1, &_arg2); end

    # source://activerecord//lib/active_record/explain_registry.rb#13
    def collect=(arg); end

    # source://activerecord//lib/active_record/explain_registry.rb#13
    def collect?(*_arg0, **_arg1, &_arg2); end

    # source://activerecord//lib/active_record/explain_registry.rb#13
    def queries(*_arg0, **_arg1, &_arg2); end

    # source://activerecord//lib/active_record/explain_registry.rb#13
    def reset(*_arg0, **_arg1, &_arg2); end

    private

    # source://activerecord//lib/active_record/explain_registry.rb#16
    def instance; end
  end
end

# source://activerecord//lib/active_record/explain_subscriber.rb#7
class ActiveRecord::ExplainSubscriber
  # source://activerecord//lib/active_record/explain_subscriber.rb#12
  def finish(name, id, payload); end

  # source://activerecord//lib/active_record/explain_subscriber.rb#25
  def ignore_payload?(payload); end

  # source://activerecord//lib/active_record/explain_subscriber.rb#8
  def start(name, id, payload); end
end

# source://activerecord//lib/active_record/explain_subscriber.rb#24
ActiveRecord::ExplainSubscriber::EXPLAINED_SQLS = T.let(T.unsafe(nil), Regexp)

# source://activerecord//lib/active_record/explain_subscriber.rb#23
ActiveRecord::ExplainSubscriber::IGNORED_PAYLOADS = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/active_record/relation/finder_methods.rb#6
module ActiveRecord::FinderMethods
  # source://activerecord//lib/active_record/relation/finder_methods.rb#357
  def exists?(conditions = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#271
  def fifth; end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#277
  def fifth!; end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#98
  def find(*args); end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#111
  def find_by(arg, *args); end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#117
  def find_by!(arg, *args); end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#160
  def find_sole_by(arg, *args); end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#173
  def first(limit = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#183
  def first!; end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#287
  def forty_two; end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#293
  def forty_two!; end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#255
  def fourth; end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#261
  def fourth!; end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#389
  def include?(record); end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#202
  def last(limit = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#213
  def last!; end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#389
  def member?(record); end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#417
  def raise_record_not_found_exception!(ids = T.unsafe(nil), result_size = T.unsafe(nil), expected_size = T.unsafe(nil), key = T.unsafe(nil), not_found_ids = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#223
  def second; end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#229
  def second!; end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#319
  def second_to_last; end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#325
  def second_to_last!; end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#143
  def sole; end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#128
  def take(limit = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#134
  def take!; end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#239
  def third; end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#245
  def third!; end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#303
  def third_to_last; end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#309
  def third_to_last!; end

  private

  # source://activerecord//lib/active_record/relation/finder_methods.rb#648
  def _order_columns; end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#457
  def apply_join_dependency(eager_loading: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#438
  def construct_relation_for_exists(conditions); end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#636
  def find_last(limit); end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#598
  def find_nth(index); end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#622
  def find_nth_from_last(index); end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#603
  def find_nth_with_limit(index, limit); end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#520
  def find_one(id); end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#541
  def find_some(ids); end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#567
  def find_some_ordered(ids); end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#582
  def find_take; end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#590
  def find_take_with_limit(limit); end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#491
  def find_with_ids(*ids); end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#640
  def ordered_relation; end

  # source://activerecord//lib/active_record/relation/finder_methods.rb#487
  def using_limitable_reflections?(reflections); end
end

# source://activerecord//lib/active_record/relation/finder_methods.rb#7
ActiveRecord::FinderMethods::ONE_AS_ONE = T.let(T.unsafe(nil), String)

# source://activerecord//lib/active_record/fixtures.rb#808
class ActiveRecord::Fixture
  include ::Enumerable

  # source://activerecord//lib/active_record/fixtures.rb#819
  def initialize(fixture, model_class); end

  # source://activerecord//lib/active_record/fixtures.rb#832
  def [](key); end

  # source://activerecord//lib/active_record/fixtures.rb#824
  def class_name; end

  # source://activerecord//lib/active_record/fixtures.rb#828
  def each(&block); end

  # source://activerecord//lib/active_record/fixtures.rb#838
  def find; end

  # source://activerecord//lib/active_record/fixtures.rb#817
  def fixture; end

  # source://activerecord//lib/active_record/fixtures.rb#817
  def model_class; end

  # source://activerecord//lib/active_record/fixtures.rb#817
  def to_hash; end
end

# source://activerecord//lib/active_record/fixtures.rb#811
class ActiveRecord::Fixture::FixtureError < ::StandardError; end

# source://activerecord//lib/active_record/fixtures.rb#814
class ActiveRecord::Fixture::FormatError < ::ActiveRecord::Fixture::FixtureError; end

# source://activerecord//lib/active_record/fixtures.rb#12
class ActiveRecord::FixtureClassNotFound < ::ActiveRecord::ActiveRecordError; end

# source://activerecord//lib/active_record/future_result.rb#4
class ActiveRecord::FutureResult
  # source://activerecord//lib/active_record/future_result.rb#66
  def initialize(pool, *args, **kwargs); end

  # source://activerecord//lib/active_record/future_result.rb#94
  def cancel; end

  # source://activerecord//lib/active_record/future_result.rb#135
  def canceled?; end

  # source://activerecord//lib/active_record/future_result.rb#62
  def empty?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/future_result.rb#90
  def execute!(connection); end

  # source://activerecord//lib/active_record/future_result.rb#100
  def execute_or_skip; end

  # source://activerecord//lib/active_record/future_result.rb#64
  def lock_wait; end

  # source://activerecord//lib/active_record/future_result.rb#131
  def pending?; end

  # source://activerecord//lib/active_record/future_result.rb#118
  def result; end

  # source://activerecord//lib/active_record/future_result.rb#85
  def schedule!(session); end

  # source://activerecord//lib/active_record/future_result.rb#81
  def then(&block); end

  # source://activerecord//lib/active_record/future_result.rb#62
  def to_a(*_arg0, **_arg1, &_arg2); end

  private

  # source://activerecord//lib/active_record/future_result.rb#165
  def exec_query(connection, *args, **kwargs); end

  # source://activerecord//lib/active_record/future_result.rb#140
  def execute_or_wait; end

  # source://activerecord//lib/active_record/future_result.rb#157
  def execute_query(connection, async: T.unsafe(nil)); end

  class << self
    # source://activerecord//lib/active_record/future_result.rb#53
    def wrap(result); end
  end
end

# source://activerecord//lib/active_record/future_result.rb#51
class ActiveRecord::FutureResult::Canceled < ::ActiveRecord::ActiveRecordError; end

# source://activerecord//lib/active_record/future_result.rb#5
class ActiveRecord::FutureResult::Complete
  # source://activerecord//lib/active_record/future_result.rb#9
  def initialize(result); end

  # source://activerecord//lib/active_record/future_result.rb#17
  def canceled?; end

  # source://activerecord//lib/active_record/future_result.rb#7
  def empty?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/future_result.rb#13
  def pending?; end

  # source://activerecord//lib/active_record/future_result.rb#6
  def result; end

  # source://activerecord//lib/active_record/future_result.rb#21
  def then(&block); end

  # source://activerecord//lib/active_record/future_result.rb#7
  def to_a(*_arg0, **_arg1, &_arg2); end
end

# source://activerecord//lib/active_record/future_result.rb#26
class ActiveRecord::FutureResult::EventBuffer
  # source://activerecord//lib/active_record/future_result.rb#27
  def initialize(future_result, instrumenter); end

  # source://activerecord//lib/active_record/future_result.rb#42
  def flush; end

  # source://activerecord//lib/active_record/future_result.rb#33
  def instrument(name, payload = T.unsafe(nil), &block); end
end

# source://activerecord//lib/active_record/future_result.rb#169
class ActiveRecord::FutureResult::SelectAll < ::ActiveRecord::FutureResult
  private

  # source://activerecord//lib/active_record/future_result.rb#171
  def exec_query(*_arg0, **_arg1); end
end

# source://activerecord//lib/active_record/associations/errors.rb#74
class ActiveRecord::HasManyThroughAssociationNotFoundError < ::ActiveRecord::ActiveRecordError
  include ::DidYouMean::Correctable

  # source://activerecord//lib/active_record/associations/errors.rb#77
  def initialize(owner_class = T.unsafe(nil), reflection = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/associations/errors.rb#90
  def corrections; end

  # source://activerecord//lib/active_record/associations/errors.rb#75
  def owner_class; end

  # source://activerecord//lib/active_record/associations/errors.rb#75
  def reflection; end
end

# source://activerecord//lib/active_record/associations/errors.rb#124
class ActiveRecord::HasManyThroughAssociationPointlessSourceTypeError < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/associations/errors.rb#125
  def initialize(owner_class_name = T.unsafe(nil), reflection = T.unsafe(nil), source_reflection = T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/associations/errors.rb#104
class ActiveRecord::HasManyThroughAssociationPolymorphicSourceError < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/associations/errors.rb#105
  def initialize(owner_class_name = T.unsafe(nil), reflection = T.unsafe(nil), source_reflection = T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/associations/errors.rb#114
class ActiveRecord::HasManyThroughAssociationPolymorphicThroughError < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/associations/errors.rb#115
  def initialize(owner_class_name = T.unsafe(nil), reflection = T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/associations/errors.rb#218
class ActiveRecord::HasManyThroughCantAssociateThroughHasOneOrManyReflection < ::ActiveRecord::ThroughCantAssociateThroughHasOneOrManyReflection; end

# source://activerecord//lib/active_record/associations/errors.rb#234
class ActiveRecord::HasManyThroughNestedAssociationsAreReadonly < ::ActiveRecord::ThroughNestedAssociationsAreReadonly; end

# source://activerecord//lib/active_record/associations/errors.rb#167
class ActiveRecord::HasManyThroughOrderError < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/associations/errors.rb#168
  def initialize(owner_class_name = T.unsafe(nil), reflection = T.unsafe(nil), through_reflection = T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/associations/errors.rb#154
class ActiveRecord::HasManyThroughSourceAssociationNotFoundError < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/associations/errors.rb#155
  def initialize(reflection = T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/associations/errors.rb#144
class ActiveRecord::HasOneAssociationPolymorphicThroughError < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/associations/errors.rb#145
  def initialize(owner_class_name = T.unsafe(nil), reflection = T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/associations/errors.rb#134
class ActiveRecord::HasOneThroughCantAssociateThroughCollection < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/associations/errors.rb#135
  def initialize(owner_class_name = T.unsafe(nil), reflection = T.unsafe(nil), through_reflection = T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/associations/errors.rb#221
class ActiveRecord::HasOneThroughCantAssociateThroughHasOneOrManyReflection < ::ActiveRecord::ThroughCantAssociateThroughHasOneOrManyReflection; end

# source://activerecord//lib/active_record/associations/errors.rb#237
class ActiveRecord::HasOneThroughNestedAssociationsAreReadonly < ::ActiveRecord::ThroughNestedAssociationsAreReadonly; end

# source://activerecord//lib/active_record/migration.rb#124
class ActiveRecord::IllegalMigrationNameError < ::ActiveRecord::MigrationError
  # source://activerecord//lib/active_record/migration.rb#125
  def initialize(name = T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/inheritance.rb#39
module ActiveRecord::Inheritance
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods

  private

  # source://activerecord//lib/active_record/inheritance.rb#359
  def ensure_proper_type; end

  # source://activerecord//lib/active_record/inheritance.rb#343
  def initialize_dup(other); end

  # source://activerecord//lib/active_record/inheritance.rb#349
  def initialize_internals_callback; end

  module GeneratedClassMethods
    def store_full_class_name; end
    def store_full_class_name=(value); end
    def store_full_class_name?; end
    def store_full_sti_class; end
    def store_full_sti_class=(value); end
    def store_full_sti_class?; end
  end

  module GeneratedInstanceMethods
    def store_full_class_name; end
    def store_full_class_name?; end
    def store_full_sti_class; end
    def store_full_sti_class?; end
  end
end

# source://activerecord//lib/active_record/inheritance.rb#52
module ActiveRecord::Inheritance::ClassMethods
  # source://activerecord//lib/active_record/inheritance.rb#164
  def abstract_class; end

  # source://activerecord//lib/active_record/inheritance.rb#164
  def abstract_class=(_arg0); end

  # source://activerecord//lib/active_record/inheritance.rb#167
  def abstract_class?; end

  # source://activerecord//lib/active_record/inheritance.rb#115
  def base_class; end

  # source://activerecord//lib/active_record/inheritance.rb#119
  def base_class?; end

  # source://activerecord//lib/active_record/inheritance.rb#82
  def descends_from_active_record?; end

  # source://activerecord//lib/active_record/inheritance.rb#226
  def dup; end

  # source://activerecord//lib/active_record/inheritance.rb#92
  def finder_needs_type_condition?; end

  # source://activerecord//lib/active_record/inheritance.rb#56
  def new(attributes = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/inheritance.rb#218
  def polymorphic_class_for(name); end

  # source://activerecord//lib/active_record/inheritance.rb#211
  def polymorphic_name; end

  # source://activerecord//lib/active_record/inheritance.rb#177
  def primary_abstract_class; end

  # source://activerecord//lib/active_record/inheritance.rb#194
  def sti_class_for(type_name); end

  # source://activerecord//lib/active_record/inheritance.rb#187
  def sti_name; end

  protected

  # source://activerecord//lib/active_record/inheritance.rb#242
  def compute_type(type_name); end

  # source://activerecord//lib/active_record/inheritance.rb#270
  def set_base_class; end

  private

  # source://activerecord//lib/active_record/inheritance.rb#299
  def discriminate_class_for_record(record); end

  # source://activerecord//lib/active_record/inheritance.rb#311
  def find_sti_class(type_name); end

  # source://activerecord//lib/active_record/inheritance.rb#287
  def inherited(subclass); end

  # source://activerecord//lib/active_record/inheritance.rb#234
  def initialize_clone(other); end

  # source://activerecord//lib/active_record/inheritance.rb#331
  def subclass_from_attributes(attrs); end

  # source://activerecord//lib/active_record/inheritance.rb#322
  def type_condition(table = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/inheritance.rb#307
  def using_single_table_inheritance?(record); end
end

# source://activerecord//lib/active_record/insert_all.rb#6
class ActiveRecord::InsertAll
  # source://activerecord//lib/active_record/insert_all.rb#18
  def initialize(relation, connection, inserts, on_duplicate:, update_only: T.unsafe(nil), returning: T.unsafe(nil), unique_by: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/insert_all.rb#7
  def connection; end

  # source://activerecord//lib/active_record/insert_all.rb#48
  def execute; end

  # source://activerecord//lib/active_record/insert_all.rb#7
  def inserts; end

  # source://activerecord//lib/active_record/insert_all.rb#7
  def keys; end

  # source://activerecord//lib/active_record/insert_all.rb#92
  def keys_including_timestamps; end

  # source://activerecord//lib/active_record/insert_all.rb#73
  def map_key_with_value; end

  # source://activerecord//lib/active_record/insert_all.rb#7
  def model; end

  # source://activerecord//lib/active_record/insert_all.rb#8
  def on_duplicate; end

  # source://activerecord//lib/active_record/insert_all.rb#61
  def primary_keys; end

  # source://activerecord//lib/active_record/insert_all.rb#87
  def record_timestamps?; end

  # source://activerecord//lib/active_record/insert_all.rb#8
  def returning; end

  # source://activerecord//lib/active_record/insert_all.rb#65
  def skip_duplicates?; end

  # source://activerecord//lib/active_record/insert_all.rb#8
  def unique_by; end

  # source://activerecord//lib/active_record/insert_all.rb#57
  def updatable_columns; end

  # source://activerecord//lib/active_record/insert_all.rb#69
  def update_duplicates?; end

  # source://activerecord//lib/active_record/insert_all.rb#8
  def update_only; end

  # source://activerecord//lib/active_record/insert_all.rb#8
  def update_sql; end

  private

  # source://activerecord//lib/active_record/insert_all.rb#129
  def configure_on_duplicate_update_logic; end

  # source://activerecord//lib/active_record/insert_all.rb#145
  def custom_update_sql_provided?; end

  # source://activerecord//lib/active_record/insert_all.rb#212
  def disallow_raw_sql!(value); end

  # source://activerecord//lib/active_record/insert_all.rb#173
  def ensure_valid_options_for_connection!; end

  # source://activerecord//lib/active_record/insert_all.rb#149
  def find_unique_index_for(unique_by); end

  # source://activerecord//lib/active_record/insert_all.rb#101
  def has_attribute_aliases?(attributes); end

  # source://activerecord//lib/active_record/insert_all.rb#197
  def readonly_columns; end

  # source://activerecord//lib/active_record/insert_all.rb#125
  def resolve_attribute_alias(attribute); end

  # source://activerecord//lib/active_record/insert_all.rb#114
  def resolve_attribute_aliases; end

  # source://activerecord//lib/active_record/insert_all.rb#105
  def resolve_sti; end

  # source://activerecord//lib/active_record/insert_all.rb#221
  def timestamps_for_create; end

  # source://activerecord//lib/active_record/insert_all.rb#192
  def to_sql; end

  # source://activerecord//lib/active_record/insert_all.rb#201
  def unique_by_columns; end

  # source://activerecord//lib/active_record/insert_all.rb#169
  def unique_indexes; end

  # source://activerecord//lib/active_record/insert_all.rb#206
  def verify_attributes(attributes); end

  class << self
    # source://activerecord//lib/active_record/insert_all.rb#11
    def execute(relation, *_arg1, **_arg2, &_arg3); end
  end
end

# source://activerecord//lib/active_record/insert_all.rb#225
class ActiveRecord::InsertAll::Builder
  # source://activerecord//lib/active_record/insert_all.rb#230
  def initialize(insert_all); end

  # source://activerecord//lib/active_record/insert_all.rb#265
  def conflict_target; end

  # source://activerecord//lib/active_record/insert_all.rb#234
  def into; end

  # source://activerecord//lib/active_record/insert_all.rb#228
  def keys(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/insert_all.rb#228
  def keys_including_timestamps(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/insert_all.rb#226
  def model; end

  # source://activerecord//lib/active_record/insert_all.rb#289
  def raw_update_sql; end

  # source://activerecord//lib/active_record/insert_all.rb#289
  def raw_update_sql?; end

  # source://activerecord//lib/active_record/insert_all.rb#228
  def record_timestamps?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/insert_all.rb#249
  def returning; end

  # source://activerecord//lib/active_record/insert_all.rb#228
  def skip_duplicates?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/insert_all.rb#279
  def touch_model_timestamps_unless(&block); end

  # source://activerecord//lib/active_record/insert_all.rb#275
  def updatable_columns; end

  # source://activerecord//lib/active_record/insert_all.rb#228
  def update_duplicates?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/insert_all.rb#238
  def values_list; end

  private

  # source://activerecord//lib/active_record/insert_all.rb#302
  def columns_list; end

  # source://activerecord//lib/active_record/insert_all.rb#296
  def connection; end

  # source://activerecord//lib/active_record/insert_all.rb#306
  def extract_types_from_columns_on(table_name, keys:); end

  # source://activerecord//lib/active_record/insert_all.rb#315
  def format_columns(columns); end

  # source://activerecord//lib/active_record/insert_all.rb#296
  def insert_all; end

  # source://activerecord//lib/active_record/insert_all.rb#323
  def quote_column(column); end

  # source://activerecord//lib/active_record/insert_all.rb#319
  def quote_columns(columns); end

  # source://activerecord//lib/active_record/insert_all.rb#298
  def touch_timestamp_attribute?(column_name); end
end

# source://activerecord//lib/active_record/integration.rb#6
module ActiveRecord::Integration
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Integration::ClassMethods

  # source://activerecord//lib/active_record/integration.rb#72
  def cache_key; end

  # source://activerecord//lib/active_record/integration.rb#114
  def cache_key_with_version; end

  # source://activerecord//lib/active_record/integration.rb#97
  def cache_version; end

  # source://activerecord//lib/active_record/integration.rb#57
  def to_param; end

  private

  # source://activerecord//lib/active_record/integration.rb#178
  def can_use_fast_cache_version?(timestamp); end

  # source://activerecord//lib/active_record/integration.rb#200
  def raw_timestamp_to_cache_version(timestamp); end

  module GeneratedClassMethods
    def cache_timestamp_format; end
    def cache_timestamp_format=(value); end
    def cache_timestamp_format?; end
    def cache_versioning; end
    def cache_versioning=(value); end
    def cache_versioning?; end
    def collection_cache_versioning; end
    def collection_cache_versioning=(value); end
    def collection_cache_versioning?; end
  end

  module GeneratedInstanceMethods
    def cache_timestamp_format; end
    def cache_timestamp_format?; end
    def cache_versioning; end
    def cache_versioning?; end
    def collection_cache_versioning; end
    def collection_cache_versioning?; end
  end
end

# source://activerecord//lib/active_record/integration.rb#122
module ActiveRecord::Integration::ClassMethods
  # source://activerecord//lib/active_record/integration.rb#163
  def collection_cache_key(collection = T.unsafe(nil), timestamp_column = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/integration.rb#147
  def to_param(method_name = T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/internal_metadata.rb#12
class ActiveRecord::InternalMetadata
  # source://activerecord//lib/active_record/internal_metadata.rb#18
  def initialize(pool); end

  # source://activerecord//lib/active_record/internal_metadata.rb#47
  def [](key); end

  # source://activerecord//lib/active_record/internal_metadata.rb#39
  def []=(key, value); end

  # source://activerecord//lib/active_record/internal_metadata.rb#16
  def arel_table; end

  # source://activerecord//lib/active_record/internal_metadata.rb#65
  def count; end

  # source://activerecord//lib/active_record/internal_metadata.rb#85
  def create_table; end

  # source://activerecord//lib/active_record/internal_metadata.rb#74
  def create_table_and_set_flags(environment, schema_sha1 = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/internal_metadata.rb#57
  def delete_all_entries; end

  # source://activerecord//lib/active_record/internal_metadata.rb#99
  def drop_table; end

  # source://activerecord//lib/active_record/internal_metadata.rb#35
  def enabled?; end

  # source://activerecord//lib/active_record/internal_metadata.rb#23
  def primary_key; end

  # source://activerecord//lib/active_record/internal_metadata.rb#107
  def table_exists?; end

  # source://activerecord//lib/active_record/internal_metadata.rb#31
  def table_name; end

  # source://activerecord//lib/active_record/internal_metadata.rb#27
  def value_key; end

  private

  # source://activerecord//lib/active_record/internal_metadata.rb#130
  def create_entry(connection, key, value); end

  # source://activerecord//lib/active_record/internal_metadata.rb#126
  def current_time(connection); end

  # source://activerecord//lib/active_record/internal_metadata.rb#154
  def select_entry(connection, key); end

  # source://activerecord//lib/active_record/internal_metadata.rb#142
  def update_entry(connection, key, new_value); end

  # source://activerecord//lib/active_record/internal_metadata.rb#112
  def update_or_create_entry(connection, key, value); end
end

# source://activerecord//lib/active_record/internal_metadata.rb#13
class ActiveRecord::InternalMetadata::NullInternalMetadata; end

# source://activerecord//lib/active_record/errors.rb#221
class ActiveRecord::InvalidForeignKey < ::ActiveRecord::WrappedDatabaseException; end

# source://activerecord//lib/active_record/migration.rb#134
class ActiveRecord::InvalidMigrationTimestampError < ::ActiveRecord::MigrationError
  # source://activerecord//lib/active_record/migration.rb#135
  def initialize(version = T.unsafe(nil), name = T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/associations/errors.rb#33
class ActiveRecord::InverseOfAssociationNotFoundError < ::ActiveRecord::ActiveRecordError
  include ::DidYouMean::Correctable

  # source://activerecord//lib/active_record/associations/errors.rb#36
  def initialize(reflection = T.unsafe(nil), associated_class = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/associations/errors.rb#34
  def associated_class; end

  # source://activerecord//lib/active_record/associations/errors.rb#49
  def corrections; end

  # source://activerecord//lib/active_record/associations/errors.rb#34
  def reflection; end
end

# source://activerecord//lib/active_record/associations/errors.rb#62
class ActiveRecord::InverseOfAssociationRecursiveError < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/associations/errors.rb#64
  def initialize(reflection = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/associations/errors.rb#63
  def reflection; end
end

# source://activerecord//lib/active_record/migration.rb#91
class ActiveRecord::IrreversibleMigration < ::ActiveRecord::MigrationError; end

# source://activerecord//lib/active_record/errors.rb#549
class ActiveRecord::IrreversibleOrderError < ::ActiveRecord::ActiveRecordError; end

# source://activerecord//lib/active_record/legacy_yaml_adapter.rb#4
module ActiveRecord::LegacyYamlAdapter
  class << self
    # source://activerecord//lib/active_record/legacy_yaml_adapter.rb#5
    def convert(coder); end
  end
end

# source://activerecord//lib/active_record/errors.rb#557
class ActiveRecord::LockWaitTimeout < ::ActiveRecord::StatementInvalid; end

# source://activerecord//lib/active_record.rb#147
module ActiveRecord::Locking
  extend ::ActiveSupport::Autoload
end

# source://activerecord//lib/active_record/locking/optimistic.rb#206
class ActiveRecord::Locking::LockingType
  # source://activerecord//lib/active_record/locking/optimistic.rb#211
  def deserialize(value); end

  # source://activerecord//lib/active_record/locking/optimistic.rb#223
  def encode_with(coder); end

  # source://activerecord//lib/active_record/locking/optimistic.rb#219
  def init_with(coder); end

  # source://activerecord//lib/active_record/locking/optimistic.rb#215
  def serialize(value); end

  class << self
    # source://activerecord//lib/active_record/locking/optimistic.rb#207
    def new(subtype); end
  end
end

# source://activerecord//lib/active_record/locking/optimistic.rb#52
module ActiveRecord::Locking::Optimistic
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Locking::Optimistic::ClassMethods

  # source://activerecord//lib/active_record/locking/optimistic.rb#63
  def increment!(*_arg0, **_arg1); end

  # source://activerecord//lib/active_record/locking/optimistic.rb#59
  def locking_enabled?; end

  private

  # source://activerecord//lib/active_record/locking/optimistic.rb#142
  def _clear_locking_column; end

  # source://activerecord//lib/active_record/locking/optimistic.rb#78
  def _create_record(attribute_names = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/locking/optimistic.rb#134
  def _lock_value_for_database(locking_column); end

  # source://activerecord//lib/active_record/locking/optimistic.rb#147
  def _query_constraints_hash; end

  # source://activerecord//lib/active_record/locking/optimistic.rb#87
  def _touch_row(attribute_names, time); end

  # source://activerecord//lib/active_record/locking/optimistic.rb#92
  def _update_row(attribute_names, attempted_action = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/locking/optimistic.rb#124
  def destroy_row; end

  # source://activerecord//lib/active_record/locking/optimistic.rb#72
  def initialize_dup(other); end

  module GeneratedClassMethods
    def lock_optimistically; end
    def lock_optimistically=(value); end
    def lock_optimistically?; end
  end

  module GeneratedInstanceMethods
    def lock_optimistically; end
    def lock_optimistically?; end
  end
end

# source://activerecord//lib/active_record/locking/optimistic.rb#154
module ActiveRecord::Locking::Optimistic::ClassMethods
  # source://activerecord//lib/active_record/locking/optimistic.rb#171
  def locking_column; end

  # source://activerecord//lib/active_record/locking/optimistic.rb#165
  def locking_column=(value); end

  # source://activerecord//lib/active_record/locking/optimistic.rb#160
  def locking_enabled?; end

  # source://activerecord//lib/active_record/locking/optimistic.rb#174
  def reset_locking_column; end

  # source://activerecord//lib/active_record/locking/optimistic.rb#180
  def update_counters(id, counters); end

  private

  # source://activerecord//lib/active_record/locking/optimistic.rb#186
  def hook_attribute_type(name, cast_type); end

  # source://activerecord//lib/active_record/locking/optimistic.rb#194
  def inherited(base); end
end

# source://activerecord//lib/active_record/locking/optimistic.rb#155
ActiveRecord::Locking::Optimistic::ClassMethods::DEFAULT_LOCKING_COLUMN = T.let(T.unsafe(nil), String)

# source://activerecord//lib/active_record/locking/pessimistic.rb#64
module ActiveRecord::Locking::Pessimistic
  # source://activerecord//lib/active_record/locking/pessimistic.rb#69
  def lock!(lock = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/locking/pessimistic.rb#92
  def with_lock(*args); end
end

# source://activerecord//lib/active_record/log_subscriber.rb#4
class ActiveRecord::LogSubscriber < ::ActiveSupport::LogSubscriber
  # source://activerecord//lib/active_record/log_subscriber.rb#7
  def backtrace_cleaner; end

  # source://activerecord//lib/active_record/log_subscriber.rb#7
  def backtrace_cleaner=(_arg0); end

  # source://activerecord//lib/active_record/log_subscriber.rb#7
  def backtrace_cleaner?; end

  # source://activerecord//lib/active_record/log_subscriber.rb#18
  def sql(event); end

  # source://activerecord//lib/active_record/log_subscriber.rb#9
  def strict_loading_violation(event); end

  private

  # source://activerecord//lib/active_record/log_subscriber.rb#80
  def colorize_payload_name(name, payload_name); end

  # source://activerecord//lib/active_record/log_subscriber.rb#113
  def debug(progname = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/log_subscriber.rb#143
  def filter(name, value); end

  # source://activerecord//lib/active_record/log_subscriber.rb#121
  def log_query_source; end

  # source://activerecord//lib/active_record/log_subscriber.rb#109
  def logger; end

  # source://activerecord//lib/active_record/log_subscriber.rb#130
  def query_source_location; end

  # source://activerecord//lib/active_record/log_subscriber.rb#65
  def render_bind(attr, value); end

  # source://activerecord//lib/active_record/log_subscriber.rb#88
  def sql_color(sql); end

  # source://activerecord//lib/active_record/log_subscriber.rb#61
  def type_casted_binds(casted_binds); end

  class << self
    # source://activerecord//lib/active_record/log_subscriber.rb#7
    def backtrace_cleaner; end

    # source://activerecord//lib/active_record/log_subscriber.rb#7
    def backtrace_cleaner=(value); end

    # source://activerecord//lib/active_record/log_subscriber.rb#7
    def backtrace_cleaner?; end

    # source://activesupport/7.2.2/lib/active_support/log_subscriber.rb#84
    def log_levels; end
  end
end

# source://activerecord//lib/active_record/log_subscriber.rb#5
ActiveRecord::LogSubscriber::IGNORE_PAYLOAD_NAMES = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/active_record/marshalling.rb#4
module ActiveRecord::Marshalling
  class << self
    # source://activerecord//lib/active_record/marshalling.rb#8
    def format_version; end

    # source://activerecord//lib/active_record/marshalling.rb#10
    def format_version=(version); end
  end
end

# source://activerecord//lib/active_record/marshalling.rb#23
module ActiveRecord::Marshalling::Methods
  # source://activerecord//lib/active_record/marshalling.rb#24
  def _marshal_dump_7_1; end

  # source://activerecord//lib/active_record/marshalling.rb#43
  def marshal_load(state); end
end

# source://activerecord//lib/active_record.rb#165
module ActiveRecord::Middleware
  extend ::ActiveSupport::Autoload
end

# source://activerecord//lib/active_record/middleware/database_selector/resolver/session.rb#5
class ActiveRecord::Middleware::DatabaseSelector
  # source://activerecord//lib/active_record/middleware/database_selector.rb#52
  def initialize(app, resolver_klass = T.unsafe(nil), context_klass = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/middleware/database_selector.rb#63
  def call(env); end

  # source://activerecord//lib/active_record/middleware/database_selector.rb#59
  def context_klass; end

  # source://activerecord//lib/active_record/middleware/database_selector.rb#59
  def options; end

  # source://activerecord//lib/active_record/middleware/database_selector.rb#59
  def resolver_klass; end

  private

  # source://activerecord//lib/active_record/middleware/database_selector.rb#72
  def select_database(request, &blk); end
end

# source://activerecord//lib/active_record/middleware/database_selector/resolver/session.rb#6
class ActiveRecord::Middleware::DatabaseSelector::Resolver
  # source://activerecord//lib/active_record/middleware/database_selector/resolver.rb#26
  def initialize(context, options = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/middleware/database_selector/resolver.rb#33
  def context; end

  # source://activerecord//lib/active_record/middleware/database_selector/resolver.rb#33
  def delay; end

  # source://activerecord//lib/active_record/middleware/database_selector/resolver.rb#33
  def instrumenter; end

  # source://activerecord//lib/active_record/middleware/database_selector/resolver.rb#35
  def read(&blk); end

  # source://activerecord//lib/active_record/middleware/database_selector/resolver.rb#51
  def reading_request?(request); end

  # source://activerecord//lib/active_record/middleware/database_selector/resolver.rb#47
  def update_context(response); end

  # source://activerecord//lib/active_record/middleware/database_selector/resolver.rb#43
  def write(&blk); end

  private

  # source://activerecord//lib/active_record/middleware/database_selector/resolver.rb#56
  def read_from_primary(&blk); end

  # source://activerecord//lib/active_record/middleware/database_selector/resolver.rb#78
  def read_from_primary?; end

  # source://activerecord//lib/active_record/middleware/database_selector/resolver.rb#62
  def read_from_replica(&blk); end

  # source://activerecord//lib/active_record/middleware/database_selector/resolver.rb#82
  def send_to_replica_delay; end

  # source://activerecord//lib/active_record/middleware/database_selector/resolver.rb#86
  def time_since_last_write_ok?; end

  # source://activerecord//lib/active_record/middleware/database_selector/resolver.rb#68
  def write_to_primary; end

  class << self
    # source://activerecord//lib/active_record/middleware/database_selector/resolver.rb#22
    def call(context, options = T.unsafe(nil)); end
  end
end

# source://activerecord//lib/active_record/middleware/database_selector/resolver.rb#20
ActiveRecord::Middleware::DatabaseSelector::Resolver::SEND_TO_REPLICA_DELAY = T.let(T.unsafe(nil), ActiveSupport::Duration)

# source://activerecord//lib/active_record/middleware/database_selector/resolver/session.rb#12
class ActiveRecord::Middleware::DatabaseSelector::Resolver::Session
  # source://activerecord//lib/active_record/middleware/database_selector/resolver/session.rb#28
  def initialize(session); end

  # source://activerecord//lib/active_record/middleware/database_selector/resolver/session.rb#34
  def last_write_timestamp; end

  # source://activerecord//lib/active_record/middleware/database_selector/resolver/session.rb#42
  def save(response); end

  # source://activerecord//lib/active_record/middleware/database_selector/resolver/session.rb#32
  def session; end

  # source://activerecord//lib/active_record/middleware/database_selector/resolver/session.rb#38
  def update_last_write_timestamp; end

  class << self
    # source://activerecord//lib/active_record/middleware/database_selector/resolver/session.rb#13
    def call(request); end

    # source://activerecord//lib/active_record/middleware/database_selector/resolver/session.rb#19
    def convert_time_to_timestamp(time); end

    # source://activerecord//lib/active_record/middleware/database_selector/resolver/session.rb#24
    def convert_timestamp_to_time(timestamp); end
  end
end

# source://activerecord//lib/active_record/middleware/shard_selector.rb#31
class ActiveRecord::Middleware::ShardSelector
  # source://activerecord//lib/active_record/middleware/shard_selector.rb#32
  def initialize(app, resolver, options = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/middleware/shard_selector.rb#40
  def call(env); end

  # source://activerecord//lib/active_record/middleware/shard_selector.rb#38
  def options; end

  # source://activerecord//lib/active_record/middleware/shard_selector.rb#38
  def resolver; end

  private

  # source://activerecord//lib/active_record/middleware/shard_selector.rb#51
  def selected_shard(request); end

  # source://activerecord//lib/active_record/middleware/shard_selector.rb#55
  def set_shard(shard, &block); end
end

# source://activerecord//lib/active_record/migration.rb#574
class ActiveRecord::Migration
  # source://activerecord//lib/active_record/migration.rb#803
  def initialize(name = T.unsafe(nil), version = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/migration.rb#1008
  def announce(message); end

  # source://activerecord//lib/active_record/migration.rb#1039
  def connection; end

  # source://activerecord//lib/active_record/migration.rb#1043
  def connection_pool; end

  # source://activerecord//lib/active_record/migration.rb#1064
  def copy(destination, sources, options = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/migration.rb#790
  def disable_ddl_transaction; end

  # source://activerecord//lib/active_record/migration.rb#960
  def down; end

  # source://activerecord//lib/active_record/migration.rb#988
  def exec_migration(conn, direction); end

  # source://activerecord//lib/active_record/migration.rb#810
  def execution_strategy; end

  # source://activerecord//lib/active_record/migration.rb#1047
  def method_missing(method, *arguments, **_arg2, &block); end

  # source://activerecord//lib/active_record/migration.rb#967
  def migrate(direction); end

  # source://activerecord//lib/active_record/migration.rb#801
  def name; end

  # source://activerecord//lib/active_record/migration.rb#801
  def name=(_arg0); end

  # source://activerecord//lib/active_record/migration.rb#1131
  def next_migration_number(number); end

  # source://activerecord//lib/active_record/migration.rb#1122
  def proper_table_name(name, options = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/migration.rb#912
  def reversible; end

  # source://activerecord//lib/active_record/migration.rb#855
  def revert(*migration_classes, &block); end

  # source://activerecord//lib/active_record/migration.rb#872
  def reverting?; end

  # source://activerecord//lib/active_record/migration.rb#940
  def run(*migration_classes); end

  # source://activerecord//lib/active_record/migration.rb#1016
  def say(message, subitem = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/migration.rb#1022
  def say_with_time(message); end

  # source://activerecord//lib/active_record/migration.rb#1032
  def suppress_messages; end

  # source://activerecord//lib/active_record/migration.rb#1141
  def table_name_options(config = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/migration.rb#954
  def up; end

  # source://activerecord//lib/active_record/migration.rb#931
  def up_only(&block); end

  # source://activerecord//lib/active_record/migration.rb#800
  def verbose; end

  # source://activerecord//lib/active_record/migration.rb#800
  def verbose=(val); end

  # source://activerecord//lib/active_record/migration.rb#801
  def version; end

  # source://activerecord//lib/active_record/migration.rb#801
  def version=(_arg0); end

  # source://activerecord//lib/active_record/migration.rb#1004
  def write(text = T.unsafe(nil)); end

  private

  # source://activerecord//lib/active_record/migration.rb#1173
  def command_recorder; end

  # source://activerecord//lib/active_record/migration.rb#1149
  def execute_block; end

  # source://activerecord//lib/active_record/migration.rb#1157
  def format_arguments(arguments); end

  # source://activerecord//lib/active_record/migration.rb#1169
  def internal_option?(option_name); end

  class << self
    # source://activerecord//lib/active_record/migration.rb#632
    def [](version); end

    # source://activerecord//lib/active_record/migration.rb#700
    def check_all_pending!; end

    # source://activerecord//lib/active_record/migration.rb#752
    def check_pending_migrations; end

    # source://activerecord//lib/active_record/migration.rb#636
    def current_version; end

    # source://activerecord//lib/active_record/migration.rb#691
    def delegate; end

    # source://activerecord//lib/active_record/migration.rb#691
    def delegate=(_arg0); end

    # source://activerecord//lib/active_record/migration.rb#692
    def disable_ddl_transaction; end

    # source://activerecord//lib/active_record/migration.rb#748
    def disable_ddl_transaction!; end

    # source://activerecord//lib/active_record/migration.rb#692
    def disable_ddl_transaction=(_arg0); end

    # source://activerecord//lib/active_record/migration.rb#620
    def inherited(subclass); end

    # source://activerecord//lib/active_record/migration.rb#716
    def load_schema_if_pending!; end

    # source://activerecord//lib/active_record/migration.rb#730
    def maintain_test_schema!; end

    # source://activerecord//lib/active_record/migration.rb#736
    def method_missing(name, *_arg1, **_arg2, &_arg3); end

    # source://activerecord//lib/active_record/migration.rb#740
    def migrate(direction); end

    # source://activerecord//lib/active_record/migration.rb#694
    def nearest_delegate; end

    # source://activerecord//lib/active_record/migration.rb#642
    def valid_version_format?(version_string); end

    # source://activerecord//lib/active_record/migration.rb#800
    def verbose; end

    # source://activerecord//lib/active_record/migration.rb#800
    def verbose=(val); end

    private

    # source://activerecord//lib/active_record/migration.rb#761
    def any_schema_needs_update?; end

    # source://activerecord//lib/active_record/migration.rb#767
    def db_configs_in_current_env; end

    # source://activerecord//lib/active_record/migration.rb#785
    def env; end

    # source://activerecord//lib/active_record/migration.rb#771
    def pending_migrations; end
  end
end

# source://activerecord//lib/active_record/migration.rb#651
class ActiveRecord::Migration::CheckPending
  # source://activerecord//lib/active_record/migration.rb#652
  def initialize(app, file_watcher: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/migration.rb#659
  def call(env); end

  private

  # source://activerecord//lib/active_record/migration.rb#678
  def build_watcher(&block); end

  # source://activerecord//lib/active_record/migration.rb#685
  def connection; end
end

# source://activerecord//lib/active_record/migration/command_recorder.rb#45
class ActiveRecord::Migration::CommandRecorder
  include ::ActiveRecord::Migration::JoinTable
  include ::ActiveRecord::Migration::CommandRecorder::StraightReversions

  # source://activerecord//lib/active_record/migration/command_recorder.rb#63
  def initialize(delegate = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def add_belongs_to(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def add_check_constraint(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def add_column(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def add_enum_value(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def add_exclusion_constraint(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def add_foreign_key(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def add_index(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def add_reference(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def add_timestamps(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def add_unique_constraint(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def change_column(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def change_column_comment(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def change_column_default(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def change_column_null(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#132
  def change_table(table_name, **options); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def change_table_comment(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#61
  def commands; end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#61
  def commands=(_arg0); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def create_enum(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def create_join_table(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def create_table(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#61
  def delegate; end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#61
  def delegate=(_arg0); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def disable_extension(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def drop_enum(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def drop_join_table(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def drop_table(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def enable_extension(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def execute(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def execute_block(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#110
  def inverse_of(command, args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_add_belongs_to(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_remove_belongs_to(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#90
  def record(*command, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def remove_belongs_to(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def remove_check_constraint(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def remove_column(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def remove_columns(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def remove_exclusion_constraint(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def remove_foreign_key(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def remove_index(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def remove_reference(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def remove_timestamps(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def remove_unique_constraint(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def rename_column(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def rename_enum(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def rename_enum_value(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def rename_index(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def rename_table(*args, **_arg1, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#144
  def replay(migration); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#76
  def revert; end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#61
  def reverting; end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#61
  def reverting=(_arg0); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#123
  def transaction(*args, **_arg1, &block); end

  private

  # source://activerecord//lib/active_record/migration/command_recorder.rb#313
  def invert_add_check_constraint(args); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#274
  def invert_add_foreign_key(args); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#335
  def invert_add_unique_constraint(args); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#293
  def invert_change_column_comment(args); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#259
  def invert_change_column_default(args); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#269
  def invert_change_column_null(args); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#303
  def invert_change_table_comment(args); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#191
  def invert_create_table(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#349
  def invert_drop_enum(args); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#198
  def invert_drop_table(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#321
  def invert_remove_check_constraint(args); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#215
  def invert_remove_column(args); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#220
  def invert_remove_columns(args); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#330
  def invert_remove_exclusion_constraint(args); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#279
  def invert_remove_foreign_key(args); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#238
  def invert_remove_index(args); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#342
  def invert_remove_unique_constraint(args); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#233
  def invert_rename_column(args); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#355
  def invert_rename_enum(args); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#365
  def invert_rename_enum_value(args); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#228
  def invert_rename_index(args); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#208
  def invert_rename_table(args); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#180
  def invert_transaction(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#380
  def method_missing(method, *_arg1, **_arg2, &_arg3); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#375
  def respond_to_missing?(method, _); end
end

# source://activerecord//lib/active_record/migration/command_recorder.rb#46
ActiveRecord::Migration::CommandRecorder::ReversibleAndIrreversibleMethods = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/active_record/migration/command_recorder.rb#151
module ActiveRecord::Migration::CommandRecorder::StraightReversions
  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_add_check_constraint(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_add_column(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_add_exclusion_constraint(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_add_foreign_key(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_add_index(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_add_reference(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_add_timestamps(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_add_unique_constraint(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_create_enum(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_create_join_table(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_create_table(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_disable_extension(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_drop_enum(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_drop_join_table(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_drop_table(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_enable_extension(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_execute_block(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_remove_check_constraint(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_remove_column(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_remove_exclusion_constraint(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_remove_foreign_key(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_remove_index(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_remove_reference(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_remove_timestamps(args, &block); end

  # source://activerecord//lib/active_record/migration/command_recorder.rb#170
  def invert_remove_unique_constraint(args, &block); end
end

# source://activerecord//lib/active_record/migration/compatibility.rb#5
module ActiveRecord::Migration::Compatibility
  class << self
    # source://activerecord//lib/active_record/migration/compatibility.rb#6
    def find(version); end
  end
end

# source://activerecord//lib/active_record/migration/compatibility.rb#413
class ActiveRecord::Migration::Compatibility::V4_2 < ::ActiveRecord::Migration::Compatibility::V5_0
  # source://activerecord//lib/active_record/migration/compatibility.rb#431
  def add_belongs_to(table_name, ref_name, **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#431
  def add_reference(table_name, ref_name, **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#437
  def add_timestamps(table_name, **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#442
  def index_exists?(table_name, column_name, **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#453
  def remove_index(table_name, column_name = T.unsafe(nil), **options); end

  private

  # source://activerecord//lib/active_record/migration/compatibility.rb#459
  def compatible_table_definition(t); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#466
  def index_name_for_remove(table_name, column_name, options); end
end

# source://activerecord//lib/active_record/migration/compatibility.rb#414
module ActiveRecord::Migration::Compatibility::V4_2::TableDefinition
  # source://activerecord//lib/active_record/migration/compatibility.rb#415
  def belongs_to(*_arg0, **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#415
  def references(*_arg0, **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#421
  def timestamps(**options); end

  private

  # source://activerecord//lib/active_record/migration/compatibility.rb#427
  def raise_on_if_exist_options(options); end
end

# source://activerecord//lib/active_record/migration/compatibility.rb#344
class ActiveRecord::Migration::Compatibility::V5_0 < ::ActiveRecord::Migration::Compatibility::V5_1
  # source://activerecord//lib/active_record/migration/compatibility.rb#399
  def add_belongs_to(table_name, ref_name, **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#389
  def add_column(table_name, column_name, type, **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#399
  def add_reference(table_name, ref_name, **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#384
  def create_join_table(table_1, table_2, column_options: T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#361
  def create_table(table_name, **options); end

  private

  # source://activerecord//lib/active_record/migration/compatibility.rb#405
  def compatible_table_definition(t); end
end

# source://activerecord//lib/active_record/migration/compatibility.rb#345
module ActiveRecord::Migration::Compatibility::V5_0::TableDefinition
  # source://activerecord//lib/active_record/migration/compatibility.rb#351
  def belongs_to(*args, **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#346
  def primary_key(name, type = T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#351
  def references(*args, **options); end

  private

  # source://activerecord//lib/active_record/migration/compatibility.rb#357
  def raise_on_if_exist_options(options); end
end

# source://activerecord//lib/active_record/migration/compatibility.rb#323
class ActiveRecord::Migration::Compatibility::V5_1 < ::ActiveRecord::Migration::Compatibility::V5_2
  # source://activerecord//lib/active_record/migration/compatibility.rb#324
  def change_column(table_name, column_name, type, **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#335
  def create_table(table_name, **options); end
end

# source://activerecord//lib/active_record/migration/compatibility.rb#267
class ActiveRecord::Migration::Compatibility::V5_2 < ::ActiveRecord::Migration::Compatibility::V6_0
  # source://activerecord//lib/active_record/migration/compatibility.rb#301
  def add_timestamps(table_name, **options); end

  private

  # source://activerecord//lib/active_record/migration/compatibility.rb#314
  def command_recorder; end

  # source://activerecord//lib/active_record/migration/compatibility.rb#307
  def compatible_table_definition(t); end
end

# source://activerecord//lib/active_record/migration/compatibility.rb#287
module ActiveRecord::Migration::Compatibility::V5_2::CommandRecorder
  # source://activerecord//lib/active_record/migration/compatibility.rb#292
  def invert_change_column_comment(args); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#296
  def invert_change_table_comment(args); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#288
  def invert_transaction(args, &block); end
end

# source://activerecord//lib/active_record/migration/compatibility.rb#268
module ActiveRecord::Migration::Compatibility::V5_2::TableDefinition
  # source://activerecord//lib/active_record/migration/compatibility.rb#274
  def column(name, type, index: T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#269
  def timestamps(**options); end

  private

  # source://activerecord//lib/active_record/migration/compatibility.rb#283
  def raise_on_duplicate_column(name); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#280
  def raise_on_if_exist_options(options); end
end

# source://activerecord//lib/active_record/migration/compatibility.rb#224
class ActiveRecord::Migration::Compatibility::V6_0 < ::ActiveRecord::Migration::Compatibility::V6_1
  # source://activerecord//lib/active_record/migration/compatibility.rb#248
  def add_belongs_to(table_name, ref_name, **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#248
  def add_reference(table_name, ref_name, **options); end

  private

  # source://activerecord//lib/active_record/migration/compatibility.rb#259
  def compatible_table_definition(t); end
end

# source://activerecord//lib/active_record/migration/compatibility.rb#225
class ActiveRecord::Migration::Compatibility::V6_0::ReferenceDefinition < ::ActiveRecord::ConnectionAdapters::ReferenceDefinition
  # source://activerecord//lib/active_record/migration/compatibility.rb#226
  def index_options(table_name); end
end

# source://activerecord//lib/active_record/migration/compatibility.rb#231
module ActiveRecord::Migration::Compatibility::V6_0::TableDefinition
  # source://activerecord//lib/active_record/migration/compatibility.rb#232
  def belongs_to(*args, **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#238
  def column(name, type, index: T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#232
  def references(*args, **options); end

  private

  # source://activerecord//lib/active_record/migration/compatibility.rb#244
  def raise_on_if_exist_options(options); end
end

# source://activerecord//lib/active_record/migration/compatibility.rb#161
class ActiveRecord::Migration::Compatibility::V6_1 < ::ActiveRecord::Migration::Compatibility::V7_0
  # source://activerecord//lib/active_record/migration/compatibility.rb#176
  def add_column(table_name, column_name, type, **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#185
  def change_column(table_name, column_name, type, **options); end

  private

  # source://activerecord//lib/active_record/migration/compatibility.rb#216
  def compatible_table_definition(t); end
end

# source://activerecord//lib/active_record/migration/compatibility.rb#162
class ActiveRecord::Migration::Compatibility::V6_1::PostgreSQLCompat
  class << self
    # source://activerecord//lib/active_record/migration/compatibility.rb#163
    def compatible_timestamp_type(type, connection); end
  end
end

# source://activerecord//lib/active_record/migration/compatibility.rb#194
module ActiveRecord::Migration::Compatibility::V6_1::TableDefinition
  # source://activerecord//lib/active_record/migration/compatibility.rb#200
  def change(name, type, index: T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#205
  def column(name, type, index: T.unsafe(nil), **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#195
  def new_column_definition(name, type, **options); end

  private

  # source://activerecord//lib/active_record/migration/compatibility.rb#211
  def raise_on_if_exist_options(options); end
end

# source://activerecord//lib/active_record/migration/compatibility.rb#37
class ActiveRecord::Migration::Compatibility::V7_0 < ::ActiveRecord::Migration::Compatibility::V7_1
  include ::ActiveRecord::Migration::Compatibility::V7_0::LegacyIndexName

  # source://activerecord//lib/active_record/migration/compatibility.rb#107
  def add_belongs_to(table_name, ref_name, **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#97
  def add_column(table_name, column_name, type, **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#145
  def add_foreign_key(from_table, to_table, **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#102
  def add_index(table_name, column_name, **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#107
  def add_reference(table_name, ref_name, **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#126
  def change_column(table_name, column_name, type, **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#134
  def change_column_null(table_name, column_name, null, default = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#113
  def create_table(table_name, **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#138
  def disable_extension(name, **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#120
  def rename_table(table_name, new_name, **options); end

  private

  # source://activerecord//lib/active_record/migration/compatibility.rb#153
  def compatible_table_definition(t); end
end

# source://activerecord//lib/active_record/migration/compatibility.rb#38
module ActiveRecord::Migration::Compatibility::V7_0::LegacyIndexName
  private

  # source://activerecord//lib/active_record/migration/compatibility.rb#62
  def expression_column_name?(column_name); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#54
  def index_name_options(column_names); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#40
  def legacy_index_name(table_name, options); end
end

# source://activerecord//lib/active_record/migration/compatibility.rb#67
module ActiveRecord::Migration::Compatibility::V7_0::TableDefinition
  include ::ActiveRecord::Migration::Compatibility::V7_0::LegacyIndexName

  # source://activerecord//lib/active_record/migration/compatibility.rb#75
  def change(name, type, **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#70
  def column(name, type, **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#80
  def index(column_name, **options); end

  # source://activerecord//lib/active_record/migration/compatibility.rb#85
  def references(*args, **options); end

  private

  # source://activerecord//lib/active_record/migration/compatibility.rb#91
  def raise_on_if_exist_options(options); end
end

# source://activerecord//lib/active_record/migration/compatibility.rb#34
class ActiveRecord::Migration::Compatibility::V7_1 < ::ActiveRecord::Migration::Current; end

# source://activerecord//lib/active_record/migration/compatibility.rb#32
ActiveRecord::Migration::Compatibility::V7_2 = ActiveRecord::Migration::Current

# source://activerecord//lib/active_record/migration.rb#582
class ActiveRecord::Migration::Current < ::ActiveRecord::Migration
  # source://activerecord//lib/active_record/migration.rb#591
  def change_table(table_name, **options); end

  # source://activerecord//lib/active_record/migration.rb#615
  def compatible_table_definition(t); end

  # source://activerecord//lib/active_record/migration.rb#599
  def create_join_table(table_1, table_2, **options); end

  # source://activerecord//lib/active_record/migration.rb#583
  def create_table(table_name, **options); end

  # source://activerecord//lib/active_record/migration.rb#607
  def drop_table(table_name, **options); end
end

# source://activerecord//lib/active_record/migration/default_strategy.rb#7
class ActiveRecord::Migration::DefaultStrategy < ::ActiveRecord::Migration::ExecutionStrategy
  private

  # source://activerecord//lib/active_record/migration/default_strategy.rb#17
  def connection; end

  # source://activerecord//lib/active_record/migration/default_strategy.rb#9
  def method_missing(method, *_arg1, **_arg2, &_arg3); end

  # source://activerecord//lib/active_record/migration/default_strategy.rb#13
  def respond_to_missing?(method, include_private = T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/migration/execution_strategy.rb#10
class ActiveRecord::Migration::ExecutionStrategy
  # source://activerecord//lib/active_record/migration/execution_strategy.rb#11
  def initialize(migration); end

  private

  # source://activerecord//lib/active_record/migration/execution_strategy.rb#16
  def migration; end
end

# source://activerecord//lib/active_record/migration/join_table.rb#5
module ActiveRecord::Migration::JoinTable
  private

  # source://activerecord//lib/active_record/migration/join_table.rb#7
  def find_join_table_name(table_1, table_2, options = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/migration/join_table.rb#11
  def join_table_name(table_1, table_2); end
end

# source://activerecord//lib/active_record/migration.rb#640
ActiveRecord::Migration::MigrationFilenameRegexp = T.let(T.unsafe(nil), Regexp)

# source://activerecord//lib/active_record/migration.rb#876
class ActiveRecord::Migration::ReversibleBlockHelper < ::Struct
  # source://activerecord//lib/active_record/migration.rb#881
  def down; end

  def reverting; end
  def reverting=(_); end

  # source://activerecord//lib/active_record/migration.rb#877
  def up; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activerecord//lib/active_record/migration.rb#1214
class ActiveRecord::MigrationContext
  # source://activerecord//lib/active_record/migration.rb#1217
  def initialize(migrations_paths, schema_migration = T.unsafe(nil), internal_metadata = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/migration.rb#1343
  def current_environment; end

  # source://activerecord//lib/active_record/migration.rb#1293
  def current_version; end

  # source://activerecord//lib/active_record/migration.rb#1267
  def down(target_version = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/migration.rb#1253
  def forward(steps = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/migration.rb#1285
  def get_all_versions; end

  # source://activerecord//lib/active_record/migration.rb#1215
  def internal_metadata; end

  # source://activerecord//lib/active_record/migration.rb#1351
  def last_stored_environment; end

  # source://activerecord//lib/active_record/migration.rb#1236
  def migrate(target_version = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/migration.rb#1306
  def migrations; end

  # source://activerecord//lib/active_record/migration.rb#1215
  def migrations_paths; end

  # source://activerecord//lib/active_record/migration.rb#1322
  def migrations_status; end

  # source://activerecord//lib/active_record/migration.rb#1298
  def needs_migration?; end

  # source://activerecord//lib/active_record/migration.rb#1281
  def open; end

  # source://activerecord//lib/active_record/migration.rb#1302
  def pending_migration_versions; end

  # source://activerecord//lib/active_record/migration.rb#1347
  def protected_environment?; end

  # source://activerecord//lib/active_record/migration.rb#1249
  def rollback(steps = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/migration.rb#1277
  def run(direction, target_version); end

  # source://activerecord//lib/active_record/migration.rb#1215
  def schema_migration; end

  # source://activerecord//lib/active_record/migration.rb#1257
  def up(target_version = T.unsafe(nil), &block); end

  private

  # source://activerecord//lib/active_record/migration.rb#1363
  def connection; end

  # source://activerecord//lib/active_record/migration.rb#1367
  def connection_pool; end

  # source://activerecord//lib/active_record/migration.rb#1371
  def migration_files; end

  # source://activerecord//lib/active_record/migration.rb#1388
  def move(direction, steps); end

  # source://activerecord//lib/active_record/migration.rb#1376
  def parse_migration_filename(filename); end

  # source://activerecord//lib/active_record/migration.rb#1384
  def valid_migration_timestamp?(version); end

  # source://activerecord//lib/active_record/migration.rb#1380
  def validate_timestamp?; end
end

# source://activerecord//lib/active_record/migration.rb#13
class ActiveRecord::MigrationError < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/migration.rb#14
  def initialize(message = T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/migration.rb#1180
class ActiveRecord::MigrationProxy < ::Struct
  # source://activerecord//lib/active_record/migration.rb#1181
  def initialize(name, version, filename, scope); end

  # source://activerecord//lib/active_record/migration.rb#1190
  def announce(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/migration.rb#1186
  def basename; end

  # source://activerecord//lib/active_record/migration.rb#1190
  def disable_ddl_transaction(*_arg0, **_arg1, &_arg2); end

  def filename; end
  def filename=(_); end

  # source://activerecord//lib/active_record/migration.rb#1190
  def migrate(*_arg0, **_arg1, &_arg2); end

  def name; end
  def name=(_); end
  def scope; end
  def scope=(_); end
  def version; end
  def version=(_); end

  # source://activerecord//lib/active_record/migration.rb#1190
  def write(*_arg0, **_arg1, &_arg2); end

  private

  # source://activerecord//lib/active_record/migration.rb#1197
  def load_migration; end

  # source://activerecord//lib/active_record/migration.rb#1193
  def migration; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activerecord//lib/active_record/migration.rb#1408
class ActiveRecord::Migrator
  # source://activerecord//lib/active_record/migration.rb#1424
  def initialize(direction, migrations, schema_migration, internal_metadata, target_version = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/migration.rb#1442
  def current; end

  # source://activerecord//lib/active_record/migration.rb#1442
  def current_migration; end

  # source://activerecord//lib/active_record/migration.rb#1438
  def current_version; end

  # source://activerecord//lib/active_record/migration.rb#1487
  def load_migrated; end

  # source://activerecord//lib/active_record/migration.rb#1455
  def migrate; end

  # source://activerecord//lib/active_record/migration.rb#1483
  def migrated; end

  # source://activerecord//lib/active_record/migration.rb#1474
  def migrations; end

  # source://activerecord//lib/active_record/migration.rb#1478
  def pending_migrations; end

  # source://activerecord//lib/active_record/migration.rb#1447
  def run; end

  # source://activerecord//lib/active_record/migration.rb#1463
  def runnable; end

  private

  # source://activerecord//lib/active_record/migration.rb#1492
  def connection; end

  # source://activerecord//lib/active_record/migration.rb#1587
  def ddl_transaction(migration, &block); end

  # source://activerecord//lib/active_record/migration.rb#1582
  def down?; end

  # source://activerecord//lib/active_record/migration.rb#1531
  def execute_migration_in_transaction(migration); end

  # source://activerecord//lib/active_record/migration.rb#1552
  def finish; end

  # source://activerecord//lib/active_record/migration.rb#1619
  def generate_migrator_advisory_lock_id; end

  # source://activerecord//lib/active_record/migration.rb#1527
  def invalid_target?; end

  # source://activerecord//lib/active_record/migration.rb#1506
  def migrate_without_lock; end

  # source://activerecord//lib/active_record/migration.rb#1522
  def ran?(migration); end

  # source://activerecord//lib/active_record/migration.rb#1516
  def record_environment; end

  # source://activerecord//lib/active_record/migration.rb#1568
  def record_version_state_after_migrating(version); end

  # source://activerecord//lib/active_record/migration.rb#1497
  def run_without_lock; end

  # source://activerecord//lib/active_record/migration.rb#1556
  def start; end

  # source://activerecord//lib/active_record/migration.rb#1548
  def target; end

  # source://activerecord//lib/active_record/migration.rb#1578
  def up?; end

  # source://activerecord//lib/active_record/migration.rb#1599
  def use_advisory_lock?; end

  # source://activerecord//lib/active_record/migration.rb#1595
  def use_transaction?(migration); end

  # source://activerecord//lib/active_record/migration.rb#1560
  def validate(migrations); end

  # source://activerecord//lib/active_record/migration.rb#1603
  def with_advisory_lock; end

  class << self
    # source://activerecord//lib/active_record/migration.rb#1413
    def current_version; end

    # source://activerecord//lib/active_record/migration.rb#1410
    def migrations_paths; end

    # source://activerecord//lib/active_record/migration.rb#1410
    def migrations_paths=(_arg0); end
  end
end

# source://activerecord//lib/active_record/migration.rb#1618
ActiveRecord::Migrator::MIGRATOR_SALT = T.let(T.unsafe(nil), Integer)

# source://activerecord//lib/active_record/errors.rb#225
class ActiveRecord::MismatchedForeignKey < ::ActiveRecord::StatementInvalid
  # source://activerecord//lib/active_record/errors.rb#226
  def initialize(message: T.unsafe(nil), sql: T.unsafe(nil), binds: T.unsafe(nil), table: T.unsafe(nil), foreign_key: T.unsafe(nil), target_table: T.unsafe(nil), primary_key: T.unsafe(nil), primary_key_column: T.unsafe(nil), query_parser: T.unsafe(nil), connection_pool: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/errors.rb#262
  def set_query(sql, binds); end
end

# source://activerecord//lib/active_record/model_schema.rb#6
module ActiveRecord::ModelSchema
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::ModelSchema::ClassMethods

  class << self
    # source://activerecord//lib/active_record/model_schema.rb#196
    def derive_join_table_name(first_table, second_table); end
  end

  module GeneratedClassMethods
    def immutable_strings_by_default; end
    def immutable_strings_by_default=(value); end
    def immutable_strings_by_default?; end
    def implicit_order_column; end
    def implicit_order_column=(value); end
    def implicit_order_column?; end
    def inheritance_column; end
    def inheritance_column=(value); end
    def inheritance_column?; end
    def internal_metadata_table_name; end
    def internal_metadata_table_name=(value); end
    def internal_metadata_table_name?; end
    def pluralize_table_names; end
    def pluralize_table_names=(value); end
    def pluralize_table_names?; end
    def primary_key_prefix_type; end
    def primary_key_prefix_type=(value); end
    def primary_key_prefix_type?; end
    def schema_migrations_table_name; end
    def schema_migrations_table_name=(value); end
    def schema_migrations_table_name?; end
    def table_name_prefix; end
    def table_name_prefix=(value); end
    def table_name_prefix?; end
    def table_name_suffix; end
    def table_name_suffix=(value); end
    def table_name_suffix?; end
  end

  module GeneratedInstanceMethods
    def pluralize_table_names; end
    def pluralize_table_names?; end
    def primary_key_prefix_type; end
    def primary_key_prefix_type?; end
    def table_name_prefix; end
    def table_name_prefix?; end
    def table_name_suffix; end
    def table_name_suffix?; end
  end
end

# source://activerecord//lib/active_record/model_schema.rb#200
module ActiveRecord::ModelSchema::ClassMethods
  # source://activerecord//lib/active_record/model_schema.rb#437
  def _returning_columns_for_insert(connection); end

  # source://activerecord//lib/active_record/model_schema.rb#421
  def attributes_builder; end

  # source://activerecord//lib/active_record/model_schema.rb#473
  def column_defaults; end

  # source://activerecord//lib/active_record/model_schema.rb#464
  def column_for_attribute(name); end

  # source://activerecord//lib/active_record/model_schema.rb#479
  def column_names; end

  # source://activerecord//lib/active_record/model_schema.rb#433
  def columns; end

  # source://activerecord//lib/active_record/model_schema.rb#428
  def columns_hash; end

  # source://activerecord//lib/active_record/model_schema.rb#490
  def content_columns; end

  # source://activerecord//lib/active_record/model_schema.rb#303
  def full_table_name_prefix; end

  # source://activerecord//lib/active_record/model_schema.rb#307
  def full_table_name_suffix; end

  # source://activerecord//lib/active_record/model_schema.rb#332
  def ignored_columns; end

  # source://activerecord//lib/active_record/model_schema.rb#367
  def ignored_columns=(columns); end

  # source://activerecord//lib/active_record/model_schema.rb#535
  def load_schema; end

  # source://activerecord//lib/active_record/model_schema.rb#412
  def next_sequence_value; end

  # source://activerecord//lib/active_record/model_schema.rb#406
  def prefetch_primary_key?; end

  # source://activerecord//lib/active_record/model_schema.rb#313
  def protected_environments; end

  # source://activerecord//lib/active_record/model_schema.rb#322
  def protected_environments=(environments); end

  # source://activerecord//lib/active_record/model_schema.rb#286
  def quoted_table_name; end

  # source://activerecord//lib/active_record/model_schema.rb#326
  def real_inheritance_column=(value); end

  # source://activerecord//lib/active_record/model_schema.rb#524
  def reset_column_information; end

  # source://activerecord//lib/active_record/model_schema.rb#380
  def reset_sequence_name; end

  # source://activerecord//lib/active_record/model_schema.rb#291
  def reset_table_name; end

  # source://activerecord//lib/active_record/model_schema.rb#372
  def sequence_name; end

  # source://activerecord//lib/active_record/model_schema.rb#399
  def sequence_name=(value); end

  # source://activerecord//lib/active_record/model_schema.rb#483
  def symbol_column_to_string(name_symbol); end

  # source://activerecord//lib/active_record/model_schema.rb#417
  def table_exists?; end

  # source://activerecord//lib/active_record/model_schema.rb#260
  def table_name; end

  # source://activerecord//lib/active_record/model_schema.rb#270
  def table_name=(value); end

  # source://activerecord//lib/active_record/model_schema.rb#447
  def yaml_encoder; end

  protected

  # source://activerecord//lib/active_record/model_schema.rb#550
  def initialize_load_schema_monitor; end

  # source://activerecord//lib/active_record/model_schema.rb#554
  def reload_schema_from_cache(recursive = T.unsafe(nil)); end

  private

  # source://activerecord//lib/active_record/model_schema.rb#607
  def compute_table_name; end

  # source://activerecord//lib/active_record/model_schema.rb#575
  def inherited(child_class); end

  # source://activerecord//lib/active_record/model_schema.rb#588
  def load_schema!; end

  # source://activerecord//lib/active_record/model_schema.rb#584
  def schema_loaded?; end

  # source://activerecord//lib/active_record/model_schema.rb#623
  def type_for_column(connection, column); end

  # source://activerecord//lib/active_record/model_schema.rb#601
  def undecorated_table_name(model_name); end
end

# source://activerecord//lib/active_record/errors.rb#450
class ActiveRecord::MultiparameterAssignmentErrors < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/errors.rb#453
  def initialize(errors = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/errors.rb#451
  def errors; end
end

# source://activerecord//lib/active_record/nested_attributes.rb#8
module ActiveRecord::NestedAttributes
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::NestedAttributes::ClassMethods

  # source://activerecord//lib/active_record/nested_attributes.rb#401
  def _destroy; end

  private

  # source://activerecord//lib/active_record/nested_attributes.rb#614
  def allow_destroy?(association_name); end

  # source://activerecord//lib/active_record/nested_attributes.rb#487
  def assign_nested_attributes_for_collection_association(association_name, attributes_collection); end

  # source://activerecord//lib/active_record/nested_attributes.rb#423
  def assign_nested_attributes_for_one_to_one_association(association_name, attributes); end

  # source://activerecord//lib/active_record/nested_attributes.rb#576
  def assign_to_or_mark_for_destruction(record, attributes, allow_destroy); end

  # source://activerecord//lib/active_record/nested_attributes.rb#598
  def call_reject_if(association_name, attributes); end

  # source://activerecord//lib/active_record/nested_attributes.rb#556
  def check_record_limit!(limit, attributes_collection); end

  # source://activerecord//lib/active_record/nested_attributes.rb#624
  def find_record_by_id(records, id); end

  # source://activerecord//lib/active_record/nested_attributes.rb#582
  def has_destroy_flag?(hash); end

  # source://activerecord//lib/active_record/nested_attributes.rb#618
  def raise_nested_attributes_record_not_found!(association_name, record_id); end

  # source://activerecord//lib/active_record/nested_attributes.rb#589
  def reject_new_record?(association_name, attributes); end

  # source://activerecord//lib/active_record/nested_attributes.rb#610
  def will_be_destroyed?(association_name, attributes); end

  module GeneratedClassMethods
    def nested_attributes_options; end
    def nested_attributes_options=(value); end
    def nested_attributes_options?; end
  end

  module GeneratedInstanceMethods
    def nested_attributes_options; end
    def nested_attributes_options?; end
  end
end

# source://activerecord//lib/active_record/nested_attributes.rb#301
module ActiveRecord::NestedAttributes::ClassMethods
  # source://activerecord//lib/active_record/nested_attributes.rb#351
  def accepts_nested_attributes_for(*attr_names); end

  private

  # source://activerecord//lib/active_record/nested_attributes.rb#386
  def generate_association_writer(association_name, type); end
end

# source://activerecord//lib/active_record/nested_attributes.rb#302
ActiveRecord::NestedAttributes::ClassMethods::REJECT_ALL_BLANK_PROC = T.let(T.unsafe(nil), Proc)

# source://activerecord//lib/active_record/nested_attributes.rb#9
class ActiveRecord::NestedAttributes::TooManyRecords < ::ActiveRecord::ActiveRecordError; end

# source://activerecord//lib/active_record/nested_attributes.rb#408
ActiveRecord::NestedAttributes::UNASSIGNABLE_KEYS = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/active_record/errors.rb#315
class ActiveRecord::NoDatabaseError < ::ActiveRecord::StatementInvalid
  include ::ActiveSupport::ActionableError
  extend ::ActiveSupport::ActionableError::ClassMethods

  # source://activerecord//lib/active_record/errors.rb#322
  def initialize(message = T.unsafe(nil), connection_pool: T.unsafe(nil)); end

  # source://activesupport/7.2.2/lib/active_support/actionable_error.rb#17
  def _actions; end

  # source://activesupport/7.2.2/lib/active_support/actionable_error.rb#17
  def _actions=(_arg0); end

  # source://activesupport/7.2.2/lib/active_support/actionable_error.rb#17
  def _actions?; end

  class << self
    # source://activesupport/7.2.2/lib/active_support/actionable_error.rb#17
    def _actions; end

    # source://activesupport/7.2.2/lib/active_support/actionable_error.rb#17
    def _actions=(value); end

    # source://activesupport/7.2.2/lib/active_support/actionable_error.rb#17
    def _actions?; end

    # source://activerecord//lib/active_record/errors.rb#327
    def db_error(db_name); end
  end
end

# source://activerecord//lib/active_record/migration.rb#199
class ActiveRecord::NoEnvironmentInSchemaError < ::ActiveRecord::MigrationError
  # source://activerecord//lib/active_record/migration.rb#200
  def initialize; end
end

# source://activerecord//lib/active_record/no_touching.rb#5
module ActiveRecord::NoTouching
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::NoTouching::ClassMethods

  # source://activerecord//lib/active_record/no_touching.rb#53
  def no_touching?; end

  # source://activerecord//lib/active_record/no_touching.rb#61
  def touch(*_arg0, **_arg1); end

  # source://activerecord//lib/active_record/no_touching.rb#57
  def touch_later(*_arg0); end

  class << self
    # source://activerecord//lib/active_record/no_touching.rb#36
    def applied_to?(klass); end

    # source://activerecord//lib/active_record/no_touching.rb#29
    def apply_to(klass); end

    private

    # source://activerecord//lib/active_record/no_touching.rb#41
    def klasses; end
  end
end

# source://activerecord//lib/active_record/no_touching.rb#8
module ActiveRecord::NoTouching::ClassMethods
  # source://activerecord//lib/active_record/no_touching.rb#23
  def no_touching(&block); end
end

# source://activerecord//lib/active_record/normalization.rb#4
module ActiveRecord::Normalization
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Normalization::ClassMethods

  # source://activerecord//lib/active_record/normalization.rb#26
  def normalize_attribute(name); end

  private

  # source://activerecord//lib/active_record/normalization.rb#112
  def normalize_changed_in_place_attributes; end

  module GeneratedClassMethods
    def normalized_attributes; end
    def normalized_attributes=(value); end
    def normalized_attributes?; end
  end

  module GeneratedInstanceMethods
    def normalized_attributes; end
    def normalized_attributes=(value); end
    def normalized_attributes?; end
  end
end

# source://activerecord//lib/active_record/normalization.rb#31
module ActiveRecord::Normalization::ClassMethods
  # source://activerecord//lib/active_record/normalization.rb#106
  def normalize_value_for(name, value); end

  # source://activerecord//lib/active_record/normalization.rb#88
  def normalizes(*names, with:, apply_to_nil: T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/normalization.rb#118
class ActiveRecord::Normalization::NormalizedValueType
  include ::ActiveModel::Type::SerializeCastValue
  extend ::ActiveModel::Type::SerializeCastValue::ClassMethods

  # source://activerecord//lib/active_record/normalization.rb#124
  def initialize(cast_type:, normalizer:, normalize_nil:); end

  # source://activerecord//lib/active_record/normalization.rb#143
  def ==(other); end

  # source://activerecord//lib/active_record/normalization.rb#131
  def cast(value); end

  # source://activerecord//lib/active_record/normalization.rb#121
  def cast_type; end

  # source://activerecord//lib/active_record/normalization.rb#143
  def eql?(other); end

  # source://activerecord//lib/active_record/normalization.rb#151
  def hash; end

  def inspect; end

  # source://activerecord//lib/active_record/normalization.rb#121
  def normalize_nil; end

  # source://activerecord//lib/active_record/normalization.rb#121
  def normalize_nil?; end

  # source://activerecord//lib/active_record/normalization.rb#121
  def normalizer; end

  # source://activerecord//lib/active_record/normalization.rb#135
  def serialize(value); end

  # source://activerecord//lib/active_record/normalization.rb#139
  def serialize_cast_value(value); end

  private

  # source://activerecord//lib/active_record/normalization.rb#158
  def normalize(value); end
end

# source://activerecord//lib/active_record/errors.rb#280
class ActiveRecord::NotNullViolation < ::ActiveRecord::StatementInvalid; end

# source://activerecord//lib/active_record/migration/pending_migration_connection.rb#4
class ActiveRecord::PendingMigrationConnection
  class << self
    # source://activerecord//lib/active_record/migration/pending_migration_connection.rb#17
    def current_preventing_writes; end

    # source://activerecord//lib/active_record/migration/pending_migration_connection.rb#13
    def primary_class?; end

    # source://activerecord//lib/active_record/migration/pending_migration_connection.rb#5
    def with_temporary_pool(db_config, &block); end
  end
end

# source://activerecord//lib/active_record/migration.rb#150
class ActiveRecord::PendingMigrationError < ::ActiveRecord::MigrationError
  include ::ActiveSupport::ActionableError
  extend ::ActiveSupport::ActionableError::ClassMethods

  # source://activerecord//lib/active_record/migration.rb#162
  def initialize(message = T.unsafe(nil), pending_migrations: T.unsafe(nil)); end

  # source://activesupport/7.2.2/lib/active_support/actionable_error.rb#17
  def _actions; end

  # source://activesupport/7.2.2/lib/active_support/actionable_error.rb#17
  def _actions=(_arg0); end

  # source://activesupport/7.2.2/lib/active_support/actionable_error.rb#17
  def _actions?; end

  private

  # source://activerecord//lib/active_record/migration.rb#185
  def connection_pool; end

  # source://activerecord//lib/active_record/migration.rb#171
  def detailed_migration_message(pending_migrations); end

  class << self
    # source://activesupport/7.2.2/lib/active_support/actionable_error.rb#17
    def _actions; end

    # source://activesupport/7.2.2/lib/active_support/actionable_error.rb#17
    def _actions=(value); end

    # source://activesupport/7.2.2/lib/active_support/actionable_error.rb#17
    def _actions?; end
  end
end

# source://activerecord//lib/active_record/persistence.rb#7
module ActiveRecord::Persistence
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Persistence::ClassMethods

  # source://activerecord//lib/active_record/persistence.rb#489
  def becomes(klass); end

  # source://activerecord//lib/active_record/persistence.rb#510
  def becomes!(klass); end

  # source://activerecord//lib/active_record/persistence.rb#657
  def decrement(attribute, by = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/persistence.rb#667
  def decrement!(attribute, by = T.unsafe(nil), touch: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/persistence.rb#441
  def delete; end

  # source://activerecord//lib/active_record/persistence.rb#455
  def destroy; end

  # source://activerecord//lib/active_record/persistence.rb#471
  def destroy!; end

  # source://activerecord//lib/active_record/persistence.rb#357
  def destroyed?; end

  # source://activerecord//lib/active_record/persistence.rb#634
  def increment(attribute, by = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/persistence.rb#646
  def increment!(attribute, by = T.unsafe(nil), touch: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/persistence.rb#340
  def new_record?; end

  # source://activerecord//lib/active_record/persistence.rb#363
  def persisted?; end

  # source://activerecord//lib/active_record/persistence.rb#347
  def previously_new_record?; end

  # source://activerecord//lib/active_record/persistence.rb#352
  def previously_persisted?; end

  # source://activerecord//lib/active_record/persistence.rb#744
  def reload(options = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/persistence.rb#392
  def save(**options, &block); end

  # source://activerecord//lib/active_record/persistence.rb#425
  def save!(**options, &block); end

  # source://activerecord//lib/active_record/persistence.rb#683
  def toggle(attribute); end

  # source://activerecord//lib/active_record/persistence.rb#692
  def toggle!(attribute); end

  # source://activerecord//lib/active_record/persistence.rb#795
  def touch(*names, time: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/persistence.rb#565
  def update(attributes); end

  # source://activerecord//lib/active_record/persistence.rb#576
  def update!(attributes); end

  # source://activerecord//lib/active_record/persistence.rb#532
  def update_attribute(name, value); end

  # source://activerecord//lib/active_record/persistence.rb#554
  def update_attribute!(name, value); end

  # source://activerecord//lib/active_record/persistence.rb#586
  def update_column(name, value); end

  # source://activerecord//lib/active_record/persistence.rb#606
  def update_columns(attributes); end

  private

  # source://activerecord//lib/active_record/persistence.rb#922
  def _create_record(attribute_names = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/persistence.rb#872
  def _delete_row; end

  # source://activerecord//lib/active_record/persistence.rb#828
  def _find_record(options); end

  # source://activerecord//lib/active_record/persistence.rb#839
  def _in_memory_query_constraints_hash; end

  # source://activerecord//lib/active_record/persistence.rb#854
  def _query_constraints_hash; end

  # source://activerecord//lib/active_record/persistence.rb#959
  def _raise_readonly_record_error; end

  # source://activerecord//lib/active_record/persistence.rb#951
  def _raise_record_not_destroyed; end

  # source://activerecord//lib/active_record/persistence.rb#963
  def _raise_record_not_touched_error; end

  # source://activerecord//lib/active_record/persistence.rb#876
  def _touch_row(attribute_names, time); end

  # source://activerecord//lib/active_record/persistence.rb#902
  def _update_record(attribute_names = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/persistence.rb#886
  def _update_row(attribute_names, attempted_action = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/persistence.rb#849
  def apply_scoping?(options); end

  # source://activerecord//lib/active_record/persistence.rb#893
  def create_or_update(**_arg0, &block); end

  # source://activerecord//lib/active_record/persistence.rb#865
  def destroy_associations; end

  # source://activerecord//lib/active_record/persistence.rb#868
  def destroy_row; end

  # source://activerecord//lib/active_record/persistence.rb#816
  def init_internals; end

  # source://activerecord//lib/active_record/persistence.rb#822
  def strict_loaded_associations; end

  # source://activerecord//lib/active_record/persistence.rb#947
  def verify_readonly_attribute(name); end
end

# source://activerecord//lib/active_record/persistence.rb#10
module ActiveRecord::Persistence::ClassMethods
  # source://activerecord//lib/active_record/persistence.rb#284
  def _delete_record(constraints); end

  # source://activerecord//lib/active_record/persistence.rb#238
  def _insert_record(connection, values, returning); end

  # source://activerecord//lib/active_record/persistence.rb#265
  def _update_record(values, constraints); end

  # source://activerecord//lib/active_record/persistence.rb#82
  def build(attributes = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/persistence.rb#234
  def composite_query_constraints_list; end

  # source://activerecord//lib/active_record/persistence.rb#33
  def create(attributes = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/persistence.rb#50
  def create!(attributes = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/persistence.rb#219
  def has_query_constraints?; end

  # source://activerecord//lib/active_record/persistence.rb#100
  def instantiate(attributes, column_types = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/persistence.rb#212
  def query_constraints(*columns_list); end

  # source://activerecord//lib/active_record/persistence.rb#223
  def query_constraints_list; end

  # source://activerecord//lib/active_record/persistence.rb#132
  def update(id = T.unsafe(nil), attributes); end

  # source://activerecord//lib/active_record/persistence.rb#158
  def update!(id = T.unsafe(nil), attributes); end

  private

  # source://activerecord//lib/active_record/persistence.rb#330
  def build_default_constraint; end

  # source://activerecord//lib/active_record/persistence.rb#323
  def discriminate_class_for_record(record); end

  # source://activerecord//lib/active_record/persistence.rb#303
  def inherited(subclass); end

  # source://activerecord//lib/active_record/persistence.rb#313
  def instantiate_instance_of(klass, attributes, column_types = T.unsafe(nil), &block); end
end

# source://activerecord//lib/active_record/relation/predicate_builder.rb#4
class ActiveRecord::PredicateBuilder
  # source://activerecord//lib/active_record/relation/predicate_builder.rb#12
  def initialize(table); end

  # source://activerecord//lib/active_record/relation/predicate_builder.rb#53
  def [](attr_name, value, operator = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/predicate_builder.rb#57
  def build(attribute, value, operator = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/predicate_builder.rb#67
  def build_bind_attribute(column_name, value); end

  # source://activerecord//lib/active_record/relation/predicate_builder.rb#23
  def build_from_hash(attributes, &block); end

  # source://activerecord//lib/active_record/relation/predicate_builder.rb#49
  def register_handler(klass, handler); end

  # source://activerecord//lib/active_record/relation/predicate_builder.rb#71
  def resolve_arel_attribute(table_name, column_name, &block); end

  protected

  # source://activerecord//lib/active_record/relation/predicate_builder.rb#76
  def expand_from_hash(attributes, &block); end

  private

  # source://activerecord//lib/active_record/relation/predicate_builder.rb#150
  def convert_dot_notation_to_hash(attributes); end

  # source://activerecord//lib/active_record/relation/predicate_builder.rb#140
  def grouping_queries(queries); end

  # source://activerecord//lib/active_record/relation/predicate_builder.rb#172
  def handler_for(object); end

  # source://activerecord//lib/active_record/relation/predicate_builder.rb#138
  def table; end

  class << self
    # source://activerecord//lib/active_record/relation/predicate_builder.rb#28
    def references(attributes); end
  end
end

# source://activerecord//lib/active_record/relation/predicate_builder/array_handler.rb#7
class ActiveRecord::PredicateBuilder::ArrayHandler
  # source://activerecord//lib/active_record/relation/predicate_builder/array_handler.rb#8
  def initialize(predicate_builder); end

  # source://activerecord//lib/active_record/relation/predicate_builder/array_handler.rb#12
  def call(attribute, value); end

  private

  # source://activerecord//lib/active_record/relation/predicate_builder/array_handler.rb#39
  def predicate_builder; end
end

# source://activerecord//lib/active_record/relation/predicate_builder/array_handler.rb#41
module ActiveRecord::PredicateBuilder::ArrayHandler::NullPredicate
  class << self
    # source://activerecord//lib/active_record/relation/predicate_builder/array_handler.rb#42
    def or(other); end
  end
end

# source://activerecord//lib/active_record/relation/predicate_builder/association_query_value.rb#5
class ActiveRecord::PredicateBuilder::AssociationQueryValue
  # source://activerecord//lib/active_record/relation/predicate_builder/association_query_value.rb#6
  def initialize(associated_table, value); end

  # source://activerecord//lib/active_record/relation/predicate_builder/association_query_value.rb#11
  def queries; end

  private

  # source://activerecord//lib/active_record/relation/predicate_builder/association_query_value.rb#23
  def associated_table; end

  # source://activerecord//lib/active_record/relation/predicate_builder/association_query_value.rb#59
  def convert_to_id(value); end

  # source://activerecord//lib/active_record/relation/predicate_builder/association_query_value.rb#25
  def ids; end

  # source://activerecord//lib/active_record/relation/predicate_builder/association_query_value.rb#55
  def polymorphic_clause?; end

  # source://activerecord//lib/active_record/relation/predicate_builder/association_query_value.rb#47
  def polymorphic_name; end

  # source://activerecord//lib/active_record/relation/predicate_builder/association_query_value.rb#39
  def primary_key; end

  # source://activerecord//lib/active_record/relation/predicate_builder/association_query_value.rb#43
  def primary_type; end

  # source://activerecord//lib/active_record/relation/predicate_builder/association_query_value.rb#51
  def select_clause?; end

  # source://activerecord//lib/active_record/relation/predicate_builder/association_query_value.rb#23
  def value; end
end

# source://activerecord//lib/active_record/relation/predicate_builder/basic_object_handler.rb#5
class ActiveRecord::PredicateBuilder::BasicObjectHandler
  # source://activerecord//lib/active_record/relation/predicate_builder/basic_object_handler.rb#6
  def initialize(predicate_builder); end

  # source://activerecord//lib/active_record/relation/predicate_builder/basic_object_handler.rb#10
  def call(attribute, value); end

  private

  # source://activerecord//lib/active_record/relation/predicate_builder/basic_object_handler.rb#16
  def predicate_builder; end
end

# source://activerecord//lib/active_record/relation/predicate_builder/polymorphic_array_value.rb#5
class ActiveRecord::PredicateBuilder::PolymorphicArrayValue
  # source://activerecord//lib/active_record/relation/predicate_builder/polymorphic_array_value.rb#6
  def initialize(associated_table, values); end

  # source://activerecord//lib/active_record/relation/predicate_builder/polymorphic_array_value.rb#11
  def queries; end

  private

  # source://activerecord//lib/active_record/relation/predicate_builder/polymorphic_array_value.rb#23
  def associated_table; end

  # source://activerecord//lib/active_record/relation/predicate_builder/polymorphic_array_value.rb#44
  def convert_to_id(value); end

  # source://activerecord//lib/active_record/relation/predicate_builder/polymorphic_array_value.rb#36
  def klass(value); end

  # source://activerecord//lib/active_record/relation/predicate_builder/polymorphic_array_value.rb#32
  def primary_key(value); end

  # source://activerecord//lib/active_record/relation/predicate_builder/polymorphic_array_value.rb#25
  def type_to_ids_mapping; end

  # source://activerecord//lib/active_record/relation/predicate_builder/polymorphic_array_value.rb#23
  def values; end
end

# source://activerecord//lib/active_record/relation/predicate_builder/range_handler.rb#5
class ActiveRecord::PredicateBuilder::RangeHandler
  # source://activerecord//lib/active_record/relation/predicate_builder/range_handler.rb#8
  def initialize(predicate_builder); end

  # source://activerecord//lib/active_record/relation/predicate_builder/range_handler.rb#12
  def call(attribute, value); end

  private

  # source://activerecord//lib/active_record/relation/predicate_builder/range_handler.rb#19
  def predicate_builder; end
end

# source://activerecord//lib/active_record/relation/predicate_builder/range_handler.rb#6
class ActiveRecord::PredicateBuilder::RangeHandler::RangeWithBinds < ::Struct
  def begin; end
  def begin=(_); end
  def end; end
  def end=(_); end
  def exclude_end?; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activerecord//lib/active_record/relation/predicate_builder/relation_handler.rb#5
class ActiveRecord::PredicateBuilder::RelationHandler
  # source://activerecord//lib/active_record/relation/predicate_builder/relation_handler.rb#6
  def call(attribute, value); end
end

# source://activerecord//lib/active_record/errors.rb#349
class ActiveRecord::PreparedStatementCacheExpired < ::ActiveRecord::StatementInvalid; end

# source://activerecord//lib/active_record/errors.rb#311
class ActiveRecord::PreparedStatementInvalid < ::ActiveRecord::ActiveRecordError; end

# source://activerecord//lib/active_record/promise.rb#4
class ActiveRecord::Promise < ::BasicObject
  # source://activerecord//lib/active_record/promise.rb#7
  def initialize(future_result, block); end

  def class; end

  # source://activerecord//lib/active_record/promise.rb#44
  def inspect; end

  def is_a?(_arg0); end

  # source://activerecord//lib/active_record/promise.rb#13
  def pending?; end

  # source://activerecord//lib/active_record/promise.rb#48
  def pretty_print(q); end

  def respond_to?(*_arg0); end

  # source://activerecord//lib/active_record/promise.rb#36
  def then(&block); end

  # source://activerecord//lib/active_record/promise.rb#20
  def value; end

  private

  # source://activerecord//lib/active_record/promise.rb#53
  def status; end
end

# source://activerecord//lib/active_record/promise.rb#63
class ActiveRecord::Promise::Complete < ::ActiveRecord::Promise
  # source://activerecord//lib/active_record/promise.rb#66
  def initialize(value); end

  # source://activerecord//lib/active_record/promise.rb#74
  def pending?; end

  # source://activerecord//lib/active_record/promise.rb#70
  def then; end

  # source://activerecord//lib/active_record/promise.rb#64
  def value; end

  private

  # source://activerecord//lib/active_record/promise.rb#79
  def status; end
end

# source://activerecord//lib/active_record/migration.rb#210
class ActiveRecord::ProtectedEnvironmentError < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/migration.rb#211
  def initialize(env = T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/errors.rb#553
class ActiveRecord::QueryAborted < ::ActiveRecord::StatementInvalid; end

# source://activerecord//lib/active_record/query_cache.rb#5
class ActiveRecord::QueryCache
  class << self
    # source://activerecord//lib/active_record/query_cache.rb#44
    def complete(pools); end

    # source://activerecord//lib/active_record/query_cache.rb#51
    def install_executor_hooks(executor = T.unsafe(nil)); end

    # source://activerecord//lib/active_record/query_cache.rb#37
    def run; end
  end
end

# source://activerecord//lib/active_record/query_cache.rb#6
module ActiveRecord::QueryCache::ClassMethods
  # source://activerecord//lib/active_record/query_cache.rb#9
  def cache(&block); end

  # source://activerecord//lib/active_record/query_cache.rb#28
  def uncached(dirties: T.unsafe(nil), &block); end
end

# source://activerecord//lib/active_record/errors.rb#565
class ActiveRecord::QueryCanceled < ::ActiveRecord::QueryAborted; end

# source://activerecord//lib/active_record/query_logs_formatter.rb#4
module ActiveRecord::QueryLogs
  class << self
    # source://activerecord//lib/active_record/query_logs.rb#78
    def cache_query_log_tags; end

    # source://activerecord//lib/active_record/query_logs.rb#78
    def cache_query_log_tags=(val); end

    # source://activesupport/7.2.2/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#49
    def cached_comment; end

    # source://activesupport/7.2.2/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def cached_comment=(obj); end

    # source://activerecord//lib/active_record/query_logs.rb#83
    def call(sql, connection); end

    # source://activerecord//lib/active_record/query_logs.rb#95
    def clear_cache; end

    # source://activerecord//lib/active_record/query_logs.rb#77
    def prepend_comment; end

    # source://activerecord//lib/active_record/query_logs.rb#77
    def prepend_comment=(val); end

    # source://activerecord//lib/active_record/query_logs.rb#113
    def query_source_location; end

    # source://activerecord//lib/active_record/query_logs.rb#75
    def taggings; end

    # source://activerecord//lib/active_record/query_logs.rb#75
    def taggings=(val); end

    # source://activerecord//lib/active_record/query_logs.rb#76
    def tags; end

    # source://activerecord//lib/active_record/query_logs.rb#76
    def tags=(val); end

    # source://activerecord//lib/active_record/query_logs.rb#79
    def tags_formatter; end

    # source://activerecord//lib/active_record/query_logs.rb#79
    def tags_formatter=(val); end

    # source://activerecord//lib/active_record/query_logs.rb#100
    def update_formatter(format); end

    private

    # source://activerecord//lib/active_record/query_logs.rb#131
    def comment(connection); end

    # source://activerecord//lib/active_record/query_logs.rb#151
    def escape_sql_comment(content); end

    # source://activerecord//lib/active_record/query_logs.rb#139
    def formatter; end

    # source://activerecord//lib/active_record/query_logs.rb#164
    def tag_content(connection); end

    # source://activerecord//lib/active_record/query_logs.rb#143
    def uncached_comment(connection); end
  end
end

# source://activerecord//lib/active_record/query_logs_formatter.rb#5
class ActiveRecord::QueryLogs::LegacyFormatter
  # source://activerecord//lib/active_record/query_logs_formatter.rb#6
  def initialize; end

  # source://activerecord//lib/active_record/query_logs_formatter.rb#11
  def format(pairs); end

  private

  # source://activerecord//lib/active_record/query_logs_formatter.rb#20
  def format_value(value); end

  # source://activerecord//lib/active_record/query_logs_formatter.rb#18
  def key_value_separator; end
end

# source://activerecord//lib/active_record/query_logs_formatter.rb#25
class ActiveRecord::QueryLogs::SQLCommenter < ::ActiveRecord::QueryLogs::LegacyFormatter
  # source://activerecord//lib/active_record/query_logs_formatter.rb#26
  def initialize; end

  # source://activerecord//lib/active_record/query_logs_formatter.rb#30
  def format(pairs); end

  private

  # source://activerecord//lib/active_record/query_logs_formatter.rb#36
  def format_value(value); end
end

# source://activerecord//lib/active_record/relation/query_methods.rb#9
module ActiveRecord::QueryMethods
  include ::ActiveModel::ForbiddenAttributesProtection

  # source://activerecord//lib/active_record/relation/query_methods.rb#421
  def _select!(*fields); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1113
  def and(other); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1121
  def and!(other); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1507
  def annotate(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1513
  def annotate!(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def annotate_values; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def annotate_values=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1572
  def arel(aliases = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1576
  def construct_join_dependency(associations, join_type); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1324
  def create_with(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1328
  def create_with!(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def create_with_value; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def create_with_value=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1388
  def distinct(value = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1393
  def distinct!(value = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def distinct_value; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def distinct_value=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#283
  def eager_load(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#288
  def eager_load!(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def eager_load_values; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def eager_load_values=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1552
  def excluding(*records); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1565
  def excluding!(records); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1434
  def extending(*modules, &block); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1442
  def extending!(*modules, &block); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def extending_values; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def extending_values=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def extensions; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#334
  def extract_associated(association); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1369
  def from(value, subquery_name = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1373
  def from!(value, subquery_name = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def from_clause; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def from_clause=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#564
  def group(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#569
  def group!(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def group_values; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def group_values=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1175
  def having(opts, *rest); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1179
  def having!(opts, *rest); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def having_clause; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def having_clause=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#699
  def in_order_of(column, values); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#247
  def includes(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#252
  def includes!(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def includes_values; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def includes_values=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1079
  def invert_where; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1083
  def invert_where!; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#846
  def joins(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#851
  def joins!(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def joins_values; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def joins_values=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#861
  def left_joins(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#861
  def left_outer_joins(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#867
  def left_outer_joins!(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def left_outer_joins_values; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def left_outer_joins_values=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1189
  def limit(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1193
  def limit!(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def limit_value; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def limit_value=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1216
  def lock(locks = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1220
  def lock!(locks = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def lock_value; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def lock_value=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1259
  def none; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1263
  def none!; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1271
  def null_relation?; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1205
  def offset(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1209
  def offset!(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def offset_value; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def offset_value=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1463
  def optimizer_hints(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1468
  def optimizer_hints!(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def optimizer_hints_values; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def optimizer_hints_values=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1145
  def or(other); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1157
  def or!(other); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#647
  def order(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#655
  def order!(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def order_values; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def order_values=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#315
  def preload(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#320
  def preload!(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def preload_values; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def preload_values=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1287
  def readonly(value = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1291
  def readonly!(value = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def readonly_value; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def readonly_value=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#348
  def references(*table_names); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#353
  def references!(*table_names); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def references_values; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def references_values=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#584
  def regroup(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#590
  def regroup!(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#730
  def reorder(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#738
  def reorder!(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def reordering_value; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def reordering_value=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#532
  def reselect(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#539
  def reselect!(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1476
  def reverse_order; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1480
  def reverse_order!; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def reverse_order_value; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def reverse_order_value=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1039
  def rewhere(conditions); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#406
  def select(*fields); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def select_values; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def select_values=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1491
  def skip_preloading!; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1486
  def skip_query_cache!(value = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def skip_query_cache_value; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def skip_query_cache_value=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1302
  def strict_loading(value = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1306
  def strict_loading!(value = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def strict_loading_value; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def strict_loading_value=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1099
  def structurally_compatible?(other); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1519
  def uniq!(name); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#784
  def unscope(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#789
  def unscope!(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def unscope_values; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def unscope_values=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1011
  def where(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1021
  def where!(opts, *rest); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def where_clause; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def where_clause=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#486
  def with(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#493
  def with!(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#510
  def with_recursive(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#516
  def with_recursive!(*args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def with_values; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#175
  def with_values=(value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1552
  def without(*records); end

  protected

  # source://activerecord//lib/active_record/relation/query_methods.rb#1640
  def arel_columns(columns); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1634
  def async!; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1591
  def build_having_clause(opts, rest = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1583
  def build_subquery(subquery_alias, select_value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1591
  def build_where_clause(opts, rest = T.unsafe(nil)); end

  private

  # source://activerecord//lib/active_record/relation/query_methods.rb#1946
  def arel_column(field); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#2186
  def arel_columns_from_hash(fields); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1728
  def assert_modifiable!; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1660
  def async; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1732
  def build_arel(connection, aliases = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1684
  def build_bound_sql_literal(statement, values); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#2116
  def build_case_for_value_position(column, values); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1761
  def build_cast_value(name, value); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1765
  def build_from; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1807
  def build_join_buckets; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1717
  def build_join_dependencies; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1863
  def build_joins(join_sources, aliases = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1664
  def build_named_bound_sql_literal(statement, values); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#2008
  def build_order(arel); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1885
  def build_select(arel); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1895
  def build_with(arel); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1913
  def build_with_expression_from_value(value, nested = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1938
  def build_with_join_node(name, kind = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1907
  def build_with_value_from_hash(hash); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#2165
  def check_if_method_has_arguments!(method_name, args, message = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#2077
  def column_references(order_args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1997
  def does_not_support_reverse?(order); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1711
  def each_join_dependencies(join_dependencies = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#2102
  def extract_table_name_from(string); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#2030
  def flattened_args(args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1704
  def lookup_table_klass_from_join_dependencies(table_name); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#2106
  def order_column(field); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#2034
  def preprocess_order_args(order_args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#2176
  def process_select_args(fields); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#2125
  def resolve_arel_attributes(attrs); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1968
  def reverse_sql_order(order_query); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#2071
  def sanitize_order_arguments(order_args); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1792
  def select_association_list(associations, stashed_joins = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1780
  def select_named_joins(join_names, stashed_joins = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#2216
  def structurally_incompatible_values_for(other); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#1962
  def table_name_matches?(from); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#2016
  def validate_order_args(args); end
end

# source://activerecord//lib/active_record/relation/query_methods.rb#148
class ActiveRecord::QueryMethods::CTEJoin
  # source://activerecord//lib/active_record/relation/query_methods.rb#151
  def initialize(name); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#149
  def name; end
end

# source://activerecord//lib/active_record/relation/query_methods.rb#156
ActiveRecord::QueryMethods::FROZEN_EMPTY_ARRAY = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/active_record/relation/query_methods.rb#157
ActiveRecord::QueryMethods::FROZEN_EMPTY_HASH = T.let(T.unsafe(nil), Hash)

# source://activerecord//lib/active_record/relation/query_methods.rb#2211
ActiveRecord::QueryMethods::STRUCTURAL_VALUE_METHODS = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/active_record/relation/query_methods.rb#2013
ActiveRecord::QueryMethods::VALID_DIRECTIONS = T.let(T.unsafe(nil), Set)

# source://activerecord//lib/active_record/relation/query_methods.rb#746
ActiveRecord::QueryMethods::VALID_UNSCOPING_VALUES = T.let(T.unsafe(nil), Set)

# source://activerecord//lib/active_record/relation/query_methods.rb#14
class ActiveRecord::QueryMethods::WhereChain
  # source://activerecord//lib/active_record/relation/query_methods.rb#15
  def initialize(scope); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#88
  def associated(*associations); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#123
  def missing(*associations); end

  # source://activerecord//lib/active_record/relation/query_methods.rb#49
  def not(opts, *rest); end

  private

  # source://activerecord//lib/active_record/relation/query_methods.rb#138
  def scope_association_reflection(association); end
end

# source://activerecord//lib/active_record/querying.rb#4
module ActiveRecord::Querying
  # source://activerecord//lib/active_record/querying.rb#73
  def _load_from_sql(result_set, &block); end

  # source://activerecord//lib/active_record/querying.rb#69
  def _query_by_sql(connection, sql, binds = T.unsafe(nil), preparable: T.unsafe(nil), async: T.unsafe(nil), allow_retry: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/querying.rb#24
  def and(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def annotate(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def any?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def async_average(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def async_count(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#116
  def async_count_by_sql(sql); end

  # source://activerecord//lib/active_record/querying.rb#59
  def async_find_by_sql(sql, binds = T.unsafe(nil), preparable: T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/querying.rb#24
  def async_ids(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def async_maximum(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def async_minimum(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def async_pick(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def async_pluck(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def async_sum(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def average(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def calculate(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def count(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#109
  def count_by_sql(sql); end

  # source://activerecord//lib/active_record/querying.rb#24
  def create_or_find_by(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def create_or_find_by!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def create_with(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def delete(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def delete_all(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def delete_by(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def destroy(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def destroy_all(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def destroy_by(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def distinct(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def eager_load(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def except(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def excluding(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def exists?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def extending(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def extract_associated(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def fifth(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def fifth!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def find(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def find_by(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def find_by!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#51
  def find_by_sql(sql, binds = T.unsafe(nil), preparable: T.unsafe(nil), allow_retry: T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/querying.rb#24
  def find_each(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def find_in_batches(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def find_or_create_by(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def find_or_create_by!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def find_or_initialize_by(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def find_sole_by(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def first(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def first!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def first_or_create(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def first_or_create!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def first_or_initialize(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def forty_two(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def forty_two!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def fourth(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def fourth!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def from(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def group(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def having(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def ids(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def in_batches(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def in_order_of(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def includes(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def insert(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def insert!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def insert_all(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def insert_all!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def invert_where(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def joins(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def last(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def last!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def left_joins(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def left_outer_joins(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def limit(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def lock(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def many?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def maximum(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def merge(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def minimum(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def none(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def none?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def offset(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def one?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def only(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def optimizer_hints(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def or(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def order(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def pick(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def pluck(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def preload(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def readonly(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def references(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def regroup(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def reorder(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def reselect(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def rewhere(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def second(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def second!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def second_to_last(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def second_to_last!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def select(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def sole(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def strict_loading(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def sum(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def take(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def take!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def third(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def third!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def third_to_last(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def third_to_last!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def touch_all(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def unscope(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def update_all(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def upsert(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def upsert_all(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def where(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def with(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def with_recursive(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/querying.rb#24
  def without(*_arg0, **_arg1, &_arg2); end
end

# source://activerecord//lib/active_record/querying.rb#5
ActiveRecord::Querying::QUERYING_METHODS = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/active_record/railtie.rb#16
class ActiveRecord::Railtie < ::Rails::Railtie; end

# source://activerecord//lib/active_record/errors.rb#288
class ActiveRecord::RangeError < ::ActiveRecord::StatementInvalid; end

# source://activerecord//lib/active_record/errors.rb#119
class ActiveRecord::ReadOnlyError < ::ActiveRecord::ActiveRecordError; end

# source://activerecord//lib/active_record/errors.rb#381
class ActiveRecord::ReadOnlyRecord < ::ActiveRecord::ActiveRecordError; end

# source://activerecord//lib/active_record/readonly_attributes.rb#4
class ActiveRecord::ReadonlyAttributeError < ::ActiveRecord::ActiveRecordError; end

# source://activerecord//lib/active_record/readonly_attributes.rb#7
module ActiveRecord::ReadonlyAttributes
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::ReadonlyAttributes::ClassMethods

  module GeneratedClassMethods
    def _attr_readonly; end
    def _attr_readonly=(value); end
    def _attr_readonly?; end
  end

  module GeneratedInstanceMethods; end
end

# source://activerecord//lib/active_record/readonly_attributes.rb#14
module ActiveRecord::ReadonlyAttributes::ClassMethods
  # source://activerecord//lib/active_record/readonly_attributes.rb#30
  def attr_readonly(*attributes); end

  # source://activerecord//lib/active_record/readonly_attributes.rb#43
  def readonly_attribute?(name); end

  # source://activerecord//lib/active_record/readonly_attributes.rb#39
  def readonly_attributes; end
end

# source://activerecord//lib/active_record/readonly_attributes.rb#48
module ActiveRecord::ReadonlyAttributes::HasReadonlyAttributes
  # source://activerecord//lib/active_record/readonly_attributes.rb#57
  def _write_attribute(attr_name, value); end

  # source://activerecord//lib/active_record/readonly_attributes.rb#49
  def write_attribute(attr_name, value); end
end

# source://activerecord//lib/active_record/validations.rb#15
class ActiveRecord::RecordInvalid < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/validations.rb#18
  def initialize(record = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/validations.rb#16
  def record; end
end

# source://activerecord//lib/active_record/errors.rb#169
class ActiveRecord::RecordNotDestroyed < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/errors.rb#172
  def initialize(message = T.unsafe(nil), record = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/errors.rb#170
  def record; end
end

# source://activerecord//lib/active_record/errors.rb#123
class ActiveRecord::RecordNotFound < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/errors.rb#126
  def initialize(message = T.unsafe(nil), model = T.unsafe(nil), primary_key = T.unsafe(nil), id = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/errors.rb#124
  def id; end

  # source://activerecord//lib/active_record/errors.rb#124
  def model; end

  # source://activerecord//lib/active_record/errors.rb#124
  def primary_key; end
end

# source://activerecord//lib/active_record/errors.rb#148
class ActiveRecord::RecordNotSaved < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/errors.rb#151
  def initialize(message = T.unsafe(nil), record = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/errors.rb#149
  def record; end
end

# source://activerecord//lib/active_record/errors.rb#216
class ActiveRecord::RecordNotUnique < ::ActiveRecord::WrappedDatabaseException; end

# source://activerecord//lib/active_record/reflection.rb#7
module ActiveRecord::Reflection
  extend ::ActiveSupport::Concern
  extend ::ActiveStorage::Reflection::ReflectionExtension
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Reflection::ClassMethods

  class << self
    # source://activerecord//lib/active_record/reflection.rb#29
    def add_aggregate_reflection(ar, name, reflection); end

    # source://activerecord//lib/active_record/reflection.rb#23
    def add_reflection(ar, name, reflection); end

    # source://activerecord//lib/active_record/reflection.rb#18
    def create(macro, name, scope, options, ar); end

    private

    # source://activestorage/7.2.2/lib/active_storage/reflection.rb#37
    def reflection_class_for(macro); end
  end

  module GeneratedClassMethods
    def _reflections; end
    def _reflections=(value); end
    def _reflections?; end
    def aggregate_reflections; end
    def aggregate_reflections=(value); end
    def aggregate_reflections?; end
    def automatic_scope_inversing; end
    def automatic_scope_inversing=(value); end
    def automatic_scope_inversing?; end
    def automatically_invert_plural_associations; end
    def automatically_invert_plural_associations=(value); end
    def automatically_invert_plural_associations?; end
  end

  module GeneratedInstanceMethods
    def _reflections; end
    def _reflections?; end
    def aggregate_reflections; end
    def aggregate_reflections?; end
    def automatic_scope_inversing; end
    def automatic_scope_inversing?; end
    def automatically_invert_plural_associations; end
    def automatically_invert_plural_associations?; end
  end
end

# source://activerecord//lib/active_record/reflection.rb#163
class ActiveRecord::Reflection::AbstractReflection
  # source://activerecord//lib/active_record/reflection.rb#164
  def initialize; end

  # source://activerecord//lib/active_record/reflection.rb#328
  def alias_candidate(name); end

  # source://activerecord//lib/active_record/reflection.rb#182
  def build_association(attributes, &block); end

  # source://activerecord//lib/active_record/reflection.rb#336
  def build_scope(table, predicate_builder = T.unsafe(nil), klass = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/reflection.rb#332
  def chain; end

  # source://activerecord//lib/active_record/reflection.rb#264
  def check_validity_of_inverse!; end

  # source://activerecord//lib/active_record/reflection.rb#190
  def class_name; end

  # source://activerecord//lib/active_record/reflection.rb#240
  def constraints; end

  # source://activerecord//lib/active_record/reflection.rb#244
  def counter_cache_column; end

  # source://activerecord//lib/active_record/reflection.rb#324
  def counter_must_be_updated_by_has_many?; end

  # source://activerecord//lib/active_record/reflection.rb#315
  def has_active_cached_counter?; end

  # source://activerecord//lib/active_record/reflection.rb#307
  def has_cached_counter?; end

  # source://activerecord//lib/active_record/reflection.rb#258
  def inverse_of; end

  # source://activerecord//lib/active_record/reflection.rb#285
  def inverse_updates_counter_cache?; end

  # source://activerecord//lib/active_record/reflection.rb#299
  def inverse_updates_counter_in_memory?; end

  # source://activerecord//lib/active_record/reflection.rb#285
  def inverse_which_updates_counter_cache; end

  # source://activerecord//lib/active_record/reflection.rb#200
  def join_scope(table, foreign_table, foreign_klass); end

  # source://activerecord//lib/active_record/reflection.rb#227
  def join_scopes(table, predicate_builder, klass = T.unsafe(nil), record = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/reflection.rb#235
  def klass_join_scope(table, predicate_builder); end

  # source://activerecord//lib/active_record/reflection.rb#196
  def scopes; end

  # source://activerecord//lib/active_record/reflection.rb#344
  def strict_loading?; end

  # source://activerecord//lib/active_record/reflection.rb#348
  def strict_loading_violation_message(owner); end

  # source://activerecord//lib/active_record/reflection.rb#176
  def table_name; end

  # source://activerecord//lib/active_record/reflection.rb#172
  def through_reflection?; end

  protected

  # source://activerecord//lib/active_record/reflection.rb#355
  def actual_source_reflection; end

  private

  # source://activerecord//lib/active_record/reflection.rb#368
  def ensure_option_not_given_as_class!(option_name); end

  # source://activerecord//lib/active_record/reflection.rb#360
  def predicate_builder(table); end

  # source://activerecord//lib/active_record/reflection.rb#364
  def primary_key(klass); end
end

# source://activerecord//lib/active_record/reflection.rb#488
class ActiveRecord::Reflection::AggregateReflection < ::ActiveRecord::Reflection::MacroReflection
  # source://activerecord//lib/active_record/reflection.rb#489
  def mapping; end
end

# source://activerecord//lib/active_record/reflection.rb#497
class ActiveRecord::Reflection::AssociationReflection < ::ActiveRecord::Reflection::MacroReflection
  # source://activerecord//lib/active_record/reflection.rb#525
  def initialize(name, scope, options, active_record); end

  # source://activerecord//lib/active_record/reflection.rb#590
  def active_record_primary_key; end

  # source://activerecord//lib/active_record/reflection.rb#736
  def add_as_polymorphic_through(reflection, seed); end

  # source://activerecord//lib/active_record/reflection.rb#732
  def add_as_source(seed); end

  # source://activerecord//lib/active_record/reflection.rb#740
  def add_as_through(seed); end

  # source://activerecord//lib/active_record/reflection.rb#722
  def association_class; end

  # source://activerecord//lib/active_record/reflection.rb#582
  def association_foreign_key; end

  # source://activerecord//lib/active_record/reflection.rb#586
  def association_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/reflection.rb#548
  def association_scope_cache(klass, owner, &block); end

  # source://activerecord//lib/active_record/reflection.rb#717
  def belongs_to?; end

  # source://activerecord//lib/active_record/reflection.rb#633
  def check_eager_loadable!; end

  # source://activerecord//lib/active_record/reflection.rb#621
  def check_validity!; end

  # source://activerecord//lib/active_record/reflection.rb#665
  def clear_association_scope_cache; end

  # source://activerecord//lib/active_record/reflection.rb#659
  def collect_join_chain; end

  # source://activerecord//lib/active_record/reflection.rb#699
  def collection?; end

  # source://activerecord//lib/active_record/reflection.rb#498
  def compute_class(name); end

  # source://activerecord//lib/active_record/reflection.rb#744
  def extensions; end

  # source://activerecord//lib/active_record/reflection.rb#562
  def foreign_key(infer_from_inverse_of: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/reflection.rb#522
  def foreign_type; end

  # source://activerecord//lib/active_record/reflection.rb#677
  def has_inverse?; end

  # source://activerecord//lib/active_record/reflection.rb#720
  def has_one?; end

  # source://activerecord//lib/active_record/reflection.rb#673
  def has_scope?; end

  # source://activerecord//lib/active_record/reflection.rb#617
  def join_foreign_key; end

  # source://activerecord//lib/active_record/reflection.rb#645
  def join_id_for(owner); end

  # source://activerecord//lib/active_record/reflection.rb#609
  def join_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/reflection.rb#613
  def join_primary_type; end

  # source://activerecord//lib/active_record/reflection.rb#558
  def join_table; end

  # source://activerecord//lib/active_record/reflection.rb#694
  def macro; end

  # source://activerecord//lib/active_record/reflection.rb#669
  def nested?; end

  # source://activerecord//lib/active_record/reflection.rb#523
  def parent_reflection; end

  # source://activerecord//lib/active_record/reflection.rb#523
  def parent_reflection=(_arg0); end

  # source://activerecord//lib/active_record/reflection.rb#724
  def polymorphic?; end

  # source://activerecord//lib/active_record/reflection.rb#681
  def polymorphic_inverse_of(associated_class); end

  # source://activerecord//lib/active_record/reflection.rb#728
  def polymorphic_name; end

  # source://activerecord//lib/active_record/reflection.rb#653
  def source_reflection; end

  # source://activerecord//lib/active_record/reflection.rb#649
  def through_reflection; end

  # source://activerecord//lib/active_record/reflection.rb#522
  def type; end

  # source://activerecord//lib/active_record/reflection.rb#712
  def validate?; end

  private

  # source://activerecord//lib/active_record/reflection.rb#761
  def automatic_inverse_of; end

  # source://activerecord//lib/active_record/reflection.rb#803
  def can_find_inverse_of_automatically?(reflection, inverse_reflection = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/reflection.rb#824
  def derive_class_name; end

  # source://activerecord//lib/active_record/reflection.rb#842
  def derive_fk_query_constraints(foreign_key); end

  # source://activerecord//lib/active_record/reflection.rb#830
  def derive_foreign_key(infer_from_inverse_of: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/reflection.rb#882
  def derive_join_table; end

  # source://activerecord//lib/active_record/reflection.rb#752
  def inverse_name; end

  # source://activerecord//lib/active_record/reflection.rb#816
  def scope_allows_automatic_inverse_of?(reflection, inverse_reflection); end

  # source://activerecord//lib/active_record/reflection.rb#789
  def valid_inverse_reflection?(reflection); end
end

# source://activerecord//lib/active_record/reflection.rb#915
class ActiveRecord::Reflection::BelongsToReflection < ::ActiveRecord::Reflection::AssociationReflection
  # source://activerecord//lib/active_record/reflection.rb#920
  def association_class; end

  # source://activerecord//lib/active_record/reflection.rb#929
  def association_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/reflection.rb#918
  def belongs_to?; end

  # source://activerecord//lib/active_record/reflection.rb#951
  def join_foreign_key; end

  # source://activerecord//lib/active_record/reflection.rb#955
  def join_foreign_type; end

  # source://activerecord//lib/active_record/reflection.rb#947
  def join_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/reflection.rb#916
  def macro; end

  private

  # source://activerecord//lib/active_record/reflection.rb#960
  def can_find_inverse_of_automatically?(*_arg0); end
end

# source://activerecord//lib/active_record/reflection.rb#60
module ActiveRecord::Reflection::ClassMethods
  # source://activerecord//lib/active_record/reflection.rb#126
  def _reflect_on_association(association); end

  # source://activerecord//lib/active_record/reflection.rb#137
  def clear_reflections_cache; end

  # source://activerecord//lib/active_record/reflection.rb#82
  def normalized_reflections; end

  # source://activerecord//lib/active_record/reflection.rb#70
  def reflect_on_aggregation(aggregation); end

  # source://activerecord//lib/active_record/reflection.rb#62
  def reflect_on_all_aggregations; end

  # source://activerecord//lib/active_record/reflection.rb#111
  def reflect_on_all_associations(macro = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/reflection.rb#131
  def reflect_on_all_autosave_associations; end

  # source://activerecord//lib/active_record/reflection.rb#122
  def reflect_on_association(association); end

  # source://activerecord//lib/active_record/reflection.rb#78
  def reflections; end

  private

  # source://activerecord//lib/active_record/reflection.rb#142
  def inherited(subclass); end
end

# source://activerecord//lib/active_record/reflection.rb#965
class ActiveRecord::Reflection::HasAndBelongsToManyReflection < ::ActiveRecord::Reflection::AssociationReflection
  # source://activerecord//lib/active_record/reflection.rb#968
  def collection?; end

  # source://activerecord//lib/active_record/reflection.rb#966
  def macro; end
end

# source://activerecord//lib/active_record/reflection.rb#887
class ActiveRecord::Reflection::HasManyReflection < ::ActiveRecord::Reflection::AssociationReflection
  # source://activerecord//lib/active_record/reflection.rb#892
  def association_class; end

  # source://activerecord//lib/active_record/reflection.rb#890
  def collection?; end

  # source://activerecord//lib/active_record/reflection.rb#888
  def macro; end
end

# source://activerecord//lib/active_record/reflection.rb#901
class ActiveRecord::Reflection::HasOneReflection < ::ActiveRecord::Reflection::AssociationReflection
  # source://activerecord//lib/active_record/reflection.rb#906
  def association_class; end

  # source://activerecord//lib/active_record/reflection.rb#904
  def has_one?; end

  # source://activerecord//lib/active_record/reflection.rb#902
  def macro; end
end

# source://activerecord//lib/active_record/reflection.rb#377
class ActiveRecord::Reflection::MacroReflection < ::ActiveRecord::Reflection::AbstractReflection
  # source://activerecord//lib/active_record/reflection.rb#396
  def initialize(name, scope, options, active_record); end

  # source://activerecord//lib/active_record/reflection.rb#448
  def ==(other_aggregation); end

  # source://activerecord//lib/active_record/reflection.rb#434
  def _klass(class_name); end

  # source://activerecord//lib/active_record/reflection.rb#392
  def active_record; end

  # source://activerecord//lib/active_record/reflection.rb#407
  def autosave=(autosave); end

  # source://activerecord//lib/active_record/reflection.rb#442
  def compute_class(name); end

  # source://activerecord//lib/active_record/reflection.rb#430
  def klass; end

  # source://activerecord//lib/active_record/reflection.rb#382
  def name; end

  # source://activerecord//lib/active_record/reflection.rb#390
  def options; end

  # source://activerecord//lib/active_record/reflection.rb#394
  def plural_name; end

  # source://activerecord//lib/active_record/reflection.rb#384
  def scope; end

  # source://activerecord//lib/active_record/reflection.rb#456
  def scope_for(relation, owner = T.unsafe(nil)); end

  private

  # source://activerecord//lib/active_record/reflection.rb#461
  def derive_class_name; end

  # source://activerecord//lib/active_record/reflection.rb#465
  def normalize_options(options); end
end

# source://activerecord//lib/active_record/reflection.rb#1231
class ActiveRecord::Reflection::PolymorphicReflection < ::ActiveRecord::Reflection::AbstractReflection
  # source://activerecord//lib/active_record/reflection.rb#1235
  def initialize(reflection, previous_reflection); end

  # source://activerecord//lib/active_record/reflection.rb#1249
  def constraints; end

  # source://activerecord//lib/active_record/reflection.rb#1232
  def join_foreign_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1232
  def join_primary_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1241
  def join_scopes(table, predicate_builder, klass = T.unsafe(nil), record = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/reflection.rb#1232
  def klass(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1232
  def name(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1232
  def plural_name(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1232
  def scope(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1232
  def scope_for(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1232
  def type(*_arg0, **_arg1, &_arg2); end

  private

  # source://activerecord//lib/active_record/reflection.rb#1254
  def source_type_scope; end
end

# source://activerecord//lib/active_record/reflection.rb#1261
class ActiveRecord::Reflection::RuntimeReflection < ::ActiveRecord::Reflection::AbstractReflection
  # source://activerecord//lib/active_record/reflection.rb#1264
  def initialize(reflection, association); end

  # source://activerecord//lib/active_record/reflection.rb#1274
  def aliased_table; end

  # source://activerecord//lib/active_record/reflection.rb#1282
  def all_includes; end

  # source://activerecord//lib/active_record/reflection.rb#1262
  def constraints(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1262
  def join_foreign_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1278
  def join_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/reflection.rb#1270
  def klass; end

  # source://activerecord//lib/active_record/reflection.rb#1262
  def scope(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1262
  def type(*_arg0, **_arg1, &_arg2); end
end

# source://activerecord//lib/active_record/reflection.rb#975
class ActiveRecord::Reflection::ThroughReflection < ::ActiveRecord::Reflection::AbstractReflection
  # source://activerecord//lib/active_record/reflection.rb#979
  def initialize(delegate_reflection); end

  # source://activerecord//lib/active_record/reflection.rb#1228
  def _klass(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1228
  def active_record(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#976
  def active_record_primary_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1193
  def add_as_polymorphic_through(reflection, seed); end

  # source://activerecord//lib/active_record/reflection.rb#1189
  def add_as_source(seed); end

  # source://activerecord//lib/active_record/reflection.rb#1197
  def add_as_through(seed); end

  # source://activerecord//lib/active_record/reflection.rb#1228
  def association_class(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#976
  def association_foreign_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1086
  def association_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/reflection.rb#1228
  def association_scope_cache(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1228
  def autosave=(arg); end

  # source://activerecord//lib/active_record/reflection.rb#1228
  def belongs_to?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1228
  def check_eager_loadable!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1143
  def check_validity!; end

  # source://activerecord//lib/active_record/reflection.rb#1058
  def clear_association_scope_cache; end

  # source://activerecord//lib/active_record/reflection.rb#1052
  def collect_join_chain; end

  # source://activerecord//lib/active_record/reflection.rb#1228
  def collection?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1228
  def compute_class(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1183
  def constraints; end

  # source://activerecord//lib/active_record/reflection.rb#1228
  def extensions(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#976
  def foreign_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#976
  def foreign_type(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1228
  def has_inverse?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1228
  def has_one?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1072
  def has_scope?; end

  # source://activerecord//lib/active_record/reflection.rb#976
  def join_foreign_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#976
  def join_id_for(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1096
  def join_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/reflection.rb#1228
  def join_primary_type(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1068
  def join_scopes(table, predicate_builder, klass = T.unsafe(nil), record = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/reflection.rb#1228
  def join_table(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#992
  def klass; end

  # source://activerecord//lib/active_record/reflection.rb#1228
  def macro(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1228
  def name(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1079
  def nested?; end

  # source://activerecord//lib/active_record/reflection.rb#1228
  def options(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1228
  def parent_reflection(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1228
  def parent_reflection=(arg); end

  # source://activerecord//lib/active_record/reflection.rb#1228
  def plural_name(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1228
  def polymorphic?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1228
  def polymorphic_inverse_of(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1228
  def polymorphic_name(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1228
  def scope(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1228
  def scope_for(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1064
  def scopes; end

  # source://activerecord//lib/active_record/reflection.rb#1135
  def source_options; end

  # source://activerecord//lib/active_record/reflection.rb#1013
  def source_reflection; end

  # source://activerecord//lib/active_record/reflection.rb#1115
  def source_reflection_name; end

  # source://activerecord//lib/active_record/reflection.rb#1111
  def source_reflection_names; end

  # source://activerecord//lib/active_record/reflection.rb#1139
  def through_options; end

  # source://activerecord//lib/active_record/reflection.rb#1031
  def through_reflection; end

  # source://activerecord//lib/active_record/reflection.rb#988
  def through_reflection?; end

  # source://activerecord//lib/active_record/reflection.rb#976
  def type(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/reflection.rb#1228
  def validate?(*_arg0, **_arg1, &_arg2); end

  protected

  # source://activerecord//lib/active_record/reflection.rb#1202
  def actual_source_reflection; end

  private

  # source://activerecord//lib/active_record/reflection.rb#1209
  def collect_join_reflections(seed); end

  # source://activerecord//lib/active_record/reflection.rb#1207
  def delegate_reflection; end

  # source://activerecord//lib/active_record/reflection.rb#1220
  def derive_class_name; end

  # source://activerecord//lib/active_record/reflection.rb#1218
  def inverse_name; end
end

# source://activerecord//lib/active_record/relation.rb#5
class ActiveRecord::Relation
  include ::Enumerable
  include ::ActiveRecord::Delegation
  include ::ActiveRecord::Explain
  include ::ActiveRecord::Batches
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveRecord::QueryMethods
  include ::ActiveRecord::SpawnMethods
  include ::ActiveRecord::Calculations
  include ::ActiveRecord::FinderMethods
  include ::ActiveRecord::TokenFor::RelationMethods
  include ::ActiveRecord::SignedId::RelationMethods
  extend ::ActiveRecord::Delegation::ClassMethods

  # source://activerecord//lib/active_record/relation.rb#77
  def initialize(klass, table: T.unsafe(nil), predicate_builder: T.unsafe(nil), values: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation.rb#1239
  def ==(other); end

  # source://activerecord//lib/active_record/relation.rb#545
  def _exec_scope(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation.rb#1289
  def alias_tracker(joins = T.unsafe(nil), aliases = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation.rb#384
  def any?(*args); end

  # source://activerecord//lib/active_record/relation.rb#95
  def bind_attribute(name, value); end

  # source://activerecord//lib/active_record/relation.rb#1260
  def blank?; end

  # source://activerecord//lib/active_record/relation.rb#118
  def build(attributes = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/relation.rb#431
  def cache_key(timestamp_column = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation.rb#512
  def cache_key_with_version; end

  # source://activerecord//lib/active_record/relation.rb#458
  def cache_version(timestamp_column = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation.rb#147
  def create(attributes = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/relation.rb#162
  def create!(attributes = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/relation.rb#266
  def create_or_find_by(attributes, &block); end

  # source://activerecord//lib/active_record/relation.rb#281
  def create_or_find_by!(attributes, &block); end

  # source://activerecord//lib/active_record/relation.rb#1050
  def delete(id_or_array); end

  # source://activerecord//lib/active_record/relation.rb#1004
  def delete_all; end

  # source://activerecord//lib/active_record/relation.rb#1112
  def delete_by(*args); end

  # source://activerecord//lib/active_record/relation.rb#1076
  def destroy(id); end

  # source://activerecord//lib/active_record/relation.rb#982
  def destroy_all; end

  # source://activerecord//lib/active_record/relation.rb#1099
  def destroy_by(*args); end

  # source://activerecord//lib/active_record/relation.rb#1224
  def eager_loading?; end

  # source://activerecord//lib/active_record/relation.rb#355
  def empty?; end

  # source://activerecord//lib/active_record/relation.rb#1281
  def empty_scope?; end

  # source://activerecord//lib/active_record/relation.rb#341
  def encode_with(coder); end

  # source://activerecord//lib/active_record/relation.rb#325
  def explain(*options); end

  # source://activerecord//lib/active_record/relation.rb#224
  def find_or_create_by(attributes, &block); end

  # source://activerecord//lib/active_record/relation.rb#231
  def find_or_create_by!(attributes, &block); end

  # source://activerecord//lib/active_record/relation.rb#295
  def find_or_initialize_by(attributes, &block); end

  # source://activerecord//lib/active_record/relation.rb#171
  def first_or_create(attributes = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/relation.rb#175
  def first_or_create!(attributes = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/relation.rb#179
  def first_or_initialize(attributes = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/relation.rb#1285
  def has_limit_or_offset?; end

  # source://activerecord//lib/active_record/relation.rb#637
  def insert(attributes, returning: T.unsafe(nil), unique_by: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation.rb#726
  def insert!(attributes, returning: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation.rb#716
  def insert_all(attributes, returning: T.unsafe(nil), unique_by: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation.rb#783
  def insert_all!(attributes, returning: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation.rb#1272
  def inspect; end

  # source://activerecord//lib/active_record/relation.rb#1234
  def joined_includes_values; end

  # source://activerecord//lib/active_record/relation.rb#71
  def klass; end

  # source://activerecord//lib/active_record/relation.rb#1165
  def load(&block); end

  # source://activerecord//lib/active_record/relation.rb#1134
  def load_async; end

  # source://activerecord//lib/active_record/relation.rb#71
  def loaded; end

  # source://activerecord//lib/active_record/relation.rb#71
  def loaded?; end

  # source://activerecord//lib/active_record/relation/query_methods.rb#171
  def locked?; end

  # source://activerecord//lib/active_record/relation.rb#406
  def many?; end

  # source://activerecord//lib/active_record/relation.rb#71
  def model; end

  # source://activerecord//lib/active_record/relation.rb#118
  def new(attributes = T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/relation.rb#371
  def none?(*args); end

  # source://activerecord//lib/active_record/relation.rb#397
  def one?(*args); end

  # source://activerecord//lib/active_record/relation.rb#71
  def predicate_builder; end

  # source://activerecord//lib/active_record/relation.rb#1303
  def preload_associations(records); end

  # source://activerecord//lib/active_record/relation.rb#1250
  def pretty_print(pp); end

  # source://activerecord//lib/active_record/relation.rb#335
  def records; end

  # source://activerecord//lib/active_record/relation.rb#1175
  def reload; end

  # source://activerecord//lib/active_record/relation.rb#1180
  def reset; end

  # source://activerecord//lib/active_record/relation.rb#1155
  def scheduled?; end

  # source://activerecord//lib/active_record/relation.rb#1217
  def scope_for_create; end

  # source://activerecord//lib/active_record/relation.rb#534
  def scoping(all_queries: T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/relation.rb#346
  def size; end

  # source://activerecord//lib/active_record/relation.rb#72
  def skip_preloading_value; end

  # source://activerecord//lib/active_record/relation.rb#72
  def skip_preloading_value=(_arg0); end

  # source://activerecord//lib/active_record/relation.rb#71
  def table; end

  # source://activerecord//lib/active_record/relation.rb#330
  def to_a; end

  # source://activerecord//lib/active_record/relation.rb#330
  def to_ary; end

  # source://activerecord//lib/active_record/relation.rb#1196
  def to_sql; end

  # source://activerecord//lib/active_record/relation.rb#962
  def touch_all(*names, time: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation.rb#614
  def update(id = T.unsafe(nil), attributes); end

  # source://activerecord//lib/active_record/relation.rb#622
  def update!(id = T.unsafe(nil), attributes); end

  # source://activerecord//lib/active_record/relation.rb#581
  def update_all(updates); end

  # source://activerecord//lib/active_record/relation.rb#919
  def update_counters(counters); end

  # source://activerecord//lib/active_record/relation.rb#793
  def upsert(attributes, **kwargs); end

  # source://activerecord//lib/active_record/relation.rb#903
  def upsert_all(attributes, on_duplicate: T.unsafe(nil), update_only: T.unsafe(nil), returning: T.unsafe(nil), unique_by: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation.rb#1264
  def values; end

  # source://activerecord//lib/active_record/relation.rb#1268
  def values_for_queries; end

  # source://activerecord//lib/active_record/relation.rb#1213
  def where_values_hash(relation_table_name = T.unsafe(nil)); end

  protected

  # source://activerecord//lib/active_record/relation.rb#1313
  def load_records(records); end

  private

  # source://activerecord//lib/active_record/relation.rb#1339
  def _create(attributes, &block); end

  # source://activerecord//lib/active_record/relation.rb#1343
  def _create!(attributes, &block); end

  # source://activerecord//lib/active_record/relation.rb#1378
  def _increment_attribute(attribute, value = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation.rb#1335
  def _new(attributes, &block); end

  # source://activerecord//lib/active_record/relation.rb#1347
  def _scoping(scope, registry, all_queries = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation.rb#1363
  def _substitute_values(values); end

  # source://activerecord//lib/active_record/relation.rb#1319
  def already_in_scope?(registry); end

  # source://activerecord//lib/active_record/relation.rb#436
  def compute_cache_key(timestamp_column = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation.rb#465
  def compute_cache_version(timestamp_column); end

  # source://activerecord//lib/active_record/relation.rb#1327
  def current_scope_restoring_block(&block); end

  # source://activerecord//lib/active_record/relation.rb#1405
  def exec_main_query(async: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation.rb#1385
  def exec_queries(&block); end

  # source://activerecord//lib/active_record/relation.rb#1323
  def global_scope?(registry); end

  # source://activerecord//lib/active_record/relation.rb#90
  def initialize_copy(other); end

  # source://activerecord//lib/active_record/relation.rb#1437
  def instantiate_records(rows, &block); end

  # source://activerecord//lib/active_record/relation.rb#1480
  def limited_count; end

  # source://activerecord//lib/active_record/relation.rb#1456
  def references_eager_loaded_tables?; end

  # source://activerecord//lib/active_record/relation.rb#1448
  def skip_query_cache_if_necessary(&block); end

  # source://activerecord//lib/active_record/relation.rb#1473
  def tables_in_string(string); end
end

# source://activerecord//lib/active_record/relation.rb#62
ActiveRecord::Relation::CLAUSE_METHODS = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/active_record/relation.rb#6
class ActiveRecord::Relation::ExplainProxy
  # source://activerecord//lib/active_record/relation.rb#7
  def initialize(relation, options); end

  # source://activerecord//lib/active_record/relation.rb#16
  def average(column_name); end

  # source://activerecord//lib/active_record/relation.rb#20
  def count(column_name = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation.rb#24
  def first(limit = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation.rb#12
  def inspect; end

  # source://activerecord//lib/active_record/relation.rb#28
  def last(limit = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation.rb#32
  def maximum(column_name); end

  # source://activerecord//lib/active_record/relation.rb#36
  def minimum(column_name); end

  # source://activerecord//lib/active_record/relation.rb#40
  def pluck(*column_names); end

  # source://activerecord//lib/active_record/relation.rb#44
  def sum(identity_or_column = T.unsafe(nil)); end

  private

  # source://activerecord//lib/active_record/relation.rb#49
  def exec_explain(&block); end
end

# source://activerecord//lib/active_record/relation/from_clause.rb#5
class ActiveRecord::Relation::FromClause
  # source://activerecord//lib/active_record/relation/from_clause.rb#8
  def initialize(value, name); end

  # source://activerecord//lib/active_record/relation/from_clause.rb#21
  def ==(other); end

  # source://activerecord//lib/active_record/relation/from_clause.rb#17
  def empty?; end

  # source://activerecord//lib/active_record/relation/from_clause.rb#13
  def merge(other); end

  # source://activerecord//lib/active_record/relation/from_clause.rb#6
  def name; end

  # source://activerecord//lib/active_record/relation/from_clause.rb#6
  def value; end

  class << self
    # source://activerecord//lib/active_record/relation/from_clause.rb#25
    def empty; end
  end
end

# source://activerecord//lib/active_record/relation/merger.rb#7
class ActiveRecord::Relation::HashMerger
  # source://activerecord//lib/active_record/relation/merger.rb#10
  def initialize(relation, hash); end

  # source://activerecord//lib/active_record/relation/merger.rb#8
  def hash; end

  # source://activerecord//lib/active_record/relation/merger.rb#17
  def merge; end

  # source://activerecord//lib/active_record/relation/merger.rb#25
  def other; end

  # source://activerecord//lib/active_record/relation/merger.rb#8
  def relation; end
end

# source://activerecord//lib/active_record/relation.rb#63
ActiveRecord::Relation::INVALID_METHODS_FOR_DELETE_ALL = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/active_record/relation.rb#54
ActiveRecord::Relation::MULTI_VALUE_METHODS = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/active_record/relation/merger.rb#43
class ActiveRecord::Relation::Merger
  # source://activerecord//lib/active_record/relation/merger.rb#46
  def initialize(relation, other); end

  # source://activerecord//lib/active_record/relation/merger.rb#58
  def merge; end

  # source://activerecord//lib/active_record/relation/merger.rb#44
  def other; end

  # source://activerecord//lib/active_record/relation/merger.rb#44
  def relation; end

  # source://activerecord//lib/active_record/relation/merger.rb#44
  def values; end

  private

  # source://activerecord//lib/active_record/relation/merger.rb#176
  def merge_clauses; end

  # source://activerecord//lib/active_record/relation/merger.rb#117
  def merge_joins; end

  # source://activerecord//lib/active_record/relation/merger.rb#155
  def merge_multi_values; end

  # source://activerecord//lib/active_record/relation/merger.rb#136
  def merge_outer_joins; end

  # source://activerecord//lib/active_record/relation/merger.rb#96
  def merge_preloads; end

  # source://activerecord//lib/active_record/relation/merger.rb#84
  def merge_select_values; end

  # source://activerecord//lib/active_record/relation/merger.rb#168
  def merge_single_values; end

  # source://activerecord//lib/active_record/relation/merger.rb#186
  def replace_from_clause?; end
end

# source://activerecord//lib/active_record/relation/merger.rb#52
ActiveRecord::Relation::Merger::NORMAL_VALUES = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/active_record/relation/query_attribute.rb#7
class ActiveRecord::Relation::QueryAttribute < ::ActiveModel::Attribute
  # source://activerecord//lib/active_record/relation/query_attribute.rb#8
  def initialize(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/query_attribute.rb#53
  def ==(other); end

  # source://activerecord//lib/active_record/relation/query_attribute.rb#53
  def eql?(other); end

  # source://activerecord//lib/active_record/relation/query_attribute.rb#58
  def hash; end

  # source://activerecord//lib/active_record/relation/query_attribute.rb#42
  def infinite?; end

  # source://activerecord//lib/active_record/relation/query_attribute.rb#35
  def nil?; end

  # source://activerecord//lib/active_record/relation/query_attribute.rb#22
  def type_cast(value); end

  # source://activerecord//lib/active_record/relation/query_attribute.rb#46
  def unboundable?; end

  # source://activerecord//lib/active_record/relation/query_attribute.rb#26
  def value_for_database; end

  # source://activerecord//lib/active_record/relation/query_attribute.rb#31
  def with_cast_value(value); end

  private

  # source://activerecord//lib/active_record/relation/query_attribute.rb#63
  def infinity?(value); end
end

# source://activerecord//lib/active_record/relation.rb#59
ActiveRecord::Relation::SINGLE_VALUE_METHODS = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/active_record/relation.rb#1293
class ActiveRecord::Relation::StrictLoadingScope
  class << self
    # source://activerecord//lib/active_record/relation.rb#1294
    def empty_scope?; end

    # source://activerecord//lib/active_record/relation.rb#1298
    def strict_loading_value; end
  end
end

# source://activerecord//lib/active_record/relation.rb#65
ActiveRecord::Relation::VALUE_METHODS = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/active_record/relation/where_clause.rb#7
class ActiveRecord::Relation::WhereClause
  # source://activerecord//lib/active_record/relation/where_clause.rb#10
  def initialize(predicates); end

  # source://activerecord//lib/active_record/relation/where_clause.rb#14
  def +(other); end

  # source://activerecord//lib/active_record/relation/where_clause.rb#18
  def -(other); end

  # source://activerecord//lib/active_record/relation/where_clause.rb#75
  def ==(other); end

  # source://activerecord//lib/active_record/relation/where_clause.rb#8
  def any?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/where_clause.rb#70
  def ast; end

  # source://activerecord//lib/active_record/relation/where_clause.rb#99
  def contradiction?; end

  # source://activerecord//lib/active_record/relation/where_clause.rb#8
  def empty?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/relation/where_clause.rb#75
  def eql?(other); end

  # source://activerecord//lib/active_record/relation/where_clause.rb#32
  def except(*columns); end

  # source://activerecord//lib/active_record/relation/where_clause.rb#110
  def extract_attributes; end

  # source://activerecord//lib/active_record/relation/where_clause.rb#81
  def hash; end

  # source://activerecord//lib/active_record/relation/where_clause.rb#85
  def invert; end

  # source://activerecord//lib/active_record/relation/where_clause.rb#26
  def merge(other); end

  # source://activerecord//lib/active_record/relation/where_clause.rb#36
  def or(other); end

  # source://activerecord//lib/active_record/relation/where_clause.rb#61
  def to_h(table_name = T.unsafe(nil), equality_only: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/relation/where_clause.rb#22
  def |(other); end

  protected

  # source://activerecord//lib/active_record/relation/where_clause.rb#117
  def predicates; end

  # source://activerecord//lib/active_record/relation/where_clause.rb#119
  def referenced_columns; end

  private

  # source://activerecord//lib/active_record/relation/where_clause.rb#126
  def each_attributes; end

  # source://activerecord//lib/active_record/relation/where_clause.rb#145
  def equalities(predicates, equality_only); end

  # source://activerecord//lib/active_record/relation/where_clause.rb#159
  def equality_node?(node); end

  # source://activerecord//lib/active_record/relation/where_clause.rb#174
  def except_predicates(columns); end

  # source://activerecord//lib/active_record/relation/where_clause.rb#136
  def extract_attribute(node); end

  # source://activerecord//lib/active_record/relation/where_clause.rb#209
  def extract_node_value(node); end

  # source://activerecord//lib/active_record/relation/where_clause.rb#163
  def invert_predicate(node); end

  # source://activerecord//lib/active_record/relation/where_clause.rb#198
  def non_empty_predicates; end

  # source://activerecord//lib/active_record/relation/where_clause.rb#187
  def predicates_with_wrapped_sql_literals; end

  # source://activerecord//lib/active_record/relation/where_clause.rb#202
  def wrap_sql_literal(node); end

  class << self
    # source://activerecord//lib/active_record/relation/where_clause.rb#95
    def empty; end
  end
end

# source://activerecord//lib/active_record/relation/where_clause.rb#197
ActiveRecord::Relation::WhereClause::ARRAY_WITH_EMPTY_STRING = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/active_record/result.rb#36
class ActiveRecord::Result
  include ::Enumerable

  # source://activerecord//lib/active_record/result.rb#49
  def initialize(columns, rows, column_types = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/result.rb#93
  def [](idx); end

  # source://activerecord//lib/active_record/result.rb#106
  def cancel; end

  # source://activerecord//lib/active_record/result.rb#110
  def cast_values(type_overrides = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/result.rb#148
  def column_indexes; end

  # source://activerecord//lib/active_record/result.rb#39
  def column_types; end

  # source://activerecord//lib/active_record/result.rb#39
  def columns; end

  # source://activerecord//lib/active_record/result.rb#73
  def each(&block); end

  # source://activerecord//lib/active_record/result.rb#82
  def empty?; end

  # source://activerecord//lib/active_record/result.rb#143
  def freeze; end

  # source://activerecord//lib/active_record/result.rb#60
  def includes_column?(name); end

  # source://activerecord//lib/active_record/result.rb#98
  def last(n = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/result.rb#65
  def length; end

  # source://activerecord//lib/active_record/result.rb#102
  def result; end

  # source://activerecord//lib/active_record/result.rb#39
  def rows; end

  # source://activerecord//lib/active_record/result.rb#87
  def to_a; end

  # source://activerecord//lib/active_record/result.rb#87
  def to_ary; end

  private

  # source://activerecord//lib/active_record/result.rb#162
  def column_type(name, index, type_overrides); end

  # source://activerecord//lib/active_record/result.rb#170
  def hash_rows; end

  # source://activerecord//lib/active_record/result.rb#136
  def initialize_copy(other); end

  class << self
    # source://activerecord//lib/active_record/result.rb#41
    def empty(async: T.unsafe(nil)); end
  end
end

# source://activerecord//lib/active_record/result.rb#182
ActiveRecord::Result::EMPTY = T.let(T.unsafe(nil), ActiveRecord::Result)

# source://activerecord//lib/active_record/result.rb#185
ActiveRecord::Result::EMPTY_ASYNC = T.let(T.unsafe(nil), ActiveRecord::FutureResult::Complete)

# source://activerecord//lib/active_record/result.rb#179
ActiveRecord::Result::EMPTY_HASH = T.let(T.unsafe(nil), Hash)

# source://activerecord//lib/active_record/errors.rb#422
class ActiveRecord::Rollback < ::ActiveRecord::ActiveRecordError; end

# source://activerecord//lib/active_record/runtime_registry.rb#9
module ActiveRecord::RuntimeRegistry
  extend ::ActiveRecord::RuntimeRegistry

  # source://activerecord//lib/active_record/runtime_registry.rb#20
  def async_sql_runtime; end

  # source://activerecord//lib/active_record/runtime_registry.rb#24
  def async_sql_runtime=(runtime); end

  # source://activerecord//lib/active_record/runtime_registry.rb#36
  def cached_queries_count; end

  # source://activerecord//lib/active_record/runtime_registry.rb#40
  def cached_queries_count=(count); end

  # source://activerecord//lib/active_record/runtime_registry.rb#28
  def queries_count; end

  # source://activerecord//lib/active_record/runtime_registry.rb#32
  def queries_count=(count); end

  # source://activerecord//lib/active_record/runtime_registry.rb#44
  def reset; end

  # source://activerecord//lib/active_record/runtime_registry.rb#62
  def reset_cached_queries_count; end

  # source://activerecord//lib/active_record/runtime_registry.rb#56
  def reset_queries_count; end

  # source://activerecord//lib/active_record/runtime_registry.rb#50
  def reset_runtimes; end

  # source://activerecord//lib/active_record/runtime_registry.rb#12
  def sql_runtime; end

  # source://activerecord//lib/active_record/runtime_registry.rb#16
  def sql_runtime=(runtime); end
end

# source://activerecord//lib/active_record/errors.rb#292
class ActiveRecord::SQLWarning < ::ActiveRecord::AdapterError
  # source://activerecord//lib/active_record/errors.rb#296
  def initialize(message = T.unsafe(nil), code = T.unsafe(nil), level = T.unsafe(nil), sql = T.unsafe(nil), connection_pool = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/errors.rb#293
  def code; end

  # source://activerecord//lib/active_record/errors.rb#293
  def level; end

  # source://activerecord//lib/active_record/errors.rb#294
  def sql; end

  # source://activerecord//lib/active_record/errors.rb#294
  def sql=(_arg0); end
end

# source://activerecord//lib/active_record/sanitization.rb#4
module ActiveRecord::Sanitization
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Sanitization::ClassMethods
end

# source://activerecord//lib/active_record/sanitization.rb#7
module ActiveRecord::Sanitization::ClassMethods
  # source://activerecord//lib/active_record/sanitization.rb#182
  def disallow_raw_sql!(args, permit: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/sanitization.rb#33
  def sanitize_sql(condition); end

  # source://activerecord//lib/active_record/sanitization.rb#163
  def sanitize_sql_array(ary); end

  # source://activerecord//lib/active_record/sanitization.rb#68
  def sanitize_sql_for_assignment(assignments, default_table_name = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/sanitization.rb#33
  def sanitize_sql_for_conditions(condition); end

  # source://activerecord//lib/active_record/sanitization.rb#84
  def sanitize_sql_for_order(condition); end

  # source://activerecord//lib/active_record/sanitization.rb#107
  def sanitize_sql_hash_for_assignment(attrs, table); end

  # source://activerecord//lib/active_record/sanitization.rb#131
  def sanitize_sql_like(string, escape_character = T.unsafe(nil)); end

  private

  # source://activerecord//lib/active_record/sanitization.rb#232
  def quote_bound_value(connection, value); end

  # source://activerecord//lib/active_record/sanitization.rb#246
  def raise_if_bind_arity_mismatch(statement, expected, provided); end

  # source://activerecord//lib/active_record/sanitization.rb#210
  def replace_bind_variable(connection, value); end

  # source://activerecord//lib/active_record/sanitization.rb#202
  def replace_bind_variables(connection, statement, values); end

  # source://activerecord//lib/active_record/sanitization.rb#218
  def replace_named_bind_variables(connection, statement, bind_vars); end
end

# source://activerecord//lib/active_record/schema.rb#32
class ActiveRecord::Schema < ::ActiveRecord::Migration::Current
  include ::ActiveRecord::Schema::Definition
  extend ::ActiveRecord::Schema::Definition::ClassMethods

  class << self
    # source://activerecord//lib/active_record/schema.rb#70
    def [](version); end
  end
end

# source://activerecord//lib/active_record/schema.rb#33
module ActiveRecord::Schema::Definition
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Schema::Definition::ClassMethods

  # source://activerecord//lib/active_record/schema.rb#54
  def define(info, &block); end
end

# source://activerecord//lib/active_record/schema.rb#36
module ActiveRecord::Schema::Definition::ClassMethods
  # source://activerecord//lib/active_record/schema.rb#49
  def define(info = T.unsafe(nil), &block); end
end

# source://activerecord//lib/active_record/schema_dumper.rb#10
class ActiveRecord::SchemaDumper
  # source://activerecord//lib/active_record/schema_dumper.rb#73
  def initialize(connection, options = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/schema_dumper.rb#29
  def chk_ignore_pattern; end

  # source://activerecord//lib/active_record/schema_dumper.rb#29
  def chk_ignore_pattern=(val); end

  # source://activerecord//lib/active_record/schema_dumper.rb#60
  def dump(stream); end

  # source://activerecord//lib/active_record/schema_dumper.rb#35
  def excl_ignore_pattern; end

  # source://activerecord//lib/active_record/schema_dumper.rb#35
  def excl_ignore_pattern=(val); end

  # source://activerecord//lib/active_record/schema_dumper.rb#23
  def fk_ignore_pattern; end

  # source://activerecord//lib/active_record/schema_dumper.rb#23
  def fk_ignore_pattern=(val); end

  # source://activerecord//lib/active_record/schema_dumper.rb#17
  def ignore_tables; end

  # source://activerecord//lib/active_record/schema_dumper.rb#17
  def ignore_tables=(val); end

  # source://activerecord//lib/active_record/schema_dumper.rb#41
  def unique_ignore_pattern; end

  # source://activerecord//lib/active_record/schema_dumper.rb#41
  def unique_ignore_pattern=(val); end

  private

  # source://activerecord//lib/active_record/schema_dumper.rb#273
  def check_constraints_in_create(table, stream); end

  # source://activerecord//lib/active_record/schema_dumper.rb#91
  def define_params; end

  # source://activerecord//lib/active_record/schema_dumper.rb#118
  def extensions(stream); end

  # source://activerecord//lib/active_record/schema_dumper.rb#293
  def foreign_keys(table, stream); end

  # source://activerecord//lib/active_record/schema_dumper.rb#325
  def format_colspec(colspec); end

  # source://activerecord//lib/active_record/schema_dumper.rb#335
  def format_index_parts(options); end

  # source://activerecord//lib/active_record/schema_dumper.rb#331
  def format_options(options); end

  # source://activerecord//lib/active_record/schema_dumper.rb#85
  def formatted_version; end

  # source://activerecord//lib/active_record/schema_dumper.rb#95
  def header(stream); end

  # source://activerecord//lib/active_record/schema_dumper.rb#353
  def ignored?(table_name); end

  # source://activerecord//lib/active_record/schema_dumper.rb#255
  def index_parts(index); end

  # source://activerecord//lib/active_record/schema_dumper.rb#222
  def indexes(table, stream); end

  # source://activerecord//lib/active_record/schema_dumper.rb#234
  def indexes_in_create(table, stream); end

  # source://activerecord//lib/active_record/schema_dumper.rb#343
  def remove_prefix_and_suffix(table); end

  # source://activerecord//lib/active_record/schema_dumper.rb#126
  def schemas(stream); end

  # source://activerecord//lib/active_record/schema_dumper.rb#153
  def table(table, stream); end

  # source://activerecord//lib/active_record/schema_dumper.rb#71
  def table_name; end

  # source://activerecord//lib/active_record/schema_dumper.rb#71
  def table_name=(_arg0); end

  # source://activerecord//lib/active_record/schema_dumper.rb#129
  def tables(stream); end

  # source://activerecord//lib/active_record/schema_dumper.rb#113
  def trailer(stream); end

  # source://activerecord//lib/active_record/schema_dumper.rb#122
  def types(stream); end

  class << self
    # source://activerecord//lib/active_record/schema_dumper.rb#29
    def chk_ignore_pattern; end

    # source://activerecord//lib/active_record/schema_dumper.rb#29
    def chk_ignore_pattern=(val); end

    # source://activerecord//lib/active_record/schema_dumper.rb#44
    def dump(pool = T.unsafe(nil), stream = T.unsafe(nil), config = T.unsafe(nil)); end

    # source://activerecord//lib/active_record/schema_dumper.rb#35
    def excl_ignore_pattern; end

    # source://activerecord//lib/active_record/schema_dumper.rb#35
    def excl_ignore_pattern=(val); end

    # source://activerecord//lib/active_record/schema_dumper.rb#23
    def fk_ignore_pattern; end

    # source://activerecord//lib/active_record/schema_dumper.rb#23
    def fk_ignore_pattern=(val); end

    # source://activerecord//lib/active_record/schema_dumper.rb#17
    def ignore_tables; end

    # source://activerecord//lib/active_record/schema_dumper.rb#17
    def ignore_tables=(val); end

    # source://activerecord//lib/active_record/schema_dumper.rb#41
    def unique_ignore_pattern; end

    # source://activerecord//lib/active_record/schema_dumper.rb#41
    def unique_ignore_pattern=(val); end

    private

    # source://activerecord//lib/active_record/schema_dumper.rb#52
    def generate_options(config); end

    def new(*_arg0); end
  end
end

# source://activerecord//lib/active_record/schema_migration.rb#8
class ActiveRecord::SchemaMigration
  # source://activerecord//lib/active_record/schema_migration.rb#14
  def initialize(pool); end

  # source://activerecord//lib/active_record/schema_migration.rb#12
  def arel_table; end

  # source://activerecord//lib/active_record/schema_migration.rb#90
  def count; end

  # source://activerecord//lib/active_record/schema_migration.rb#52
  def create_table; end

  # source://activerecord//lib/active_record/schema_migration.rb#19
  def create_version(version); end

  # source://activerecord//lib/active_record/schema_migration.rb#36
  def delete_all_versions; end

  # source://activerecord//lib/active_record/schema_migration.rb#27
  def delete_version(version); end

  # source://activerecord//lib/active_record/schema_migration.rb#62
  def drop_table; end

  # source://activerecord//lib/active_record/schema_migration.rb#86
  def integer_versions; end

  # source://activerecord//lib/active_record/schema_migration.rb#68
  def normalize_migration_number(number); end

  # source://activerecord//lib/active_record/schema_migration.rb#72
  def normalized_versions; end

  # source://activerecord//lib/active_record/schema_migration.rb#44
  def primary_key; end

  # source://activerecord//lib/active_record/schema_migration.rb#99
  def table_exists?; end

  # source://activerecord//lib/active_record/schema_migration.rb#48
  def table_name; end

  # source://activerecord//lib/active_record/schema_migration.rb#76
  def versions; end
end

# source://activerecord//lib/active_record/schema_migration.rb#9
class ActiveRecord::SchemaMigration::NullSchemaMigration; end

# source://activerecord//lib/active_record/scoping.rb#6
module ActiveRecord::Scoping
  extend ::ActiveSupport::Concern
  extend ::ActiveSupport::Autoload
  include GeneratedInstanceMethods
  include ::ActiveRecord::Scoping::Default
  include ::ActiveRecord::Scoping::Named

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Scoping::ClassMethods
  mixes_in_class_methods ::ActiveRecord::Scoping::Default::ClassMethods
  mixes_in_class_methods ::ActiveRecord::Scoping::Named::ClassMethods

  # source://activerecord//lib/active_record/scoping.rb#54
  def initialize_internals_callback; end

  # source://activerecord//lib/active_record/scoping.rb#47
  def populate_with_current_scope_attributes; end

  module GeneratedClassMethods
    def default_scope_override; end
    def default_scope_override=(value); end
    def default_scopes; end
    def default_scopes=(value); end
  end

  module GeneratedInstanceMethods
    def default_scope_override; end
    def default_scopes; end
  end
end

# source://activerecord//lib/active_record/scoping.rb#14
module ActiveRecord::Scoping::ClassMethods
  # source://activerecord//lib/active_record/scoping.rb#26
  def current_scope(skip_inherited_scope = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/scoping.rb#30
  def current_scope=(scope); end

  # source://activerecord//lib/active_record/scoping.rb#34
  def global_current_scope(skip_inherited_scope = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/scoping.rb#38
  def global_current_scope=(scope); end

  # source://activerecord//lib/active_record/scoping.rb#17
  def scope_attributes; end

  # source://activerecord//lib/active_record/scoping.rb#22
  def scope_attributes?; end

  # source://activerecord//lib/active_record/scoping.rb#42
  def scope_registry; end
end

# source://activerecord//lib/active_record/scoping/default.rb#14
module ActiveRecord::Scoping::Default
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Scoping::Default::ClassMethods

  module GeneratedClassMethods
    def default_scope_override; end
    def default_scope_override=(value); end
    def default_scopes; end
    def default_scopes=(value); end
  end

  module GeneratedInstanceMethods
    def default_scope_override; end
    def default_scopes; end
  end
end

# source://activerecord//lib/active_record/scoping/default.rb#23
module ActiveRecord::Scoping::Default::ClassMethods
  # source://activerecord//lib/active_record/scoping/default.rb#62
  def default_scopes?(all_queries: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/scoping/default.rb#55
  def scope_attributes?; end

  # source://activerecord//lib/active_record/scoping/default.rb#50
  def unscoped(&block); end

  private

  # source://activerecord//lib/active_record/scoping/default.rb#145
  def build_default_scope(relation = T.unsafe(nil), all_queries: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/scoping/default.rb#129
  def default_scope(scope = T.unsafe(nil), all_queries: T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/scoping/default.rb#192
  def evaluate_default_scope; end

  # source://activerecord//lib/active_record/scoping/default.rb#177
  def execute_scope?(all_queries, default_scope_obj); end

  # source://activerecord//lib/active_record/scoping/default.rb#185
  def ignore_default_scope=(ignore); end

  # source://activerecord//lib/active_record/scoping/default.rb#181
  def ignore_default_scope?; end
end

# source://activerecord//lib/active_record/scoping/default.rb#5
class ActiveRecord::Scoping::DefaultScope
  # source://activerecord//lib/active_record/scoping/default.rb#8
  def initialize(scope, all_queries = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/scoping/default.rb#6
  def all_queries; end

  # source://activerecord//lib/active_record/scoping/default.rb#6
  def scope; end
end

# source://activerecord//lib/active_record/scoping/named.rb#6
module ActiveRecord::Scoping::Named
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Scoping::Named::ClassMethods
end

# source://activerecord//lib/active_record/scoping/named.rb#9
module ActiveRecord::Scoping::Named::ClassMethods
  # source://activerecord//lib/active_record/scoping/named.rb#22
  def all(all_queries: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/scoping/named.rb#49
  def default_extensions; end

  # source://activerecord//lib/active_record/scoping/named.rb#45
  def default_scoped(scope = T.unsafe(nil), all_queries: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/scoping/named.rb#154
  def scope(name, body, &block); end

  # source://activerecord//lib/active_record/scoping/named.rb#36
  def scope_for_association(scope = T.unsafe(nil)); end

  private

  # source://activerecord//lib/active_record/scoping/named.rb#192
  def singleton_method_added(name); end
end

# source://activerecord//lib/active_record/scoping.rb#76
class ActiveRecord::Scoping::ScopeRegistry
  # source://activerecord//lib/active_record/scoping.rb#86
  def initialize; end

  # source://activerecord//lib/active_record/scoping.rb#92
  def current_scope(model, skip_inherited_scope = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/scoping.rb#108
  def global_current_scope(model, skip_inherited_scope = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/scoping.rb#100
  def ignore_default_scope(model, skip_inherited_scope = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/scoping.rb#96
  def set_current_scope(model, value); end

  # source://activerecord//lib/active_record/scoping.rb#112
  def set_global_current_scope(model, value); end

  # source://activerecord//lib/active_record/scoping.rb#104
  def set_ignore_default_scope(model, value); end

  private

  # source://activerecord//lib/active_record/scoping.rb#131
  def set_value_for(scope_type, model, value); end

  # source://activerecord//lib/active_record/scoping.rb#118
  def value_for(scope_type, model, skip_inherited_scope = T.unsafe(nil)); end

  class << self
    # source://activerecord//lib/active_record/scoping.rb#78
    def current_scope(*_arg0, **_arg1, &_arg2); end

    # source://activerecord//lib/active_record/scoping.rb#78
    def global_current_scope(*_arg0, **_arg1, &_arg2); end

    # source://activerecord//lib/active_record/scoping.rb#78
    def ignore_default_scope(*_arg0, **_arg1, &_arg2); end

    # source://activerecord//lib/active_record/scoping.rb#81
    def instance; end

    # source://activerecord//lib/active_record/scoping.rb#78
    def set_current_scope(*_arg0, **_arg1, &_arg2); end

    # source://activerecord//lib/active_record/scoping.rb#78
    def set_global_current_scope(*_arg0, **_arg1, &_arg2); end

    # source://activerecord//lib/active_record/scoping.rb#78
    def set_ignore_default_scope(*_arg0, **_arg1, &_arg2); end
  end
end

# source://activerecord//lib/active_record/secure_password.rb#4
module ActiveRecord::SecurePassword
  extend ::ActiveSupport::Concern
  include ::ActiveModel::SecurePassword

  mixes_in_class_methods ::ActiveModel::SecurePassword::ClassMethods
  mixes_in_class_methods ::ActiveRecord::SecurePassword::ClassMethods
end

# source://activerecord//lib/active_record/secure_password.rb#9
module ActiveRecord::SecurePassword::ClassMethods
  # source://activerecord//lib/active_record/secure_password.rb#41
  def authenticate_by(attributes); end
end

# source://activerecord//lib/active_record/secure_token.rb#4
module ActiveRecord::SecureToken
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::SecureToken::ClassMethods
end

# source://activerecord//lib/active_record/secure_token.rb#11
module ActiveRecord::SecureToken::ClassMethods
  # source://activerecord//lib/active_record/secure_token.rb#61
  def generate_unique_secure_token(length: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/secure_token.rb#46
  def has_secure_token(attribute = T.unsafe(nil), length: T.unsafe(nil), on: T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/secure_token.rb#7
ActiveRecord::SecureToken::MINIMUM_TOKEN_LENGTH = T.let(T.unsafe(nil), Integer)

# source://activerecord//lib/active_record/secure_token.rb#5
class ActiveRecord::SecureToken::MinimumLengthError < ::StandardError; end

# source://activerecord//lib/active_record/serialization.rb#5
module ActiveRecord::Serialization
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveModel::Serializers::JSON

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Naming

  # source://activerecord//lib/active_record/serialization.rb#13
  def serializable_hash(options = T.unsafe(nil)); end

  private

  # source://activerecord//lib/active_record/serialization.rb#25
  def attribute_names_for_serialization; end

  module GeneratedClassMethods
    def include_root_in_json; end
    def include_root_in_json=(value); end
    def include_root_in_json?; end
  end

  module GeneratedInstanceMethods
    def include_root_in_json; end
    def include_root_in_json?; end
  end
end

# source://activerecord//lib/active_record/errors.rb#536
class ActiveRecord::SerializationFailure < ::ActiveRecord::TransactionRollbackError; end

# source://activerecord//lib/active_record/errors.rb#37
class ActiveRecord::SerializationTypeMismatch < ::ActiveRecord::ActiveRecordError; end

# source://activerecord//lib/active_record/signed_id.rb#5
module ActiveRecord::SignedId
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::SignedId::ClassMethods

  # source://activerecord//lib/active_record/signed_id.rb#131
  def signed_id(expires_in: T.unsafe(nil), expires_at: T.unsafe(nil), purpose: T.unsafe(nil)); end

  module GeneratedClassMethods
    def signed_id_verifier_secret; end
    def signed_id_verifier_secret=(value); end
    def signed_id_verifier_secret?; end
  end

  module GeneratedInstanceMethods
    def signed_id_verifier_secret; end
    def signed_id_verifier_secret?; end
  end
end

# source://activerecord//lib/active_record/signed_id.rb#26
module ActiveRecord::SignedId::ClassMethods
  # source://activerecord//lib/active_record/signed_id.rb#102
  def combine_signed_id_purposes(purpose); end

  # source://activerecord//lib/active_record/signed_id.rb#52
  def find_signed(signed_id, purpose: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/signed_id.rb#72
  def find_signed!(signed_id, purpose: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/signed_id.rb#81
  def signed_id_verifier; end

  # source://activerecord//lib/active_record/signed_id.rb#97
  def signed_id_verifier=(verifier); end
end

# source://activerecord//lib/active_record/signed_id.rb#16
module ActiveRecord::SignedId::RelationMethods
  # source://activerecord//lib/active_record/signed_id.rb#17
  def find_signed(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/signed_id.rb#21
  def find_signed!(*_arg0, **_arg1, &_arg2); end
end

# source://activerecord//lib/active_record/errors.rb#179
class ActiveRecord::SoleRecordExceeded < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/errors.rb#182
  def initialize(record = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/errors.rb#180
  def record; end
end

# source://activerecord//lib/active_record/relation/spawn_methods.rb#8
module ActiveRecord::SpawnMethods
  # source://activerecord//lib/active_record/relation/spawn_methods.rb#59
  def except(*skips); end

  # source://activerecord//lib/active_record/relation/spawn_methods.rb#33
  def merge(other, *rest); end

  # source://activerecord//lib/active_record/relation/spawn_methods.rb#43
  def merge!(other, *rest); end

  # source://activerecord//lib/active_record/relation/spawn_methods.rb#67
  def only(*onlies); end

  # source://activerecord//lib/active_record/relation/spawn_methods.rb#9
  def spawn; end

  private

  # source://activerecord//lib/active_record/relation/spawn_methods.rb#72
  def relation_with(values); end
end

# source://activerecord//lib/active_record/errors.rb#358
class ActiveRecord::StaleObjectError < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/errors.rb#361
  def initialize(record = T.unsafe(nil), attempted_action = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/errors.rb#359
  def attempted_action; end

  # source://activerecord//lib/active_record/errors.rb#359
  def record; end
end

# source://activerecord//lib/active_record/statement_cache.rb#30
class ActiveRecord::StatementCache
  # source://activerecord//lib/active_record/statement_cache.rb#139
  def initialize(query_builder, bind_map, klass); end

  # source://activerecord//lib/active_record/statement_cache.rb#145
  def execute(params, connection, allow_retry: T.unsafe(nil), &block); end

  private

  # source://activerecord//lib/active_record/statement_cache.rb#162
  def bind_map; end

  # source://activerecord//lib/active_record/statement_cache.rb#162
  def klass; end

  # source://activerecord//lib/active_record/statement_cache.rb#162
  def query_builder; end

  class << self
    # source://activerecord//lib/active_record/statement_cache.rb#132
    def create(connection, callable = T.unsafe(nil), &block); end

    # source://activerecord//lib/active_record/statement_cache.rb#101
    def partial_query(values); end

    # source://activerecord//lib/active_record/statement_cache.rb#105
    def partial_query_collector; end

    # source://activerecord//lib/active_record/statement_cache.rb#97
    def query(sql); end

    # source://activerecord//lib/active_record/statement_cache.rb#155
    def unsupported_value?(value); end
  end
end

# source://activerecord//lib/active_record/statement_cache.rb#113
class ActiveRecord::StatementCache::BindMap
  # source://activerecord//lib/active_record/statement_cache.rb#114
  def initialize(bound_attributes); end

  # source://activerecord//lib/active_record/statement_cache.rb#125
  def bind(values); end
end

# source://activerecord//lib/active_record/statement_cache.rb#109
class ActiveRecord::StatementCache::Params
  # source://activerecord//lib/active_record/statement_cache.rb#110
  def bind; end
end

# source://activerecord//lib/active_record/statement_cache.rb#43
class ActiveRecord::StatementCache::PartialQuery < ::ActiveRecord::StatementCache::Query
  # source://activerecord//lib/active_record/statement_cache.rb#44
  def initialize(values); end

  # source://activerecord//lib/active_record/statement_cache.rb#51
  def sql_for(binds, connection); end
end

# source://activerecord//lib/active_record/statement_cache.rb#64
class ActiveRecord::StatementCache::PartialQueryCollector
  # source://activerecord//lib/active_record/statement_cache.rb#67
  def initialize; end

  # source://activerecord//lib/active_record/statement_cache.rb#72
  def <<(str); end

  # source://activerecord//lib/active_record/statement_cache.rb#77
  def add_bind(obj); end

  # source://activerecord//lib/active_record/statement_cache.rb#83
  def add_binds(binds, proc_for_binds = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/statement_cache.rb#65
  def preparable; end

  # source://activerecord//lib/active_record/statement_cache.rb#65
  def preparable=(_arg0); end

  # source://activerecord//lib/active_record/statement_cache.rb#65
  def retryable; end

  # source://activerecord//lib/active_record/statement_cache.rb#65
  def retryable=(_arg0); end

  # source://activerecord//lib/active_record/statement_cache.rb#92
  def value; end
end

# source://activerecord//lib/active_record/statement_cache.rb#33
class ActiveRecord::StatementCache::Query
  # source://activerecord//lib/active_record/statement_cache.rb#34
  def initialize(sql); end

  # source://activerecord//lib/active_record/statement_cache.rb#38
  def sql_for(binds, connection); end
end

# source://activerecord//lib/active_record/statement_cache.rb#31
class ActiveRecord::StatementCache::Substitute; end

# source://activerecord//lib/active_record/errors.rb#191
class ActiveRecord::StatementInvalid < ::ActiveRecord::AdapterError
  # source://activerecord//lib/active_record/errors.rb#192
  def initialize(message = T.unsafe(nil), sql: T.unsafe(nil), binds: T.unsafe(nil), connection_pool: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/errors.rb#198
  def binds; end

  # source://activerecord//lib/active_record/errors.rb#200
  def set_query(sql, binds); end

  # source://activerecord//lib/active_record/errors.rb#198
  def sql; end
end

# source://activerecord//lib/active_record/errors.rb#561
class ActiveRecord::StatementTimeout < ::ActiveRecord::QueryAborted; end

# source://activerecord//lib/active_record/store.rb#96
module ActiveRecord::Store
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Store::ClassMethods

  private

  # source://activerecord//lib/active_record/store.rb#209
  def read_store_attribute(store_attribute, key); end

  # source://activerecord//lib/active_record/store.rb#219
  def store_accessor_for(store_attribute); end

  # source://activerecord//lib/active_record/store.rb#214
  def write_store_attribute(store_attribute, key, value); end
end

# source://activerecord//lib/active_record/store.rb#105
module ActiveRecord::Store::ClassMethods
  # source://activerecord//lib/active_record/store.rb#191
  def _store_accessors_module; end

  # source://activerecord//lib/active_record/store.rb#106
  def store(store_attribute, options = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/store.rb#112
  def store_accessor(store_attribute, *keys, prefix: T.unsafe(nil), suffix: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/store.rb#199
  def stored_attributes; end
end

# source://activerecord//lib/active_record/store.rb#223
class ActiveRecord::Store::HashAccessor
  class << self
    # source://activerecord//lib/active_record/store.rb#234
    def prepare(object, attribute); end

    # source://activerecord//lib/active_record/store.rb#224
    def read(object, attribute, key); end

    # source://activerecord//lib/active_record/store.rb#229
    def write(object, attribute, key, value); end
  end
end

# source://activerecord//lib/active_record/store.rb#260
class ActiveRecord::Store::IndifferentCoder
  # source://activerecord//lib/active_record/store.rb#261
  def initialize(attr_name, coder_or_class_name); end

  # source://activerecord//lib/active_record/store.rb#270
  def dump(obj); end

  # source://activerecord//lib/active_record/store.rb#274
  def load(yaml); end

  private

  # source://activerecord//lib/active_record/store.rb#290
  def as_regular_hash(obj); end

  class << self
    # source://activerecord//lib/active_record/store.rb#278
    def as_indifferent_hash(obj); end
  end
end

# source://activerecord//lib/active_record/store.rb#249
class ActiveRecord::Store::IndifferentHashAccessor < ::ActiveRecord::Store::HashAccessor
  class << self
    # source://activerecord//lib/active_record/store.rb#250
    def prepare(object, store_attribute); end
  end
end

# source://activerecord//lib/active_record/store.rb#239
class ActiveRecord::Store::StringKeyedHashAccessor < ::ActiveRecord::Store::HashAccessor
  class << self
    # source://activerecord//lib/active_record/store.rb#240
    def read(object, attribute, key); end

    # source://activerecord//lib/active_record/store.rb#244
    def write(object, attribute, key, value); end
  end
end

# source://activerecord//lib/active_record/errors.rb#391
class ActiveRecord::StrictLoadingViolationError < ::ActiveRecord::ActiveRecordError; end

# source://activerecord//lib/active_record/errors.rb#18
class ActiveRecord::SubclassNotFound < ::ActiveRecord::ActiveRecordError; end

# source://activerecord//lib/active_record/suppressor.rb#32
module ActiveRecord::Suppressor
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Suppressor::ClassMethods

  # source://activerecord//lib/active_record/suppressor.rb#51
  def save(**_arg0); end

  # source://activerecord//lib/active_record/suppressor.rb#55
  def save!(**_arg0); end

  class << self
    # source://activerecord//lib/active_record/suppressor.rb#36
    def registry; end
  end
end

# source://activerecord//lib/active_record/suppressor.rb#41
module ActiveRecord::Suppressor::ClassMethods
  # source://activerecord//lib/active_record/suppressor.rb#42
  def suppress(&block); end
end

# source://activerecord//lib/active_record/table_metadata.rb#4
class ActiveRecord::TableMetadata
  # source://activerecord//lib/active_record/table_metadata.rb#7
  def initialize(klass, arel_table, reflection = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/table_metadata.rb#65
  def aggregated_with?(aggregation_name); end

  # source://activerecord//lib/active_record/table_metadata.rb#80
  def arel_table; end

  # source://activerecord//lib/active_record/table_metadata.rb#29
  def associated_table(table_name); end

  # source://activerecord//lib/active_record/table_metadata.rb#25
  def associated_with?(table_name); end

  # source://activerecord//lib/active_record/table_metadata.rb#21
  def has_column?(column_name); end

  # source://activerecord//lib/active_record/table_metadata.rb#5
  def join_foreign_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/table_metadata.rb#5
  def join_foreign_type(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/table_metadata.rb#5
  def join_primary_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/table_metadata.rb#5
  def join_primary_type(*_arg0, **_arg1, &_arg2); end

  # source://activerecord//lib/active_record/table_metadata.rb#53
  def polymorphic_association?; end

  # source://activerecord//lib/active_record/table_metadata.rb#57
  def polymorphic_name_association; end

  # source://activerecord//lib/active_record/table_metadata.rb#70
  def predicate_builder; end

  # source://activerecord//lib/active_record/table_metadata.rb#13
  def primary_key; end

  # source://activerecord//lib/active_record/table_metadata.rb#65
  def reflect_on_aggregation(aggregation_name); end

  # source://activerecord//lib/active_record/table_metadata.rb#61
  def through_association?; end

  # source://activerecord//lib/active_record/table_metadata.rb#17
  def type(column_name); end

  private

  # source://activerecord//lib/active_record/table_metadata.rb#83
  def klass; end

  # source://activerecord//lib/active_record/table_metadata.rb#83
  def reflection; end
end

# source://activerecord//lib/active_record/errors.rb#46
class ActiveRecord::TableNotSpecified < ::ActiveRecord::ActiveRecordError; end

# source://activerecord//lib/active_record.rb#172
module ActiveRecord::Tasks
  extend ::ActiveSupport::Autoload
end

# source://activerecord//lib/active_record/tasks/database_tasks.rb#7
class ActiveRecord::Tasks::DatabaseNotSupported < ::StandardError; end

# source://activerecord//lib/active_record/tasks/database_tasks.rb#40
module ActiveRecord::Tasks::DatabaseTasks
  extend ::ActiveRecord::Tasks::DatabaseTasks

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#460
  def cache_dump_filename(db_config_or_name, schema_cache_path: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#324
  def charset(configuration, *arguments); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#319
  def charset_current(env_name = T.unsafe(nil), db_name = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#65
  def check_protected_environments!(environment = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#490
  def check_schema_file(filename); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#309
  def check_target_version; end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#516
  def clear_schema_cache(filename); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#334
  def collation(configuration, *arguments); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#329
  def collation_current(env_name = T.unsafe(nil), db_name = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#115
  def create(configuration, *arguments); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#127
  def create_all; end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#170
  def create_current(environment = T.unsafe(nil), name = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#61
  def database_configuration; end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#61
  def database_configuration=(_arg0); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#277
  def db_configs_with_versions(environment = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#83
  def db_dir; end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#60
  def db_dir=(_arg0); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#223
  def drop(configuration, *arguments); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#235
  def drop_all; end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#239
  def drop_current(environment = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#423
  def dump_schema(db_config, format = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#512
  def dump_schema_cache(conn_or_pool, filename); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#103
  def env; end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#60
  def env=(_arg0); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#91
  def fixtures_path; end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#60
  def fixtures_path=(_arg0); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#141
  def for_each(databases); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#368
  def load_schema(db_config, format = T.unsafe(nil), file = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#482
  def load_schema_current(format = T.unsafe(nil), file = T.unsafe(nil), environment = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#498
  def load_seed; end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#256
  def migrate(version = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#294
  def migrate_status; end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#537
  def migration_class; end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#541
  def migration_connection; end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#545
  def migration_connection_pool; end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#87
  def migrations_paths; end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#60
  def migrations_paths=(_arg0); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#107
  def name; end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#176
  def prepare_all; end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#339
  def purge(configuration); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#344
  def purge_all; end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#348
  def purge_current(environment = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#156
  def raise_for_multi_db(environment = T.unsafe(nil), command:); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#405
  def reconstruct_from_schema(db_config, format = T.unsafe(nil), file = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#73
  def register_task(pattern, task); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#99
  def root; end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#60
  def root=(_arg0); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#447
  def schema_dump_path(db_config, format = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#389
  def schema_up_to_date?(configuration, format = T.unsafe(nil), file = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#111
  def seed_loader; end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#60
  def seed_loader=(_arg0); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#135
  def setup_initial_database_yaml; end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#354
  def structure_dump(configuration, *arguments); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#361
  def structure_load(configuration, *arguments); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#315
  def target_version; end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#250
  def truncate_all(environment = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#531
  def with_temporary_connection(db_config, clobber: T.unsafe(nil), &block); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#520
  def with_temporary_pool_for_each(env: T.unsafe(nil), name: T.unsafe(nil), clobber: T.unsafe(nil), &block); end

  private

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#654
  def check_current_protected_environment!(db_config); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#593
  def class_for_adapter(adapter); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#570
  def configs_for(**options); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#585
  def database_adapter_for(db_config, *arguments); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#601
  def each_current_configuration(environment, name = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#611
  def each_current_environment(environment, &block); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#617
  def each_local_configuration; end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#629
  def local_database?(db_config); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#574
  def resolve_configuration(configuration); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#550
  def schema_cache_env; end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#634
  def schema_sha1(file); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#638
  def structure_dump_flags_for(adapter); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#646
  def structure_load_flags_for(adapter); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#243
  def truncate_tables(db_config); end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#578
  def verbose?; end

  # source://activerecord//lib/active_record/tasks/database_tasks.rb#561
  def with_temporary_pool(db_config, clobber: T.unsafe(nil)); end

  class << self
    # source://activerecord//lib/active_record/tasks/database_tasks.rb#50
    def structure_dump_flags; end

    # source://activerecord//lib/active_record/tasks/database_tasks.rb#50
    def structure_dump_flags=(val); end

    # source://activerecord//lib/active_record/tasks/database_tasks.rb#56
    def structure_load_flags; end

    # source://activerecord//lib/active_record/tasks/database_tasks.rb#56
    def structure_load_flags=(val); end
  end
end

# source://activerecord//lib/active_record/tasks/database_tasks.rb#63
ActiveRecord::Tasks::DatabaseTasks::LOCAL_HOSTS = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/active_record/tasks/mysql_database_tasks.rb#5
class ActiveRecord::Tasks::MySQLDatabaseTasks
  # source://activerecord//lib/active_record/tasks/mysql_database_tasks.rb#12
  def initialize(db_config); end

  # source://activerecord//lib/active_record/tasks/mysql_database_tasks.rb#34
  def charset; end

  # source://activerecord//lib/active_record/tasks/mysql_database_tasks.rb#38
  def collation; end

  # source://activerecord//lib/active_record/tasks/mysql_database_tasks.rb#17
  def create; end

  # source://activerecord//lib/active_record/tasks/mysql_database_tasks.rb#23
  def drop; end

  # source://activerecord//lib/active_record/tasks/mysql_database_tasks.rb#28
  def purge; end

  # source://activerecord//lib/active_record/tasks/mysql_database_tasks.rb#42
  def structure_dump(filename, extra_flags); end

  # source://activerecord//lib/active_record/tasks/mysql_database_tasks.rb#61
  def structure_load(filename, extra_flags); end

  private

  # source://activerecord//lib/active_record/tasks/mysql_database_tasks.rb#71
  def configuration_hash; end

  # source://activerecord//lib/active_record/tasks/mysql_database_tasks.rb#81
  def configuration_hash_without_database; end

  # source://activerecord//lib/active_record/tasks/mysql_database_tasks.rb#73
  def connection; end

  # source://activerecord//lib/active_record/tasks/mysql_database_tasks.rb#85
  def creation_options; end

  # source://activerecord//lib/active_record/tasks/mysql_database_tasks.rb#71
  def db_config; end

  # source://activerecord//lib/active_record/tasks/mysql_database_tasks.rb#77
  def establish_connection(config = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/tasks/mysql_database_tasks.rb#92
  def prepare_command_options; end

  # source://activerecord//lib/active_record/tasks/mysql_database_tasks.rb#111
  def run_cmd(cmd, args, action); end

  # source://activerecord//lib/active_record/tasks/mysql_database_tasks.rb#115
  def run_cmd_error(cmd, args, action); end

  class << self
    # source://activerecord//lib/active_record/tasks/mysql_database_tasks.rb#8
    def using_database_configurations?; end
  end
end

# source://activerecord//lib/active_record/tasks/mysql_database_tasks.rb#6
ActiveRecord::Tasks::MySQLDatabaseTasks::ER_DB_CREATE_EXISTS = T.let(T.unsafe(nil), Integer)

# source://activerecord//lib/active_record/tasks/postgresql_database_tasks.rb#7
class ActiveRecord::Tasks::PostgreSQLDatabaseTasks
  # source://activerecord//lib/active_record/tasks/postgresql_database_tasks.rb#16
  def initialize(db_config); end

  # source://activerecord//lib/active_record/tasks/postgresql_database_tasks.rb#32
  def charset; end

  # source://activerecord//lib/active_record/tasks/postgresql_database_tasks.rb#36
  def collation; end

  # source://activerecord//lib/active_record/tasks/postgresql_database_tasks.rb#21
  def create(connection_already_established = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/tasks/postgresql_database_tasks.rb#27
  def drop; end

  # source://activerecord//lib/active_record/tasks/postgresql_database_tasks.rb#40
  def purge; end

  # source://activerecord//lib/active_record/tasks/postgresql_database_tasks.rb#46
  def structure_dump(filename, extra_flags); end

  # source://activerecord//lib/active_record/tasks/postgresql_database_tasks.rb#80
  def structure_load(filename, extra_flags); end

  private

  # source://activerecord//lib/active_record/tasks/postgresql_database_tasks.rb#88
  def configuration_hash; end

  # source://activerecord//lib/active_record/tasks/postgresql_database_tasks.rb#90
  def connection; end

  # source://activerecord//lib/active_record/tasks/postgresql_database_tasks.rb#88
  def db_config; end

  # source://activerecord//lib/active_record/tasks/postgresql_database_tasks.rb#98
  def encoding; end

  # source://activerecord//lib/active_record/tasks/postgresql_database_tasks.rb#94
  def establish_connection(config = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/tasks/postgresql_database_tasks.rb#106
  def psql_env; end

  # source://activerecord//lib/active_record/tasks/postgresql_database_tasks.rb#102
  def public_schema_config; end

  # source://activerecord//lib/active_record/tasks/postgresql_database_tasks.rb#130
  def remove_sql_header_comments(filename); end

  # source://activerecord//lib/active_record/tasks/postgresql_database_tasks.rb#119
  def run_cmd(cmd, args, action); end

  # source://activerecord//lib/active_record/tasks/postgresql_database_tasks.rb#123
  def run_cmd_error(cmd, args, action); end

  class << self
    # source://activerecord//lib/active_record/tasks/postgresql_database_tasks.rb#12
    def using_database_configurations?; end
  end
end

# source://activerecord//lib/active_record/tasks/postgresql_database_tasks.rb#8
ActiveRecord::Tasks::PostgreSQLDatabaseTasks::DEFAULT_ENCODING = T.let(T.unsafe(nil), String)

# source://activerecord//lib/active_record/tasks/postgresql_database_tasks.rb#9
ActiveRecord::Tasks::PostgreSQLDatabaseTasks::ON_ERROR_STOP_1 = T.let(T.unsafe(nil), String)

# source://activerecord//lib/active_record/tasks/postgresql_database_tasks.rb#10
ActiveRecord::Tasks::PostgreSQLDatabaseTasks::SQL_COMMENT_BEGIN = T.let(T.unsafe(nil), String)

# source://activerecord//lib/active_record/tasks/sqlite_database_tasks.rb#5
class ActiveRecord::Tasks::SQLiteDatabaseTasks
  # source://activerecord//lib/active_record/tasks/sqlite_database_tasks.rb#10
  def initialize(db_config, root = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/tasks/sqlite_database_tasks.rb#40
  def charset; end

  # source://activerecord//lib/active_record/tasks/sqlite_database_tasks.rb#15
  def create; end

  # source://activerecord//lib/active_record/tasks/sqlite_database_tasks.rb#22
  def drop; end

  # source://activerecord//lib/active_record/tasks/sqlite_database_tasks.rb#31
  def purge; end

  # source://activerecord//lib/active_record/tasks/sqlite_database_tasks.rb#44
  def structure_dump(filename, extra_flags); end

  # source://activerecord//lib/active_record/tasks/sqlite_database_tasks.rb#60
  def structure_load(filename, extra_flags); end

  private

  # source://activerecord//lib/active_record/tasks/sqlite_database_tasks.rb#68
  def connection; end

  # source://activerecord//lib/active_record/tasks/sqlite_database_tasks.rb#66
  def db_config; end

  # source://activerecord//lib/active_record/tasks/sqlite_database_tasks.rb#72
  def establish_connection(config = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/tasks/sqlite_database_tasks.rb#66
  def root; end

  # source://activerecord//lib/active_record/tasks/sqlite_database_tasks.rb#77
  def run_cmd(cmd, args, out); end

  # source://activerecord//lib/active_record/tasks/sqlite_database_tasks.rb#81
  def run_cmd_error(cmd, args); end

  class << self
    # source://activerecord//lib/active_record/tasks/sqlite_database_tasks.rb#6
    def using_database_configurations?; end
  end
end

# source://activerecord//lib/active_record/test_databases.rb#6
module ActiveRecord::TestDatabases
  class << self
    # source://activerecord//lib/active_record/test_databases.rb#11
    def create_and_load_schema(i, env_name:); end
  end
end

# source://activerecord//lib/active_record/associations/errors.rb#177
class ActiveRecord::ThroughCantAssociateThroughHasOneOrManyReflection < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/associations/errors.rb#178
  def initialize(owner = T.unsafe(nil), reflection = T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/associations/errors.rb#224
class ActiveRecord::ThroughNestedAssociationsAreReadonly < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/associations/errors.rb#225
  def initialize(owner = T.unsafe(nil), reflection = T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/timestamp.rb#43
module ActiveRecord::Timestamp
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Timestamp::ClassMethods

  private

  # source://activerecord//lib/active_record/timestamp.rb#107
  def _create_record; end

  # source://activerecord//lib/active_record/timestamp.rb#119
  def _update_record; end

  # source://activerecord//lib/active_record/timestamp.rb#155
  def all_timestamp_attributes_in_model; end

  # source://activerecord//lib/active_record/timestamp.rb#170
  def clear_timestamp_attributes; end

  # source://activerecord//lib/active_record/timestamp.rb#125
  def create_or_update(touch: T.unsafe(nil), **_arg1); end

  # source://activerecord//lib/active_record/timestamp.rb#159
  def current_time_from_proper_timezone; end

  # source://activerecord//lib/active_record/timestamp.rb#102
  def init_internals; end

  # source://activerecord//lib/active_record/timestamp.rb#50
  def initialize_dup(other); end

  # source://activerecord//lib/active_record/timestamp.rb#163
  def max_updated_column_timestamp; end

  # source://activerecord//lib/active_record/timestamp.rb#130
  def record_update_timestamps; end

  # source://activerecord//lib/active_record/timestamp.rb#143
  def should_record_timestamps?; end

  # source://activerecord//lib/active_record/timestamp.rb#147
  def timestamp_attributes_for_create_in_model; end

  # source://activerecord//lib/active_record/timestamp.rb#151
  def timestamp_attributes_for_update_in_model; end

  module GeneratedClassMethods
    def record_timestamps; end
    def record_timestamps=(value); end
    def record_timestamps?; end
  end

  module GeneratedInstanceMethods
    def record_timestamps; end
    def record_timestamps=(value); end
    def record_timestamps?; end
  end
end

# source://activerecord//lib/active_record/timestamp.rb#55
module ActiveRecord::Timestamp::ClassMethods
  # source://activerecord//lib/active_record/timestamp.rb#74
  def all_timestamp_attributes_in_model; end

  # source://activerecord//lib/active_record/timestamp.rb#79
  def current_time_from_proper_timezone; end

  # source://activerecord//lib/active_record/timestamp.rb#64
  def timestamp_attributes_for_create_in_model; end

  # source://activerecord//lib/active_record/timestamp.rb#69
  def timestamp_attributes_for_update_in_model; end

  # source://activerecord//lib/active_record/timestamp.rb#56
  def touch_attributes_with_time(*names, time: T.unsafe(nil)); end

  protected

  # source://activerecord//lib/active_record/timestamp.rb#84
  def reload_schema_from_cache(recursive = T.unsafe(nil)); end

  private

  # source://activerecord//lib/active_record/timestamp.rb#92
  def timestamp_attributes_for_create; end

  # source://activerecord//lib/active_record/timestamp.rb#96
  def timestamp_attributes_for_update; end
end

# source://activerecord//lib/active_record/token_for.rb#6
module ActiveRecord::TokenFor
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::TokenFor::ClassMethods

  # source://activerecord//lib/active_record/token_for.rb#119
  def generate_token_for(purpose); end

  module GeneratedClassMethods
    def generated_token_verifier; end
    def generated_token_verifier=(value); end
    def token_definitions; end
    def token_definitions=(value); end
  end

  module GeneratedInstanceMethods; end
end

# source://activerecord//lib/active_record/token_for.rb#56
module ActiveRecord::TokenFor::ClassMethods
  # source://activerecord//lib/active_record/token_for.rb#106
  def find_by_token_for(purpose, token); end

  # source://activerecord//lib/active_record/token_for.rb#110
  def find_by_token_for!(purpose, token); end

  # source://activerecord//lib/active_record/token_for.rb#102
  def generates_token_for(purpose, expires_in: T.unsafe(nil), &block); end
end

# source://activerecord//lib/active_record/token_for.rb#38
module ActiveRecord::TokenFor::RelationMethods
  # source://activerecord//lib/active_record/token_for.rb#41
  def find_by_token_for(purpose, token); end

  # source://activerecord//lib/active_record/token_for.rb#50
  def find_by_token_for!(purpose, token); end
end

# source://activerecord//lib/active_record/token_for.rb#14
class ActiveRecord::TokenFor::TokenDefinition < ::Struct
  def block; end
  def block=(_); end
  def defining_class; end
  def defining_class=(_); end
  def expires_in; end
  def expires_in=(_); end

  # source://activerecord//lib/active_record/token_for.rb#15
  def full_purpose; end

  # source://activerecord//lib/active_record/token_for.rb#27
  def generate_token(model); end

  # source://activerecord//lib/active_record/token_for.rb#19
  def message_verifier; end

  # source://activerecord//lib/active_record/token_for.rb#23
  def payload_for(model); end

  def purpose; end
  def purpose=(_); end

  # source://activerecord//lib/active_record/token_for.rb#31
  def resolve_token(token); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activerecord//lib/active_record/touch_later.rb#5
module ActiveRecord::TouchLater
  # source://activerecord//lib/active_record/touch_later.rb#6
  def before_committed!; end

  # source://activerecord//lib/active_record/touch_later.rb#38
  def touch(*names, time: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/touch_later.rb#11
  def touch_later(*names); end

  private

  # source://activerecord//lib/active_record/touch_later.rb#66
  def has_defer_touch_attrs?; end

  # source://activerecord//lib/active_record/touch_later.rb#49
  def init_internals; end

  # source://activerecord//lib/active_record/touch_later.rb#54
  def surreptitiously_touch(attr_names); end

  # source://activerecord//lib/active_record/touch_later.rb#61
  def touch_deferred_attributes; end
end

# source://activerecord//lib/active_record/transaction.rb#68
class ActiveRecord::Transaction
  # source://activerecord//lib/active_record/transaction.rb#69
  def initialize(internal_transaction); end

  # source://activerecord//lib/active_record/transaction.rb#85
  def after_commit(&block); end

  # source://activerecord//lib/active_record/transaction.rb#107
  def after_rollback(&block); end

  # source://activerecord//lib/active_record/transaction.rb#117
  def blank?; end

  # source://activerecord//lib/active_record/transaction.rb#117
  def closed?; end

  # source://activerecord//lib/active_record/transaction.rb#112
  def open?; end

  # source://activerecord//lib/active_record/transaction.rb#124
  def uuid; end
end

# source://activerecord//lib/active_record/transaction.rb#130
ActiveRecord::Transaction::NULL_TRANSACTION = T.let(T.unsafe(nil), ActiveRecord::Transaction)

# source://activerecord//lib/active_record/errors.rb#500
class ActiveRecord::TransactionIsolationError < ::ActiveRecord::ActiveRecordError; end

# source://activerecord//lib/active_record/errors.rb#523
class ActiveRecord::TransactionRollbackError < ::ActiveRecord::StatementInvalid; end

# source://activerecord//lib/active_record/transactions.rb#5
module ActiveRecord::Transactions
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Transactions::ClassMethods

  # source://activerecord//lib/active_record/transactions.rb#16
  def _new_record_before_last_commit; end

  # source://activerecord//lib/active_record/transactions.rb#16
  def _new_record_before_last_commit=(_arg0); end

  # source://activerecord//lib/active_record/transactions.rb#373
  def before_committed!; end

  # source://activerecord//lib/active_record/transactions.rb#381
  def committed!(should_run_callbacks: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/transactions.rb#357
  def destroy; end

  # source://activerecord//lib/active_record/transactions.rb#393
  def rolledback!(force_restore_state: T.unsafe(nil), should_run_callbacks: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/transactions.rb#361
  def save(**_arg0); end

  # source://activerecord//lib/active_record/transactions.rb#365
  def save!(**_arg0); end

  # source://activerecord//lib/active_record/transactions.rb#369
  def touch(*_arg0, **_arg1); end

  # source://activerecord//lib/active_record/transactions.rb#353
  def transaction(**options, &block); end

  # source://activerecord//lib/active_record/transactions.rb#425
  def trigger_transactional_callbacks?; end

  # source://activerecord//lib/active_record/transactions.rb#409
  def with_transaction_returning_status; end

  private

  # source://activerecord//lib/active_record/transactions.rb#431
  def _committed_already_called; end

  # source://activerecord//lib/active_record/transactions.rb#431
  def _trigger_destroy_callback; end

  # source://activerecord//lib/active_record/transactions.rb#431
  def _trigger_update_callback; end

  # source://activerecord//lib/active_record/transactions.rb#513
  def add_to_transaction(ensure_finalize = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/transactions.rb#461
  def clear_transaction_record_state; end

  # source://activerecord//lib/active_record/transactions.rb#519
  def has_transactional_callbacks?; end

  # source://activerecord//lib/active_record/transactions.rb#433
  def init_internals; end

  # source://activerecord//lib/active_record/transactions.rb#441
  def remember_transaction_record_state; end

  # source://activerecord//lib/active_record/transactions.rb#468
  def restore_transaction_record_state(force_restore_state = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/transactions.rb#498
  def transaction_include_any_action?(actions); end
end

# source://activerecord//lib/active_record/transactions.rb#8
ActiveRecord::Transactions::ACTIONS = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/active_record/transactions.rb#230
module ActiveRecord::Transactions::ClassMethods
  # source://activerecord//lib/active_record/transactions.rb#266
  def after_commit(*args, &block); end

  # source://activerecord//lib/active_record/transactions.rb#278
  def after_create_commit(*args, &block); end

  # source://activerecord//lib/active_record/transactions.rb#290
  def after_destroy_commit(*args, &block); end

  # source://activerecord//lib/active_record/transactions.rb#298
  def after_rollback(*args, &block); end

  # source://activerecord//lib/active_record/transactions.rb#272
  def after_save_commit(*args, &block); end

  # source://activerecord//lib/active_record/transactions.rb#284
  def after_update_commit(*args, &block); end

  # source://activerecord//lib/active_record/transactions.rb#249
  def before_commit(*args, &block); end

  # source://activerecord//lib/active_record/transactions.rb#245
  def current_transaction; end

  # source://activerecord//lib/active_record/transactions.rb#305
  def set_callback(name, *filter_list, &block); end

  # source://activerecord//lib/active_record/transactions.rb#232
  def transaction(**options, &block); end

  private

  # source://activerecord//lib/active_record/transactions.rb#345
  def assert_valid_transaction_action(actions); end

  # source://activerecord//lib/active_record/transactions.rb#323
  def prepend_option; end

  # source://activerecord//lib/active_record/transactions.rb#331
  def set_options_for_callbacks!(args, enforced_options = T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/translation.rb#4
module ActiveRecord::Translation
  # source://activerecord//lib/active_record/translation.rb#18
  def i18n_scope; end

  # source://activerecord//lib/active_record/translation.rb#6
  def lookup_ancestors; end
end

# source://activerecord//lib/active_record/type/internal/timezone.rb#4
module ActiveRecord::Type
  class << self
    # source://activerecord//lib/active_record/type.rb#49
    def adapter_name_from(model); end

    # source://activerecord//lib/active_record/type.rb#27
    def add_modifier(*_arg0, **_arg1, &_arg2); end

    # source://activerecord//lib/active_record/type.rb#45
    def default_value; end

    # source://activerecord//lib/active_record/type.rb#41
    def lookup(*args, adapter: T.unsafe(nil), **kwargs); end

    # source://activerecord//lib/active_record/type.rb#37
    def register(type_name, klass = T.unsafe(nil), **options, &block); end

    # source://activerecord//lib/active_record/type.rb#26
    def registry; end

    # source://activerecord//lib/active_record/type.rb#26
    def registry=(_arg0); end

    private

    # source://activerecord//lib/active_record/type.rb#54
    def current_adapter_name; end
  end
end

# source://activerecord//lib/active_record/type/adapter_specific_registry.rb#6
class ActiveRecord::Type::AdapterSpecificRegistry
  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#7
  def initialize; end

  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#15
  def add_modifier(options, klass, **args); end

  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#27
  def lookup(symbol, *args, **kwargs); end

  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#19
  def register(type_name, klass = T.unsafe(nil), **options, &block); end

  private

  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#40
  def find_registration(symbol, *args, **kwargs); end

  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#11
  def initialize_copy(other); end

  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#38
  def registrations; end
end

# source://activerecord//lib/active_record/type.rb#59
ActiveRecord::Type::BigInteger = ActiveModel::Type::BigInteger

# source://activerecord//lib/active_record/type.rb#60
ActiveRecord::Type::Binary = ActiveModel::Type::Binary

# source://activerecord//lib/active_record/type.rb#61
ActiveRecord::Type::Boolean = ActiveModel::Type::Boolean

# source://activerecord//lib/active_record/type/date.rb#5
class ActiveRecord::Type::Date < ::ActiveModel::Type::Date
  include ::ActiveRecord::Type::Internal::Timezone
end

# source://activerecord//lib/active_record/type/date_time.rb#5
class ActiveRecord::Type::DateTime < ::ActiveModel::Type::DateTime
  include ::ActiveRecord::Type::Internal::Timezone
end

# source://activerecord//lib/active_record/type.rb#62
ActiveRecord::Type::Decimal = ActiveModel::Type::Decimal

# source://activerecord//lib/active_record/type/decimal_without_scale.rb#5
class ActiveRecord::Type::DecimalWithoutScale < ::ActiveModel::Type::BigInteger
  # source://activerecord//lib/active_record/type/decimal_without_scale.rb#6
  def type; end

  # source://activerecord//lib/active_record/type/decimal_without_scale.rb#10
  def type_cast_for_schema(value); end
end

# source://activerecord//lib/active_record/type/adapter_specific_registry.rb#110
class ActiveRecord::Type::DecorationRegistration < ::ActiveRecord::Type::Registration
  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#111
  def initialize(options, klass, adapter: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#117
  def call(registry, *args, **kwargs); end

  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#122
  def matches?(*args, **kwargs); end

  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#126
  def priority; end

  private

  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#131
  def klass; end

  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#133
  def matches_options?(**kwargs); end

  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#131
  def options; end
end

# source://activerecord//lib/active_record/type.rb#63
ActiveRecord::Type::Float = ActiveModel::Type::Float

# source://activerecord//lib/active_record/type/hash_lookup_type_map.rb#5
class ActiveRecord::Type::HashLookupTypeMap
  # source://activerecord//lib/active_record/type/hash_lookup_type_map.rb#6
  def initialize(parent = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/type/hash_lookup_type_map.rb#39
  def alias_type(type, alias_type); end

  # source://activerecord//lib/active_record/type/hash_lookup_type_map.rb#34
  def clear; end

  # source://activerecord//lib/active_record/type/hash_lookup_type_map.rb#17
  def fetch(lookup_key, *args, &block); end

  # source://activerecord//lib/active_record/type/hash_lookup_type_map.rb#43
  def key?(key); end

  # source://activerecord//lib/active_record/type/hash_lookup_type_map.rb#47
  def keys; end

  # source://activerecord//lib/active_record/type/hash_lookup_type_map.rb#13
  def lookup(lookup_key, *args); end

  # source://activerecord//lib/active_record/type/hash_lookup_type_map.rb#23
  def register_type(key, value = T.unsafe(nil), &block); end

  private

  # source://activerecord//lib/active_record/type/hash_lookup_type_map.rb#52
  def perform_fetch(type, *args, &block); end
end

# source://activerecord//lib/active_record/type.rb#65
ActiveRecord::Type::ImmutableString = ActiveModel::Type::ImmutableString

# source://activerecord//lib/active_record/type.rb#64
ActiveRecord::Type::Integer = ActiveModel::Type::Integer

# source://activerecord//lib/active_record/type/internal/timezone.rb#5
module ActiveRecord::Type::Internal; end

# source://activerecord//lib/active_record/type/internal/timezone.rb#6
module ActiveRecord::Type::Internal::Timezone
  # source://activerecord//lib/active_record/type/internal/timezone.rb#7
  def initialize(timezone: T.unsafe(nil), **kwargs); end

  # source://activerecord//lib/active_record/type/internal/timezone.rb#16
  def default_timezone; end

  # source://activerecord//lib/active_record/type/internal/timezone.rb#12
  def is_utc?; end
end

# source://activerecord//lib/active_record/type/json.rb#5
class ActiveRecord::Type::Json < ::ActiveModel::Type::Value
  include ::ActiveModel::Type::Helpers::Mutable

  # source://activerecord//lib/active_record/type/json.rb#25
  def accessor; end

  # source://activerecord//lib/active_record/type/json.rb#21
  def changed_in_place?(raw_old_value, new_value); end

  # source://activerecord//lib/active_record/type/json.rb#12
  def deserialize(value); end

  # source://activerecord//lib/active_record/type/json.rb#17
  def serialize(value); end

  # source://activerecord//lib/active_record/type/json.rb#8
  def type; end
end

# source://activerecord//lib/active_record/type/adapter_specific_registry.rb#47
class ActiveRecord::Type::Registration
  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#48
  def initialize(name, block, adapter: T.unsafe(nil), override: T.unsafe(nil)); end

  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#63
  def <=>(other); end

  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#55
  def call(_registry, *args, adapter: T.unsafe(nil), **kwargs); end

  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#59
  def matches?(type_name, *args, **kwargs); end

  protected

  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#73
  def adapter; end

  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#73
  def block; end

  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#73
  def name; end

  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#73
  def override; end

  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#75
  def priority; end

  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#86
  def priority_except_adapter; end

  private

  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#95
  def conflicts_with?(other); end

  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#104
  def has_adapter_conflict?(other); end

  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#91
  def matches_adapter?(adapter: T.unsafe(nil), **_arg1); end

  # source://activerecord//lib/active_record/type/adapter_specific_registry.rb#100
  def same_priority_except_adapter?(other); end
end

# source://activerecord//lib/active_record/type/serialized.rb#5
class ActiveRecord::Type::Serialized
  include ::ActiveModel::Type::Helpers::Mutable

  # source://activerecord//lib/active_record/type/serialized.rb#12
  def initialize(subtype, coder); end

  # source://activerecord//lib/active_record/type/serialized.rb#42
  def accessor; end

  # source://activerecord//lib/active_record/type/serialized.rb#46
  def assert_valid_value(value); end

  # source://activerecord//lib/active_record/type/serialized.rb#35
  def changed_in_place?(raw_old_value, value); end

  # source://activerecord//lib/active_record/type/serialized.rb#10
  def coder; end

  # source://activerecord//lib/active_record/type/serialized.rb#18
  def deserialize(value); end

  # source://activerecord//lib/active_record/type/serialized.rb#52
  def force_equality?(value); end

  def inspect; end

  # source://activerecord//lib/active_record/type/serialized.rb#26
  def serialize(value); end

  # source://activerecord//lib/active_record/type/serialized.rb#56
  def serialized?; end

  # source://activerecord//lib/active_record/type/serialized.rb#10
  def subtype; end

  private

  # source://activerecord//lib/active_record/type/serialized.rb#61
  def default_value?(value); end

  # source://activerecord//lib/active_record/type/serialized.rb#65
  def encoded(value); end
end

# source://activerecord//lib/active_record/type.rb#66
ActiveRecord::Type::String = ActiveModel::Type::String

# source://activerecord//lib/active_record/type/text.rb#5
class ActiveRecord::Type::Text < ::ActiveModel::Type::String
  # source://activerecord//lib/active_record/type/text.rb#6
  def type; end
end

# source://activerecord//lib/active_record/type/time.rb#5
class ActiveRecord::Type::Time < ::ActiveModel::Type::Time
  include ::ActiveRecord::Type::Internal::Timezone

  # source://activerecord//lib/active_record/type/time.rb#11
  def serialize(value); end

  # source://activerecord//lib/active_record/type/time.rb#20
  def serialize_cast_value(value); end

  private

  # source://activerecord//lib/active_record/type/time.rb#25
  def cast_value(value); end
end

# source://activerecord//lib/active_record/type/time.rb#8
class ActiveRecord::Type::Time::Value; end

# source://activerecord//lib/active_record/type/type_map.rb#7
class ActiveRecord::Type::TypeMap
  # source://activerecord//lib/active_record/type/type_map.rb#8
  def initialize(parent = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/type/type_map.rb#35
  def alias_type(key, target_key); end

  # source://activerecord//lib/active_record/type/type_map.rb#18
  def fetch(lookup_key, &block); end

  # source://activerecord//lib/active_record/type/type_map.rb#14
  def lookup(lookup_key); end

  # source://activerecord//lib/active_record/type/type_map.rb#24
  def register_type(key, value = T.unsafe(nil), &block); end

  protected

  # source://activerecord//lib/active_record/type/type_map.rb#43
  def perform_fetch(lookup_key, &block); end
end

# source://activerecord//lib/active_record/type/unsigned_integer.rb#5
class ActiveRecord::Type::UnsignedInteger < ::ActiveModel::Type::Integer
  private

  # source://activerecord//lib/active_record/type/unsigned_integer.rb#7
  def max_value; end

  # source://activerecord//lib/active_record/type/unsigned_integer.rb#11
  def min_value; end
end

# source://activerecord//lib/active_record/type.rb#67
ActiveRecord::Type::Value = ActiveModel::Type::Value

# source://activerecord//lib/active_record/type_caster/map.rb#4
module ActiveRecord::TypeCaster; end

# source://activerecord//lib/active_record/type_caster/connection.rb#5
class ActiveRecord::TypeCaster::Connection
  # source://activerecord//lib/active_record/type_caster/connection.rb#6
  def initialize(klass, table_name); end

  # source://activerecord//lib/active_record/type_caster/connection.rb#11
  def type_cast_for_database(attr_name, value); end

  # source://activerecord//lib/active_record/type_caster/connection.rb#16
  def type_for_attribute(attr_name); end

  private

  # source://activerecord//lib/active_record/type_caster/connection.rb#30
  def table_name; end
end

# source://activerecord//lib/active_record/type_caster/map.rb#5
class ActiveRecord::TypeCaster::Map
  # source://activerecord//lib/active_record/type_caster/map.rb#6
  def initialize(klass); end

  # source://activerecord//lib/active_record/type_caster/map.rb#10
  def type_cast_for_database(attr_name, value); end

  # source://activerecord//lib/active_record/type_caster/map.rb#15
  def type_for_attribute(name); end

  private

  # source://activerecord//lib/active_record/type_caster/map.rb#20
  def klass; end
end

# source://activerecord//lib/active_record/type/adapter_specific_registry.rb#141
class ActiveRecord::TypeConflictError < ::StandardError; end

# source://activerecord//lib/active_record/errors.rb#431
ActiveRecord::UnknownAttributeError = ActiveModel::UnknownAttributeError

# source://activerecord//lib/active_record/errors.rb#597
class ActiveRecord::UnknownAttributeReference < ::ActiveRecord::ActiveRecordError; end

# source://activerecord//lib/active_record/migration.rb#114
class ActiveRecord::UnknownMigrationVersionError < ::ActiveRecord::MigrationError
  # source://activerecord//lib/active_record/migration.rb#115
  def initialize(version = T.unsafe(nil)); end
end

# source://activerecord//lib/active_record/errors.rb#459
class ActiveRecord::UnknownPrimaryKey < ::ActiveRecord::ActiveRecordError
  # source://activerecord//lib/active_record/errors.rb#462
  def initialize(model = T.unsafe(nil), description = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/errors.rb#460
  def model; end
end

# source://activerecord//lib/active_record/errors.rb#485
class ActiveRecord::UnmodifiableRelation < ::ActiveRecord::ActiveRecordError; end

# source://activerecord//lib/active_record/gem_version.rb#9
module ActiveRecord::VERSION; end

# source://activerecord//lib/active_record/gem_version.rb#10
ActiveRecord::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://activerecord//lib/active_record/gem_version.rb#11
ActiveRecord::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://activerecord//lib/active_record/gem_version.rb#13
ActiveRecord::VERSION::PRE = T.let(T.unsafe(nil), T.untyped)

# source://activerecord//lib/active_record/gem_version.rb#15
ActiveRecord::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://activerecord//lib/active_record/gem_version.rb#12
ActiveRecord::VERSION::TINY = T.let(T.unsafe(nil), Integer)

# source://activerecord//lib/active_record/validations.rb#40
module ActiveRecord::Validations
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Validations::ClassMethods

  # source://activerecord//lib/active_record/validations.rb#77
  def custom_validation_context?; end

  # source://activerecord//lib/active_record/validations.rb#47
  def save(**options); end

  # source://activerecord//lib/active_record/validations.rb#53
  def save!(**options); end

  # source://activerecord//lib/active_record/validations.rb#69
  def valid?(context = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/validations.rb#69
  def validate(context = T.unsafe(nil)); end

  private

  # source://activerecord//lib/active_record/validations.rb#82
  def default_validation_context; end

  # source://activerecord//lib/active_record/validations.rb#90
  def perform_validations(options = T.unsafe(nil)); end

  # source://activerecord//lib/active_record/validations.rb#86
  def raise_validation_error; end
end

# source://activerecord//lib/active_record/validations/absence.rb#5
class ActiveRecord::Validations::AbsenceValidator < ::ActiveModel::Validations::AbsenceValidator
  # source://activerecord//lib/active_record/validations/absence.rb#6
  def validate_each(record, attribute, association_or_value); end
end

# source://activerecord//lib/active_record/validations/associated.rb#5
class ActiveRecord::Validations::AssociatedValidator < ::ActiveModel::EachValidator
  # source://activerecord//lib/active_record/validations/associated.rb#6
  def validate_each(record, attribute, value); end

  private

  # source://activerecord//lib/active_record/validations/associated.rb#19
  def record_validation_context_for_association(record); end

  # source://activerecord//lib/active_record/validations/associated.rb#15
  def valid_object?(record, context); end
end

# source://activerecord//lib/active_record/validations/associated.rb#24
module ActiveRecord::Validations::ClassMethods
  # source://activerecord//lib/active_record/validations/absence.rb#20
  def validates_absence_of(*attr_names); end

  # source://activerecord//lib/active_record/validations/associated.rb#60
  def validates_associated(*attr_names); end

  # source://activerecord//lib/active_record/validations/length.rb#19
  def validates_length_of(*attr_names); end

  # source://activerecord//lib/active_record/validations/numericality.rb#31
  def validates_numericality_of(*attr_names); end

  # source://activerecord//lib/active_record/validations/presence.rb#40
  def validates_presence_of(*attr_names); end

  # source://activerecord//lib/active_record/validations/length.rb#19
  def validates_size_of(*attr_names); end

  # source://activerecord//lib/active_record/validations/uniqueness.rb#291
  def validates_uniqueness_of(*attr_names); end
end

# source://activerecord//lib/active_record/validations/length.rb#5
class ActiveRecord::Validations::LengthValidator < ::ActiveModel::Validations::LengthValidator
  # source://activerecord//lib/active_record/validations/length.rb#6
  def validate_each(record, attribute, association_or_value); end
end

# source://activerecord//lib/active_record/validations/numericality.rb#5
class ActiveRecord::Validations::NumericalityValidator < ::ActiveModel::Validations::NumericalityValidator
  # source://activerecord//lib/active_record/validations/numericality.rb#6
  def validate_each(record, attribute, value, precision: T.unsafe(nil), scale: T.unsafe(nil)); end

  private

  # source://activerecord//lib/active_record/validations/numericality.rb#13
  def column_precision_for(record, attribute); end

  # source://activerecord//lib/active_record/validations/numericality.rb#17
  def column_scale_for(record, attribute); end
end

# source://activerecord//lib/active_record/validations/presence.rb#5
class ActiveRecord::Validations::PresenceValidator < ::ActiveModel::Validations::PresenceValidator
  # source://activerecord//lib/active_record/validations/presence.rb#6
  def validate_each(record, attribute, association_or_value); end
end

# source://activerecord//lib/active_record/validations/uniqueness.rb#5
class ActiveRecord::Validations::UniquenessValidator < ::ActiveModel::EachValidator
  # source://activerecord//lib/active_record/validations/uniqueness.rb#6
  def initialize(options); end

  # source://activerecord//lib/active_record/validations/uniqueness.rb#20
  def validate_each(record, attribute, value); end

  private

  # source://activerecord//lib/active_record/validations/uniqueness.rb#112
  def build_relation(klass, attribute, value); end

  # source://activerecord//lib/active_record/validations/uniqueness.rb#83
  def covered_by_unique_index?(klass, record, attribute, scope); end

  # source://activerecord//lib/active_record/validations/uniqueness.rb#60
  def find_finder_class_for(record); end

  # source://activerecord//lib/active_record/validations/uniqueness.rb#147
  def map_enum_attribute(klass, attribute, value); end

  # source://activerecord//lib/active_record/validations/uniqueness.rb#98
  def resolve_attributes(record, attributes); end

  # source://activerecord//lib/active_record/validations/uniqueness.rb#134
  def scope_relation(record, relation); end

  # source://activerecord//lib/active_record/validations/uniqueness.rb#70
  def validation_needed?(klass, record, attribute); end
end

# source://activerecord//lib/active_record/errors.rb#284
class ActiveRecord::ValueTooLong < ::ActiveRecord::StatementInvalid; end

# source://activerecord//lib/active_record/errors.rb#212
class ActiveRecord::WrappedDatabaseException < ::ActiveRecord::StatementInvalid; end

# source://activerecord//lib/arel/errors.rb#3
module Arel
  class << self
    # source://activerecord//lib/arel.rb#64
    def arel_node?(value); end

    # source://activerecord//lib/arel.rb#68
    def fetch_attribute(value, &block); end

    # source://activerecord//lib/arel.rb#52
    def sql(sql_string, *positional_binds, retryable: T.unsafe(nil), **named_binds); end

    # source://activerecord//lib/arel.rb#60
    def star; end
  end
end

# source://activerecord//lib/arel/alias_predication.rb#4
module Arel::AliasPredication
  # source://activerecord//lib/arel/alias_predication.rb#5
  def as(other); end
end

# source://activerecord//lib/arel/errors.rb#4
class Arel::ArelError < ::StandardError; end

# source://activerecord//lib/arel/attributes/attribute.rb#32
Arel::Attribute = Arel::Attributes::Attribute

# source://activerecord//lib/arel/attributes/attribute.rb#4
module Arel::Attributes; end

# source://activerecord//lib/arel/attributes/attribute.rb#5
class Arel::Attributes::Attribute < ::Struct
  include ::Arel::Expressions
  include ::Arel::Predications
  include ::Arel::AliasPredication
  include ::Arel::OrderPredications
  include ::Arel::Math

  # source://activerecord//lib/arel/attributes/attribute.rb#26
  def able_to_type_cast?; end

  # source://activerecord//lib/arel/attributes/attribute.rb#18
  def lower; end

  # source://activerecord//lib/arel/attributes/attribute.rb#22
  def type_cast_for_database(value); end

  # source://activerecord//lib/arel/attributes/attribute.rb#12
  def type_caster; end
end

# source://activerecord//lib/arel/errors.rb#10
class Arel::BindError < ::Arel::ArelError
  # source://activerecord//lib/arel/errors.rb#11
  def initialize(message, sql = T.unsafe(nil)); end
end

# source://activerecord//lib/arel/collectors/plain_string.rb#4
module Arel::Collectors; end

# source://activerecord//lib/arel/collectors/bind.rb#5
class Arel::Collectors::Bind
  # source://activerecord//lib/arel/collectors/bind.rb#8
  def initialize; end

  # source://activerecord//lib/arel/collectors/bind.rb#12
  def <<(str); end

  # source://activerecord//lib/arel/collectors/bind.rb#16
  def add_bind(bind); end

  # source://activerecord//lib/arel/collectors/bind.rb#21
  def add_binds(binds, proc_for_binds = T.unsafe(nil)); end

  # source://activerecord//lib/arel/collectors/bind.rb#6
  def retryable; end

  # source://activerecord//lib/arel/collectors/bind.rb#6
  def retryable=(_arg0); end

  # source://activerecord//lib/arel/collectors/bind.rb#26
  def value; end
end

# source://activerecord//lib/arel/collectors/composite.rb#5
class Arel::Collectors::Composite
  # source://activerecord//lib/arel/collectors/composite.rb#9
  def initialize(left, right); end

  # source://activerecord//lib/arel/collectors/composite.rb#20
  def <<(str); end

  # source://activerecord//lib/arel/collectors/composite.rb#26
  def add_bind(bind, &block); end

  # source://activerecord//lib/arel/collectors/composite.rb#32
  def add_binds(binds, proc_for_binds = T.unsafe(nil), &block); end

  # source://activerecord//lib/arel/collectors/composite.rb#6
  def preparable; end

  # source://activerecord//lib/arel/collectors/composite.rb#6
  def preparable=(_arg0); end

  # source://activerecord//lib/arel/collectors/composite.rb#7
  def retryable; end

  # source://activerecord//lib/arel/collectors/composite.rb#14
  def retryable=(retryable); end

  # source://activerecord//lib/arel/collectors/composite.rb#38
  def value; end

  private

  # source://activerecord//lib/arel/collectors/composite.rb#43
  def left; end

  # source://activerecord//lib/arel/collectors/composite.rb#43
  def right; end
end

# source://activerecord//lib/arel/collectors/plain_string.rb#5
class Arel::Collectors::PlainString
  # source://activerecord//lib/arel/collectors/plain_string.rb#6
  def initialize; end

  # source://activerecord//lib/arel/collectors/plain_string.rb#14
  def <<(str); end

  # source://activerecord//lib/arel/collectors/plain_string.rb#10
  def value; end
end

# source://activerecord//lib/arel/collectors/sql_string.rb#7
class Arel::Collectors::SQLString < ::Arel::Collectors::PlainString
  # source://activerecord//lib/arel/collectors/sql_string.rb#10
  def initialize(*_arg0); end

  # source://activerecord//lib/arel/collectors/sql_string.rb#15
  def add_bind(bind); end

  # source://activerecord//lib/arel/collectors/sql_string.rb#21
  def add_binds(binds, proc_for_binds = T.unsafe(nil), &block); end

  # source://activerecord//lib/arel/collectors/sql_string.rb#8
  def preparable; end

  # source://activerecord//lib/arel/collectors/sql_string.rb#8
  def preparable=(_arg0); end

  # source://activerecord//lib/arel/collectors/sql_string.rb#8
  def retryable; end

  # source://activerecord//lib/arel/collectors/sql_string.rb#8
  def retryable=(_arg0); end
end

# source://activerecord//lib/arel/collectors/substitute_binds.rb#5
class Arel::Collectors::SubstituteBinds
  # source://activerecord//lib/arel/collectors/substitute_binds.rb#8
  def initialize(quoter, delegate_collector); end

  # source://activerecord//lib/arel/collectors/substitute_binds.rb#13
  def <<(str); end

  # source://activerecord//lib/arel/collectors/substitute_binds.rb#18
  def add_bind(bind); end

  # source://activerecord//lib/arel/collectors/substitute_binds.rb#23
  def add_binds(binds, proc_for_binds = T.unsafe(nil)); end

  # source://activerecord//lib/arel/collectors/substitute_binds.rb#6
  def preparable; end

  # source://activerecord//lib/arel/collectors/substitute_binds.rb#6
  def preparable=(_arg0); end

  # source://activerecord//lib/arel/collectors/substitute_binds.rb#6
  def retryable; end

  # source://activerecord//lib/arel/collectors/substitute_binds.rb#6
  def retryable=(_arg0); end

  # source://activerecord//lib/arel/collectors/substitute_binds.rb#27
  def value; end

  private

  # source://activerecord//lib/arel/collectors/substitute_binds.rb#32
  def delegate; end

  # source://activerecord//lib/arel/collectors/substitute_binds.rb#32
  def quoter; end
end

# source://activerecord//lib/arel/crud.rb#6
module Arel::Crud
  # source://activerecord//lib/arel/crud.rb#36
  def compile_delete(key = T.unsafe(nil), having_clause = T.unsafe(nil), group_values_columns = T.unsafe(nil)); end

  # source://activerecord//lib/arel/crud.rb#7
  def compile_insert(values); end

  # source://activerecord//lib/arel/crud.rb#17
  def compile_update(values, key = T.unsafe(nil), having_clause = T.unsafe(nil), group_values_columns = T.unsafe(nil)); end

  # source://activerecord//lib/arel/crud.rb#13
  def create_insert; end
end

# source://activerecord//lib/arel/delete_manager.rb#4
class Arel::DeleteManager < ::Arel::TreeManager
  include ::Arel::TreeManager::StatementMethods

  # source://activerecord//lib/arel/delete_manager.rb#7
  def initialize(table = T.unsafe(nil)); end

  # source://activerecord//lib/arel/delete_manager.rb#11
  def from(relation); end

  # source://activerecord//lib/arel/delete_manager.rb#16
  def group(columns); end

  # source://activerecord//lib/arel/delete_manager.rb#27
  def having(expr); end
end

# source://activerecord//lib/arel/errors.rb#7
class Arel::EmptyJoinError < ::Arel::ArelError; end

# source://activerecord//lib/arel/expressions.rb#4
module Arel::Expressions
  # source://activerecord//lib/arel/expressions.rb#21
  def average; end

  # source://activerecord//lib/arel/expressions.rb#5
  def count(distinct = T.unsafe(nil)); end

  # source://activerecord//lib/arel/expressions.rb#25
  def extract(field); end

  # source://activerecord//lib/arel/expressions.rb#13
  def maximum; end

  # source://activerecord//lib/arel/expressions.rb#17
  def minimum; end

  # source://activerecord//lib/arel/expressions.rb#9
  def sum; end
end

# source://activerecord//lib/arel/factory_methods.rb#6
module Arel::FactoryMethods
  # source://activerecord//lib/arel/factory_methods.rb#49
  def cast(name, type); end

  # source://activerecord//lib/arel/factory_methods.rb#45
  def coalesce(*exprs); end

  # source://activerecord//lib/arel/factory_methods.rb#27
  def create_and(clauses); end

  # source://activerecord//lib/arel/factory_methods.rb#11
  def create_false; end

  # source://activerecord//lib/arel/factory_methods.rb#19
  def create_join(to, constraint = T.unsafe(nil), klass = T.unsafe(nil)); end

  # source://activerecord//lib/arel/factory_methods.rb#31
  def create_on(expr); end

  # source://activerecord//lib/arel/factory_methods.rb#23
  def create_string_join(to); end

  # source://activerecord//lib/arel/factory_methods.rb#15
  def create_table_alias(relation, name); end

  # source://activerecord//lib/arel/factory_methods.rb#7
  def create_true; end

  # source://activerecord//lib/arel/factory_methods.rb#35
  def grouping(expr); end

  # source://activerecord//lib/arel/factory_methods.rb#41
  def lower(column); end
end

# source://activerecord//lib/arel/filter_predications.rb#4
module Arel::FilterPredications
  # source://activerecord//lib/arel/filter_predications.rb#5
  def filter(expr); end
end

# source://activerecord//lib/arel/insert_manager.rb#4
class Arel::InsertManager < ::Arel::TreeManager
  # source://activerecord//lib/arel/insert_manager.rb#5
  def initialize(table = T.unsafe(nil)); end

  # source://activerecord//lib/arel/insert_manager.rb#14
  def columns; end

  # source://activerecord//lib/arel/insert_manager.rb#40
  def create_values(values); end

  # source://activerecord//lib/arel/insert_manager.rb#44
  def create_values_list(rows); end

  # source://activerecord//lib/arel/insert_manager.rb#21
  def insert(fields); end

  # source://activerecord//lib/arel/insert_manager.rb#9
  def into(table); end

  # source://activerecord//lib/arel/insert_manager.rb#17
  def select(select); end

  # source://activerecord//lib/arel/insert_manager.rb#15
  def values=(val); end
end

# source://activerecord//lib/arel/math.rb#4
module Arel::Math
  # source://activerecord//lib/arel/math.rb#21
  def &(other); end

  # source://activerecord//lib/arel/math.rb#5
  def *(other); end

  # source://activerecord//lib/arel/math.rb#9
  def +(other); end

  # source://activerecord//lib/arel/math.rb#13
  def -(other); end

  # source://activerecord//lib/arel/math.rb#17
  def /(other); end

  # source://activerecord//lib/arel/math.rb#33
  def <<(other); end

  # source://activerecord//lib/arel/math.rb#37
  def >>(other); end

  # source://activerecord//lib/arel/math.rb#29
  def ^(other); end

  # source://activerecord//lib/arel/math.rb#25
  def |(other); end

  # source://activerecord//lib/arel/math.rb#41
  def ~; end
end

# source://activerecord//lib/arel/nodes/node.rb#4
module Arel::Nodes
  class << self
    # source://activerecord//lib/arel/nodes/casted.rb#48
    def build_quoted(other, attribute = T.unsafe(nil)); end
  end
end

# source://activerecord//lib/arel/nodes/infix_operation.rb#32
class Arel::Nodes::Addition < ::Arel::Nodes::InfixOperation
  # source://activerecord//lib/arel/nodes/infix_operation.rb#33
  def initialize(left, right); end
end

# source://activerecord//lib/arel/nodes/nary.rb#36
class Arel::Nodes::And < ::Arel::Nodes::Nary; end

# source://activerecord//lib/arel/nodes/binary.rb#42
class Arel::Nodes::As < ::Arel::Nodes::Binary
  # source://activerecord//lib/arel/nodes/binary.rb#43
  def to_cte; end
end

# source://activerecord//lib/arel/nodes/ascending.rb#5
class Arel::Nodes::Ascending < ::Arel::Nodes::Ordering
  # source://activerecord//lib/arel/nodes/ascending.rb#14
  def ascending?; end

  # source://activerecord//lib/arel/nodes/ascending.rb#18
  def descending?; end

  # source://activerecord//lib/arel/nodes/ascending.rb#10
  def direction; end

  # source://activerecord//lib/arel/nodes/ascending.rb#6
  def reverse; end
end

# source://activerecord//lib/arel/nodes/binary.rb#122
class Arel::Nodes::Assignment < ::Arel::Nodes::Binary; end

# source://activerecord//lib/arel/nodes/function.rb#42
class Arel::Nodes::Avg < ::Arel::Nodes::Function; end

# source://activerecord//lib/arel/nodes/binary.rb#48
class Arel::Nodes::Between < ::Arel::Nodes::Binary
  include ::Arel::Nodes::FetchAttribute
end

# source://activerecord//lib/arel/nodes/unary.rb#41
class Arel::Nodes::Bin < ::Arel::Nodes::Unary; end

# source://activerecord//lib/arel/nodes/binary.rb#5
class Arel::Nodes::Binary < ::Arel::Nodes::NodeExpression
  # source://activerecord//lib/arel/nodes/binary.rb#8
  def initialize(left, right); end

  # source://activerecord//lib/arel/nodes/binary.rb#24
  def ==(other); end

  # source://activerecord//lib/arel/nodes/binary.rb#24
  def eql?(other); end

  # source://activerecord//lib/arel/nodes/binary.rb#20
  def hash; end

  # source://activerecord//lib/arel/nodes/binary.rb#6
  def left; end

  # source://activerecord//lib/arel/nodes/binary.rb#6
  def left=(_arg0); end

  # source://activerecord//lib/arel/nodes/binary.rb#6
  def right; end

  # source://activerecord//lib/arel/nodes/binary.rb#6
  def right=(_arg0); end

  private

  # source://activerecord//lib/arel/nodes/binary.rb#14
  def initialize_copy(other); end
end

# source://activerecord//lib/arel/nodes/bind_param.rb#5
class Arel::Nodes::BindParam < ::Arel::Nodes::Node
  # source://activerecord//lib/arel/nodes/bind_param.rb#8
  def initialize(value); end

  # source://activerecord//lib/arel/nodes/bind_param.rb#17
  def ==(other); end

  # source://activerecord//lib/arel/nodes/bind_param.rb#17
  def eql?(other); end

  # source://activerecord//lib/arel/nodes/bind_param.rb#13
  def hash; end

  # source://activerecord//lib/arel/nodes/bind_param.rb#35
  def infinite?; end

  # source://activerecord//lib/arel/nodes/bind_param.rb#23
  def nil?; end

  # source://activerecord//lib/arel/nodes/bind_param.rb#39
  def unboundable?; end

  # source://activerecord//lib/arel/nodes/bind_param.rb#6
  def value; end

  # source://activerecord//lib/arel/nodes/bind_param.rb#27
  def value_before_type_cast; end
end

# source://activerecord//lib/arel/nodes/infix_operation.rb#62
class Arel::Nodes::BitwiseAnd < ::Arel::Nodes::InfixOperation
  # source://activerecord//lib/arel/nodes/infix_operation.rb#63
  def initialize(left, right); end
end

# source://activerecord//lib/arel/nodes/unary_operation.rb#14
class Arel::Nodes::BitwiseNot < ::Arel::Nodes::UnaryOperation
  # source://activerecord//lib/arel/nodes/unary_operation.rb#15
  def initialize(operand); end
end

# source://activerecord//lib/arel/nodes/infix_operation.rb#68
class Arel::Nodes::BitwiseOr < ::Arel::Nodes::InfixOperation
  # source://activerecord//lib/arel/nodes/infix_operation.rb#69
  def initialize(left, right); end
end

# source://activerecord//lib/arel/nodes/infix_operation.rb#80
class Arel::Nodes::BitwiseShiftLeft < ::Arel::Nodes::InfixOperation
  # source://activerecord//lib/arel/nodes/infix_operation.rb#81
  def initialize(left, right); end
end

# source://activerecord//lib/arel/nodes/infix_operation.rb#86
class Arel::Nodes::BitwiseShiftRight < ::Arel::Nodes::InfixOperation
  # source://activerecord//lib/arel/nodes/infix_operation.rb#87
  def initialize(left, right); end
end

# source://activerecord//lib/arel/nodes/infix_operation.rb#74
class Arel::Nodes::BitwiseXor < ::Arel::Nodes::InfixOperation
  # source://activerecord//lib/arel/nodes/infix_operation.rb#75
  def initialize(left, right); end
end

# source://activerecord//lib/arel/nodes/bound_sql_literal.rb#5
class Arel::Nodes::BoundSqlLiteral < ::Arel::Nodes::NodeExpression
  # source://activerecord//lib/arel/nodes/bound_sql_literal.rb#8
  def initialize(sql_with_placeholders, positional_binds, named_binds); end

  # source://activerecord//lib/arel/nodes/bound_sql_literal.rb#54
  def +(other); end

  # source://activerecord//lib/arel/nodes/bound_sql_literal.rb#46
  def ==(other); end

  # source://activerecord//lib/arel/nodes/bound_sql_literal.rb#46
  def eql?(other); end

  # source://activerecord//lib/arel/nodes/bound_sql_literal.rb#42
  def hash; end

  # source://activerecord//lib/arel/nodes/bound_sql_literal.rb#60
  def inspect; end

  # source://activerecord//lib/arel/nodes/bound_sql_literal.rb#6
  def named_binds; end

  # source://activerecord//lib/arel/nodes/bound_sql_literal.rb#6
  def positional_binds; end

  # source://activerecord//lib/arel/nodes/bound_sql_literal.rb#6
  def sql_with_placeholders; end
end

# source://activerecord//lib/arel/nodes/case.rb#5
class Arel::Nodes::Case < ::Arel::Nodes::NodeExpression
  # source://activerecord//lib/arel/nodes/case.rb#8
  def initialize(expression = T.unsafe(nil), default = T.unsafe(nil)); end

  # source://activerecord//lib/arel/nodes/case.rb#40
  def ==(other); end

  # source://activerecord//lib/arel/nodes/case.rb#6
  def case; end

  # source://activerecord//lib/arel/nodes/case.rb#6
  def case=(_arg0); end

  # source://activerecord//lib/arel/nodes/case.rb#6
  def conditions; end

  # source://activerecord//lib/arel/nodes/case.rb#6
  def conditions=(_arg0); end

  # source://activerecord//lib/arel/nodes/case.rb#6
  def default; end

  # source://activerecord//lib/arel/nodes/case.rb#6
  def default=(_arg0); end

  # source://activerecord//lib/arel/nodes/case.rb#24
  def else(expression); end

  # source://activerecord//lib/arel/nodes/case.rb#40
  def eql?(other); end

  # source://activerecord//lib/arel/nodes/case.rb#36
  def hash; end

  # source://activerecord//lib/arel/nodes/case.rb#19
  def then(expression); end

  # source://activerecord//lib/arel/nodes/case.rb#14
  def when(condition, expression = T.unsafe(nil)); end

  private

  # source://activerecord//lib/arel/nodes/case.rb#29
  def initialize_copy(other); end
end

# source://activerecord//lib/arel/nodes/casted.rb#5
class Arel::Nodes::Casted < ::Arel::Nodes::NodeExpression
  # source://activerecord//lib/arel/nodes/casted.rb#9
  def initialize(value, attribute); end

  # source://activerecord//lib/arel/nodes/casted.rb#29
  def ==(other); end

  # source://activerecord//lib/arel/nodes/casted.rb#6
  def attribute; end

  # source://activerecord//lib/arel/nodes/casted.rb#29
  def eql?(other); end

  # source://activerecord//lib/arel/nodes/casted.rb#25
  def hash; end

  # source://activerecord//lib/arel/nodes/casted.rb#15
  def nil?; end

  # source://activerecord//lib/arel/nodes/casted.rb#6
  def value; end

  # source://activerecord//lib/arel/nodes/casted.rb#6
  def value_before_type_cast; end

  # source://activerecord//lib/arel/nodes/casted.rb#17
  def value_for_database; end
end

# source://activerecord//lib/arel/nodes/comment.rb#5
class Arel::Nodes::Comment < ::Arel::Nodes::Node
  # source://activerecord//lib/arel/nodes/comment.rb#8
  def initialize(values); end

  # source://activerecord//lib/arel/nodes/comment.rb#22
  def ==(other); end

  # source://activerecord//lib/arel/nodes/comment.rb#22
  def eql?(other); end

  # source://activerecord//lib/arel/nodes/comment.rb#18
  def hash; end

  # source://activerecord//lib/arel/nodes/comment.rb#6
  def values; end

  private

  # source://activerecord//lib/arel/nodes/comment.rb#13
  def initialize_copy(other); end
end

# source://activerecord//lib/arel/nodes/infix_operation.rb#44
class Arel::Nodes::Concat < ::Arel::Nodes::InfixOperation
  # source://activerecord//lib/arel/nodes/infix_operation.rb#45
  def initialize(left, right); end
end

# source://activerecord//lib/arel/nodes/infix_operation.rb#50
class Arel::Nodes::Contains < ::Arel::Nodes::InfixOperation
  # source://activerecord//lib/arel/nodes/infix_operation.rb#51
  def initialize(left, right); end
end

# source://activerecord//lib/arel/nodes/count.rb#5
class Arel::Nodes::Count < ::Arel::Nodes::Function
  # source://activerecord//lib/arel/nodes/count.rb#6
  def initialize(expr, distinct = T.unsafe(nil), aliaz = T.unsafe(nil)); end
end

# source://activerecord//lib/arel/nodes/cte.rb#5
class Arel::Nodes::Cte < ::Arel::Nodes::Binary
  # source://activerecord//lib/arel/nodes/cte.rb#10
  def initialize(name, relation, materialized: T.unsafe(nil)); end

  # source://activerecord//lib/arel/nodes/cte.rb#19
  def ==(other); end

  # source://activerecord//lib/arel/nodes/cte.rb#19
  def eql?(other); end

  # source://activerecord//lib/arel/nodes/cte.rb#15
  def hash; end

  # source://activerecord//lib/arel/nodes/cte.rb#8
  def materialized; end

  # source://activerecord//lib/arel/nodes/binary.rb#6
  def name; end

  # source://activerecord//lib/arel/nodes/binary.rb#6
  def relation; end

  # source://activerecord//lib/arel/nodes/cte.rb#27
  def to_cte; end

  # source://activerecord//lib/arel/nodes/cte.rb#31
  def to_table; end
end

# source://activerecord//lib/arel/nodes/unary.rb#41
class Arel::Nodes::Cube < ::Arel::Nodes::Unary; end

# source://activerecord//lib/arel/nodes/window.rb#103
class Arel::Nodes::CurrentRow < ::Arel::Nodes::Node
  # source://activerecord//lib/arel/nodes/window.rb#108
  def ==(other); end

  # source://activerecord//lib/arel/nodes/window.rb#108
  def eql?(other); end

  # source://activerecord//lib/arel/nodes/window.rb#104
  def hash; end
end

# source://activerecord//lib/arel/nodes/delete_statement.rb#5
class Arel::Nodes::DeleteStatement < ::Arel::Nodes::Node
  # source://activerecord//lib/arel/nodes/delete_statement.rb#8
  def initialize(relation = T.unsafe(nil), wheres = T.unsafe(nil)); end

  # source://activerecord//lib/arel/nodes/delete_statement.rb#30
  def ==(other); end

  # source://activerecord//lib/arel/nodes/delete_statement.rb#30
  def eql?(other); end

  # source://activerecord//lib/arel/nodes/delete_statement.rb#6
  def groups; end

  # source://activerecord//lib/arel/nodes/delete_statement.rb#6
  def groups=(_arg0); end

  # source://activerecord//lib/arel/nodes/delete_statement.rb#26
  def hash; end

  # source://activerecord//lib/arel/nodes/delete_statement.rb#6
  def havings; end

  # source://activerecord//lib/arel/nodes/delete_statement.rb#6
  def havings=(_arg0); end

  # source://activerecord//lib/arel/nodes/delete_statement.rb#6
  def key; end

  # source://activerecord//lib/arel/nodes/delete_statement.rb#6
  def key=(_arg0); end

  # source://activerecord//lib/arel/nodes/delete_statement.rb#6
  def limit; end

  # source://activerecord//lib/arel/nodes/delete_statement.rb#6
  def limit=(_arg0); end

  # source://activerecord//lib/arel/nodes/delete_statement.rb#6
  def offset; end

  # source://activerecord//lib/arel/nodes/delete_statement.rb#6
  def offset=(_arg0); end

  # source://activerecord//lib/arel/nodes/delete_statement.rb#6
  def orders; end

  # source://activerecord//lib/arel/nodes/delete_statement.rb#6
  def orders=(_arg0); end

  # source://activerecord//lib/arel/nodes/delete_statement.rb#6
  def relation; end

  # source://activerecord//lib/arel/nodes/delete_statement.rb#6
  def relation=(_arg0); end

  # source://activerecord//lib/arel/nodes/delete_statement.rb#6
  def wheres; end

  # source://activerecord//lib/arel/nodes/delete_statement.rb#6
  def wheres=(_arg0); end

  private

  # source://activerecord//lib/arel/nodes/delete_statement.rb#20
  def initialize_copy(other); end
end

# source://activerecord//lib/arel/nodes/descending.rb#5
class Arel::Nodes::Descending < ::Arel::Nodes::Ordering
  # source://activerecord//lib/arel/nodes/descending.rb#14
  def ascending?; end

  # source://activerecord//lib/arel/nodes/descending.rb#18
  def descending?; end

  # source://activerecord//lib/arel/nodes/descending.rb#10
  def direction; end

  # source://activerecord//lib/arel/nodes/descending.rb#6
  def reverse; end
end

# source://activerecord//lib/arel/nodes/terminal.rb#5
class Arel::Nodes::Distinct < ::Arel::Nodes::NodeExpression
  # source://activerecord//lib/arel/nodes/terminal.rb#10
  def ==(other); end

  # source://activerecord//lib/arel/nodes/terminal.rb#10
  def eql?(other); end

  # source://activerecord//lib/arel/nodes/terminal.rb#6
  def hash; end
end

# source://activerecord//lib/arel/nodes/unary.rb#41
class Arel::Nodes::DistinctOn < ::Arel::Nodes::Unary; end

# source://activerecord//lib/arel/nodes/infix_operation.rb#26
class Arel::Nodes::Division < ::Arel::Nodes::InfixOperation
  # source://activerecord//lib/arel/nodes/infix_operation.rb#27
  def initialize(left, right); end
end

# source://activerecord//lib/arel/nodes/matches.rb#16
class Arel::Nodes::DoesNotMatch < ::Arel::Nodes::Matches; end

# source://activerecord//lib/arel/nodes/case.rb#52
class Arel::Nodes::Else < ::Arel::Nodes::Unary; end

# source://activerecord//lib/arel/nodes/equality.rb#5
class Arel::Nodes::Equality < ::Arel::Nodes::Binary
  include ::Arel::Nodes::FetchAttribute

  # source://activerecord//lib/arel/nodes/equality.rb#8
  def equality?; end

  # source://activerecord//lib/arel/nodes/equality.rb#10
  def invert; end
end

# source://activerecord//lib/arel/nodes/binary.rb#122
class Arel::Nodes::Except < ::Arel::Nodes::Binary; end

# source://activerecord//lib/arel/nodes/function.rb#42
class Arel::Nodes::Exists < ::Arel::Nodes::Function; end

# source://activerecord//lib/arel/nodes/extract.rb#5
class Arel::Nodes::Extract < ::Arel::Nodes::Unary
  # source://activerecord//lib/arel/nodes/extract.rb#8
  def initialize(expr, field); end

  # source://activerecord//lib/arel/nodes/extract.rb#17
  def ==(other); end

  # source://activerecord//lib/arel/nodes/extract.rb#17
  def eql?(other); end

  # source://activerecord//lib/arel/nodes/extract.rb#6
  def field; end

  # source://activerecord//lib/arel/nodes/extract.rb#6
  def field=(_arg0); end

  # source://activerecord//lib/arel/nodes/extract.rb#13
  def hash; end
end

# source://activerecord//lib/arel/nodes/false.rb#5
class Arel::Nodes::False < ::Arel::Nodes::NodeExpression
  # source://activerecord//lib/arel/nodes/false.rb#10
  def ==(other); end

  # source://activerecord//lib/arel/nodes/false.rb#10
  def eql?(other); end

  # source://activerecord//lib/arel/nodes/false.rb#6
  def hash; end
end

# source://activerecord//lib/arel/nodes/binary.rb#32
module Arel::Nodes::FetchAttribute
  # source://activerecord//lib/arel/nodes/binary.rb#33
  def fetch_attribute; end
end

# source://activerecord//lib/arel/nodes/filter.rb#5
class Arel::Nodes::Filter < ::Arel::Nodes::Binary
  include ::Arel::WindowPredications
end

# source://activerecord//lib/arel/nodes/window.rb#120
class Arel::Nodes::Following < ::Arel::Nodes::Unary
  # source://activerecord//lib/arel/nodes/window.rb#121
  def initialize(expr = T.unsafe(nil)); end
end

# source://activerecord//lib/arel/nodes/fragments.rb#5
class Arel::Nodes::Fragments < ::Arel::Nodes::Node
  # source://activerecord//lib/arel/nodes/fragments.rb#8
  def initialize(values = T.unsafe(nil)); end

  # source://activerecord//lib/arel/nodes/fragments.rb#22
  def +(other); end

  # source://activerecord//lib/arel/nodes/fragments.rb#28
  def ==(other); end

  # source://activerecord//lib/arel/nodes/fragments.rb#28
  def eql?(other); end

  # source://activerecord//lib/arel/nodes/fragments.rb#18
  def hash; end

  # source://activerecord//lib/arel/nodes/fragments.rb#6
  def values; end

  private

  # source://activerecord//lib/arel/nodes/fragments.rb#13
  def initialize_copy(other); end
end

# source://activerecord//lib/arel/nodes/full_outer_join.rb#5
class Arel::Nodes::FullOuterJoin < ::Arel::Nodes::Join; end

# source://activerecord//lib/arel/nodes/function.rb#5
class Arel::Nodes::Function < ::Arel::Nodes::NodeExpression
  include ::Arel::WindowPredications
  include ::Arel::FilterPredications

  # source://activerecord//lib/arel/nodes/function.rb#10
  def initialize(expr, aliaz = T.unsafe(nil)); end

  # source://activerecord//lib/arel/nodes/function.rb#26
  def ==(other); end

  # source://activerecord//lib/arel/nodes/function.rb#8
  def alias; end

  # source://activerecord//lib/arel/nodes/function.rb#8
  def alias=(_arg0); end

  # source://activerecord//lib/arel/nodes/function.rb#17
  def as(aliaz); end

  # source://activerecord//lib/arel/nodes/function.rb#8
  def distinct; end

  # source://activerecord//lib/arel/nodes/function.rb#8
  def distinct=(_arg0); end

  # source://activerecord//lib/arel/nodes/function.rb#26
  def eql?(other); end

  # source://activerecord//lib/arel/nodes/function.rb#8
  def expressions; end

  # source://activerecord//lib/arel/nodes/function.rb#8
  def expressions=(_arg0); end

  # source://activerecord//lib/arel/nodes/function.rb#22
  def hash; end
end

# source://activerecord//lib/arel/nodes/binary.rb#50
class Arel::Nodes::GreaterThan < ::Arel::Nodes::Binary
  include ::Arel::Nodes::FetchAttribute

  # source://activerecord//lib/arel/nodes/binary.rb#53
  def invert; end
end

# source://activerecord//lib/arel/nodes/binary.rb#58
class Arel::Nodes::GreaterThanOrEqual < ::Arel::Nodes::Binary
  include ::Arel::Nodes::FetchAttribute

  # source://activerecord//lib/arel/nodes/binary.rb#61
  def invert; end
end

# source://activerecord//lib/arel/nodes/unary.rb#41
class Arel::Nodes::Group < ::Arel::Nodes::Unary; end

# source://activerecord//lib/arel/nodes/grouping.rb#5
class Arel::Nodes::Grouping < ::Arel::Nodes::Unary
  # source://activerecord//lib/arel/nodes/grouping.rb#6
  def fetch_attribute(&block); end
end

# source://activerecord//lib/arel/nodes/unary.rb#41
class Arel::Nodes::GroupingElement < ::Arel::Nodes::Unary; end

# source://activerecord//lib/arel/nodes/unary.rb#41
class Arel::Nodes::GroupingSet < ::Arel::Nodes::Unary; end

# source://activerecord//lib/arel/nodes/homogeneous_in.rb#5
class Arel::Nodes::HomogeneousIn < ::Arel::Nodes::Node
  # source://activerecord//lib/arel/nodes/homogeneous_in.rb#8
  def initialize(values, attribute, type); end

  # source://activerecord//lib/arel/nodes/homogeneous_in.rb#18
  def ==(other); end

  # source://activerecord//lib/arel/nodes/homogeneous_in.rb#6
  def attribute; end

  # source://activerecord//lib/arel/nodes/homogeneous_in.rb#39
  def casted_values; end

  # source://activerecord//lib/arel/nodes/homogeneous_in.rb#18
  def eql?(other); end

  # source://activerecord//lib/arel/nodes/homogeneous_in.rb#23
  def equality?; end

  # source://activerecord//lib/arel/nodes/homogeneous_in.rb#54
  def fetch_attribute(&block); end

  # source://activerecord//lib/arel/nodes/homogeneous_in.rb#14
  def hash; end

  # source://activerecord//lib/arel/nodes/homogeneous_in.rb#27
  def invert; end

  # source://activerecord//lib/arel/nodes/homogeneous_in.rb#31
  def left; end

  # source://activerecord//lib/arel/nodes/homogeneous_in.rb#50
  def proc_for_binds; end

  # source://activerecord//lib/arel/nodes/homogeneous_in.rb#35
  def right; end

  # source://activerecord//lib/arel/nodes/homogeneous_in.rb#6
  def type; end

  # source://activerecord//lib/arel/nodes/homogeneous_in.rb#6
  def values; end

  protected

  # source://activerecord//lib/arel/nodes/homogeneous_in.rb#63
  def ivars; end
end

# source://activerecord//lib/arel/nodes/in.rb#5
class Arel::Nodes::In < ::Arel::Nodes::Binary
  include ::Arel::Nodes::FetchAttribute

  # source://activerecord//lib/arel/nodes/in.rb#8
  def equality?; end

  # source://activerecord//lib/arel/nodes/in.rb#10
  def invert; end
end

# source://activerecord//lib/arel/nodes/infix_operation.rb#5
class Arel::Nodes::InfixOperation < ::Arel::Nodes::Binary
  # source://activerecord//lib/arel/nodes/infix_operation.rb#14
  def initialize(operator, left, right); end

  # source://activerecord//lib/arel/nodes/infix_operation.rb#12
  def operator; end
end

# source://activerecord//lib/arel/nodes/inner_join.rb#5
class Arel::Nodes::InnerJoin < ::Arel::Nodes::Join; end

# source://activerecord//lib/arel/nodes/insert_statement.rb#5
class Arel::Nodes::InsertStatement < ::Arel::Nodes::Node
  # source://activerecord//lib/arel/nodes/insert_statement.rb#8
  def initialize(relation = T.unsafe(nil)); end

  # source://activerecord//lib/arel/nodes/insert_statement.rb#27
  def ==(other); end

  # source://activerecord//lib/arel/nodes/insert_statement.rb#6
  def columns; end

  # source://activerecord//lib/arel/nodes/insert_statement.rb#6
  def columns=(_arg0); end

  # source://activerecord//lib/arel/nodes/insert_statement.rb#27
  def eql?(other); end

  # source://activerecord//lib/arel/nodes/insert_statement.rb#23
  def hash; end

  # source://activerecord//lib/arel/nodes/insert_statement.rb#6
  def relation; end

  # source://activerecord//lib/arel/nodes/insert_statement.rb#6
  def relation=(_arg0); end

  # source://activerecord//lib/arel/nodes/insert_statement.rb#6
  def select; end

  # source://activerecord//lib/arel/nodes/insert_statement.rb#6
  def select=(_arg0); end

  # source://activerecord//lib/arel/nodes/insert_statement.rb#6
  def values; end

  # source://activerecord//lib/arel/nodes/insert_statement.rb#6
  def values=(_arg0); end

  private

  # source://activerecord//lib/arel/nodes/insert_statement.rb#16
  def initialize_copy(other); end
end

# source://activerecord//lib/arel/nodes/binary.rb#122
class Arel::Nodes::Intersect < ::Arel::Nodes::Binary; end

# source://activerecord//lib/arel/nodes/binary.rb#82
class Arel::Nodes::IsDistinctFrom < ::Arel::Nodes::Binary
  include ::Arel::Nodes::FetchAttribute

  # source://activerecord//lib/arel/nodes/binary.rb#85
  def invert; end
end

# source://activerecord//lib/arel/nodes/binary.rb#90
class Arel::Nodes::IsNotDistinctFrom < ::Arel::Nodes::Binary
  include ::Arel::Nodes::FetchAttribute

  # source://activerecord//lib/arel/nodes/binary.rb#93
  def invert; end
end

# source://activerecord//lib/arel/nodes/binary.rb#122
class Arel::Nodes::Join < ::Arel::Nodes::Binary; end

# source://activerecord//lib/arel/nodes/join_source.rb#10
class Arel::Nodes::JoinSource < ::Arel::Nodes::Binary
  # source://activerecord//lib/arel/nodes/join_source.rb#11
  def initialize(single_source, joinop = T.unsafe(nil)); end

  # source://activerecord//lib/arel/nodes/join_source.rb#15
  def empty?; end
end

# source://activerecord//lib/arel/nodes/unary.rb#41
class Arel::Nodes::Lateral < ::Arel::Nodes::Unary; end

# source://activerecord//lib/arel/nodes/leading_join.rb#5
class Arel::Nodes::LeadingJoin < ::Arel::Nodes::InnerJoin; end

# source://activerecord//lib/arel/nodes/binary.rb#66
class Arel::Nodes::LessThan < ::Arel::Nodes::Binary
  include ::Arel::Nodes::FetchAttribute

  # source://activerecord//lib/arel/nodes/binary.rb#69
  def invert; end
end

# source://activerecord//lib/arel/nodes/binary.rb#74
class Arel::Nodes::LessThanOrEqual < ::Arel::Nodes::Binary
  include ::Arel::Nodes::FetchAttribute

  # source://activerecord//lib/arel/nodes/binary.rb#77
  def invert; end
end

# source://activerecord//lib/arel/nodes/unary.rb#41
class Arel::Nodes::Limit < ::Arel::Nodes::Unary; end

# source://activerecord//lib/arel/nodes/unary.rb#41
class Arel::Nodes::Lock < ::Arel::Nodes::Unary; end

# source://activerecord//lib/arel/nodes/matches.rb#5
class Arel::Nodes::Matches < ::Arel::Nodes::Binary
  # source://activerecord//lib/arel/nodes/matches.rb#9
  def initialize(left, right, escape = T.unsafe(nil), case_sensitive = T.unsafe(nil)); end

  # source://activerecord//lib/arel/nodes/matches.rb#7
  def case_sensitive; end

  # source://activerecord//lib/arel/nodes/matches.rb#7
  def case_sensitive=(_arg0); end

  # source://activerecord//lib/arel/nodes/matches.rb#6
  def escape; end
end

# source://activerecord//lib/arel/nodes/function.rb#42
class Arel::Nodes::Max < ::Arel::Nodes::Function; end

# source://activerecord//lib/arel/nodes/function.rb#42
class Arel::Nodes::Min < ::Arel::Nodes::Function; end

# source://activerecord//lib/arel/nodes/infix_operation.rb#20
class Arel::Nodes::Multiplication < ::Arel::Nodes::InfixOperation
  # source://activerecord//lib/arel/nodes/infix_operation.rb#21
  def initialize(left, right); end
end

# source://activerecord//lib/arel/nodes/named_function.rb#5
class Arel::Nodes::NamedFunction < ::Arel::Nodes::Function
  # source://activerecord//lib/arel/nodes/named_function.rb#8
  def initialize(name, expr, aliaz = T.unsafe(nil)); end

  # source://activerecord//lib/arel/nodes/named_function.rb#17
  def ==(other); end

  # source://activerecord//lib/arel/nodes/named_function.rb#17
  def eql?(other); end

  # source://activerecord//lib/arel/nodes/named_function.rb#13
  def hash; end

  # source://activerecord//lib/arel/nodes/named_function.rb#6
  def name; end

  # source://activerecord//lib/arel/nodes/named_function.rb#6
  def name=(_arg0); end
end

# source://activerecord//lib/arel/nodes/window.rb#68
class Arel::Nodes::NamedWindow < ::Arel::Nodes::Window
  # source://activerecord//lib/arel/nodes/window.rb#71
  def initialize(name); end

  # source://activerecord//lib/arel/nodes/window.rb#85
  def ==(other); end

  # source://activerecord//lib/arel/nodes/window.rb#85
  def eql?(other); end

  # source://activerecord//lib/arel/nodes/window.rb#81
  def hash; end

  # source://activerecord//lib/arel/nodes/window.rb#69
  def name; end

  # source://activerecord//lib/arel/nodes/window.rb#69
  def name=(_arg0); end

  private

  # source://activerecord//lib/arel/nodes/window.rb#76
  def initialize_copy(other); end
end

# source://activerecord//lib/arel/nodes/nary.rb#5
class Arel::Nodes::Nary < ::Arel::Nodes::NodeExpression
  # source://activerecord//lib/arel/nodes/nary.rb#8
  def initialize(children); end

  # source://activerecord//lib/arel/nodes/nary.rb#29
  def ==(other); end

  # source://activerecord//lib/arel/nodes/nary.rb#6
  def children; end

  # source://activerecord//lib/arel/nodes/nary.rb#29
  def eql?(other); end

  # source://activerecord//lib/arel/nodes/nary.rb#21
  def fetch_attribute(&block); end

  # source://activerecord//lib/arel/nodes/nary.rb#25
  def hash; end

  # source://activerecord//lib/arel/nodes/nary.rb#13
  def left; end

  # source://activerecord//lib/arel/nodes/nary.rb#17
  def right; end
end

# source://activerecord//lib/arel/nodes/node.rb#116
class Arel::Nodes::Node
  include ::Arel::FactoryMethods

  # source://activerecord//lib/arel/nodes/node.rb#135
  def and(right); end

  # source://activerecord//lib/arel/nodes/node.rb#158
  def equality?; end

  # source://activerecord//lib/arel/nodes/node.rb#155
  def fetch_attribute; end

  # source://activerecord//lib/arel/nodes/node.rb#139
  def invert; end

  # source://activerecord//lib/arel/nodes/node.rb#122
  def not; end

  # source://activerecord//lib/arel/nodes/node.rb#129
  def or(right); end

  # source://activerecord//lib/arel/nodes/node.rb#148
  def to_sql(engine = T.unsafe(nil)); end
end

# source://activerecord//lib/arel/nodes/node_expression.rb#5
class Arel::Nodes::NodeExpression < ::Arel::Nodes::Node
  include ::Arel::Expressions
  include ::Arel::Predications
  include ::Arel::AliasPredication
  include ::Arel::OrderPredications
  include ::Arel::Math
end

# source://activerecord//lib/arel/nodes/unary.rb#41
class Arel::Nodes::Not < ::Arel::Nodes::Unary; end

# source://activerecord//lib/arel/nodes/binary.rb#98
class Arel::Nodes::NotEqual < ::Arel::Nodes::Binary
  include ::Arel::Nodes::FetchAttribute

  # source://activerecord//lib/arel/nodes/binary.rb#101
  def invert; end
end

# source://activerecord//lib/arel/nodes/binary.rb#106
class Arel::Nodes::NotIn < ::Arel::Nodes::Binary
  include ::Arel::Nodes::FetchAttribute

  # source://activerecord//lib/arel/nodes/binary.rb#109
  def invert; end
end

# source://activerecord//lib/arel/nodes/regexp.rb#14
class Arel::Nodes::NotRegexp < ::Arel::Nodes::Regexp; end

# source://activerecord//lib/arel/nodes/ordering.rb#15
class Arel::Nodes::NullsFirst < ::Arel::Nodes::Ordering
  # source://activerecord//lib/arel/nodes/ordering.rb#16
  def reverse; end
end

# source://activerecord//lib/arel/nodes/ordering.rb#21
class Arel::Nodes::NullsLast < ::Arel::Nodes::Ordering
  # source://activerecord//lib/arel/nodes/ordering.rb#22
  def reverse; end
end

# source://activerecord//lib/arel/nodes/unary.rb#41
class Arel::Nodes::Offset < ::Arel::Nodes::Unary; end

# source://activerecord//lib/arel/nodes/unary.rb#41
class Arel::Nodes::On < ::Arel::Nodes::Unary; end

# source://activerecord//lib/arel/nodes/unary.rb#41
class Arel::Nodes::OptimizerHints < ::Arel::Nodes::Unary; end

# source://activerecord//lib/arel/nodes/nary.rb#37
class Arel::Nodes::Or < ::Arel::Nodes::Nary; end

# source://activerecord//lib/arel/nodes/ordering.rb#5
class Arel::Nodes::Ordering < ::Arel::Nodes::Unary
  # source://activerecord//lib/arel/nodes/ordering.rb#6
  def nulls_first; end

  # source://activerecord//lib/arel/nodes/ordering.rb#10
  def nulls_last; end
end

# source://activerecord//lib/arel/nodes/outer_join.rb#5
class Arel::Nodes::OuterJoin < ::Arel::Nodes::Join; end

# source://activerecord//lib/arel/nodes/over.rb#5
class Arel::Nodes::Over < ::Arel::Nodes::Binary
  # source://activerecord//lib/arel/nodes/over.rb#8
  def initialize(left, right = T.unsafe(nil)); end

  # source://activerecord//lib/arel/nodes/over.rb#12
  def operator; end
end

# source://activerecord//lib/arel/nodes/infix_operation.rb#56
class Arel::Nodes::Overlaps < ::Arel::Nodes::InfixOperation
  # source://activerecord//lib/arel/nodes/infix_operation.rb#57
  def initialize(left, right); end
end

# source://activerecord//lib/arel/nodes/window.rb#114
class Arel::Nodes::Preceding < ::Arel::Nodes::Unary
  # source://activerecord//lib/arel/nodes/window.rb#115
  def initialize(expr = T.unsafe(nil)); end
end

# source://activerecord//lib/arel/nodes/casted.rb#37
class Arel::Nodes::Quoted < ::Arel::Nodes::Unary
  # source://activerecord//lib/arel/nodes/casted.rb#43
  def infinite?; end

  # source://activerecord//lib/arel/nodes/casted.rb#41
  def nil?; end

  # source://activerecord//lib/arel/nodes/unary.rb#6
  def value_before_type_cast; end

  # source://activerecord//lib/arel/nodes/unary.rb#6
  def value_for_database; end
end

# source://activerecord//lib/arel/nodes/window.rb#97
class Arel::Nodes::Range < ::Arel::Nodes::Unary
  # source://activerecord//lib/arel/nodes/window.rb#98
  def initialize(expr = T.unsafe(nil)); end
end

# source://activerecord//lib/arel/nodes/regexp.rb#5
class Arel::Nodes::Regexp < ::Arel::Nodes::Binary
  # source://activerecord//lib/arel/nodes/regexp.rb#8
  def initialize(left, right, case_sensitive = T.unsafe(nil)); end

  # source://activerecord//lib/arel/nodes/regexp.rb#6
  def case_sensitive; end

  # source://activerecord//lib/arel/nodes/regexp.rb#6
  def case_sensitive=(_arg0); end
end

# source://activerecord//lib/arel/nodes/right_outer_join.rb#5
class Arel::Nodes::RightOuterJoin < ::Arel::Nodes::Join; end

# source://activerecord//lib/arel/nodes/unary.rb#41
class Arel::Nodes::RollUp < ::Arel::Nodes::Unary; end

# source://activerecord//lib/arel/nodes/window.rb#91
class Arel::Nodes::Rows < ::Arel::Nodes::Unary
  # source://activerecord//lib/arel/nodes/window.rb#92
  def initialize(expr = T.unsafe(nil)); end
end

# source://activerecord//lib/arel/nodes/select_core.rb#5
class Arel::Nodes::SelectCore < ::Arel::Nodes::Node
  # source://activerecord//lib/arel/nodes/select_core.rb#9
  def initialize(relation = T.unsafe(nil)); end

  # source://activerecord//lib/arel/nodes/select_core.rb#52
  def ==(other); end

  # source://activerecord//lib/arel/nodes/select_core.rb#6
  def comment; end

  # source://activerecord//lib/arel/nodes/select_core.rb#6
  def comment=(_arg0); end

  # source://activerecord//lib/arel/nodes/select_core.rb#52
  def eql?(other); end

  # source://activerecord//lib/arel/nodes/select_core.rb#24
  def from; end

  # source://activerecord//lib/arel/nodes/select_core.rb#28
  def from=(value); end

  # source://activerecord//lib/arel/nodes/select_core.rb#24
  def froms; end

  # source://activerecord//lib/arel/nodes/select_core.rb#28
  def froms=(value); end

  # source://activerecord//lib/arel/nodes/select_core.rb#6
  def groups; end

  # source://activerecord//lib/arel/nodes/select_core.rb#6
  def groups=(_arg0); end

  # source://activerecord//lib/arel/nodes/select_core.rb#45
  def hash; end

  # source://activerecord//lib/arel/nodes/select_core.rb#7
  def havings; end

  # source://activerecord//lib/arel/nodes/select_core.rb#7
  def havings=(_arg0); end

  # source://activerecord//lib/arel/nodes/select_core.rb#7
  def optimizer_hints; end

  # source://activerecord//lib/arel/nodes/select_core.rb#7
  def optimizer_hints=(_arg0); end

  # source://activerecord//lib/arel/nodes/select_core.rb#6
  def projections; end

  # source://activerecord//lib/arel/nodes/select_core.rb#6
  def projections=(_arg0); end

  # source://activerecord//lib/arel/nodes/select_core.rb#7
  def set_quantifier; end

  # source://activerecord//lib/arel/nodes/select_core.rb#7
  def set_quantifier=(_arg0); end

  # source://activerecord//lib/arel/nodes/select_core.rb#7
  def source; end

  # source://activerecord//lib/arel/nodes/select_core.rb#7
  def source=(_arg0); end

  # source://activerecord//lib/arel/nodes/select_core.rb#6
  def wheres; end

  # source://activerecord//lib/arel/nodes/select_core.rb#6
  def wheres=(_arg0); end

  # source://activerecord//lib/arel/nodes/select_core.rb#6
  def windows; end

  # source://activerecord//lib/arel/nodes/select_core.rb#6
  def windows=(_arg0); end

  private

  # source://activerecord//lib/arel/nodes/select_core.rb#35
  def initialize_copy(other); end
end

# source://activerecord//lib/arel/nodes/select_statement.rb#5
class Arel::Nodes::SelectStatement < ::Arel::Nodes::NodeExpression
  # source://activerecord//lib/arel/nodes/select_statement.rb#9
  def initialize(relation = T.unsafe(nil)); end

  # source://activerecord//lib/arel/nodes/select_statement.rb#29
  def ==(other); end

  # source://activerecord//lib/arel/nodes/select_statement.rb#6
  def cores; end

  # source://activerecord//lib/arel/nodes/select_statement.rb#29
  def eql?(other); end

  # source://activerecord//lib/arel/nodes/select_statement.rb#25
  def hash; end

  # source://activerecord//lib/arel/nodes/select_statement.rb#7
  def limit; end

  # source://activerecord//lib/arel/nodes/select_statement.rb#7
  def limit=(_arg0); end

  # source://activerecord//lib/arel/nodes/select_statement.rb#7
  def lock; end

  # source://activerecord//lib/arel/nodes/select_statement.rb#7
  def lock=(_arg0); end

  # source://activerecord//lib/arel/nodes/select_statement.rb#7
  def offset; end

  # source://activerecord//lib/arel/nodes/select_statement.rb#7
  def offset=(_arg0); end

  # source://activerecord//lib/arel/nodes/select_statement.rb#7
  def orders; end

  # source://activerecord//lib/arel/nodes/select_statement.rb#7
  def orders=(_arg0); end

  # source://activerecord//lib/arel/nodes/select_statement.rb#7
  def with; end

  # source://activerecord//lib/arel/nodes/select_statement.rb#7
  def with=(_arg0); end

  private

  # source://activerecord//lib/arel/nodes/select_statement.rb#19
  def initialize_copy(other); end
end

# source://activerecord//lib/arel/nodes/sql_literal.rb#5
class Arel::Nodes::SqlLiteral < ::String
  include ::Arel::Expressions
  include ::Arel::Predications
  include ::Arel::AliasPredication
  include ::Arel::OrderPredications

  # source://activerecord//lib/arel/nodes/sql_literal.rb#13
  def initialize(string, retryable: T.unsafe(nil)); end

  # source://activerecord//lib/arel/nodes/sql_literal.rb#25
  def +(other); end

  # source://activerecord//lib/arel/nodes/sql_literal.rb#18
  def encode_with(coder); end

  # source://activerecord//lib/arel/nodes/sql_literal.rb#22
  def fetch_attribute; end

  # source://activerecord//lib/arel/nodes/sql_literal.rb#11
  def retryable; end
end

# source://activerecord//lib/arel/nodes/string_join.rb#5
class Arel::Nodes::StringJoin < ::Arel::Nodes::Join
  # source://activerecord//lib/arel/nodes/string_join.rb#6
  def initialize(left, right = T.unsafe(nil)); end
end

# source://activerecord//lib/arel/nodes/infix_operation.rb#38
class Arel::Nodes::Subtraction < ::Arel::Nodes::InfixOperation
  # source://activerecord//lib/arel/nodes/infix_operation.rb#39
  def initialize(left, right); end
end

# source://activerecord//lib/arel/nodes/function.rb#42
class Arel::Nodes::Sum < ::Arel::Nodes::Function; end

# source://activerecord//lib/arel/nodes/table_alias.rb#5
class Arel::Nodes::TableAlias < ::Arel::Nodes::Binary
  # source://activerecord//lib/arel/nodes/table_alias.rb#10
  def [](name); end

  # source://activerecord//lib/arel/nodes/table_alias.rb#26
  def able_to_type_cast?; end

  # source://activerecord//lib/arel/nodes/binary.rb#6
  def name; end

  # source://activerecord//lib/arel/nodes/binary.rb#6
  def relation; end

  # source://activerecord//lib/arel/nodes/binary.rb#6
  def table_alias; end

  # source://activerecord//lib/arel/nodes/table_alias.rb#14
  def table_name; end

  # source://activerecord//lib/arel/nodes/table_alias.rb#30
  def to_cte; end

  # source://activerecord//lib/arel/nodes/table_alias.rb#18
  def type_cast_for_database(attr_name, value); end

  # source://activerecord//lib/arel/nodes/table_alias.rb#22
  def type_for_attribute(name); end
end

# source://activerecord//lib/arel/nodes/true.rb#5
class Arel::Nodes::True < ::Arel::Nodes::NodeExpression
  # source://activerecord//lib/arel/nodes/true.rb#10
  def ==(other); end

  # source://activerecord//lib/arel/nodes/true.rb#10
  def eql?(other); end

  # source://activerecord//lib/arel/nodes/true.rb#6
  def hash; end
end

# source://activerecord//lib/arel/nodes/unary.rb#5
class Arel::Nodes::Unary < ::Arel::Nodes::NodeExpression
  # source://activerecord//lib/arel/nodes/unary.rb#9
  def initialize(expr); end

  # source://activerecord//lib/arel/nodes/unary.rb#18
  def ==(other); end

  # source://activerecord//lib/arel/nodes/unary.rb#18
  def eql?(other); end

  # source://activerecord//lib/arel/nodes/unary.rb#6
  def expr; end

  # source://activerecord//lib/arel/nodes/unary.rb#6
  def expr=(_arg0); end

  # source://activerecord//lib/arel/nodes/unary.rb#14
  def hash; end

  # source://activerecord//lib/arel/nodes/unary.rb#6
  def value; end
end

# source://activerecord//lib/arel/nodes/unary_operation.rb#5
class Arel::Nodes::UnaryOperation < ::Arel::Nodes::Unary
  # source://activerecord//lib/arel/nodes/unary_operation.rb#8
  def initialize(operator, operand); end

  # source://activerecord//lib/arel/nodes/unary_operation.rb#6
  def operator; end
end

# source://activerecord//lib/arel/nodes/binary.rb#122
class Arel::Nodes::Union < ::Arel::Nodes::Binary; end

# source://activerecord//lib/arel/nodes/binary.rb#122
class Arel::Nodes::UnionAll < ::Arel::Nodes::Binary; end

# source://activerecord//lib/arel/nodes/unqualified_column.rb#5
class Arel::Nodes::UnqualifiedColumn < ::Arel::Nodes::Unary
  # source://activerecord//lib/arel/nodes/unary.rb#6
  def attribute; end

  # source://activerecord//lib/arel/nodes/unary.rb#6
  def attribute=(_arg0); end

  # source://activerecord//lib/arel/nodes/unqualified_column.rb#13
  def column; end

  # source://activerecord//lib/arel/nodes/unqualified_column.rb#17
  def name; end

  # source://activerecord//lib/arel/nodes/unqualified_column.rb#9
  def relation; end
end

# source://activerecord//lib/arel/nodes/update_statement.rb#5
class Arel::Nodes::UpdateStatement < ::Arel::Nodes::Node
  # source://activerecord//lib/arel/nodes/update_statement.rb#8
  def initialize(relation = T.unsafe(nil)); end

  # source://activerecord//lib/arel/nodes/update_statement.rb#31
  def ==(other); end

  # source://activerecord//lib/arel/nodes/update_statement.rb#31
  def eql?(other); end

  # source://activerecord//lib/arel/nodes/update_statement.rb#6
  def groups; end

  # source://activerecord//lib/arel/nodes/update_statement.rb#6
  def groups=(_arg0); end

  # source://activerecord//lib/arel/nodes/update_statement.rb#27
  def hash; end

  # source://activerecord//lib/arel/nodes/update_statement.rb#6
  def havings; end

  # source://activerecord//lib/arel/nodes/update_statement.rb#6
  def havings=(_arg0); end

  # source://activerecord//lib/arel/nodes/update_statement.rb#6
  def key; end

  # source://activerecord//lib/arel/nodes/update_statement.rb#6
  def key=(_arg0); end

  # source://activerecord//lib/arel/nodes/update_statement.rb#6
  def limit; end

  # source://activerecord//lib/arel/nodes/update_statement.rb#6
  def limit=(_arg0); end

  # source://activerecord//lib/arel/nodes/update_statement.rb#6
  def offset; end

  # source://activerecord//lib/arel/nodes/update_statement.rb#6
  def offset=(_arg0); end

  # source://activerecord//lib/arel/nodes/update_statement.rb#6
  def orders; end

  # source://activerecord//lib/arel/nodes/update_statement.rb#6
  def orders=(_arg0); end

  # source://activerecord//lib/arel/nodes/update_statement.rb#6
  def relation; end

  # source://activerecord//lib/arel/nodes/update_statement.rb#6
  def relation=(_arg0); end

  # source://activerecord//lib/arel/nodes/update_statement.rb#6
  def values; end

  # source://activerecord//lib/arel/nodes/update_statement.rb#6
  def values=(_arg0); end

  # source://activerecord//lib/arel/nodes/update_statement.rb#6
  def wheres; end

  # source://activerecord//lib/arel/nodes/update_statement.rb#6
  def wheres=(_arg0); end

  private

  # source://activerecord//lib/arel/nodes/update_statement.rb#21
  def initialize_copy(other); end
end

# source://activerecord//lib/arel/nodes/values_list.rb#5
class Arel::Nodes::ValuesList < ::Arel::Nodes::Unary
  # source://activerecord//lib/arel/nodes/unary.rb#6
  def rows; end
end

# source://activerecord//lib/arel/nodes/case.rb#49
class Arel::Nodes::When < ::Arel::Nodes::Binary; end

# source://activerecord//lib/arel/nodes/window.rb#5
class Arel::Nodes::Window < ::Arel::Nodes::Node
  # source://activerecord//lib/arel/nodes/window.rb#8
  def initialize; end

  # source://activerecord//lib/arel/nodes/window.rb#59
  def ==(other); end

  # source://activerecord//lib/arel/nodes/window.rb#59
  def eql?(other); end

  # source://activerecord//lib/arel/nodes/window.rb#30
  def frame(expr); end

  # source://activerecord//lib/arel/nodes/window.rb#6
  def framing; end

  # source://activerecord//lib/arel/nodes/window.rb#6
  def framing=(_arg0); end

  # source://activerecord//lib/arel/nodes/window.rb#55
  def hash; end

  # source://activerecord//lib/arel/nodes/window.rb#14
  def order(*expr); end

  # source://activerecord//lib/arel/nodes/window.rb#6
  def orders; end

  # source://activerecord//lib/arel/nodes/window.rb#6
  def orders=(_arg0); end

  # source://activerecord//lib/arel/nodes/window.rb#22
  def partition(*expr); end

  # source://activerecord//lib/arel/nodes/window.rb#6
  def partitions; end

  # source://activerecord//lib/arel/nodes/window.rb#6
  def partitions=(_arg0); end

  # source://activerecord//lib/arel/nodes/window.rb#42
  def range(expr = T.unsafe(nil)); end

  # source://activerecord//lib/arel/nodes/window.rb#34
  def rows(expr = T.unsafe(nil)); end

  private

  # source://activerecord//lib/arel/nodes/window.rb#50
  def initialize_copy(other); end
end

# source://activerecord//lib/arel/nodes/with.rb#5
class Arel::Nodes::With < ::Arel::Nodes::Unary
  # source://activerecord//lib/arel/nodes/unary.rb#6
  def children; end
end

# source://activerecord//lib/arel/nodes/with.rb#9
class Arel::Nodes::WithRecursive < ::Arel::Nodes::With; end

# source://activerecord//lib/arel/order_predications.rb#4
module Arel::OrderPredications
  # source://activerecord//lib/arel/order_predications.rb#5
  def asc; end

  # source://activerecord//lib/arel/order_predications.rb#9
  def desc; end
end

# source://activerecord//lib/arel/predications.rb#4
module Arel::Predications
  # source://activerecord//lib/arel/predications.rb#37
  def between(other); end

  # source://activerecord//lib/arel/predications.rb#215
  def concat(other); end

  # source://activerecord//lib/arel/predications.rb#219
  def contains(other); end

  # source://activerecord//lib/arel/predications.rb#147
  def does_not_match(other, escape = T.unsafe(nil), case_sensitive = T.unsafe(nil)); end

  # source://activerecord//lib/arel/predications.rb#159
  def does_not_match_all(others, escape = T.unsafe(nil)); end

  # source://activerecord//lib/arel/predications.rb#155
  def does_not_match_any(others, escape = T.unsafe(nil)); end

  # source://activerecord//lib/arel/predications.rb#151
  def does_not_match_regexp(other, case_sensitive = T.unsafe(nil)); end

  # source://activerecord//lib/arel/predications.rb#17
  def eq(other); end

  # source://activerecord//lib/arel/predications.rb#33
  def eq_all(others); end

  # source://activerecord//lib/arel/predications.rb#29
  def eq_any(others); end

  # source://activerecord//lib/arel/predications.rb#175
  def gt(right); end

  # source://activerecord//lib/arel/predications.rb#183
  def gt_all(others); end

  # source://activerecord//lib/arel/predications.rb#179
  def gt_any(others); end

  # source://activerecord//lib/arel/predications.rb#163
  def gteq(right); end

  # source://activerecord//lib/arel/predications.rb#171
  def gteq_all(others); end

  # source://activerecord//lib/arel/predications.rb#167
  def gteq_any(others); end

  # source://activerecord//lib/arel/predications.rb#65
  def in(other); end

  # source://activerecord//lib/arel/predications.rb#80
  def in_all(others); end

  # source://activerecord//lib/arel/predications.rb#76
  def in_any(others); end

  # source://activerecord//lib/arel/predications.rb#25
  def is_distinct_from(other); end

  # source://activerecord//lib/arel/predications.rb#21
  def is_not_distinct_from(other); end

  # source://activerecord//lib/arel/predications.rb#187
  def lt(right); end

  # source://activerecord//lib/arel/predications.rb#195
  def lt_all(others); end

  # source://activerecord//lib/arel/predications.rb#191
  def lt_any(others); end

  # source://activerecord//lib/arel/predications.rb#199
  def lteq(right); end

  # source://activerecord//lib/arel/predications.rb#207
  def lteq_all(others); end

  # source://activerecord//lib/arel/predications.rb#203
  def lteq_any(others); end

  # source://activerecord//lib/arel/predications.rb#131
  def matches(other, escape = T.unsafe(nil), case_sensitive = T.unsafe(nil)); end

  # source://activerecord//lib/arel/predications.rb#143
  def matches_all(others, escape = T.unsafe(nil), case_sensitive = T.unsafe(nil)); end

  # source://activerecord//lib/arel/predications.rb#139
  def matches_any(others, escape = T.unsafe(nil), case_sensitive = T.unsafe(nil)); end

  # source://activerecord//lib/arel/predications.rb#135
  def matches_regexp(other, case_sensitive = T.unsafe(nil)); end

  # source://activerecord//lib/arel/predications.rb#84
  def not_between(other); end

  # source://activerecord//lib/arel/predications.rb#5
  def not_eq(other); end

  # source://activerecord//lib/arel/predications.rb#13
  def not_eq_all(others); end

  # source://activerecord//lib/arel/predications.rb#9
  def not_eq_any(others); end

  # source://activerecord//lib/arel/predications.rb#112
  def not_in(other); end

  # source://activerecord//lib/arel/predications.rb#127
  def not_in_all(others); end

  # source://activerecord//lib/arel/predications.rb#123
  def not_in_any(others); end

  # source://activerecord//lib/arel/predications.rb#223
  def overlaps(other); end

  # source://activerecord//lib/arel/predications.rb#227
  def quoted_array(others); end

  # source://activerecord//lib/arel/predications.rb#211
  def when(right); end

  private

  # source://activerecord//lib/arel/predications.rb#239
  def grouping_all(method_id, others, *extras); end

  # source://activerecord//lib/arel/predications.rb#232
  def grouping_any(method_id, others, *extras); end

  # source://activerecord//lib/arel/predications.rb#248
  def infinity?(value); end

  # source://activerecord//lib/arel/predications.rb#256
  def open_ended?(value); end

  # source://activerecord//lib/arel/predications.rb#244
  def quoted_node(other); end

  # source://activerecord//lib/arel/predications.rb#252
  def unboundable?(value); end
end

# source://activerecord//lib/arel/select_manager.rb#4
class Arel::SelectManager < ::Arel::TreeManager
  include ::Arel::Crud

  # source://activerecord//lib/arel/select_manager.rb#9
  def initialize(table = T.unsafe(nil)); end

  # source://activerecord//lib/arel/select_manager.rb#48
  def as(other); end

  # source://activerecord//lib/arel/select_manager.rb#252
  def comment(*values); end

  # source://activerecord//lib/arel/select_manager.rb#24
  def constraints; end

  # source://activerecord//lib/arel/select_manager.rb#154
  def distinct(value = T.unsafe(nil)); end

  # source://activerecord//lib/arel/select_manager.rb#163
  def distinct_on(value); end

  # source://activerecord//lib/arel/select_manager.rb#213
  def except(other); end

  # source://activerecord//lib/arel/select_manager.rb#44
  def exists; end

  # source://activerecord//lib/arel/select_manager.rb#85
  def from(table); end

  # source://activerecord//lib/arel/select_manager.rb#98
  def froms; end

  # source://activerecord//lib/arel/select_manager.rb#74
  def group(*columns); end

  # source://activerecord//lib/arel/select_manager.rb#119
  def having(expr); end

  # source://activerecord//lib/arel/select_manager.rb#209
  def intersect(other); end

  # source://activerecord//lib/arel/select_manager.rb#102
  def join(relation, klass = T.unsafe(nil)); end

  # source://activerecord//lib/arel/select_manager.rb#244
  def join_sources; end

  # source://activerecord//lib/arel/select_manager.rb#218
  def lateral(table_name = T.unsafe(nil)); end

  # source://activerecord//lib/arel/select_manager.rb#19
  def limit; end

  # source://activerecord//lib/arel/select_manager.rb#234
  def limit=(limit); end

  # source://activerecord//lib/arel/select_manager.rb#52
  def lock(locking = T.unsafe(nil)); end

  # source://activerecord//lib/arel/select_manager.rb#65
  def locked; end

  # source://activerecord//lib/arel/select_manager.rb#213
  def minus(other); end

  # source://activerecord//lib/arel/select_manager.rb#28
  def offset; end

  # source://activerecord//lib/arel/select_manager.rb#32
  def offset=(amount); end

  # source://activerecord//lib/arel/select_manager.rb#69
  def on(*exprs); end

  # source://activerecord//lib/arel/select_manager.rb#147
  def optimizer_hints(*hints); end

  # source://activerecord//lib/arel/select_manager.rb#172
  def order(*expr); end

  # source://activerecord//lib/arel/select_manager.rb#180
  def orders; end

  # source://activerecord//lib/arel/select_manager.rb#115
  def outer_join(relation); end

  # source://activerecord//lib/arel/select_manager.rb#130
  def project(*projections); end

  # source://activerecord//lib/arel/select_manager.rb#139
  def projections; end

  # source://activerecord//lib/arel/select_manager.rb#143
  def projections=(projections); end

  # source://activerecord//lib/arel/select_manager.rb#32
  def skip(amount); end

  # source://activerecord//lib/arel/select_manager.rb#248
  def source; end

  # source://activerecord//lib/arel/select_manager.rb#234
  def take(limit); end

  # source://activerecord//lib/arel/select_manager.rb#19
  def taken; end

  # source://activerecord//lib/arel/select_manager.rb#198
  def union(operation, other = T.unsafe(nil)); end

  # source://activerecord//lib/arel/select_manager.rb#184
  def where(expr); end

  # source://activerecord//lib/arel/select_manager.rb#192
  def where_sql(engine = T.unsafe(nil)); end

  # source://activerecord//lib/arel/select_manager.rb#124
  def window(name); end

  # source://activerecord//lib/arel/select_manager.rb#223
  def with(*subqueries); end

  private

  # source://activerecord//lib/arel/select_manager.rb#258
  def collapse(exprs); end

  # source://activerecord//lib/arel/select_manager.rb#14
  def initialize_copy(other); end
end

# source://activerecord//lib/arel/select_manager.rb#7
Arel::SelectManager::STRING_OR_SYMBOL_CLASS = T.let(T.unsafe(nil), Array)

# source://activerecord//lib/arel/table.rb#4
class Arel::Table
  include ::Arel::FactoryMethods
  include ::Arel::AliasPredication

  # source://activerecord//lib/arel/table.rb#14
  def initialize(name, as: T.unsafe(nil), klass: T.unsafe(nil), type_caster: T.unsafe(nil)); end

  # source://activerecord//lib/arel/table.rb#99
  def ==(other); end

  # source://activerecord//lib/arel/table.rb#86
  def [](name, table = T.unsafe(nil)); end

  # source://activerecord//lib/arel/table.rb#114
  def able_to_type_cast?; end

  # source://activerecord//lib/arel/table.rb#34
  def alias(name = T.unsafe(nil)); end

  # source://activerecord//lib/arel/table.rb#99
  def eql?(other); end

  # source://activerecord//lib/arel/table.rb#38
  def from; end

  # source://activerecord//lib/arel/table.rb#58
  def group(*columns); end

  # source://activerecord//lib/arel/table.rb#92
  def hash; end

  # source://activerecord//lib/arel/table.rb#82
  def having(expr); end

  # source://activerecord//lib/arel/table.rb#42
  def join(relation, klass = T.unsafe(nil)); end

  # source://activerecord//lib/arel/table.rb#11
  def name; end

  # source://activerecord//lib/arel/table.rb#11
  def name=(_arg0); end

  # source://activerecord//lib/arel/table.rb#62
  def order(*expr); end

  # source://activerecord//lib/arel/table.rb#54
  def outer_join(relation); end

  # source://activerecord//lib/arel/table.rb#70
  def project(*things); end

  # source://activerecord//lib/arel/table.rb#78
  def skip(amount); end

  # source://activerecord//lib/arel/table.rb#12
  def table_alias; end

  # source://activerecord//lib/arel/table.rb#74
  def take(amount); end

  # source://activerecord//lib/arel/table.rb#106
  def type_cast_for_database(attr_name, value); end

  # source://activerecord//lib/arel/table.rb#110
  def type_for_attribute(name); end

  # source://activerecord//lib/arel/table.rb#66
  def where(condition); end

  private

  # source://activerecord//lib/arel/table.rb#119
  def type_caster; end

  class << self
    # source://activerecord//lib/arel/table.rb#9
    def engine; end

    # source://activerecord//lib/arel/table.rb#9
    def engine=(_arg0); end
  end
end

# source://activerecord//lib/arel/tree_manager.rb#4
class Arel::TreeManager
  include ::Arel::FactoryMethods

  # source://activerecord//lib/arel/tree_manager.rb#45
  def ast; end

  # source://activerecord//lib/arel/tree_manager.rb#47
  def to_dot; end

  # source://activerecord//lib/arel/tree_manager.rb#53
  def to_sql(engine = T.unsafe(nil)); end

  private

  # source://activerecord//lib/arel/tree_manager.rb#60
  def initialize_copy(other); end
end

# source://activerecord//lib/arel/tree_manager.rb#7
module Arel::TreeManager::StatementMethods
  # source://activerecord//lib/arel/tree_manager.rb#31
  def key; end

  # source://activerecord//lib/arel/tree_manager.rb#23
  def key=(key); end

  # source://activerecord//lib/arel/tree_manager.rb#13
  def offset(offset); end

  # source://activerecord//lib/arel/tree_manager.rb#18
  def order(*expr); end

  # source://activerecord//lib/arel/tree_manager.rb#8
  def take(limit); end

  # source://activerecord//lib/arel/tree_manager.rb#39
  def where(expr); end

  # source://activerecord//lib/arel/tree_manager.rb#35
  def wheres=(exprs); end
end

# source://activerecord//lib/arel/update_manager.rb#4
class Arel::UpdateManager < ::Arel::TreeManager
  include ::Arel::TreeManager::StatementMethods

  # source://activerecord//lib/arel/update_manager.rb#7
  def initialize(table = T.unsafe(nil)); end

  # source://activerecord//lib/arel/update_manager.rb#33
  def group(columns); end

  # source://activerecord//lib/arel/update_manager.rb#44
  def having(expr); end

  # source://activerecord//lib/arel/update_manager.rb#18
  def set(values); end

  # source://activerecord//lib/arel/update_manager.rb#13
  def table(table); end
end

# source://activerecord//lib/arel.rb#29
Arel::VERSION = T.let(T.unsafe(nil), String)

# source://activerecord//lib/arel/visitors/visitor.rb#4
module Arel::Visitors; end

# source://activerecord//lib/arel/visitors/dot.rb#5
class Arel::Visitors::Dot < ::Arel::Visitors::Visitor
  # source://activerecord//lib/arel/visitors/dot.rb#19
  def initialize; end

  # source://activerecord//lib/arel/visitors/dot.rb#28
  def accept(object, collector); end

  private

  # source://activerecord//lib/arel/visitors/dot.rb#261
  def edge(name); end

  # source://activerecord//lib/arel/visitors/dot.rb#279
  def quote(string); end

  # source://activerecord//lib/arel/visitors/dot.rb#283
  def to_dot; end

  # source://activerecord//lib/arel/visitors/dot.rb#247
  def visit(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#216
  def visit_ActiveModel_Attribute(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#183
  def visit_Arel_Attributes_Attribute(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#188
  def visit_Arel_Nodes_And(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#44
  def visit_Arel_Nodes_Binary(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#212
  def visit_Arel_Nodes_BindParam(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#237
  def visit_Arel_Nodes_Case(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#172
  def visit_Arel_Nodes_Casted(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#233
  def visit_Arel_Nodes_Comment(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#77
  def visit_Arel_Nodes_Count(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#103
  def visit_Arel_Nodes_CurrentRow(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#159
  def visit_Arel_Nodes_DeleteStatement(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#103
  def visit_Arel_Nodes_Distinct(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#109
  def visit_Arel_Nodes_Extract(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#34
  def visit_Arel_Nodes_Function(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#177
  def visit_Arel_Nodes_HomogeneousIn(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#54
  def visit_Arel_Nodes_InfixOperation(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#121
  def visit_Arel_Nodes_InsertStatement(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#114
  def visit_Arel_Nodes_NamedFunction(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#96
  def visit_Arel_Nodes_NamedWindow(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#60
  def visit_Arel_Nodes_NotRegexp(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#188
  def visit_Arel_Nodes_Or(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#68
  def visit_Arel_Nodes_Ordering(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#60
  def visit_Arel_Nodes_Regexp(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#128
  def visit_Arel_Nodes_SelectCore(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#140
  def visit_Arel_Nodes_SelectStatement(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#197
  def visit_Arel_Nodes_SqlLiteral(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#86
  def visit_Arel_Nodes_StringJoin(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#72
  def visit_Arel_Nodes_TableAlias(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#40
  def visit_Arel_Nodes_Unary(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#49
  def visit_Arel_Nodes_UnaryOperation(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#149
  def visit_Arel_Nodes_UpdateStatement(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#82
  def visit_Arel_Nodes_ValuesList(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#90
  def visit_Arel_Nodes_Window(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#188
  def visit_Arel_Nodes_With(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#168
  def visit_Arel_Table(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#226
  def visit_Array(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#197
  def visit_BigDecimal(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#197
  def visit_Date(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#197
  def visit_DateTime(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#197
  def visit_FalseClass(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#197
  def visit_Float(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#220
  def visit_Hash(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#197
  def visit_Integer(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#197
  def visit_NilClass(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#226
  def visit_Set(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#197
  def visit_String(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#197
  def visit_Symbol(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#197
  def visit_Time(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#197
  def visit_TrueClass(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#188
  def visit__children(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#103
  def visit__no_edges(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#60
  def visit__regexp(o); end

  # source://activerecord//lib/arel/visitors/dot.rb#243
  def visit_edge(o, method); end

  # source://activerecord//lib/arel/visitors/dot.rb#269
  def with_node(node); end
end

# source://activerecord//lib/arel/visitors/dot.rb#16
class Arel::Visitors::Dot::Edge < ::Struct; end

# source://activerecord//lib/arel/visitors/dot.rb#6
class Arel::Visitors::Dot::Node
  # source://activerecord//lib/arel/visitors/dot.rb#9
  def initialize(name, id, fields = T.unsafe(nil)); end

  # source://activerecord//lib/arel/visitors/dot.rb#7
  def fields; end

  # source://activerecord//lib/arel/visitors/dot.rb#7
  def fields=(_arg0); end

  # source://activerecord//lib/arel/visitors/dot.rb#7
  def id; end

  # source://activerecord//lib/arel/visitors/dot.rb#7
  def id=(_arg0); end

  # source://activerecord//lib/arel/visitors/dot.rb#7
  def name; end

  # source://activerecord//lib/arel/visitors/dot.rb#7
  def name=(_arg0); end
end

# source://activerecord//lib/arel/visitors/mysql.rb#5
class Arel::Visitors::MySQL < ::Arel::Visitors::ToSql
  private

  # source://activerecord//lib/arel/visitors/mysql.rb#93
  def build_subselect(key, o); end

  # source://activerecord//lib/arel/visitors/mysql.rb#81
  def prepare_delete_statement(o); end

  # source://activerecord//lib/arel/visitors/mysql.rb#81
  def prepare_update_statement(o); end

  # source://activerecord//lib/arel/visitors/mysql.rb#7
  def visit_Arel_Nodes_Bin(o, collector); end

  # source://activerecord//lib/arel/visitors/mysql.rb#34
  def visit_Arel_Nodes_Concat(o, collector); end

  # source://activerecord//lib/arel/visitors/mysql.rb#72
  def visit_Arel_Nodes_Cte(o, collector); end

  # source://activerecord//lib/arel/visitors/mysql.rb#49
  def visit_Arel_Nodes_IsDistinctFrom(o, collector); end

  # source://activerecord//lib/arel/visitors/mysql.rb#43
  def visit_Arel_Nodes_IsNotDistinctFrom(o, collector); end

  # source://activerecord//lib/arel/visitors/mysql.rb#58
  def visit_Arel_Nodes_NotRegexp(o, collector); end

  # source://activerecord//lib/arel/visitors/mysql.rb#62
  def visit_Arel_Nodes_NullsFirst(o, collector); end

  # source://activerecord//lib/arel/visitors/mysql.rb#67
  def visit_Arel_Nodes_NullsLast(o, collector); end

  # source://activerecord//lib/arel/visitors/mysql.rb#54
  def visit_Arel_Nodes_Regexp(o, collector); end

  # source://activerecord//lib/arel/visitors/mysql.rb#29
  def visit_Arel_Nodes_SelectCore(o, collector); end

  # source://activerecord//lib/arel/visitors/mysql.rb#22
  def visit_Arel_Nodes_SelectStatement(o, collector); end

  # source://activerecord//lib/arel/visitors/mysql.rb#13
  def visit_Arel_Nodes_UnqualifiedColumn(o, collector); end
end

# source://activerecord//lib/arel/visitors/postgresql.rb#5
class Arel::Visitors::PostgreSQL < ::Arel::Visitors::ToSql
  private

  # source://activerecord//lib/arel/visitors/postgresql.rb#84
  def bind_block; end

  # source://activerecord//lib/arel/visitors/postgresql.rb#88
  def grouping_array_or_grouping_element(o, collector); end

  # source://activerecord//lib/arel/visitors/postgresql.rb#49
  def visit_Arel_Nodes_Cube(o, collector); end

  # source://activerecord//lib/arel/visitors/postgresql.rb#39
  def visit_Arel_Nodes_DistinctOn(o, collector); end

  # source://activerecord//lib/arel/visitors/postgresql.rb#18
  def visit_Arel_Nodes_DoesNotMatch(o, collector); end

  # source://activerecord//lib/arel/visitors/postgresql.rb#44
  def visit_Arel_Nodes_GroupingElement(o, collector); end

  # source://activerecord//lib/arel/visitors/postgresql.rb#59
  def visit_Arel_Nodes_GroupingSet(o, collector); end

  # source://activerecord//lib/arel/visitors/postgresql.rb#75
  def visit_Arel_Nodes_IsDistinctFrom(o, collector); end

  # source://activerecord//lib/arel/visitors/postgresql.rb#69
  def visit_Arel_Nodes_IsNotDistinctFrom(o, collector); end

  # source://activerecord//lib/arel/visitors/postgresql.rb#64
  def visit_Arel_Nodes_Lateral(o, collector); end

  # source://activerecord//lib/arel/visitors/postgresql.rb#7
  def visit_Arel_Nodes_Matches(o, collector); end

  # source://activerecord//lib/arel/visitors/postgresql.rb#34
  def visit_Arel_Nodes_NotRegexp(o, collector); end

  # source://activerecord//lib/arel/visitors/postgresql.rb#29
  def visit_Arel_Nodes_Regexp(o, collector); end

  # source://activerecord//lib/arel/visitors/postgresql.rb#54
  def visit_Arel_Nodes_RollUp(o, collector); end
end

# source://activerecord//lib/arel/visitors/postgresql.rb#81
Arel::Visitors::PostgreSQL::BIND_BLOCK = T.let(T.unsafe(nil), Proc)

# source://activerecord//lib/arel/visitors/sqlite.rb#5
class Arel::Visitors::SQLite < ::Arel::Visitors::ToSql
  private

  # source://activerecord//lib/arel/visitors/sqlite.rb#39
  def infix_value_with_paren(o, collector, value, suppress_parens = T.unsafe(nil)); end

  # source://activerecord//lib/arel/visitors/sqlite.rb#21
  def visit_Arel_Nodes_False(o, collector); end

  # source://activerecord//lib/arel/visitors/sqlite.rb#31
  def visit_Arel_Nodes_IsDistinctFrom(o, collector); end

  # source://activerecord//lib/arel/visitors/sqlite.rb#25
  def visit_Arel_Nodes_IsNotDistinctFrom(o, collector); end

  # source://activerecord//lib/arel/visitors/sqlite.rb#8
  def visit_Arel_Nodes_Lock(o, collector); end

  # source://activerecord//lib/arel/visitors/sqlite.rb#12
  def visit_Arel_Nodes_SelectStatement(o, collector); end

  # source://activerecord//lib/arel/visitors/sqlite.rb#17
  def visit_Arel_Nodes_True(o, collector); end
end

# source://activerecord//lib/arel/visitors/to_sql.rb#11
class Arel::Visitors::ToSql < ::Arel::Visitors::Visitor
  # source://activerecord//lib/arel/visitors/to_sql.rb#12
  def initialize(connection); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#17
  def compile(node, collector = T.unsafe(nil)); end

  private

  # source://activerecord//lib/arel/visitors/to_sql.rb#996
  def aggregate(name, o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#754
  def bind_block; end

  # source://activerecord//lib/arel/visitors/to_sql.rb#943
  def build_subselect(key, o); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#1023
  def collect_ctes(children, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#179
  def collect_nodes_for(nodes, collector, spacer, connector = T.unsafe(nil)); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#887
  def collect_optimizer_hints(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#981
  def grouping_parentheses(o, collector, always_wrap_selects = T.unsafe(nil)); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#917
  def has_group_by_and_having?(o); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#909
  def has_join_sources?(o); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#913
  def has_limit_or_offset_or_orders?(o); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#957
  def infix_value(o, collector, value); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#963
  def infix_value_with_paren(o, collector, value, suppress_parens = T.unsafe(nil)); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#897
  def inject_join(list, collector, join_str); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#1010
  def is_distinct_from(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#891
  def maybe_visit(thing, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#924
  def prepare_delete_statement(o); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#924
  def prepare_update_statement(o); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#867
  def quote(value); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#877
  def quote_column_name(name); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#872
  def quote_table_name(name); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#992
  def require_parentheses?(o); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#882
  def sanitize_as_sql_comment(value); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#905
  def unboundable?(value); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#828
  def unsupported(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#756
  def visit_ActiveModel_Attribute(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#828
  def visit_ActiveSupport_Multibyte_Chars(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#828
  def visit_ActiveSupport_StringInquirer(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#746
  def visit_Arel_Attributes_Attribute(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#622
  def visit_Arel_Nodes_And(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#693
  def visit_Arel_Nodes_As(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#363
  def visit_Arel_Nodes_Ascending(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#630
  def visit_Arel_Nodes_Assignment(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#421
  def visit_Arel_Nodes_Avg(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#431
  def visit_Arel_Nodes_Between(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#186
  def visit_Arel_Nodes_Bin(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#760
  def visit_Arel_Nodes_BindParam(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#770
  def visit_Arel_Nodes_BoundSqlLiteral(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#699
  def visit_Arel_Nodes_Case(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#87
  def visit_Arel_Nodes_Casted(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#175
  def visit_Arel_Nodes_Comment(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#405
  def visit_Arel_Nodes_Count(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#732
  def visit_Arel_Nodes_Cte(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#296
  def visit_Arel_Nodes_CurrentRow(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#22
  def visit_Arel_Nodes_DeleteStatement(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#367
  def visit_Arel_Nodes_Descending(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#190
  def visit_Arel_Nodes_Distinct(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#194
  def visit_Arel_Nodes_DistinctOn(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#497
  def visit_Arel_Nodes_DoesNotMatch(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#723
  def visit_Arel_Nodes_Else(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#643
  def visit_Arel_Nodes_Equality(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#221
  def visit_Arel_Nodes_Except(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#76
  def visit_Arel_Nodes_Exists(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#400
  def visit_Arel_Nodes_Extract(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#96
  def visit_Arel_Nodes_False(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#251
  def visit_Arel_Nodes_Filter(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#286
  def visit_Arel_Nodes_Following(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#863
  def visit_Arel_Nodes_Fragments(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#532
  def visit_Arel_Nodes_FullOuterJoin(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#449
  def visit_Arel_Nodes_GreaterThan(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#437
  def visit_Arel_Nodes_GreaterThanOrEqual(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#382
  def visit_Arel_Nodes_Group(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#327
  def visit_Arel_Nodes_Grouping(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#336
  def visit_Arel_Nodes_HomogeneousIn(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#588
  def visit_Arel_Nodes_In(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#847
  def visit_Arel_Nodes_InfixOperation(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#553
  def visit_Arel_Nodes_InnerJoin(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#53
  def visit_Arel_Nodes_InsertStatement(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#216
  def visit_Arel_Nodes_Intersect(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#668
  def visit_Arel_Nodes_IsDistinctFrom(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#658
  def visit_Arel_Nodes_IsNotDistinctFrom(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#509
  def visit_Arel_Nodes_JoinSource(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#473
  def visit_Arel_Nodes_LessThan(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#461
  def visit_Arel_Nodes_LessThanOrEqual(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#318
  def visit_Arel_Nodes_Limit(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#323
  def visit_Arel_Nodes_Lock(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#485
  def visit_Arel_Nodes_Matches(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#413
  def visit_Arel_Nodes_Max(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#417
  def visit_Arel_Nodes_Min(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#386
  def visit_Arel_Nodes_NamedFunction(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#226
  def visit_Arel_Nodes_NamedWindow(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#569
  def visit_Arel_Nodes_Not(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#678
  def visit_Arel_Nodes_NotEqual(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#605
  def visit_Arel_Nodes_NotIn(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#524
  def visit_Arel_Nodes_NotRegexp(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#372
  def visit_Arel_Nodes_NullsFirst(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#377
  def visit_Arel_Nodes_NullsLast(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#313
  def visit_Arel_Nodes_Offset(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#564
  def visit_Arel_Nodes_On(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#170
  def visit_Arel_Nodes_OptimizerHints(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#626
  def visit_Arel_Nodes_Or(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#539
  def visit_Arel_Nodes_OuterJoin(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#300
  def visit_Arel_Nodes_Over(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#276
  def visit_Arel_Nodes_Preceding(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#87
  def visit_Arel_Nodes_Quoted(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#267
  def visit_Arel_Nodes_Range(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#520
  def visit_Arel_Nodes_Regexp(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#546
  def visit_Arel_Nodes_RightOuterJoin(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#258
  def visit_Arel_Nodes_Rows(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#149
  def visit_Arel_Nodes_SelectCore(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#143
  def visit_Arel_Nodes_SelectOptions(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#120
  def visit_Arel_Nodes_SelectStatement(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#764
  def visit_Arel_Nodes_SqlLiteral(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#528
  def visit_Arel_Nodes_StringJoin(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#409
  def visit_Arel_Nodes_Sum(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#425
  def visit_Arel_Nodes_TableAlias(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#92
  def visit_Arel_Nodes_True(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#853
  def visit_Arel_Nodes_UnaryOperation(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#208
  def visit_Arel_Nodes_Union(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#212
  def visit_Arel_Nodes_UnionAll(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#728
  def visit_Arel_Nodes_UnqualifiedColumn(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#40
  def visit_Arel_Nodes_UpdateStatement(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#100
  def visit_Arel_Nodes_ValuesList(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#716
  def visit_Arel_Nodes_When(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#232
  def visit_Arel_Nodes_Window(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#198
  def visit_Arel_Nodes_With(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#203
  def visit_Arel_Nodes_WithRecursive(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#358
  def visit_Arel_SelectManager(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#574
  def visit_Arel_Table(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#858
  def visit_Array(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#828
  def visit_BigDecimal(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#828
  def visit_Class(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#828
  def visit_Date(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#828
  def visit_DateTime(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#828
  def visit_FalseClass(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#828
  def visit_Float(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#828
  def visit_Hash(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#824
  def visit_Integer(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#828
  def visit_NilClass(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#858
  def visit_Set(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#828
  def visit_String(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#828
  def visit_Symbol(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#828
  def visit_Time(o, collector); end

  # source://activerecord//lib/arel/visitors/to_sql.rb#828
  def visit_TrueClass(o, collector); end
end

# source://activerecord//lib/arel/visitors/to_sql.rb#751
Arel::Visitors::ToSql::BIND_BLOCK = T.let(T.unsafe(nil), Proc)

# source://activerecord//lib/arel/visitors/to_sql.rb#5
class Arel::Visitors::UnsupportedVisitError < ::StandardError
  # source://activerecord//lib/arel/visitors/to_sql.rb#6
  def initialize(object); end
end

# source://activerecord//lib/arel/visitors/visitor.rb#5
class Arel::Visitors::Visitor
  # source://activerecord//lib/arel/visitors/visitor.rb#6
  def initialize; end

  # source://activerecord//lib/arel/visitors/visitor.rb#10
  def accept(object, collector = T.unsafe(nil)); end

  private

  # source://activerecord//lib/arel/visitors/visitor.rb#15
  def dispatch; end

  # source://activerecord//lib/arel/visitors/visitor.rb#23
  def get_dispatch_cache; end

  # source://activerecord//lib/arel/visitors/visitor.rb#27
  def visit(object, collector = T.unsafe(nil)); end

  class << self
    # source://activerecord//lib/arel/visitors/visitor.rb#17
    def dispatch_cache; end
  end
end

# source://activerecord//lib/arel/window_predications.rb#4
module Arel::WindowPredications
  # source://activerecord//lib/arel/window_predications.rb#5
  def over(expr = T.unsafe(nil)); end
end
