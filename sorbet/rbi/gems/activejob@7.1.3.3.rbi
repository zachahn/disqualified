# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activejob` gem.
# Please instead update this file by running `bin/tapioca gem activejob`.


# source://activejob//lib/active_job/gem_version.rb#3
module ActiveJob
  extend ::ActiveSupport::Autoload

  class << self
    # source://activejob//lib/active_job/queue_adapter.rb#7
    def adapter_name(adapter); end

    # source://activejob//lib/active_job/deprecator.rb#4
    def deprecator; end

    # source://activejob//lib/active_job/gem_version.rb#5
    def gem_version; end

    # source://activejob//lib/active_job/enqueuing.rb#16
    def perform_all_later(*jobs); end

    # source://activejob//lib/active_job.rb#53
    def use_big_decimal_serializer; end

    # source://activejob//lib/active_job.rb#53
    def use_big_decimal_serializer=(_arg0); end

    # source://activejob//lib/active_job.rb#61
    def verbose_enqueue_logs; end

    # source://activejob//lib/active_job.rb#61
    def verbose_enqueue_logs=(_arg0); end

    # source://activejob//lib/active_job/version.rb#7
    def version; end

    private

    # source://activejob//lib/active_job/instrumentation.rb#6
    def instrument_enqueue_all(queue_adapter, jobs); end
  end
end

# source://activejob//lib/active_job/arguments.rb#28
module ActiveJob::Arguments
  extend ::ActiveJob::Arguments

  # source://activejob//lib/active_job/arguments.rb#42
  def deserialize(arguments); end

  # source://activejob//lib/active_job/arguments.rb#34
  def serialize(arguments); end

  private

  # source://activejob//lib/active_job/arguments.rb#201
  def convert_to_global_id_hash(argument); end

  # source://activejob//lib/active_job/arguments.rb#148
  def custom_serialized?(hash); end

  # source://activejob//lib/active_job/arguments.rb#119
  def deserialize_argument(argument); end

  # source://activejob//lib/active_job/arguments.rb#144
  def deserialize_global_id(hash); end

  # source://activejob//lib/active_job/arguments.rb#158
  def deserialize_hash(serialized_hash); end

  # source://activejob//lib/active_job/arguments.rb#71
  def serialize_argument(argument); end

  # source://activejob//lib/active_job/arguments.rb#152
  def serialize_hash(argument); end

  # source://activejob//lib/active_job/arguments.rb#171
  def serialize_hash_key(key); end

  # source://activejob//lib/active_job/arguments.rb#182
  def serialize_indifferent_hash(indifferent_hash); end

  # source://activejob//lib/active_job/arguments.rb#140
  def serialized_global_id?(hash); end

  # source://activejob//lib/active_job/arguments.rb#188
  def transform_symbol_keys(hash, symbol_keys); end
end

# source://activejob//lib/active_job/arguments.rb#50
ActiveJob::Arguments::GLOBALID_KEY = T.let(T.unsafe(nil), String)

# source://activejob//lib/active_job/arguments.rb#58
ActiveJob::Arguments::OBJECT_SERIALIZER_KEY = T.let(T.unsafe(nil), String)

# source://activejob//lib/active_job/arguments.rb#61
ActiveJob::Arguments::RESERVED_KEYS = T.let(T.unsafe(nil), Array)

# source://activejob//lib/active_job/arguments.rb#54
ActiveJob::Arguments::RUBY2_KEYWORDS_KEY = T.let(T.unsafe(nil), String)

# source://activejob//lib/active_job/arguments.rb#52
ActiveJob::Arguments::SYMBOL_KEYS_KEY = T.let(T.unsafe(nil), String)

# source://activejob//lib/active_job/arguments.rb#56
ActiveJob::Arguments::WITH_INDIFFERENT_ACCESS_KEY = T.let(T.unsafe(nil), String)

# source://activejob//lib/active_job/base.rb#63
class ActiveJob::Base
  include ::ActiveJob::Core
  include ::ActiveJob::QueueAdapter
  include ::ActiveJob::QueueName
  include ::ActiveJob::QueuePriority
  include ::ActiveJob::Enqueuing
  include ::ActiveSupport::Rescuable
  include ::ActiveJob::Execution
  include ::ActiveSupport::Callbacks
  include ::ActiveJob::Callbacks
  include ::ActiveJob::Exceptions
  include ::ActiveJob::Instrumentation
  include ::ActiveJob::Logging
  include ::ActiveJob::Timezones
  include ::ActiveJob::Translation
  include ::ActiveJob::TestHelper::TestQueueAdapter
  extend ::ActiveJob::Core::ClassMethods
  extend ::ActiveJob::QueueAdapter::ClassMethods
  extend ::ActiveJob::QueueName::ClassMethods
  extend ::ActiveJob::QueuePriority::ClassMethods
  extend ::ActiveJob::Enqueuing::ClassMethods
  extend ::ActiveSupport::Rescuable::ClassMethods
  extend ::ActiveJob::Execution::ClassMethods
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveJob::Callbacks::ClassMethods
  extend ::ActiveJob::Exceptions::ClassMethods
  extend ::ActiveJob::TestHelper::TestQueueAdapter::ClassMethods

  # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#70
  def __callbacks; end

  # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#70
  def __callbacks?; end

  # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#963
  def _enqueue_callbacks; end

  # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#963
  def _perform_callbacks; end

  # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#951
  def _run_enqueue_callbacks(&block); end

  # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#951
  def _run_perform_callbacks(&block); end

  # source://activejob//lib/active_job/exceptions.rb#12
  def after_discard_procs; end

  # source://activejob//lib/active_job/exceptions.rb#12
  def after_discard_procs=(_arg0); end

  # source://activejob//lib/active_job/exceptions.rb#12
  def after_discard_procs?; end

  # source://activejob//lib/active_job/logging.rb#11
  def logger; end

  # source://activejob//lib/active_job/logging.rb#11
  def logger=(val); end

  # source://activejob//lib/active_job/queue_adapter.rb#26
  def queue_adapter(&block); end

  # source://activejob//lib/active_job/queue_name.rb#57
  def queue_name_prefix; end

  # source://activejob//lib/active_job/queue_name.rb#57
  def queue_name_prefix=(_arg0); end

  # source://activejob//lib/active_job/queue_name.rb#57
  def queue_name_prefix?; end

  # source://activesupport/7.1.3.3/lib/active_support/rescuable.rb#15
  def rescue_handlers; end

  # source://activesupport/7.1.3.3/lib/active_support/rescuable.rb#15
  def rescue_handlers=(_arg0); end

  # source://activesupport/7.1.3.3/lib/active_support/rescuable.rb#15
  def rescue_handlers?; end

  class << self
    # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#70
    def __callbacks=(value); end

    # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#70
    def __callbacks?; end

    # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#955
    def _enqueue_callbacks; end

    # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#959
    def _enqueue_callbacks=(value); end

    # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#955
    def _perform_callbacks; end

    # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#959
    def _perform_callbacks=(value); end

    # source://activejob//lib/active_job/queue_adapter.rb#24
    def _queue_adapter; end

    # source://activejob//lib/active_job/queue_adapter.rb#24
    def _queue_adapter=(value); end

    # source://activejob//lib/active_job/queue_adapter.rb#23
    def _queue_adapter_name; end

    # source://activejob//lib/active_job/queue_adapter.rb#23
    def _queue_adapter_name=(value); end

    # source://activejob//lib/active_job/test_helper.rb#19
    def _test_adapter; end

    # source://activejob//lib/active_job/test_helper.rb#19
    def _test_adapter=(value); end

    # source://activejob//lib/active_job/exceptions.rb#12
    def after_discard_procs; end

    # source://activejob//lib/active_job/exceptions.rb#12
    def after_discard_procs=(value); end

    # source://activejob//lib/active_job/exceptions.rb#12
    def after_discard_procs?; end

    # source://activejob//lib/active_job/logging.rb#12
    def log_arguments; end

    # source://activejob//lib/active_job/logging.rb#12
    def log_arguments=(value); end

    # source://activejob//lib/active_job/logging.rb#12
    def log_arguments?; end

    # source://activejob//lib/active_job/logging.rb#11
    def logger; end

    # source://activejob//lib/active_job/logging.rb#11
    def logger=(val); end

    # source://activejob//lib/active_job/queue_priority.rb#49
    def priority; end

    # source://activejob//lib/active_job/queue_priority.rb#49
    def priority=(value); end

    # source://activejob//lib/active_job/queue_priority.rb#49
    def priority?; end

    # source://activejob//lib/active_job/queue_name.rb#55
    def queue_name; end

    # source://activejob//lib/active_job/queue_name.rb#55
    def queue_name=(value); end

    # source://activejob//lib/active_job/queue_name.rb#55
    def queue_name?; end

    # source://activejob//lib/active_job/queue_name.rb#56
    def queue_name_delimiter; end

    # source://activejob//lib/active_job/queue_name.rb#56
    def queue_name_delimiter=(value); end

    # source://activejob//lib/active_job/queue_name.rb#56
    def queue_name_delimiter?; end

    # source://activejob//lib/active_job/queue_name.rb#57
    def queue_name_prefix; end

    # source://activejob//lib/active_job/queue_name.rb#57
    def queue_name_prefix=(value); end

    # source://activejob//lib/active_job/queue_name.rb#57
    def queue_name_prefix?; end

    # source://activesupport/7.1.3.3/lib/active_support/rescuable.rb#15
    def rescue_handlers; end

    # source://activesupport/7.1.3.3/lib/active_support/rescuable.rb#15
    def rescue_handlers=(value); end

    # source://activesupport/7.1.3.3/lib/active_support/rescuable.rb#15
    def rescue_handlers?; end

    # source://activejob//lib/active_job/exceptions.rb#11
    def retry_jitter; end

    # source://activejob//lib/active_job/exceptions.rb#11
    def retry_jitter=(value); end
  end
end

# source://activejob//lib/active_job/callbacks.rb#21
module ActiveJob::Callbacks
  extend ::ActiveSupport::Concern
  extend ::ActiveSupport::Callbacks
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveJob::Callbacks::ClassMethods

  class << self
    # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#70
    def __callbacks?; end

    # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#963
    def _execute_callbacks; end

    # source://activesupport/7.1.3.3/lib/active_support/callbacks.rb#951
    def _run_execute_callbacks(&block); end
  end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

# source://activejob//lib/active_job/callbacks.rb#37
module ActiveJob::Callbacks::ClassMethods
  # source://activejob//lib/active_job/callbacks.rb#144
  def after_enqueue(*filters, &blk); end

  # source://activejob//lib/active_job/callbacks.rb#72
  def after_perform(*filters, &blk); end

  # source://activejob//lib/active_job/callbacks.rb#165
  def around_enqueue(*filters, &blk); end

  # source://activejob//lib/active_job/callbacks.rb#105
  def around_perform(*filters, &blk); end

  # source://activejob//lib/active_job/callbacks.rb#124
  def before_enqueue(*filters, &blk); end

  # source://activejob//lib/active_job/callbacks.rb#53
  def before_perform(*filters, &blk); end
end

# source://activejob//lib/active_job/configured_job.rb#4
class ActiveJob::ConfiguredJob
  # source://activejob//lib/active_job/configured_job.rb#5
  def initialize(job_class, options = T.unsafe(nil)); end

  # source://activejob//lib/active_job/configured_job.rb#18
  def perform_all_later(multi_args); end

  # source://activejob//lib/active_job/configured_job.rb#14
  def perform_later(*_arg0, **_arg1, &_arg2); end

  # source://activejob//lib/active_job/configured_job.rb#10
  def perform_now(*_arg0, **_arg1, &_arg2); end
end

# source://activejob//lib/active_job/core.rb#8
module ActiveJob::Core
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveJob::Core::ClassMethods

  # source://activejob//lib/active_job/core.rb#95
  def initialize(*arguments, **_arg1); end

  # source://activejob//lib/active_job/core.rb#18
  def _scheduled_at_time; end

  # source://activejob//lib/active_job/core.rb#12
  def arguments; end

  # source://activejob//lib/active_job/core.rb#12
  def arguments=(_arg0); end

  # source://activejob//lib/active_job/core.rb#153
  def deserialize(job_data); end

  # source://activejob//lib/active_job/core.rb#58
  def enqueue_error; end

  # source://activejob//lib/active_job/core.rb#58
  def enqueue_error=(_arg0); end

  # source://activejob//lib/active_job/core.rb#48
  def enqueued_at; end

  # source://activejob//lib/active_job/core.rb#48
  def enqueued_at=(_arg0); end

  # source://activejob//lib/active_job/core.rb#39
  def exception_executions; end

  # source://activejob//lib/active_job/core.rb#39
  def exception_executions=(_arg0); end

  # source://activejob//lib/active_job/core.rb#33
  def executions; end

  # source://activejob//lib/active_job/core.rb#33
  def executions=(_arg0); end

  # source://activejob//lib/active_job/core.rb#21
  def job_id; end

  # source://activejob//lib/active_job/core.rb#21
  def job_id=(_arg0); end

  # source://activejob//lib/active_job/core.rb#42
  def locale; end

  # source://activejob//lib/active_job/core.rb#42
  def locale=(_arg0); end

  # source://activejob//lib/active_job/core.rb#27
  def priority=(_arg0); end

  # source://activejob//lib/active_job/core.rb#30
  def provider_job_id; end

  # source://activejob//lib/active_job/core.rb#30
  def provider_job_id=(_arg0); end

  # source://activejob//lib/active_job/core.rb#24
  def queue_name=(_arg0); end

  # source://activejob//lib/active_job/core.rb#16
  def scheduled_at; end

  # source://activejob//lib/active_job/core.rb#177
  def scheduled_at=(value); end

  # source://activejob//lib/active_job/core.rb#110
  def serialize; end

  # source://activejob//lib/active_job/core.rb#13
  def serialized_arguments=(_arg0); end

  # source://activejob//lib/active_job/core.rb#168
  def set(options = T.unsafe(nil)); end

  # source://activejob//lib/active_job/core.rb#51
  def successfully_enqueued=(_arg0); end

  # source://activejob//lib/active_job/core.rb#53
  def successfully_enqueued?; end

  # source://activejob//lib/active_job/core.rb#45
  def timezone; end

  # source://activejob//lib/active_job/core.rb#45
  def timezone=(_arg0); end

  private

  # source://activejob//lib/active_job/core.rb#213
  def arguments_serialized?; end

  # source://activejob//lib/active_job/core.rb#209
  def deserialize_arguments(serialized_args); end

  # source://activejob//lib/active_job/core.rb#198
  def deserialize_arguments_if_needed; end

  # source://activejob//lib/active_job/core.rb#205
  def serialize_arguments(arguments); end

  # source://activejob//lib/active_job/core.rb#190
  def serialize_arguments_if_needed(arguments); end
end

# source://activejob//lib/active_job/core.rb#62
module ActiveJob::Core::ClassMethods
  # source://activejob//lib/active_job/core.rb#64
  def deserialize(job_data); end

  # source://activejob//lib/active_job/core.rb#88
  def set(options = T.unsafe(nil)); end
end

# source://activejob//lib/active_job/arguments.rb#10
class ActiveJob::DeserializationError < ::StandardError
  # source://activejob//lib/active_job/arguments.rb#11
  def initialize; end
end

# source://activejob//lib/active_job/enqueuing.rb#10
class ActiveJob::EnqueueError < ::StandardError; end

# source://activejob//lib/active_job/enqueuing.rb#42
module ActiveJob::Enqueuing
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveJob::Enqueuing::ClassMethods

  # source://activejob//lib/active_job/enqueuing.rb#89
  def enqueue(options = T.unsafe(nil)); end
end

# source://activejob//lib/active_job/enqueuing.rb#46
module ActiveJob::Enqueuing::ClassMethods
  # source://activejob//lib/active_job/enqueuing.rb#58
  def perform_later(*_arg0, **_arg1, &_arg2); end

  private

  # source://activejob//lib/active_job/enqueuing.rb#68
  def job_or_instantiate(*args, **_arg1); end
end

# source://activejob//lib/active_job/exceptions.rb#7
module ActiveJob::Exceptions
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::Exceptions::ClassMethods

  # source://activejob//lib/active_job/exceptions.rb#157
  def retry_job(options = T.unsafe(nil)); end

  private

  # source://activejob//lib/active_job/exceptions.rb#167
  def determine_delay(seconds_or_duration_or_algorithm:, executions:, jitter: T.unsafe(nil)); end

  # source://activejob//lib/active_job/exceptions.rb#188
  def determine_jitter_for_delay(delay, jitter); end

  # source://activejob//lib/active_job/exceptions.rb#193
  def executions_for(exceptions); end

  # source://activejob//lib/active_job/exceptions.rb#202
  def run_after_discard_procs(exception); end

  module GeneratedClassMethods
    def after_discard_procs; end
    def after_discard_procs=(value); end
    def after_discard_procs?; end
    def retry_jitter; end
    def retry_jitter=(value); end
  end

  module GeneratedInstanceMethods
    def after_discard_procs; end
    def after_discard_procs=(value); end
    def after_discard_procs?; end
  end
end

# source://activejob//lib/active_job/exceptions.rb#15
module ActiveJob::Exceptions::ClassMethods
  # source://activejob//lib/active_job/exceptions.rb#130
  def after_discard(&blk); end

  # source://activejob//lib/active_job/exceptions.rb#109
  def discard_on(*exceptions); end

  # source://activejob//lib/active_job/exceptions.rb#62
  def retry_on(*exceptions, wait: T.unsafe(nil), attempts: T.unsafe(nil), queue: T.unsafe(nil), priority: T.unsafe(nil), jitter: T.unsafe(nil)); end
end

# source://activejob//lib/active_job/exceptions.rb#164
ActiveJob::Exceptions::JITTER_DEFAULT = T.let(T.unsafe(nil), Object)

# source://activejob//lib/active_job/execution.rb#13
module ActiveJob::Execution
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Rescuable

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Rescuable::ClassMethods
  mixes_in_class_methods ::ActiveJob::Execution::ClassMethods

  # source://activejob//lib/active_job/execution.rb#61
  def perform(*_arg0); end

  # source://activejob//lib/active_job/execution.rb#46
  def perform_now; end

  private

  # source://activejob//lib/active_job/execution.rb#66
  def _perform_job; end

  module GeneratedClassMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end

  module GeneratedInstanceMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end
end

# source://activejob//lib/active_job/execution.rb#18
module ActiveJob::Execution::ClassMethods
  # source://activejob//lib/active_job/execution.rb#27
  def execute(job_data); end

  # source://activejob//lib/active_job/execution.rb#23
  def perform_now(*_arg0, **_arg1, &_arg2); end
end

# source://activejob//lib/active_job/instrumentation.rb#16
module ActiveJob::Instrumentation
  extend ::ActiveSupport::Concern

  # source://activejob//lib/active_job/instrumentation.rb#25
  def perform_now; end

  private

  # source://activejob//lib/active_job/instrumentation.rb#30
  def _perform_job; end

  # source://activejob//lib/active_job/instrumentation.rb#47
  def halted_callback_hook(*_arg0); end

  # source://activejob//lib/active_job/instrumentation.rb#35
  def instrument(operation, payload = T.unsafe(nil), &block); end
end

# source://activejob//lib/active_job/log_subscriber.rb#6
class ActiveJob::LogSubscriber < ::ActiveSupport::LogSubscriber
  # source://activejob//lib/active_job/log_subscriber.rb#7
  def backtrace_cleaner; end

  # source://activejob//lib/active_job/log_subscriber.rb#7
  def backtrace_cleaner=(_arg0); end

  # source://activejob//lib/active_job/log_subscriber.rb#7
  def backtrace_cleaner?; end

  # source://activejob//lib/active_job/log_subscriber.rb#130
  def discard(event); end

  # source://activejob//lib/active_job/log_subscriber.rb#9
  def enqueue(event); end

  # source://activejob//lib/active_job/log_subscriber.rb#49
  def enqueue_all(event); end

  # source://activejob//lib/active_job/log_subscriber.rb#29
  def enqueue_at(event); end

  # source://activejob//lib/active_job/log_subscriber.rb#105
  def enqueue_retry(event); end

  # source://activejob//lib/active_job/log_subscriber.rb#86
  def perform(event); end

  # source://activejob//lib/active_job/log_subscriber.rb#76
  def perform_start(event); end

  # source://activejob//lib/active_job/log_subscriber.rb#120
  def retry_stopped(event); end

  private

  # source://activejob//lib/active_job/log_subscriber.rb#145
  def args_info(job); end

  # source://activejob//lib/active_job/log_subscriber.rb#203
  def enqueued_jobs_message(adapter, enqueued_jobs); end

  # source://activejob//lib/active_job/log_subscriber.rb#183
  def error(progname = T.unsafe(nil), &block); end

  # source://activejob//lib/active_job/log_subscriber.rb#199
  def extract_enqueue_source_location(locations); end

  # source://activejob//lib/active_job/log_subscriber.rb#154
  def format(arg); end

  # source://activejob//lib/active_job/log_subscriber.rb#175
  def info(progname = T.unsafe(nil), &block); end

  # source://activejob//lib/active_job/log_subscriber.rb#191
  def log_enqueue_source; end

  # source://activejob//lib/active_job/log_subscriber.rb#171
  def logger; end

  # source://activejob//lib/active_job/log_subscriber.rb#141
  def queue_name(event); end

  # source://activejob//lib/active_job/log_subscriber.rb#167
  def scheduled_at(event); end

  class << self
    # source://activejob//lib/active_job/log_subscriber.rb#7
    def backtrace_cleaner; end

    # source://activejob//lib/active_job/log_subscriber.rb#7
    def backtrace_cleaner=(value); end

    # source://activejob//lib/active_job/log_subscriber.rb#7
    def backtrace_cleaner?; end

    # source://activesupport/7.1.3.3/lib/active_support/log_subscriber.rb#87
    def log_levels; end
  end
end

# source://activejob//lib/active_job/logging.rb#7
module ActiveJob::Logging
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods

  # source://activejob//lib/active_job/logging.rb#17
  def perform_now; end

  private

  # source://activejob//lib/active_job/logging.rb#31
  def logger_tagged_by_active_job?; end

  # source://activejob//lib/active_job/logging.rb#22
  def tag_logger(*tags, &block); end

  module GeneratedClassMethods
    def log_arguments; end
    def log_arguments=(value); end
    def log_arguments?; end
  end

  module GeneratedInstanceMethods; end
end

# source://activejob//lib/active_job/queue_adapter.rb#19
module ActiveJob::QueueAdapter
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::QueueAdapter::ClassMethods

  module GeneratedClassMethods
    def _queue_adapter; end
    def _queue_adapter=(value); end
    def _queue_adapter_name; end
    def _queue_adapter_name=(value); end
  end

  module GeneratedInstanceMethods; end
end

# source://activejob//lib/active_job/queue_adapter.rb#32
module ActiveJob::QueueAdapter::ClassMethods
  # source://activejob//lib/active_job/queue_adapter.rb#35
  def queue_adapter; end

  # source://activejob//lib/active_job/queue_adapter.rb#48
  def queue_adapter=(name_or_adapter); end

  # source://activejob//lib/active_job/queue_adapter.rb#41
  def queue_adapter_name; end

  private

  # source://activejob//lib/active_job/queue_adapter.rb#64
  def assign_adapter(adapter_name, queue_adapter); end

  # source://activejob//lib/active_job/queue_adapter.rb#71
  def queue_adapter?(object); end
end

# source://activejob//lib/active_job/queue_adapter.rb#69
ActiveJob::QueueAdapter::ClassMethods::QUEUE_ADAPTER_METHODS = T.let(T.unsafe(nil), Array)

# source://activejob//lib/active_job/queue_adapters.rb#114
module ActiveJob::QueueAdapters
  extend ::ActiveSupport::Autoload

  class << self
    # source://activejob//lib/active_job/queue_adapters.rb#137
    def lookup(name); end
  end
end

# source://activejob//lib/active_job/queue_adapters.rb#129
ActiveJob::QueueAdapters::ADAPTER = T.let(T.unsafe(nil), String)

# source://activejob//lib/active_job/queue_adapters/async_adapter.rb#33
class ActiveJob::QueueAdapters::AsyncAdapter
  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#35
  def initialize(**executor_options); end

  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#39
  def enqueue(job); end

  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#43
  def enqueue_at(job, timestamp); end

  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#55
  def immediate=(immediate); end

  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#50
  def shutdown(wait: T.unsafe(nil)); end
end

# source://activejob//lib/active_job/queue_adapters/async_adapter.rb#63
class ActiveJob::QueueAdapters::AsyncAdapter::JobWrapper
  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#64
  def initialize(job); end

  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#69
  def perform; end
end

# source://activejob//lib/active_job/queue_adapters/async_adapter.rb#74
class ActiveJob::QueueAdapters::AsyncAdapter::Scheduler
  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#86
  def initialize(**options); end

  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#92
  def enqueue(job, queue_name:); end

  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#96
  def enqueue_at(job, timestamp, queue_name:); end

  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#110
  def executor; end

  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#84
  def immediate; end

  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#84
  def immediate=(_arg0); end

  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#105
  def shutdown(wait: T.unsafe(nil)); end
end

# source://activejob//lib/active_job/queue_adapters/async_adapter.rb#75
ActiveJob::QueueAdapters::AsyncAdapter::Scheduler::DEFAULT_EXECUTOR_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://activejob//lib/active_job/queue_adapters/inline_adapter.rb#13
class ActiveJob::QueueAdapters::InlineAdapter
  # source://activejob//lib/active_job/queue_adapters/inline_adapter.rb#14
  def enqueue(job); end

  # source://activejob//lib/active_job/queue_adapters/inline_adapter.rb#18
  def enqueue_at(*_arg0); end
end

# source://activejob//lib/active_job/queue_adapters/test_adapter.rb#14
class ActiveJob::QueueAdapters::TestAdapter
  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#15
  def at; end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#15
  def at=(_arg0); end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#28
  def enqueue(job); end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#33
  def enqueue_at(job, timestamp); end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#19
  def enqueued_jobs; end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#16
  def enqueued_jobs=(_arg0); end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#15
  def filter; end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#15
  def filter=(_arg0); end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#15
  def perform_enqueued_at_jobs; end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#15
  def perform_enqueued_at_jobs=(_arg0); end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#15
  def perform_enqueued_jobs; end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#15
  def perform_enqueued_jobs=(_arg0); end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#24
  def performed_jobs; end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#16
  def performed_jobs=(_arg0); end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#15
  def queue; end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#15
  def queue=(_arg0); end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#15
  def reject; end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#15
  def reject=(_arg0); end

  private

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#79
  def filter_as_proc(filter); end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#57
  def filtered?(job); end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#71
  def filtered_job_class?(job); end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#65
  def filtered_queue?(job); end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#61
  def filtered_time?(job); end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#39
  def job_to_hash(job, extras = T.unsafe(nil)); end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#48
  def perform_or_enqueue(perform, job, job_data); end
end

# source://activejob//lib/active_job/queue_name.rb#4
module ActiveJob::QueueName
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::QueueName::ClassMethods

  # source://activejob//lib/active_job/queue_name.rb#61
  def queue_name; end

  module GeneratedClassMethods
    def queue_name; end
    def queue_name=(value); end
    def queue_name?; end
    def queue_name_delimiter; end
    def queue_name_delimiter=(value); end
    def queue_name_delimiter?; end
    def queue_name_prefix; end
    def queue_name_prefix=(value); end
    def queue_name_prefix?; end
  end

  module GeneratedInstanceMethods
    def queue_name_prefix; end
    def queue_name_prefix=(value); end
    def queue_name_prefix?; end
  end
end

# source://activejob//lib/active_job/queue_name.rb#8
module ActiveJob::QueueName::ClassMethods
  # source://activejob//lib/active_job/queue_name.rb#9
  def default_queue_name; end

  # source://activejob//lib/active_job/queue_name.rb#9
  def default_queue_name=(val); end

  # source://activejob//lib/active_job/queue_name.rb#39
  def queue_as(part_name = T.unsafe(nil), &block); end

  # source://activejob//lib/active_job/queue_name.rb#47
  def queue_name_from_part(part_name); end

  class << self
    # source://activejob//lib/active_job/queue_name.rb#9
    def default_queue_name; end

    # source://activejob//lib/active_job/queue_name.rb#9
    def default_queue_name=(val); end
  end
end

# source://activejob//lib/active_job/queue_priority.rb#4
module ActiveJob::QueuePriority
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::QueuePriority::ClassMethods

  # source://activejob//lib/active_job/queue_priority.rb#53
  def priority; end

  module GeneratedClassMethods
    def priority; end
    def priority=(value); end
    def priority?; end
  end

  module GeneratedInstanceMethods; end
end

# source://activejob//lib/active_job/queue_priority.rb#8
module ActiveJob::QueuePriority::ClassMethods
  # source://activejob//lib/active_job/queue_priority.rb#9
  def default_priority; end

  # source://activejob//lib/active_job/queue_priority.rb#9
  def default_priority=(val); end

  # source://activejob//lib/active_job/queue_priority.rb#39
  def queue_with_priority(priority = T.unsafe(nil), &block); end

  class << self
    # source://activejob//lib/active_job/queue_priority.rb#9
    def default_priority; end

    # source://activejob//lib/active_job/queue_priority.rb#9
    def default_priority=(val); end
  end
end

# source://activejob//lib/active_job/railtie.rb#8
class ActiveJob::Railtie < ::Rails::Railtie; end

# source://activejob//lib/active_job/arguments.rb#26
class ActiveJob::SerializationError < ::ArgumentError; end

# source://activejob//lib/active_job/serializers.rb#10
module ActiveJob::Serializers
  extend ::ActiveSupport::Autoload

  # source://activejob//lib/active_job/serializers.rb#25
  def _additional_serializers; end

  # source://activejob//lib/active_job/serializers.rb#25
  def _additional_serializers=(val); end

  class << self
    # source://activejob//lib/active_job/serializers.rb#25
    def _additional_serializers; end

    # source://activejob//lib/active_job/serializers.rb#25
    def _additional_serializers=(val); end

    # source://activejob//lib/active_job/serializers.rb#57
    def add_serializers(*new_serializers); end

    # source://activejob//lib/active_job/serializers.rb#41
    def deserialize(argument); end

    # source://activejob//lib/active_job/serializers.rb#32
    def serialize(argument); end

    # source://activejob//lib/active_job/serializers.rb#52
    def serializers; end
  end
end

# source://activejob//lib/active_job/serializers/big_decimal_serializer.rb#7
class ActiveJob::Serializers::BigDecimalSerializer < ::ActiveJob::Serializers::ObjectSerializer
  # source://activejob//lib/active_job/serializers/big_decimal_serializer.rb#12
  def deserialize(hash); end

  # source://activejob//lib/active_job/serializers/big_decimal_serializer.rb#8
  def serialize(big_decimal); end

  private

  # source://activejob//lib/active_job/serializers/big_decimal_serializer.rb#17
  def klass; end
end

# source://activejob//lib/active_job/serializers/date_serializer.rb#5
class ActiveJob::Serializers::DateSerializer < ::ActiveJob::Serializers::ObjectSerializer
  # source://activejob//lib/active_job/serializers/date_serializer.rb#10
  def deserialize(hash); end

  # source://activejob//lib/active_job/serializers/date_serializer.rb#6
  def serialize(date); end

  private

  # source://activejob//lib/active_job/serializers/date_serializer.rb#15
  def klass; end
end

# source://activejob//lib/active_job/serializers/date_time_serializer.rb#5
class ActiveJob::Serializers::DateTimeSerializer < ::ActiveJob::Serializers::TimeObjectSerializer
  # source://activejob//lib/active_job/serializers/date_time_serializer.rb#6
  def deserialize(hash); end

  private

  # source://activejob//lib/active_job/serializers/date_time_serializer.rb#11
  def klass; end
end

# source://activejob//lib/active_job/serializers/duration_serializer.rb#5
class ActiveJob::Serializers::DurationSerializer < ::ActiveJob::Serializers::ObjectSerializer
  # source://activejob//lib/active_job/serializers/duration_serializer.rb#12
  def deserialize(hash); end

  # source://activejob//lib/active_job/serializers/duration_serializer.rb#6
  def serialize(duration); end

  private

  # source://activejob//lib/active_job/serializers/duration_serializer.rb#20
  def klass; end
end

# source://activejob//lib/active_job/serializers/module_serializer.rb#5
class ActiveJob::Serializers::ModuleSerializer < ::ActiveJob::Serializers::ObjectSerializer
  # source://activejob//lib/active_job/serializers/module_serializer.rb#11
  def deserialize(hash); end

  # source://activejob//lib/active_job/serializers/module_serializer.rb#6
  def serialize(constant); end

  private

  # source://activejob//lib/active_job/serializers/module_serializer.rb#16
  def klass; end
end

# source://activejob//lib/active_job/serializers/object_serializer.rb#24
class ActiveJob::Serializers::ObjectSerializer
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # source://activejob//lib/active_job/serializers/object_serializer.rb#42
  def deserialize(json); end

  # source://activejob//lib/active_job/serializers/object_serializer.rb#37
  def serialize(hash); end

  # source://activejob//lib/active_job/serializers/object_serializer.rb#32
  def serialize?(argument); end

  private

  # source://activejob//lib/active_job/serializers/object_serializer.rb#48
  def klass; end

  class << self
    # source://activejob//lib/active_job/serializers/object_serializer.rb#28
    def deserialize(*_arg0, **_arg1, &_arg2); end

    # source://activejob//lib/active_job/serializers/object_serializer.rb#28
    def serialize(*_arg0, **_arg1, &_arg2); end

    # source://activejob//lib/active_job/serializers/object_serializer.rb#28
    def serialize?(*_arg0, **_arg1, &_arg2); end

    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://activejob//lib/active_job/serializers/range_serializer.rb#5
class ActiveJob::Serializers::RangeSerializer < ::ActiveJob::Serializers::ObjectSerializer
  # source://activejob//lib/active_job/serializers/range_serializer.rb#13
  def deserialize(hash); end

  # source://activejob//lib/active_job/serializers/range_serializer.rb#8
  def serialize(range); end

  private

  # source://activejob//lib/active_job/serializers/range_serializer.rb#18
  def klass; end
end

# source://activejob//lib/active_job/serializers/range_serializer.rb#6
ActiveJob::Serializers::RangeSerializer::KEYS = T.let(T.unsafe(nil), Array)

# source://activejob//lib/active_job/serializers/symbol_serializer.rb#5
class ActiveJob::Serializers::SymbolSerializer < ::ActiveJob::Serializers::ObjectSerializer
  # source://activejob//lib/active_job/serializers/symbol_serializer.rb#10
  def deserialize(argument); end

  # source://activejob//lib/active_job/serializers/symbol_serializer.rb#6
  def serialize(argument); end

  private

  # source://activejob//lib/active_job/serializers/symbol_serializer.rb#15
  def klass; end
end

# source://activejob//lib/active_job/serializers/time_object_serializer.rb#5
class ActiveJob::Serializers::TimeObjectSerializer < ::ActiveJob::Serializers::ObjectSerializer
  # source://activejob//lib/active_job/serializers/time_object_serializer.rb#8
  def serialize(time); end
end

# source://activejob//lib/active_job/serializers/time_object_serializer.rb#6
ActiveJob::Serializers::TimeObjectSerializer::NANO_PRECISION = T.let(T.unsafe(nil), Integer)

# source://activejob//lib/active_job/serializers/time_serializer.rb#5
class ActiveJob::Serializers::TimeSerializer < ::ActiveJob::Serializers::TimeObjectSerializer
  # source://activejob//lib/active_job/serializers/time_serializer.rb#6
  def deserialize(hash); end

  private

  # source://activejob//lib/active_job/serializers/time_serializer.rb#11
  def klass; end
end

# source://activejob//lib/active_job/serializers/time_with_zone_serializer.rb#5
class ActiveJob::Serializers::TimeWithZoneSerializer < ::ActiveJob::Serializers::ObjectSerializer
  # source://activejob//lib/active_job/serializers/time_with_zone_serializer.rb#15
  def deserialize(hash); end

  # source://activejob//lib/active_job/serializers/time_with_zone_serializer.rb#8
  def serialize(time_with_zone); end

  private

  # source://activejob//lib/active_job/serializers/time_with_zone_serializer.rb#20
  def klass; end
end

# source://activejob//lib/active_job/serializers/time_with_zone_serializer.rb#6
ActiveJob::Serializers::TimeWithZoneSerializer::NANO_PRECISION = T.let(T.unsafe(nil), Integer)

# source://activejob//lib/active_job/test_case.rb#6
class ActiveJob::TestCase < ::ActiveSupport::TestCase
  include ::ActiveJob::TestHelper
end

# source://activejob//lib/active_job/test_helper.rb#8
module ActiveJob::TestHelper
  include ::ActiveSupport::Testing::Assertions

  # source://activejob//lib/active_job/test_helper.rb#53
  def after_teardown; end

  # source://activejob//lib/active_job/test_helper.rb#120
  def assert_enqueued_jobs(number, only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  # source://activejob//lib/active_job/test_helper.rb#396
  def assert_enqueued_with(job: T.unsafe(nil), args: T.unsafe(nil), at: T.unsafe(nil), queue: T.unsafe(nil), priority: T.unsafe(nil), &block); end

  # source://activejob//lib/active_job/test_helper.rb#182
  def assert_no_enqueued_jobs(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  # source://activejob//lib/active_job/test_helper.rb#340
  def assert_no_performed_jobs(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  # source://activejob//lib/active_job/test_helper.rb#272
  def assert_performed_jobs(number, only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  # source://activejob//lib/active_job/test_helper.rb#498
  def assert_performed_with(job: T.unsafe(nil), args: T.unsafe(nil), at: T.unsafe(nil), queue: T.unsafe(nil), priority: T.unsafe(nil), &block); end

  # source://activejob//lib/active_job/test_helper.rb#41
  def before_setup; end

  # source://activejob//lib/active_job/test_helper.rb#9
  def enqueued_jobs(*_arg0, **_arg1, &_arg2); end

  # source://activejob//lib/active_job/test_helper.rb#9
  def enqueued_jobs=(arg); end

  # source://activejob//lib/active_job/test_helper.rb#606
  def perform_enqueued_jobs(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), at: T.unsafe(nil), &block); end

  # source://activejob//lib/active_job/test_helper.rb#9
  def performed_jobs(*_arg0, **_arg1, &_arg2); end

  # source://activejob//lib/active_job/test_helper.rb#9
  def performed_jobs=(arg); end

  # source://activejob//lib/active_job/test_helper.rb#644
  def queue_adapter; end

  # source://activejob//lib/active_job/test_helper.rb#63
  def queue_adapter_for_test; end

  private

  # source://activejob//lib/active_job/test_helper.rb#653
  def clear_enqueued_jobs; end

  # source://activejob//lib/active_job/test_helper.rb#657
  def clear_performed_jobs; end

  # source://activejob//lib/active_job/test_helper.rb#722
  def deserialize_args_for_assertion(job); end

  # source://activejob//lib/active_job/test_helper.rb#693
  def enqueued_jobs_with(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), at: T.unsafe(nil), &block); end

  # source://activejob//lib/active_job/test_helper.rb#687
  def filter_as_proc(filter); end

  # source://activejob//lib/active_job/test_helper.rb#701
  def flush_enqueued_jobs(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), at: T.unsafe(nil)); end

  # source://activejob//lib/active_job/test_helper.rb#729
  def instantiate_job(payload, skip_deserialize_arguments: T.unsafe(nil)); end

  # source://activejob//lib/active_job/test_helper.rb#661
  def jobs_with(jobs, only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), at: T.unsafe(nil)); end

  # source://activejob//lib/active_job/test_helper.rb#697
  def performed_jobs_with(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  # source://activejob//lib/active_job/test_helper.rb#709
  def prepare_args_for_assertion(args); end

  # source://activejob//lib/active_job/test_helper.rb#736
  def queue_adapter_changed_jobs; end

  # source://activejob//lib/active_job/test_helper.rb#649
  def using_test_adapter?; end

  # source://activejob//lib/active_job/test_helper.rb#743
  def validate_option(only: T.unsafe(nil), except: T.unsafe(nil)); end
end

# source://activejob//lib/active_job/test_helper.rb#15
module ActiveJob::TestHelper::TestQueueAdapter
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::TestHelper::TestQueueAdapter::ClassMethods

  module GeneratedClassMethods
    def _test_adapter; end
    def _test_adapter=(value); end
  end

  module GeneratedInstanceMethods; end
end

# source://activejob//lib/active_job/test_helper.rb#22
module ActiveJob::TestHelper::TestQueueAdapter::ClassMethods
  # source://activejob//lib/active_job/test_helper.rb#27
  def disable_test_adapter; end

  # source://activejob//lib/active_job/test_helper.rb#31
  def enable_test_adapter(test_adapter); end

  # source://activejob//lib/active_job/test_helper.rb#23
  def queue_adapter; end
end

# source://activejob//lib/active_job/timezones.rb#4
module ActiveJob::Timezones
  extend ::ActiveSupport::Concern
end

# source://activejob//lib/active_job/translation.rb#4
module ActiveJob::Translation
  extend ::ActiveSupport::Concern
end

# source://activejob//lib/active_job/gem_version.rb#9
module ActiveJob::VERSION; end

# source://activejob//lib/active_job/gem_version.rb#10
ActiveJob::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://activejob//lib/active_job/gem_version.rb#11
ActiveJob::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://activejob//lib/active_job/gem_version.rb#13
ActiveJob::VERSION::PRE = T.let(T.unsafe(nil), String)

# source://activejob//lib/active_job/gem_version.rb#15
ActiveJob::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://activejob//lib/active_job/gem_version.rb#12
ActiveJob::VERSION::TINY = T.let(T.unsafe(nil), Integer)
