# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `drb` gem.
# Please instead update this file by running `bin/tapioca gem drb`.


# source://drb//lib/drb/eq.rb#2
module DRb
  private

  # source://drb//lib/drb/drb.rb#1832
  def config; end

  # source://drb//lib/drb/drb.rb#1789
  def current_server; end

  # source://drb//lib/drb/drb.rb#1934
  def fetch_server(uri); end

  # source://drb//lib/drb/drb.rb#1843
  def front; end

  # source://drb//lib/drb/drb.rb#1822
  def here?(uri); end

  # source://drb//lib/drb/drb.rb#1888
  def install_acl(acl); end

  # source://drb//lib/drb/drb.rb#1880
  def install_id_conv(idconv); end

  # source://drb//lib/drb/drb.rb#1894
  def mutex; end

  # source://drb//lib/drb/drb.rb#1776
  def primary_server; end

  # source://drb//lib/drb/drb.rb#1776
  def primary_server=(_arg0); end

  # source://drb//lib/drb/drb.rb#1912
  def regist_server(server); end

  # source://drb//lib/drb/drb.rb#1921
  def remove_server(server); end

  # source://drb//lib/drb/drb.rb#1768
  def start_service(uri = T.unsafe(nil), front = T.unsafe(nil), config = T.unsafe(nil)); end

  # source://drb//lib/drb/drb.rb#1801
  def stop_service; end

  # source://drb//lib/drb/drb.rb#1869
  def thread; end

  # source://drb//lib/drb/drb.rb#1860
  def to_id(obj); end

  # source://drb//lib/drb/drb.rb#1852
  def to_obj(ref); end

  # source://drb//lib/drb/drb.rb#1810
  def uri; end

  class << self
    # source://drb//lib/drb/drb.rb#1832
    def config; end

    # source://drb//lib/drb/drb.rb#1789
    def current_server; end

    # source://drb//lib/drb/drb.rb#1934
    def fetch_server(uri); end

    # source://drb//lib/drb/drb.rb#1843
    def front; end

    # source://drb//lib/drb/drb.rb#1822
    def here?(uri); end

    # source://drb//lib/drb/drb.rb#1888
    def install_acl(acl); end

    # source://drb//lib/drb/drb.rb#1880
    def install_id_conv(idconv); end

    # source://drb//lib/drb/drb.rb#1894
    def mutex; end

    # source://drb//lib/drb/drb.rb#1776
    def primary_server; end

    # source://drb//lib/drb/drb.rb#1776
    def primary_server=(_arg0); end

    # source://drb//lib/drb/drb.rb#1912
    def regist_server(server); end

    # source://drb//lib/drb/drb.rb#1921
    def remove_server(server); end

    # source://drb//lib/drb/drb.rb#1768
    def start_service(uri = T.unsafe(nil), front = T.unsafe(nil), config = T.unsafe(nil)); end

    # source://drb//lib/drb/drb.rb#1801
    def stop_service; end

    # source://drb//lib/drb/drb.rb#1869
    def thread; end

    # source://drb//lib/drb/drb.rb#1860
    def to_id(obj); end

    # source://drb//lib/drb/drb.rb#1852
    def to_obj(ref); end

    # source://drb//lib/drb/drb.rb#1810
    def uri; end
  end
end

# source://drb//lib/drb/drb.rb#518
class DRb::DRbArray
  # source://drb//lib/drb/drb.rb#523
  def initialize(ary); end

  # source://drb//lib/drb/drb.rb#542
  def _dump(lv); end

  class << self
    # source://drb//lib/drb/drb.rb#538
    def _load(s); end
  end
end

# source://drb//lib/drb/drb.rb#1256
class DRb::DRbConn
  # source://drb//lib/drb/drb.rb#1317
  def initialize(remote_uri); end

  # source://drb//lib/drb/drb.rb#1333
  def alive?; end

  # source://drb//lib/drb/drb.rb#1328
  def close; end

  # source://drb//lib/drb/drb.rb#1323
  def send_message(ref, msg_id, arg, block); end

  # source://drb//lib/drb/drb.rb#1321
  def uri; end

  class << self
    # source://drb//lib/drb/drb.rb#1259
    def make_pool; end

    # source://drb//lib/drb/drb.rb#1297
    def open(remote_uri); end

    # source://drb//lib/drb/drb.rb#1292
    def stop_pool; end
  end
end

# source://drb//lib/drb/drb.rb#360
class DRb::DRbIdConv
  # source://drb//lib/drb/drb.rb#374
  def to_id(obj); end

  # source://drb//lib/drb/drb.rb#366
  def to_obj(ref); end
end

# source://drb//lib/drb/drb.rb#556
class DRb::DRbMessage
  # source://drb//lib/drb/drb.rb#557
  def initialize(config); end

  # source://drb//lib/drb/drb.rb#562
  def dump(obj, error = T.unsafe(nil)); end

  # source://drb//lib/drb/drb.rb#579
  def load(soc); end

  # source://drb//lib/drb/drb.rb#639
  def recv_reply(stream); end

  # source://drb//lib/drb/drb.rb#619
  def recv_request(stream); end

  # source://drb//lib/drb/drb.rb#633
  def send_reply(stream, succ, result); end

  # source://drb//lib/drb/drb.rb#605
  def send_request(stream, ref, msg_id, arg, b); end

  private

  # source://drb//lib/drb/drb.rb#646
  def make_proxy(obj, error = T.unsafe(nil)); end
end

# source://drb//lib/drb/eq.rb#3
class DRb::DRbObject
  # source://drb//lib/drb/drb.rb#1089
  def initialize(obj, uri = T.unsafe(nil)); end

  # source://drb//lib/drb/eq.rb#4
  def ==(other); end

  # source://drb//lib/drb/drb.rb#1115
  def __drbref; end

  # source://drb//lib/drb/drb.rb#1110
  def __drburi; end

  # source://drb//lib/drb/drb.rb#1080
  def _dump(lv); end

  # source://drb//lib/drb/eq.rb#4
  def eql?(other); end

  # source://drb//lib/drb/eq.rb#9
  def hash; end

  # source://drb//lib/drb/drb.rb#1135
  def method_missing(msg_id, *a, **_arg2, &b); end

  # source://drb//lib/drb/drb.rb#1187
  def pretty_print(q); end

  # source://drb//lib/drb/drb.rb#1191
  def pretty_print_cycle(q); end

  # source://drb//lib/drb/drb.rb#1123
  def respond_to?(msg_id, priv = T.unsafe(nil)); end

  class << self
    # source://drb//lib/drb/drb.rb#1051
    def _load(s); end

    # source://drb//lib/drb/drb.rb#1065
    def new_with(uri, ref); end

    # source://drb//lib/drb/drb.rb#1073
    def new_with_uri(uri); end

    # source://drb//lib/drb/drb.rb#1173
    def prepare_backtrace(uri, result); end

    # source://drb//lib/drb/drb.rb#1160
    def with_friend(uri); end
  end
end

# source://drb//lib/drb/drb.rb#721
module DRb::DRbProtocol
  private

  # source://drb//lib/drb/drb.rb#724
  def add_protocol(prot); end

  # source://drb//lib/drb/drb.rb#802
  def auto_load(uri); end

  # source://drb//lib/drb/drb.rb#736
  def open(uri, config, first = T.unsafe(nil)); end

  # source://drb//lib/drb/drb.rb#764
  def open_server(uri, config, first = T.unsafe(nil)); end

  # source://drb//lib/drb/drb.rb#785
  def uri_option(uri, config, first = T.unsafe(nil)); end

  class << self
    # source://drb//lib/drb/drb.rb#724
    def add_protocol(prot); end

    # source://drb//lib/drb/drb.rb#802
    def auto_load(uri); end

    # source://drb//lib/drb/drb.rb#736
    def open(uri, config, first = T.unsafe(nil)); end

    # source://drb//lib/drb/drb.rb#764
    def open_server(uri, config, first = T.unsafe(nil)); end

    # source://drb//lib/drb/drb.rb#785
    def uri_option(uri, config, first = T.unsafe(nil)); end
  end
end

# source://drb//lib/drb/drb.rb#431
class DRb::DRbRemoteError < ::DRb::DRbError
  # source://drb//lib/drb/drb.rb#434
  def initialize(error); end

  # source://drb//lib/drb/drb.rb#441
  def reason; end
end

# source://drb//lib/drb/drb.rb#1350
class DRb::DRbServer
  # source://drb//lib/drb/drb.rb#1451
  def initialize(uri = T.unsafe(nil), front = T.unsafe(nil), config_or_acl = T.unsafe(nil)); end

  # source://drb//lib/drb/drb.rb#1506
  def alive?; end

  # source://drb//lib/drb/drb.rb#1594
  def check_insecure_method(obj, msg_id); end

  # source://drb//lib/drb/drb.rb#1493
  def config; end

  # source://drb//lib/drb/drb.rb#1490
  def front; end

  # source://drb//lib/drb/drb.rb#1511
  def here?(uri); end

  # source://drb//lib/drb/drb.rb#1516
  def stop_service; end

  # source://drb//lib/drb/drb.rb#1484
  def thread; end

  # source://drb//lib/drb/drb.rb#1533
  def to_id(obj); end

  # source://drb//lib/drb/drb.rb#1526
  def to_obj(ref); end

  # source://drb//lib/drb/drb.rb#1477
  def uri; end

  # source://drb//lib/drb/drb.rb#1503
  def verbose; end

  # source://drb//lib/drb/drb.rb#1498
  def verbose=(v); end

  private

  # source://drb//lib/drb/drb.rb#1580
  def any_to_s(obj); end

  # source://drb//lib/drb/drb.rb#1696
  def error_print(exception); end

  # source://drb//lib/drb/drb.rb#1574
  def insecure_method?(msg_id); end

  # source://drb//lib/drb/drb.rb#1714
  def main_loop; end

  # source://drb//lib/drb/drb.rb#1555
  def run; end

  # source://drb//lib/drb/drb.rb#1540
  def shutdown; end

  class << self
    # source://drb//lib/drb/drb.rb#1375
    def default_acl(acl); end

    # source://drb//lib/drb/drb.rb#1361
    def default_argc_limit(argc); end

    # source://drb//lib/drb/drb.rb#1382
    def default_id_conv(idconv); end

    # source://drb//lib/drb/drb.rb#1368
    def default_load_limit(sz); end

    # source://drb//lib/drb/drb.rb#1398
    def make_config(hash = T.unsafe(nil)); end

    # source://drb//lib/drb/drb.rb#1394
    def verbose; end

    # source://drb//lib/drb/drb.rb#1389
    def verbose=(on); end
  end
end

# source://drb//lib/drb/drb.rb#1624
class DRb::DRbServer::InvokeMethod
  include ::DRb::DRbServer::InvokeMethod18Mixin

  # source://drb//lib/drb/drb.rb#1625
  def initialize(drb_server, client); end

  # source://drb//lib/drb/drb.rb#1630
  def perform; end

  private

  # source://drb//lib/drb/drb.rb#1667
  def check_insecure_method; end

  # source://drb//lib/drb/drb.rb#1659
  def init_with_client; end

  # source://drb//lib/drb/drb.rb#1676
  def perform_without_block; end

  # source://drb//lib/drb/drb.rb#1671
  def setup_message; end
end

# source://drb//lib/drb/invokemethod.rb#6
module DRb::DRbServer::InvokeMethod18Mixin
  # source://drb//lib/drb/invokemethod.rb#7
  def block_yield(x); end

  # source://drb//lib/drb/invokemethod.rb#14
  def perform_with_block; end
end

# source://drb//lib/drb/drb.rb#815
class DRb::DRbTCPSocket
  # source://drb//lib/drb/drb.rb#903
  def initialize(uri, soc, config = T.unsafe(nil)); end

  # source://drb//lib/drb/drb.rb#971
  def accept; end

  # source://drb//lib/drb/drb.rb#1001
  def alive?; end

  # source://drb//lib/drb/drb.rb#953
  def close; end

  # source://drb//lib/drb/drb.rb#918
  def peeraddr; end

  # source://drb//lib/drb/drb.rb#941
  def recv_reply; end

  # source://drb//lib/drb/drb.rb#931
  def recv_request; end

  # source://drb//lib/drb/drb.rb#936
  def send_reply(succ, result); end

  # source://drb//lib/drb/drb.rb#926
  def send_request(ref, msg_id, arg, b); end

  # source://drb//lib/drb/drb.rb#1010
  def set_sockopt(soc); end

  # source://drb//lib/drb/drb.rb#996
  def shutdown; end

  # source://drb//lib/drb/drb.rb#923
  def stream; end

  # source://drb//lib/drb/drb.rb#914
  def uri; end

  private

  # source://drb//lib/drb/drb.rb#986
  def accept_or_shutdown; end

  # source://drb//lib/drb/drb.rb#962
  def close_shutdown_pipe; end

  class << self
    # source://drb//lib/drb/drb.rb#845
    def getservername; end

    # source://drb//lib/drb/drb.rb#838
    def open(uri, config); end

    # source://drb//lib/drb/drb.rb#876
    def open_server(uri, config); end

    # source://drb//lib/drb/drb.rb#861
    def open_server_inaddr_any(host, port); end

    # source://drb//lib/drb/drb.rb#818
    def parse_uri(uri); end

    # source://drb//lib/drb/drb.rb#893
    def uri_option(uri, config); end
  end
end

# source://drb//lib/drb/unix.rb#15
class DRb::DRbUNIXSocket < ::DRb::DRbTCPSocket
  # source://drb//lib/drb/unix.rb#62
  def initialize(uri, soc, config = T.unsafe(nil), server_mode = T.unsafe(nil)); end

  # source://drb//lib/drb/unix.rb#105
  def accept; end

  # source://drb//lib/drb/unix.rb#95
  def close; end

  # source://drb//lib/drb/unix.rb#111
  def set_sockopt(soc); end

  class << self
    # source://drb//lib/drb/unix.rb#28
    def open(uri, config); end

    # source://drb//lib/drb/unix.rb#34
    def open_server(uri, config); end

    # source://drb//lib/drb/unix.rb#17
    def parse_uri(uri); end

    # source://drb//lib/drb/unix.rb#72
    def temp_server; end

    # source://drb//lib/drb/unix.rb#57
    def uri_option(uri, config); end
  end
end

# source://drb//lib/drb/unix.rb#70
DRb::DRbUNIXSocket::Max_try = T.let(T.unsafe(nil), Integer)

# source://drb//lib/drb/drb.rb#1021
class DRb::DRbURIOption
  # source://drb//lib/drb/drb.rb#1022
  def initialize(option); end

  # source://drb//lib/drb/drb.rb#1028
  def ==(other); end

  # source://drb//lib/drb/drb.rb#1028
  def eql?(other); end

  # source://drb//lib/drb/drb.rb#1033
  def hash; end

  # source://drb//lib/drb/drb.rb#1025
  def option; end

  # source://drb//lib/drb/drb.rb#1026
  def to_s; end
end

# source://drb//lib/drb/drb.rb#390
module DRb::DRbUndumped
  # source://drb//lib/drb/drb.rb#391
  def _dump(dummy); end
end

# source://drb//lib/drb/drb.rb#457
class DRb::DRbUnknown
  # source://drb//lib/drb/drb.rb#465
  def initialize(err, buf); end

  # source://drb//lib/drb/drb.rb#494
  def _dump(lv); end

  # source://drb//lib/drb/drb.rb#484
  def buf; end

  # source://drb//lib/drb/drb.rb#508
  def exception; end

  # source://drb//lib/drb/drb.rb#481
  def name; end

  # source://drb//lib/drb/drb.rb#503
  def reload; end

  class << self
    # source://drb//lib/drb/drb.rb#486
    def _load(s); end
  end
end

# source://drb//lib/drb/drb.rb#410
class DRb::DRbUnknownError < ::DRb::DRbError
  # source://drb//lib/drb/drb.rb#413
  def initialize(unknown); end

  # source://drb//lib/drb/drb.rb#425
  def _dump(lv); end

  # source://drb//lib/drb/drb.rb#419
  def unknown; end

  class << self
    # source://drb//lib/drb/drb.rb#421
    def _load(s); end
  end
end

# source://drb//lib/drb/drb.rb#1199
class DRb::ThreadObject
  include ::MonitorMixin

  # source://drb//lib/drb/drb.rb#1202
  def initialize(&blk); end

  # source://drb//lib/drb/drb.rb#1237
  def _execute; end

  # source://drb//lib/drb/drb.rb#1213
  def alive?; end

  # source://drb//lib/drb/drb.rb#1217
  def kill; end

  # source://drb//lib/drb/drb.rb#1222
  def method_missing(msg, *arg, &blk); end
end

# source://drb//lib/drb/version.rb#2
DRb::VERSION = T.let(T.unsafe(nil), String)

# source://drb//lib/drb/drb.rb#1943
DRbIdConv = DRb::DRbIdConv

# source://drb//lib/drb/drb.rb#1941
DRbObject = DRb::DRbObject

# source://drb//lib/drb/drb.rb#1942
DRbUndumped = DRb::DRbUndumped
