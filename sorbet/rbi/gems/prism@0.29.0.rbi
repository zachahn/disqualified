# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `prism` gem.
# Please instead update this file by running `bin/tapioca gem prism`.


# typed: strict

# =begin
# This file is generated by the templates/template.rb script and should not be
# modified manually. See templates/rbi/prism/node.rbi.erb
# if you are looking to modify the template
# =end
# =begin
# This file is generated by the templates/template.rb script and should not be
# modified manually. See templates/rbi/prism/visitor.rbi.erb
# if you are looking to modify the template
# =end

# We keep these shims in here because our client libraries might not have parser
# in their bundle.
module Parser; end

class Parser::Base; end

# source://prism//lib/prism.rb#8
module Prism
  class << self
    def dump(*_arg0); end
    def dump_file(*_arg0); end
    def lex(*_arg0); end

    # source://prism//lib/prism.rb#47
    sig { params(source: String, options: T::Hash[Symbol, T.untyped]).returns(Prism::LexCompat::Result) }
    def lex_compat(source, **options); end

    def lex_file(*_arg0); end

    # source://prism//lib/prism.rb#57
    sig { params(source: String).returns(T::Array[T.untyped]) }
    def lex_ripper(source); end

    # source://prism//lib/prism.rb#65
    sig { params(source: String, serialized: String).returns(Prism::ParseResult) }
    def load(source, serialized); end

    def parse(*_arg0); end
    def parse_comments(*_arg0); end
    def parse_failure?(*_arg0); end
    def parse_file(*_arg0); end
    def parse_file_comments(*_arg0); end
    def parse_file_failure?(*_arg0); end
    def parse_file_success?(*_arg0); end
    def parse_lex(*_arg0); end
    def parse_lex_file(*_arg0); end
    def parse_stream(*_arg0); end
    def parse_success?(*_arg0); end
  end
end

# source://prism//lib/prism/parse_result.rb#126
class Prism::ASCIISource < ::Prism::Source
  # source://prism//lib/prism/parse_result.rb#133
  sig { params(byte_offset: Integer).returns(Integer) }
  def character_column(byte_offset); end

  # source://prism//lib/prism/parse_result.rb#128
  sig { params(byte_offset: Integer).returns(Integer) }
  def character_offset(byte_offset); end

  # source://prism//lib/prism/parse_result.rb#150
  sig { params(byte_offset: Integer, encoding: Encoding).returns(Integer) }
  def code_units_column(byte_offset, encoding); end

  # source://prism//lib/prism/parse_result.rb#143
  sig { params(byte_offset: Integer, encoding: Encoding).returns(Integer) }
  def code_units_offset(byte_offset, encoding); end
end

# source://prism//lib/prism/node.rb#188
class Prism::AliasGlobalVariableNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#190
  sig do
    params(
      source: Prism::Source,
      new_name: Prism::Node,
      old_name: Prism::Node,
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, new_name, old_name, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#294
  def ===(other); end

  # source://prism//lib/prism/node.rb#200
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#205
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#215
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#210
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#220
  sig do
    params(
      new_name: Prism::Node,
      old_name: Prism::Node,
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::AliasGlobalVariableNode)
  end
  def copy(new_name: T.unsafe(nil), old_name: T.unsafe(nil), keyword_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#205
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#228
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#260
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#255
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#248
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#236
  sig { returns(Prism::Node) }
  def new_name; end

  # source://prism//lib/prism/node.rb#242
  sig { returns(Prism::Node) }
  def old_name; end

  # source://prism//lib/prism/node.rb#278
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#288
    def type; end
  end
end

# source://prism//lib/prism/node.rb#306
class Prism::AliasMethodNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#308
  sig do
    params(
      source: Prism::Source,
      new_name: Prism::Node,
      old_name: Prism::Node,
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, new_name, old_name, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#403
  def ===(other); end

  # source://prism//lib/prism/node.rb#318
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#323
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#333
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#328
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#338
  sig do
    params(
      new_name: Prism::Node,
      old_name: Prism::Node,
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::AliasMethodNode)
  end
  def copy(new_name: T.unsafe(nil), old_name: T.unsafe(nil), keyword_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#323
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#346
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#369
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#364
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#357
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#351
  sig { returns(Prism::Node) }
  def new_name; end

  # source://prism//lib/prism/node.rb#354
  sig { returns(Prism::Node) }
  def old_name; end

  # source://prism//lib/prism/node.rb#387
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#397
    def type; end
  end
end

# source://prism//lib/prism/node.rb#415
class Prism::AlternationPatternNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#417
  sig do
    params(
      source: Prism::Source,
      left: Prism::Node,
      right: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, left, right, operator_loc, location); end

  # source://prism//lib/prism/node.rb#512
  def ===(other); end

  # source://prism//lib/prism/node.rb#427
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#432
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#442
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#437
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#447
  sig do
    params(
      left: Prism::Node,
      right: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::AlternationPatternNode)
  end
  def copy(left: T.unsafe(nil), right: T.unsafe(nil), operator_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#432
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#455
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#478
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#460
  sig { returns(Prism::Node) }
  def left; end

  # source://prism//lib/prism/node.rb#473
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#466
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#463
  sig { returns(Prism::Node) }
  def right; end

  # source://prism//lib/prism/node.rb#496
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#506
    def type; end
  end
end

# source://prism//lib/prism/node.rb#524
class Prism::AndNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#526
  sig do
    params(
      source: Prism::Source,
      left: Prism::Node,
      right: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, left, right, operator_loc, location); end

  # source://prism//lib/prism/node.rb#636
  def ===(other); end

  # source://prism//lib/prism/node.rb#536
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#541
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#551
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#546
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#556
  sig do
    params(
      left: Prism::Node,
      right: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::AndNode)
  end
  def copy(left: T.unsafe(nil), right: T.unsafe(nil), operator_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#541
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#564
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#602
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#575
  sig { returns(Prism::Node) }
  def left; end

  # source://prism//lib/prism/node.rb#597
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#590
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#584
  sig { returns(Prism::Node) }
  def right; end

  # source://prism//lib/prism/node.rb#620
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#630
    def type; end
  end
end

# source://prism//lib/prism/node.rb#648
class Prism::ArgumentsNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#650
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      arguments: T::Array[Prism::Node],
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, arguments, location); end

  # source://prism//lib/prism/node.rb#743
  def ===(other); end

  # source://prism//lib/prism/node.rb#659
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#696
  sig { returns(T::Array[Prism::Node]) }
  def arguments; end

  # source://prism//lib/prism/node.rb#664
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#674
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#669
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#704
  sig { returns(T::Boolean) }
  def contains_keyword_splat?; end

  # source://prism//lib/prism/node.rb#699
  sig { returns(T::Boolean) }
  def contains_keywords?; end

  # source://prism//lib/prism/node.rb#679
  sig do
    params(
      flags: Integer,
      arguments: T::Array[Prism::Node],
      location: Prism::Location
    ).returns(Prism::ArgumentsNode)
  end
  def copy(flags: T.unsafe(nil), arguments: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#664
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#687
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#709
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#727
  sig { override.returns(Symbol) }
  def type; end

  protected

  # source://prism//lib/prism/node.rb#692
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#737
    def type; end
  end
end

# source://prism//lib/prism/node.rb#19202
# Flags for arguments nodes.
module Prism::ArgumentsNodeFlags; end

# source://prism//lib/prism/node.rb#19204
Prism::ArgumentsNodeFlags::CONTAINS_KEYWORDS = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19207
Prism::ArgumentsNodeFlags::CONTAINS_KEYWORD_SPLAT = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#755
class Prism::ArrayNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#757
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      elements: T::Array[Prism::Node],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, elements, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#893
  def ===(other); end

  # source://prism//lib/prism/node.rb#768
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#773
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#854
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#831
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#783
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#778
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#844
  sig { returns(T::Boolean) }
  def contains_splat?; end

  # source://prism//lib/prism/node.rb#788
  sig do
    params(
      flags: Integer,
      elements: T::Array[Prism::Node],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::ArrayNode)
  end
  def copy(flags: T.unsafe(nil), elements: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#773
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#796
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#805
  sig { returns(T::Array[Prism::Node]) }
  def elements; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#859
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#849
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#813
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#877
  sig { override.returns(Symbol) }
  def type; end

  protected

  # source://prism//lib/prism/node.rb#801
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#887
    def type; end
  end
end

# source://prism//lib/prism/node.rb#19211
# Flags for array nodes.
module Prism::ArrayNodeFlags; end

# source://prism//lib/prism/node.rb#19213
Prism::ArrayNodeFlags::CONTAINS_SPLAT = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#919
class Prism::ArrayPatternNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#921
  sig do
    params(
      source: Prism::Source,
      constant: T.nilable(Prism::Node),
      requireds: T::Array[Prism::Node],
      rest: T.nilable(Prism::Node),
      posts: T::Array[Prism::Node],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, constant, requireds, rest, posts, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#1054
  def ===(other); end

  # source://prism//lib/prism/node.rb#934
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#939
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1015
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#997
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#954
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#944
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#972
  sig { returns(T.nilable(Prism::Node)) }
  def constant; end

  # source://prism//lib/prism/node.rb#959
  sig do
    params(
      constant: T.nilable(Prism::Node),
      requireds: T::Array[Prism::Node],
      rest: T.nilable(Prism::Node),
      posts: T::Array[Prism::Node],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::ArrayPatternNode)
  end
  def copy(constant: T.unsafe(nil), requireds: T.unsafe(nil), rest: T.unsafe(nil), posts: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#939
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#967
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#1020
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#1010
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#984
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#981
  sig { returns(T::Array[Prism::Node]) }
  def posts; end

  # source://prism//lib/prism/node.rb#975
  sig { returns(T::Array[Prism::Node]) }
  def requireds; end

  # source://prism//lib/prism/node.rb#978
  sig { returns(T.nilable(Prism::Node)) }
  def rest; end

  # source://prism//lib/prism/node.rb#1038
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1048
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1071
class Prism::AssocNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1073
  sig do
    params(
      source: Prism::Source,
      key: Prism::Node,
      value: Prism::Node,
      operator_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, key, value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#1192
  def ===(other); end

  # source://prism//lib/prism/node.rb#1083
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1088
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1098
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1093
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1103
  sig do
    params(
      key: Prism::Node,
      value: Prism::Node,
      operator_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::AssocNode)
  end
  def copy(key: T.unsafe(nil), value: T.unsafe(nil), operator_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1088
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1111
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#1158
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#1125
  sig { returns(Prism::Node) }
  def key; end

  # source://prism//lib/prism/node.rb#1153
  sig { returns(T.nilable(String)) }
  def operator; end

  # source://prism//lib/prism/node.rb#1140
  sig { returns(T.nilable(Prism::Location)) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#1176
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#1134
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#1186
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1204
class Prism::AssocSplatNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1206
  sig do
    params(
      source: Prism::Source,
      value: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#1305
  def ===(other); end

  # source://prism//lib/prism/node.rb#1215
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1220
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1232
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1225
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1237
  sig do
    params(
      value: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::AssocSplatNode)
  end
  def copy(value: T.unsafe(nil), operator_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1220
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1245
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#1271
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#1266
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#1259
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#1289
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#1253
  sig { returns(T.nilable(Prism::Node)) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#1299
    def type; end
  end
end

# source://prism//lib/prism.rb#85
Prism::BACKEND = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/node.rb#1316
class Prism::BackReferenceReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1318
  sig { params(source: Prism::Source, name: Symbol, location: Prism::Location).void }
  def initialize(source, name, location); end

  # source://prism//lib/prism/node.rb#1400
  def ===(other); end

  # source://prism//lib/prism/node.rb#1326
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1331
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1341
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1336
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1346
  sig { params(name: Symbol, location: Prism::Location).returns(Prism::BackReferenceReadNode) }
  def copy(name: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1331
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1354
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#1366
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#1363
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#1384
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1394
    def type; end
  end
end

# source://prism//lib/prism/visitor.rb#14
class Prism::BasicVisitor
  # source://prism//lib/prism/visitor.rb#17
  sig { params(node: T.nilable(Prism::Node)).void }
  def visit(node); end

  # source://prism//lib/prism/visitor.rb#23
  sig { params(nodes: T::Array[T.nilable(Prism::Node)]).void }
  def visit_all(nodes); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::Node).void }
  def visit_child_nodes(node); end
end

# source://prism//lib/prism/node.rb#1412
class Prism::BeginNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1414
  sig do
    params(
      source: Prism::Source,
      begin_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      rescue_clause: T.nilable(Prism::RescueNode),
      else_clause: T.nilable(Prism::ElseNode),
      ensure_clause: T.nilable(Prism::EnsureNode),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, begin_keyword_loc, statements, rescue_clause, else_clause, ensure_clause, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#1551
  def ===(other); end

  # source://prism//lib/prism/node.rb#1427
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1507
  sig { returns(T.nilable(String)) }
  def begin_keyword; end

  # source://prism//lib/prism/node.rb#1469
  sig { returns(T.nilable(Prism::Location)) }
  def begin_keyword_loc; end

  # source://prism//lib/prism/node.rb#1436
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1451
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1441
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1456
  sig do
    params(
      begin_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      rescue_clause: T.nilable(Prism::RescueNode),
      else_clause: T.nilable(Prism::ElseNode),
      ensure_clause: T.nilable(Prism::EnsureNode),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::BeginNode)
  end
  def copy(begin_keyword_loc: T.unsafe(nil), statements: T.unsafe(nil), rescue_clause: T.unsafe(nil), else_clause: T.unsafe(nil), ensure_clause: T.unsafe(nil), end_keyword_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1436
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1464
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1488
  sig { returns(T.nilable(Prism::ElseNode)) }
  def else_clause; end

  # source://prism//lib/prism/node.rb#1512
  sig { returns(T.nilable(String)) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#1494
  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#1491
  sig { returns(T.nilable(Prism::EnsureNode)) }
  def ensure_clause; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#1517
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#1485
  sig { returns(T.nilable(Prism::RescueNode)) }
  def rescue_clause; end

  # source://prism//lib/prism/node.rb#1431
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#1482
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#1535
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1545
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1566
class Prism::BlockArgumentNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1568
  sig do
    params(
      source: Prism::Source,
      expression: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, expression, operator_loc, location); end

  # source://prism//lib/prism/node.rb#1661
  def ===(other); end

  # source://prism//lib/prism/node.rb#1577
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1582
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1594
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1587
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1599
  sig do
    params(
      expression: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::BlockArgumentNode)
  end
  def copy(expression: T.unsafe(nil), operator_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1582
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1607
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1612
  sig { returns(T.nilable(Prism::Node)) }
  def expression; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#1627
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#1622
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#1615
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#1645
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1655
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1672
class Prism::BlockLocalVariableNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1674
  sig { params(source: Prism::Source, flags: Integer, name: Symbol, location: Prism::Location).void }
  def initialize(source, flags, name, location); end

  # source://prism//lib/prism/node.rb#1762
  def ===(other); end

  # source://prism//lib/prism/node.rb#1683
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1688
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1698
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1693
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1703
  sig { params(flags: Integer, name: Symbol, location: Prism::Location).returns(Prism::BlockLocalVariableNode) }
  def copy(flags: T.unsafe(nil), name: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1688
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1711
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#1728
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#1720
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#1723
  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  # source://prism//lib/prism/node.rb#1746
  sig { override.returns(Symbol) }
  def type; end

  protected

  # source://prism//lib/prism/node.rb#1716
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#1756
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1773
class Prism::BlockNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1775
  sig do
    params(
      source: Prism::Source,
      locals: T::Array[Symbol],
      parameters: T.nilable(Prism::Node),
      body: T.nilable(Prism::Node),
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, locals, parameters, body, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#1890
  def ===(other); end

  # source://prism//lib/prism/node.rb#1787
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1829
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#1792
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1851
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#1839
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#1805
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1797
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1810
  sig do
    params(
      locals: T::Array[Symbol],
      parameters: T.nilable(Prism::Node),
      body: T.nilable(Prism::Node),
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::BlockNode)
  end
  def copy(locals: T.unsafe(nil), parameters: T.unsafe(nil), body: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1792
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1818
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#1856
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#1823
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#1846
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#1832
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#1826
  sig { returns(T.nilable(Prism::Node)) }
  def parameters; end

  # source://prism//lib/prism/node.rb#1874
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1884
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1906
class Prism::BlockParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1908
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, name, name_loc, operator_loc, location); end

  # source://prism//lib/prism/node.rb#2023
  def ===(other); end

  # source://prism//lib/prism/node.rb#1919
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1924
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1934
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1929
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1939
  sig do
    params(
      flags: Integer,
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::BlockParameterNode)
  end
  def copy(flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1924
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1947
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#1989
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#1956
  sig { returns(T.nilable(Symbol)) }
  def name; end

  # source://prism//lib/prism/node.rb#1959
  sig { returns(T.nilable(Prism::Location)) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#1984
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#1972
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#1979
  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  # source://prism//lib/prism/node.rb#2007
  sig { override.returns(Symbol) }
  def type; end

  protected

  # source://prism//lib/prism/node.rb#1952
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#2017
    def type; end
  end
end

# source://prism//lib/prism/node.rb#2040
class Prism::BlockParametersNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2042
  sig do
    params(
      source: Prism::Source,
      parameters: T.nilable(Prism::ParametersNode),
      locals: T::Array[Prism::BlockLocalVariableNode],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, parameters, locals, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#2165
  def ===(other); end

  # source://prism//lib/prism/node.rb#2053
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2058
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2126
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#2108
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#2071
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2063
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2076
  sig do
    params(
      parameters: T.nilable(Prism::ParametersNode),
      locals: T::Array[Prism::BlockLocalVariableNode],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::BlockParametersNode)
  end
  def copy(parameters: T.unsafe(nil), locals: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2058
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2084
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#2131
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#2092
  sig { returns(T::Array[Prism::BlockLocalVariableNode]) }
  def locals; end

  # source://prism//lib/prism/node.rb#2121
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#2095
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#2089
  sig { returns(T.nilable(Prism::ParametersNode)) }
  def parameters; end

  # source://prism//lib/prism/node.rb#2149
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#2159
    def type; end
  end
end

# source://prism//lib/prism/node.rb#2179
class Prism::BreakNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2181
  sig do
    params(
      source: Prism::Source,
      arguments: T.nilable(Prism::ArgumentsNode),
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, arguments, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#2280
  def ===(other); end

  # source://prism//lib/prism/node.rb#2190
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2228
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#2195
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2207
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2200
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2212
  sig do
    params(
      arguments: T.nilable(Prism::ArgumentsNode),
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::BreakNode)
  end
  def copy(arguments: T.unsafe(nil), keyword_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2195
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2220
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#2246
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#2241
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#2234
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#2264
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#2274
    def type; end
  end
end

# source://prism//lib/prism/node.rb#2291
class Prism::CallAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2293
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      read_name: Symbol,
      write_name: Symbol,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#2462
  def ===(other); end

  # source://prism//lib/prism/node.rb#2308
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2403
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#2413
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#2351
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#2313
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2326
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2318
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2331
  sig do
    params(
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      read_name: Symbol,
      write_name: Symbol,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::CallAndWriteNode)
  end
  def copy(flags: T.unsafe(nil), receiver: T.unsafe(nil), call_operator_loc: T.unsafe(nil), message_loc: T.unsafe(nil), read_name: T.unsafe(nil), write_name: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2313
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2339
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#2408
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#2428
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#2418
  sig { returns(T.nilable(String)) }
  def message; end

  # source://prism//lib/prism/node.rb#2364
  sig { returns(T.nilable(Prism::Location)) }
  def message_loc; end

  # source://prism//lib/prism/node.rb#2423
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#2383
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#2377
  sig { returns(Symbol) }
  def read_name; end

  # source://prism//lib/prism/node.rb#2348
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#2393
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#2446
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#2390
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#2398
  sig { returns(T::Boolean) }
  def variable_call?; end

  # source://prism//lib/prism/node.rb#2380
  sig { returns(Symbol) }
  def write_name; end

  protected

  # source://prism//lib/prism/node.rb#2344
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#2456
    def type; end
  end
end

# source://prism//lib/prism/node.rb#2494
class Prism::CallNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2496
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      name: Symbol,
      message_loc: T.nilable(Prism::Location),
      opening_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: T.nilable(Prism::Location),
      block: T.nilable(Prism::Node),
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, receiver, call_operator_loc, name, message_loc, opening_loc, arguments, closing_loc, block, location); end

  # source://prism//lib/prism/node.rb#2700
  def ===(other); end

  # source://prism//lib/prism/node.rb#2512
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2607
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#2636
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#2623
  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  # source://prism//lib/prism/node.rb#2646
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#2565
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#2517
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2661
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#2610
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#2531
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2522
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2536
  sig do
    params(
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      name: Symbol,
      message_loc: T.nilable(Prism::Location),
      opening_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: T.nilable(Prism::Location),
      block: T.nilable(Prism::Node),
      location: Prism::Location
    ).returns(Prism::CallNode)
  end
  def copy(flags: T.unsafe(nil), receiver: T.unsafe(nil), call_operator_loc: T.unsafe(nil), name: T.unsafe(nil), message_loc: T.unsafe(nil), opening_loc: T.unsafe(nil), arguments: T.unsafe(nil), closing_loc: T.unsafe(nil), block: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2517
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2544
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node_ext.rb#299
  sig { returns(T.nilable(Prism::Location)) }
  def full_message_loc; end

  # source://prism//lib/prism/node.rb#2641
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#2666
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#2651
  sig { returns(T.nilable(String)) }
  def message; end

  # source://prism//lib/prism/node.rb#2581
  sig { returns(T.nilable(Prism::Location)) }
  def message_loc; end

  # source://prism//lib/prism/node.rb#2578
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#2656
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#2594
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#2562
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#2626
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#2684
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#2631
  sig { returns(T::Boolean) }
  def variable_call?; end

  protected

  # source://prism//lib/prism/node.rb#2549
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#2694
    def type; end
  end
end

# source://prism//lib/prism/node.rb#19217
# Flags for call nodes.
module Prism::CallNodeFlags; end

# source://prism//lib/prism/node.rb#19225
Prism::CallNodeFlags::ATTRIBUTE_WRITE = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19228
Prism::CallNodeFlags::IGNORE_VISIBILITY = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19219
Prism::CallNodeFlags::SAFE_NAVIGATION = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19222
Prism::CallNodeFlags::VARIABLE_CALL = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#2718
class Prism::CallOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2720
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      read_name: Symbol,
      write_name: Symbol,
      binary_operator: Symbol,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, receiver, call_operator_loc, message_loc, read_name, write_name, binary_operator, binary_operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#2888
  def ===(other); end

  # source://prism//lib/prism/node.rb#2736
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2834
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#2811
  sig { returns(Symbol) }
  def binary_operator; end

  # source://prism//lib/prism/node.rb#2814
  sig { returns(Prism::Location) }
  def binary_operator_loc; end

  # source://prism//lib/prism/node.rb#2844
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#2779
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#2741
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2754
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2746
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2759
  sig do
    params(
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      read_name: Symbol,
      write_name: Symbol,
      binary_operator: Symbol,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::CallOperatorWriteNode)
  end
  def copy(flags: T.unsafe(nil), receiver: T.unsafe(nil), call_operator_loc: T.unsafe(nil), message_loc: T.unsafe(nil), read_name: T.unsafe(nil), write_name: T.unsafe(nil), binary_operator: T.unsafe(nil), binary_operator_loc: T.unsafe(nil), value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2741
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2767
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#2839
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#2854
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#2849
  sig { returns(T.nilable(String)) }
  def message; end

  # source://prism//lib/prism/node.rb#2792
  sig { returns(T.nilable(Prism::Location)) }
  def message_loc; end

  # source://prism//lib/prism/node_ext.rb#307
  def operator; end

  # source://prism//lib/prism/node_ext.rb#314
  def operator_loc; end

  # source://prism//lib/prism/node.rb#2805
  sig { returns(Symbol) }
  def read_name; end

  # source://prism//lib/prism/node.rb#2776
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#2824
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#2872
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#2821
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#2829
  sig { returns(T::Boolean) }
  def variable_call?; end

  # source://prism//lib/prism/node.rb#2808
  sig { returns(Symbol) }
  def write_name; end

  protected

  # source://prism//lib/prism/node.rb#2772
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#2882
    def type; end
  end
end

# source://prism//lib/prism/node.rb#2906
class Prism::CallOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2908
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      read_name: Symbol,
      write_name: Symbol,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#3077
  def ===(other); end

  # source://prism//lib/prism/node.rb#2923
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3018
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#3028
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#2966
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#2928
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2941
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2933
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2946
  sig do
    params(
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      read_name: Symbol,
      write_name: Symbol,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::CallOrWriteNode)
  end
  def copy(flags: T.unsafe(nil), receiver: T.unsafe(nil), call_operator_loc: T.unsafe(nil), message_loc: T.unsafe(nil), read_name: T.unsafe(nil), write_name: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2928
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2954
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#3023
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#3043
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#3033
  sig { returns(T.nilable(String)) }
  def message; end

  # source://prism//lib/prism/node.rb#2979
  sig { returns(T.nilable(Prism::Location)) }
  def message_loc; end

  # source://prism//lib/prism/node.rb#3038
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#2998
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#2992
  sig { returns(Symbol) }
  def read_name; end

  # source://prism//lib/prism/node.rb#2963
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#3008
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#3061
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#3005
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#3013
  sig { returns(T::Boolean) }
  def variable_call?; end

  # source://prism//lib/prism/node.rb#2995
  sig { returns(Symbol) }
  def write_name; end

  protected

  # source://prism//lib/prism/node.rb#2959
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#3071
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3102
class Prism::CallTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3104
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      receiver: Prism::Node,
      call_operator_loc: Prism::Location,
      name: Symbol,
      message_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, receiver, call_operator_loc, name, message_loc, location); end

  # source://prism//lib/prism/node.rb#3237
  def ===(other); end

  # source://prism//lib/prism/node.rb#3116
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3183
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#3193
  sig { returns(String) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#3156
  sig { returns(Prism::Location) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#3121
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3131
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3126
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3136
  sig do
    params(
      flags: Integer,
      receiver: Prism::Node,
      call_operator_loc: Prism::Location,
      name: Symbol,
      message_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::CallTargetNode)
  end
  def copy(flags: T.unsafe(nil), receiver: T.unsafe(nil), call_operator_loc: T.unsafe(nil), name: T.unsafe(nil), message_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3121
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3144
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#3188
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#3203
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#3198
  sig { returns(String) }
  def message; end

  # source://prism//lib/prism/node.rb#3166
  sig { returns(Prism::Location) }
  def message_loc; end

  # source://prism//lib/prism/node.rb#3163
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#3153
  sig { returns(Prism::Node) }
  def receiver; end

  # source://prism//lib/prism/node.rb#3173
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#3221
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#3178
  sig { returns(T::Boolean) }
  def variable_call?; end

  protected

  # source://prism//lib/prism/node.rb#3149
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#3231
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3251
class Prism::CapturePatternNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3253
  sig do
    params(
      source: Prism::Source,
      value: Prism::Node,
      target: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, value, target, operator_loc, location); end

  # source://prism//lib/prism/node.rb#3348
  def ===(other); end

  # source://prism//lib/prism/node.rb#3263
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3268
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3278
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3273
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3283
  sig do
    params(
      value: Prism::Node,
      target: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::CapturePatternNode)
  end
  def copy(value: T.unsafe(nil), target: T.unsafe(nil), operator_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3268
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3291
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#3314
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#3309
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#3302
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#3299
  sig { returns(Prism::Node) }
  def target; end

  # source://prism//lib/prism/node.rb#3332
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#3296
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#3342
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3362
class Prism::CaseMatchNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3364
  sig do
    params(
      source: Prism::Source,
      predicate: T.nilable(Prism::Node),
      conditions: T::Array[Prism::Node],
      consequent: T.nilable(Prism::ElseNode),
      case_keyword_loc: Prism::Location,
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, predicate, conditions, consequent, case_keyword_loc, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#3480
  def ===(other); end

  # source://prism//lib/prism/node.rb#3376
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3436
  sig { returns(String) }
  def case_keyword; end

  # source://prism//lib/prism/node.rb#3422
  sig { returns(Prism::Location) }
  def case_keyword_loc; end

  # source://prism//lib/prism/node.rb#3381
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3395
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3386
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3416
  sig { returns(T::Array[Prism::Node]) }
  def conditions; end

  # source://prism//lib/prism/node.rb#3419
  sig { returns(T.nilable(Prism::ElseNode)) }
  def consequent; end

  # source://prism//lib/prism/node.rb#3400
  sig do
    params(
      predicate: T.nilable(Prism::Node),
      conditions: T::Array[Prism::Node],
      consequent: T.nilable(Prism::ElseNode),
      case_keyword_loc: Prism::Location,
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::CaseMatchNode)
  end
  def copy(predicate: T.unsafe(nil), conditions: T.unsafe(nil), consequent: T.unsafe(nil), case_keyword_loc: T.unsafe(nil), end_keyword_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3381
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3408
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3441
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#3429
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#3446
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#3413
  sig { returns(T.nilable(Prism::Node)) }
  def predicate; end

  # source://prism//lib/prism/node.rb#3464
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#3474
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3497
class Prism::CaseNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3499
  sig do
    params(
      source: Prism::Source,
      predicate: T.nilable(Prism::Node),
      conditions: T::Array[Prism::Node],
      consequent: T.nilable(Prism::ElseNode),
      case_keyword_loc: Prism::Location,
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, predicate, conditions, consequent, case_keyword_loc, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#3615
  def ===(other); end

  # source://prism//lib/prism/node.rb#3511
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3571
  sig { returns(String) }
  def case_keyword; end

  # source://prism//lib/prism/node.rb#3557
  sig { returns(Prism::Location) }
  def case_keyword_loc; end

  # source://prism//lib/prism/node.rb#3516
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3530
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3521
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3551
  sig { returns(T::Array[Prism::Node]) }
  def conditions; end

  # source://prism//lib/prism/node.rb#3554
  sig { returns(T.nilable(Prism::ElseNode)) }
  def consequent; end

  # source://prism//lib/prism/node.rb#3535
  sig do
    params(
      predicate: T.nilable(Prism::Node),
      conditions: T::Array[Prism::Node],
      consequent: T.nilable(Prism::ElseNode),
      case_keyword_loc: Prism::Location,
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::CaseNode)
  end
  def copy(predicate: T.unsafe(nil), conditions: T.unsafe(nil), consequent: T.unsafe(nil), case_keyword_loc: T.unsafe(nil), end_keyword_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3516
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3543
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3576
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#3564
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#3581
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#3548
  sig { returns(T.nilable(Prism::Node)) }
  def predicate; end

  # source://prism//lib/prism/node.rb#3599
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#3609
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3630
class Prism::ClassNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3632
  sig do
    params(
      source: Prism::Source,
      locals: T::Array[Symbol],
      class_keyword_loc: Prism::Location,
      constant_path: Prism::Node,
      inheritance_operator_loc: T.nilable(Prism::Location),
      superclass: T.nilable(Prism::Node),
      body: T.nilable(Prism::Node),
      end_keyword_loc: Prism::Location,
      name: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(source, locals, class_keyword_loc, constant_path, inheritance_operator_loc, superclass, body, end_keyword_loc, name, location); end

  # source://prism//lib/prism/node.rb#3775
  def ===(other); end

  # source://prism//lib/prism/node.rb#3647
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3713
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#3652
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3726
  sig { returns(String) }
  def class_keyword; end

  # source://prism//lib/prism/node.rb#3687
  sig { returns(Prism::Location) }
  def class_keyword_loc; end

  # source://prism//lib/prism/node.rb#3666
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3657
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3694
  sig { returns(Prism::Node) }
  def constant_path; end

  # source://prism//lib/prism/node.rb#3671
  sig do
    params(
      locals: T::Array[Symbol],
      class_keyword_loc: Prism::Location,
      constant_path: Prism::Node,
      inheritance_operator_loc: T.nilable(Prism::Location),
      superclass: T.nilable(Prism::Node),
      body: T.nilable(Prism::Node),
      end_keyword_loc: Prism::Location,
      name: Symbol,
      location: Prism::Location
    ).returns(Prism::ClassNode)
  end
  def copy(locals: T.unsafe(nil), class_keyword_loc: T.unsafe(nil), constant_path: T.unsafe(nil), inheritance_operator_loc: T.unsafe(nil), superclass: T.unsafe(nil), body: T.unsafe(nil), end_keyword_loc: T.unsafe(nil), name: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3652
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3679
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3736
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#3716
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#3731
  sig { returns(T.nilable(String)) }
  def inheritance_operator; end

  # source://prism//lib/prism/node.rb#3697
  sig { returns(T.nilable(Prism::Location)) }
  def inheritance_operator_loc; end

  # source://prism//lib/prism/node.rb#3741
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#3684
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#3723
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#3710
  sig { returns(T.nilable(Prism::Node)) }
  def superclass; end

  # source://prism//lib/prism/node.rb#3759
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#3769
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3793
class Prism::ClassVariableAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3795
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#3898
  def ===(other); end

  # source://prism//lib/prism/node.rb#3806
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3811
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3821
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3816
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3826
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::ClassVariableAndWriteNode)
  end
  def copy(name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3811
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3834
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#127
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#3864
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#3839
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#3842
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#3859
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#3849
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#3882
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#3856
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#3892
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3911
class Prism::ClassVariableOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3913
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, binary_operator_loc, value, binary_operator, location); end

  # source://prism//lib/prism/node.rb#4015
  def ===(other); end

  # source://prism//lib/prism/node.rb#3925
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3978
  sig { returns(Symbol) }
  def binary_operator; end

  # source://prism//lib/prism/node.rb#3968
  sig { returns(Prism::Location) }
  def binary_operator_loc; end

  # source://prism//lib/prism/node.rb#3930
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3940
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3935
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3945
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol,
      location: Prism::Location
    ).returns(Prism::ClassVariableOperatorWriteNode)
  end
  def copy(name: T.unsafe(nil), name_loc: T.unsafe(nil), binary_operator_loc: T.unsafe(nil), value: T.unsafe(nil), binary_operator: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3930
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3953
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#139
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#3981
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#3958
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#3961
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node_ext.rb#323
  def operator; end

  # source://prism//lib/prism/node_ext.rb#330
  def operator_loc; end

  # source://prism//lib/prism/node.rb#3999
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#3975
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4009
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4029
class Prism::ClassVariableOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4031
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#4134
  def ===(other); end

  # source://prism//lib/prism/node.rb#4042
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4047
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4057
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4052
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4062
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::ClassVariableOrWriteNode)
  end
  def copy(name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4047
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4070
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#133
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#4100
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#4075
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4078
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#4095
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#4085
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4118
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#4092
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4128
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4147
class Prism::ClassVariableReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4149
  sig { params(source: Prism::Source, name: Symbol, location: Prism::Location).void }
  def initialize(source, name, location); end

  # source://prism//lib/prism/node.rb#4231
  def ===(other); end

  # source://prism//lib/prism/node.rb#4157
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4162
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4172
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4167
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4177
  sig { params(name: Symbol, location: Prism::Location).returns(Prism::ClassVariableReadNode) }
  def copy(name: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4162
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4185
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#4197
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#4194
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4215
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#4225
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4241
class Prism::ClassVariableTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4243
  sig { params(source: Prism::Source, name: Symbol, location: Prism::Location).void }
  def initialize(source, name, location); end

  # source://prism//lib/prism/node.rb#4321
  def ===(other); end

  # source://prism//lib/prism/node.rb#4251
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4256
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4266
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4261
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4271
  sig { params(name: Symbol, location: Prism::Location).returns(Prism::ClassVariableTargetNode) }
  def copy(name: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4256
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4279
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#4287
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#4284
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4305
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#4315
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4331
class Prism::ClassVariableWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4333
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#4452
  def ===(other); end

  # source://prism//lib/prism/node.rb#4344
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4349
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4359
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4354
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4364
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::ClassVariableWriteNode)
  end
  def copy(name: T.unsafe(nil), name_loc: T.unsafe(nil), value: T.unsafe(nil), operator_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4349
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4372
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#4418
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#4381
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4387
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#4413
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#4406
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4436
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#4400
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4446
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#366
class Prism::Comment
  abstract!

  # source://prism//lib/prism/parse_result.rb#371
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/parse_result.rb#376
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#368
  sig { returns(Prism::Location) }
  def location; end

  # source://prism//lib/prism/parse_result.rb#381
  sig { returns(String) }
  def slice; end

  sig { abstract.returns(T::Boolean) }
  def trailing?; end
end

# source://prism//lib/prism/compiler.rb#27
class Prism::Compiler < ::Prism::Visitor
  # source://prism//lib/prism/compiler.rb#29
  sig { params(node: T.nilable(Prism::Node)).returns(T.untyped) }
  def visit(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/compiler.rb#34
  sig { params(nodes: T::Array[T.nilable(Prism::Node)]).returns(T::Array[T.untyped]) }
  def visit_all(nodes); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_and_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_arguments_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_array_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_assoc_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_begin_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_block_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_break_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_call_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_call_target_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_case_match_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_case_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  sig { params(node: Prism::Node).returns(T::Array[T.untyped]) }
  def visit_child_nodes(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_class_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_def_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_defined_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_else_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_ensure_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_false_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_float_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_for_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_hash_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_if_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_implicit_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_in_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_index_target_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_integer_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_it_parameters_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_lambda_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_match_required_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_match_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_missing_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_module_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_next_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_nil_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_or_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_parameters_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_program_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_range_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_rational_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_redo_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_rescue_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_retry_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_return_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_self_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_shareable_constant_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_source_file_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_source_line_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_splat_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_statements_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_string_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_super_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_symbol_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_true_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_undef_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_unless_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_until_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_when_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_while_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_x_string_node(node); end

  # source://prism//lib/prism/compiler.rb#39
  def visit_yield_node(node); end
end

# source://prism//lib/prism/node.rb#4465
class Prism::ConstantAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4467
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#4570
  def ===(other); end

  # source://prism//lib/prism/node.rb#4478
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4483
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4493
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4488
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4498
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::ConstantAndWriteNode)
  end
  def copy(name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4483
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4506
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#145
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#4536
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#4511
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4514
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#4531
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#4521
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4554
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#4528
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4564
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4583
class Prism::ConstantOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4585
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, binary_operator_loc, value, binary_operator, location); end

  # source://prism//lib/prism/node.rb#4687
  def ===(other); end

  # source://prism//lib/prism/node.rb#4597
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4650
  sig { returns(Symbol) }
  def binary_operator; end

  # source://prism//lib/prism/node.rb#4640
  sig { returns(Prism::Location) }
  def binary_operator_loc; end

  # source://prism//lib/prism/node.rb#4602
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4612
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4607
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4617
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol,
      location: Prism::Location
    ).returns(Prism::ConstantOperatorWriteNode)
  end
  def copy(name: T.unsafe(nil), name_loc: T.unsafe(nil), binary_operator_loc: T.unsafe(nil), value: T.unsafe(nil), binary_operator: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4602
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4625
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#157
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#4653
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#4630
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4633
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node_ext.rb#339
  def operator; end

  # source://prism//lib/prism/node_ext.rb#346
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4671
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#4647
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4681
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4701
class Prism::ConstantOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4703
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#4806
  def ===(other); end

  # source://prism//lib/prism/node.rb#4714
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4719
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4729
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4724
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4734
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::ConstantOrWriteNode)
  end
  def copy(name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4719
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4742
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#151
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#4772
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#4747
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4750
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#4767
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#4757
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4790
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#4764
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4800
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4819
class Prism::ConstantPathAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4821
  sig do
    params(
      source: Prism::Source,
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, target, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#4916
  def ===(other); end

  # source://prism//lib/prism/node.rb#4831
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4836
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4846
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4841
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4851
  sig do
    params(
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::ConstantPathAndWriteNode)
  end
  def copy(target: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4836
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4859
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#4882
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#4877
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#4867
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4864
  sig { returns(Prism::ConstantPathNode) }
  def target; end

  # source://prism//lib/prism/node.rb#4900
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#4874
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4910
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4928
class Prism::ConstantPathNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4930
  sig do
    params(
      source: Prism::Source,
      parent: T.nilable(Prism::Node),
      name: T.nilable(Symbol),
      delimiter_loc: Prism::Location,
      name_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, parent, name, delimiter_loc, name_loc, location); end

  # source://prism//lib/prism/node.rb#5056
  def ===(other); end

  # source://prism//lib/prism/node.rb#4941
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node_ext.rb#181
  def child; end

  # source://prism//lib/prism/node.rb#4946
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4958
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4951
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4963
  sig do
    params(
      parent: T.nilable(Prism::Node),
      name: T.nilable(Symbol),
      delimiter_loc: Prism::Location,
      name_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::ConstantPathNode)
  end
  def copy(parent: T.unsafe(nil), name: T.unsafe(nil), delimiter_loc: T.unsafe(nil), name_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4946
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4971
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5017
  sig { returns(String) }
  def delimiter; end

  # source://prism//lib/prism/node.rb#4997
  sig { returns(Prism::Location) }
  def delimiter_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node_ext.rb#174
  sig { returns(String) }
  def full_name; end

  # source://prism//lib/prism/node_ext.rb#152
  sig { returns(T::Array[Symbol]) }
  def full_name_parts; end

  # source://prism//lib/prism/node.rb#5022
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#4988
  sig { returns(T.nilable(Symbol)) }
  def name; end

  # source://prism//lib/prism/node.rb#5010
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#4985
  sig { returns(T.nilable(Prism::Node)) }
  def parent; end

  # source://prism//lib/prism/node.rb#5040
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#5050
    def type; end
  end
end

# source://prism//lib/prism/node_ext.rb#143
class Prism::ConstantPathNode::DynamicPartsInConstantPathError < ::StandardError; end

# source://prism//lib/prism/node_ext.rb#148
class Prism::ConstantPathNode::MissingNodesInConstantPathError < ::StandardError; end

# source://prism//lib/prism/node.rb#5069
class Prism::ConstantPathOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5071
  sig do
    params(
      source: Prism::Source,
      target: Prism::ConstantPathNode,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(source, target, binary_operator_loc, value, binary_operator, location); end

  # source://prism//lib/prism/node.rb#5165
  def ===(other); end

  # source://prism//lib/prism/node.rb#5082
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5128
  sig { returns(Symbol) }
  def binary_operator; end

  # source://prism//lib/prism/node.rb#5118
  sig { returns(Prism::Location) }
  def binary_operator_loc; end

  # source://prism//lib/prism/node.rb#5087
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5097
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5092
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5102
  sig do
    params(
      target: Prism::ConstantPathNode,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol,
      location: Prism::Location
    ).returns(Prism::ConstantPathOperatorWriteNode)
  end
  def copy(target: T.unsafe(nil), binary_operator_loc: T.unsafe(nil), value: T.unsafe(nil), binary_operator: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5087
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5110
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#5131
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node_ext.rb#355
  def operator; end

  # source://prism//lib/prism/node_ext.rb#362
  def operator_loc; end

  # source://prism//lib/prism/node.rb#5115
  sig { returns(Prism::ConstantPathNode) }
  def target; end

  # source://prism//lib/prism/node.rb#5149
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#5125
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#5159
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5178
class Prism::ConstantPathOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5180
  sig do
    params(
      source: Prism::Source,
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, target, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#5275
  def ===(other); end

  # source://prism//lib/prism/node.rb#5190
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5195
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5205
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5200
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5210
  sig do
    params(
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::ConstantPathOrWriteNode)
  end
  def copy(target: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5195
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5218
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#5241
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#5236
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#5226
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#5223
  sig { returns(Prism::ConstantPathNode) }
  def target; end

  # source://prism//lib/prism/node.rb#5259
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#5233
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#5269
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5287
class Prism::ConstantPathTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5289
  sig do
    params(
      source: Prism::Source,
      parent: T.nilable(Prism::Node),
      name: T.nilable(Symbol),
      delimiter_loc: Prism::Location,
      name_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, parent, name, delimiter_loc, name_loc, location); end

  # source://prism//lib/prism/node.rb#5394
  def ===(other); end

  # source://prism//lib/prism/node.rb#5300
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node_ext.rb#217
  def child; end

  # source://prism//lib/prism/node.rb#5305
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5317
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5310
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5322
  sig do
    params(
      parent: T.nilable(Prism::Node),
      name: T.nilable(Symbol),
      delimiter_loc: Prism::Location,
      name_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::ConstantPathTargetNode)
  end
  def copy(parent: T.unsafe(nil), name: T.unsafe(nil), delimiter_loc: T.unsafe(nil), name_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5305
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5330
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5355
  sig { returns(String) }
  def delimiter; end

  # source://prism//lib/prism/node.rb#5341
  sig { returns(Prism::Location) }
  def delimiter_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node_ext.rb#210
  sig { returns(String) }
  def full_name; end

  # source://prism//lib/prism/node_ext.rb#190
  sig { returns(T::Array[Symbol]) }
  def full_name_parts; end

  # source://prism//lib/prism/node.rb#5360
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#5338
  sig { returns(T.nilable(Symbol)) }
  def name; end

  # source://prism//lib/prism/node.rb#5348
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#5335
  sig { returns(T.nilable(Prism::Node)) }
  def parent; end

  # source://prism//lib/prism/node.rb#5378
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#5388
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5413
class Prism::ConstantPathWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5415
  sig do
    params(
      source: Prism::Source,
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, target, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#5522
  def ===(other); end

  # source://prism//lib/prism/node.rb#5425
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5430
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5440
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5435
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5445
  sig do
    params(
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::ConstantPathWriteNode)
  end
  def copy(target: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5430
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5453
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#5488
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#5483
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#5470
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#5464
  sig { returns(Prism::ConstantPathNode) }
  def target; end

  # source://prism//lib/prism/node.rb#5506
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#5480
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#5516
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5534
class Prism::ConstantReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5536
  sig { params(source: Prism::Source, name: Symbol, location: Prism::Location).void }
  def initialize(source, name, location); end

  # source://prism//lib/prism/node.rb#5618
  def ===(other); end

  # source://prism//lib/prism/node.rb#5544
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5549
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5559
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5554
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5564
  sig { params(name: Symbol, location: Prism::Location).returns(Prism::ConstantReadNode) }
  def copy(name: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5549
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5572
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node_ext.rb#118
  sig { returns(String) }
  def full_name; end

  # source://prism//lib/prism/node_ext.rb#113
  sig { returns(T::Array[Symbol]) }
  def full_name_parts; end

  # source://prism//lib/prism/node.rb#5584
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#5581
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#5602
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#5612
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5628
class Prism::ConstantTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5630
  sig { params(source: Prism::Source, name: Symbol, location: Prism::Location).void }
  def initialize(source, name, location); end

  # source://prism//lib/prism/node.rb#5708
  def ===(other); end

  # source://prism//lib/prism/node.rb#5638
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5643
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5653
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5648
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5658
  sig { params(name: Symbol, location: Prism::Location).returns(Prism::ConstantTargetNode) }
  def copy(name: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5643
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5666
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node_ext.rb#231
  sig { returns(String) }
  def full_name; end

  # source://prism//lib/prism/node_ext.rb#226
  sig { returns(T::Array[Symbol]) }
  def full_name_parts; end

  # source://prism//lib/prism/node.rb#5674
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#5671
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#5692
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#5702
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5718
class Prism::ConstantWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5720
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#5839
  def ===(other); end

  # source://prism//lib/prism/node.rb#5731
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5736
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5746
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5741
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5751
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::ConstantWriteNode)
  end
  def copy(name: T.unsafe(nil), name_loc: T.unsafe(nil), value: T.unsafe(nil), operator_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5736
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5759
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node_ext.rb#131
  sig { returns(String) }
  def full_name; end

  # source://prism//lib/prism/node_ext.rb#126
  sig { returns(T::Array[Symbol]) }
  def full_name_parts; end

  # source://prism//lib/prism/node.rb#5805
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#5768
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#5774
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#5800
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#5793
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#5823
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#5787
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#5833
    def type; end
  end
end

# source://prism//lib/prism/dsl.rb#42
module Prism::DSL
  private

  # source://prism//lib/prism/dsl.rb#51
  def AliasGlobalVariableNode(new_name, old_name, keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#56
  def AliasMethodNode(new_name, old_name, keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#61
  def AlternationPatternNode(left, right, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#66
  def AndNode(left, right, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#71
  def ArgumentsNode(flags, arguments, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#76
  def ArrayNode(flags, elements, opening_loc, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#81
  def ArrayPatternNode(constant, requireds, rest, posts, opening_loc, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#86
  def AssocNode(key, value, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#91
  def AssocSplatNode(value, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#96
  def BackReferenceReadNode(name, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#101
  def BeginNode(begin_keyword_loc, statements, rescue_clause, else_clause, ensure_clause, end_keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#106
  def BlockArgumentNode(expression, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#111
  def BlockLocalVariableNode(flags, name, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#116
  def BlockNode(locals, parameters, body, opening_loc, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#121
  def BlockParameterNode(flags, name, name_loc, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#126
  def BlockParametersNode(parameters, locals, opening_loc, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#131
  def BreakNode(arguments, keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#136
  def CallAndWriteNode(flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#141
  def CallNode(flags, receiver, call_operator_loc, name, message_loc, opening_loc, arguments, closing_loc, block, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#146
  def CallOperatorWriteNode(flags, receiver, call_operator_loc, message_loc, read_name, write_name, binary_operator, binary_operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#151
  def CallOrWriteNode(flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#156
  def CallTargetNode(flags, receiver, call_operator_loc, name, message_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#161
  def CapturePatternNode(value, target, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#166
  def CaseMatchNode(predicate, conditions, consequent, case_keyword_loc, end_keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#171
  def CaseNode(predicate, conditions, consequent, case_keyword_loc, end_keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#176
  def ClassNode(locals, class_keyword_loc, constant_path, inheritance_operator_loc, superclass, body, end_keyword_loc, name, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#181
  def ClassVariableAndWriteNode(name, name_loc, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#186
  def ClassVariableOperatorWriteNode(name, name_loc, binary_operator_loc, value, binary_operator, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#191
  def ClassVariableOrWriteNode(name, name_loc, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#196
  def ClassVariableReadNode(name, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#201
  def ClassVariableTargetNode(name, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#206
  def ClassVariableWriteNode(name, name_loc, value, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#211
  def ConstantAndWriteNode(name, name_loc, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#216
  def ConstantOperatorWriteNode(name, name_loc, binary_operator_loc, value, binary_operator, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#221
  def ConstantOrWriteNode(name, name_loc, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#226
  def ConstantPathAndWriteNode(target, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#231
  def ConstantPathNode(parent, name, delimiter_loc, name_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#236
  def ConstantPathOperatorWriteNode(target, binary_operator_loc, value, binary_operator, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#241
  def ConstantPathOrWriteNode(target, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#246
  def ConstantPathTargetNode(parent, name, delimiter_loc, name_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#251
  def ConstantPathWriteNode(target, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#256
  def ConstantReadNode(name, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#261
  def ConstantTargetNode(name, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#266
  def ConstantWriteNode(name, name_loc, value, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#271
  def DefNode(name, name_loc, receiver, parameters, body, locals, def_keyword_loc, operator_loc, lparen_loc, rparen_loc, equal_loc, end_keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#276
  def DefinedNode(lparen_loc, value, rparen_loc, keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#281
  def ElseNode(else_keyword_loc, statements, end_keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#286
  def EmbeddedStatementsNode(opening_loc, statements, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#291
  def EmbeddedVariableNode(operator_loc, variable, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#296
  def EnsureNode(ensure_keyword_loc, statements, end_keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#301
  def FalseNode(source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#306
  def FindPatternNode(constant, left, requireds, right, opening_loc, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#311
  def FlipFlopNode(flags, left, right, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#316
  def FloatNode(value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#321
  def ForNode(index, collection, statements, for_keyword_loc, in_keyword_loc, do_keyword_loc, end_keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#326
  def ForwardingArgumentsNode(source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#331
  def ForwardingParameterNode(source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#336
  def ForwardingSuperNode(block, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#341
  def GlobalVariableAndWriteNode(name, name_loc, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#346
  def GlobalVariableOperatorWriteNode(name, name_loc, binary_operator_loc, value, binary_operator, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#351
  def GlobalVariableOrWriteNode(name, name_loc, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#356
  def GlobalVariableReadNode(name, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#361
  def GlobalVariableTargetNode(name, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#366
  def GlobalVariableWriteNode(name, name_loc, value, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#371
  def HashNode(opening_loc, elements, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#376
  def HashPatternNode(constant, elements, rest, opening_loc, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#381
  def IfNode(if_keyword_loc, predicate, then_keyword_loc, statements, consequent, end_keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#386
  def ImaginaryNode(numeric, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#391
  def ImplicitNode(value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#396
  def ImplicitRestNode(source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#401
  def InNode(pattern, statements, in_loc, then_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#406
  def IndexAndWriteNode(flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#411
  def IndexOperatorWriteNode(flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, binary_operator, binary_operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#416
  def IndexOrWriteNode(flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#421
  def IndexTargetNode(flags, receiver, opening_loc, arguments, closing_loc, block, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#426
  def InstanceVariableAndWriteNode(name, name_loc, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#431
  def InstanceVariableOperatorWriteNode(name, name_loc, binary_operator_loc, value, binary_operator, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#436
  def InstanceVariableOrWriteNode(name, name_loc, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#441
  def InstanceVariableReadNode(name, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#446
  def InstanceVariableTargetNode(name, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#451
  def InstanceVariableWriteNode(name, name_loc, value, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#456
  def IntegerNode(flags, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#461
  def InterpolatedMatchLastLineNode(flags, opening_loc, parts, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#466
  def InterpolatedRegularExpressionNode(flags, opening_loc, parts, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#471
  def InterpolatedStringNode(flags, opening_loc, parts, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#476
  def InterpolatedSymbolNode(opening_loc, parts, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#481
  def InterpolatedXStringNode(opening_loc, parts, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#486
  def ItParametersNode(source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#491
  def KeywordHashNode(flags, elements, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#496
  def KeywordRestParameterNode(flags, name, name_loc, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#501
  def LambdaNode(locals, operator_loc, opening_loc, closing_loc, parameters, body, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#506
  def LocalVariableAndWriteNode(name_loc, operator_loc, value, name, depth, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#511
  def LocalVariableOperatorWriteNode(name_loc, binary_operator_loc, value, name, binary_operator, depth, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#516
  def LocalVariableOrWriteNode(name_loc, operator_loc, value, name, depth, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#521
  def LocalVariableReadNode(name, depth, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#526
  def LocalVariableTargetNode(name, depth, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#531
  def LocalVariableWriteNode(name, depth, name_loc, value, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#46
  def Location(source = T.unsafe(nil), start_offset = T.unsafe(nil), length = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#536
  def MatchLastLineNode(flags, opening_loc, content_loc, closing_loc, unescaped, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#541
  def MatchPredicateNode(value, pattern, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#546
  def MatchRequiredNode(value, pattern, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#551
  def MatchWriteNode(call, targets, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#556
  def MissingNode(source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#561
  def ModuleNode(locals, module_keyword_loc, constant_path, body, end_keyword_loc, name, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#566
  def MultiTargetNode(lefts, rest, rights, lparen_loc, rparen_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#571
  def MultiWriteNode(lefts, rest, rights, lparen_loc, rparen_loc, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#576
  def NextNode(arguments, keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#581
  def NilNode(source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#586
  def NoKeywordsParameterNode(operator_loc, keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#591
  def NumberedParametersNode(maximum, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#596
  def NumberedReferenceReadNode(number, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#601
  def OptionalKeywordParameterNode(flags, name, name_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#606
  def OptionalParameterNode(flags, name, name_loc, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#611
  def OrNode(left, right, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#616
  def ParametersNode(requireds, optionals, rest, posts, keywords, keyword_rest, block, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#621
  def ParenthesesNode(body, opening_loc, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#626
  def PinnedExpressionNode(expression, operator_loc, lparen_loc, rparen_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#631
  def PinnedVariableNode(variable, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#636
  def PostExecutionNode(statements, keyword_loc, opening_loc, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#641
  def PreExecutionNode(statements, keyword_loc, opening_loc, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#646
  def ProgramNode(locals, statements, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#651
  def RangeNode(flags, left, right, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#656
  def RationalNode(numeric, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#661
  def RedoNode(source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#666
  def RegularExpressionNode(flags, opening_loc, content_loc, closing_loc, unescaped, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#671
  def RequiredKeywordParameterNode(flags, name, name_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#676
  def RequiredParameterNode(flags, name, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#681
  def RescueModifierNode(expression, keyword_loc, rescue_expression, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#686
  def RescueNode(keyword_loc, exceptions, operator_loc, reference, statements, consequent, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#691
  def RestParameterNode(flags, name, name_loc, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#696
  def RetryNode(source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#701
  def ReturnNode(flags, keyword_loc, arguments, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#706
  def SelfNode(source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#711
  def ShareableConstantNode(flags, write, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#716
  def SingletonClassNode(locals, class_keyword_loc, operator_loc, expression, body, end_keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#721
  def SourceEncodingNode(source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#726
  def SourceFileNode(flags, filepath, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#731
  def SourceLineNode(source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#736
  def SplatNode(operator_loc, expression, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#741
  def StatementsNode(body, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#746
  def StringNode(flags, opening_loc, content_loc, closing_loc, unescaped, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#751
  def SuperNode(keyword_loc, lparen_loc, arguments, rparen_loc, block, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#756
  def SymbolNode(flags, opening_loc, value_loc, closing_loc, unescaped, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#761
  def TrueNode(source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#766
  def UndefNode(names, keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#771
  def UnlessNode(keyword_loc, predicate, then_keyword_loc, statements, consequent, end_keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#776
  def UntilNode(flags, keyword_loc, closing_loc, predicate, statements, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#781
  def WhenNode(keyword_loc, conditions, then_keyword_loc, statements, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#786
  def WhileNode(flags, keyword_loc, closing_loc, predicate, statements, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#791
  def XStringNode(flags, opening_loc, content_loc, closing_loc, unescaped, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#796
  def YieldNode(keyword_loc, lparen_loc, arguments, rparen_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end
end

# source://prism//lib/prism/debug.rb#6
module Prism::Debug
  class << self
    # source://prism//lib/prism/debug.rb#54
    def cruby_locals(source); end

    def format_errors(_arg0, _arg1); end
    def inspect_node(_arg0); end
    def integer_parse(_arg0); end
    def memsize(_arg0); end
    def named_captures(_arg0); end

    # source://prism//lib/prism/debug.rb#202
    def newlines(source); end

    # source://prism//lib/prism/debug.rb#98
    def prism_locals(source); end

    def profile_file(_arg0); end
    def static_inspect(*_arg0); end
  end
end

# source://prism//lib/prism/debug.rb#90
Prism::Debug::AnonymousLocal = T.let(T.unsafe(nil), Object)

# source://prism//lib/prism/debug.rb#208
class Prism::Debug::Encoding
  # source://prism//lib/prism/debug.rb#214
  def initialize(name, multibyte); end

  # source://prism//lib/prism/debug.rb#232
  def alnum?(source); end

  # source://prism//lib/prism/debug.rb#238
  def alpha?(source); end

  # source://prism//lib/prism/debug.rb#220
  def multibyte?; end

  # source://prism//lib/prism/debug.rb#210
  def name; end

  # source://prism//lib/prism/debug.rb#244
  def upper?(source); end

  # source://prism//lib/prism/debug.rb#226
  def width(source); end

  class << self
    def _alnum?(_arg0, _arg1); end
    def _alpha?(_arg0, _arg1); end
    def _upper?(_arg0, _arg1); end
    def _width(_arg0, _arg1); end
    def all; end
  end
end

# source://prism//lib/prism/debug.rb#9
class Prism::Debug::ISeq
  # source://prism//lib/prism/debug.rb#12
  def initialize(parts); end

  # source://prism//lib/prism/debug.rb#28
  def each_child; end

  # source://prism//lib/prism/debug.rb#24
  def instructions; end

  # source://prism//lib/prism/debug.rb#20
  def local_table; end

  # source://prism//lib/prism/debug.rb#10
  def parts; end

  # source://prism//lib/prism/debug.rb#16
  def type; end
end

# source://prism//lib/prism/node.rb#5853
class Prism::DefNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5855
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      receiver: T.nilable(Prism::Node),
      parameters: T.nilable(Prism::ParametersNode),
      body: T.nilable(Prism::Node),
      locals: T::Array[Symbol],
      def_keyword_loc: Prism::Location,
      operator_loc: T.nilable(Prism::Location),
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location),
      equal_loc: T.nilable(Prism::Location),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, receiver, parameters, body, locals, def_keyword_loc, operator_loc, lparen_loc, rparen_loc, equal_loc, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#6069
  def ===(other); end

  # source://prism//lib/prism/node.rb#5874
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5927
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#5879
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5893
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5884
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5898
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      receiver: T.nilable(Prism::Node),
      parameters: T.nilable(Prism::ParametersNode),
      body: T.nilable(Prism::Node),
      locals: T::Array[Symbol],
      def_keyword_loc: Prism::Location,
      operator_loc: T.nilable(Prism::Location),
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location),
      equal_loc: T.nilable(Prism::Location),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::DefNode)
  end
  def copy(name: T.unsafe(nil), name_loc: T.unsafe(nil), receiver: T.unsafe(nil), parameters: T.unsafe(nil), body: T.unsafe(nil), locals: T.unsafe(nil), def_keyword_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), lparen_loc: T.unsafe(nil), rparen_loc: T.unsafe(nil), equal_loc: T.unsafe(nil), end_keyword_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5879
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5906
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6005
  sig { returns(String) }
  def def_keyword; end

  # source://prism//lib/prism/node.rb#5933
  sig { returns(Prism::Location) }
  def def_keyword_loc; end

  # source://prism//lib/prism/node.rb#6030
  sig { returns(T.nilable(String)) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#5992
  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#6025
  sig { returns(T.nilable(String)) }
  def equal; end

  # source://prism//lib/prism/node.rb#5979
  sig { returns(T.nilable(Prism::Location)) }
  def equal_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#6035
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#5930
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#6015
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#5953
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#5911
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#5914
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#6010
  sig { returns(T.nilable(String)) }
  def operator; end

  # source://prism//lib/prism/node.rb#5940
  sig { returns(T.nilable(Prism::Location)) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#5924
  sig { returns(T.nilable(Prism::ParametersNode)) }
  def parameters; end

  # source://prism//lib/prism/node.rb#5921
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#6020
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#5966
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#6053
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6063
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6091
class Prism::DefinedNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6093
  sig do
    params(
      source: Prism::Source,
      lparen_loc: T.nilable(Prism::Location),
      value: Prism::Node,
      rparen_loc: T.nilable(Prism::Location),
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, lparen_loc, value, rparen_loc, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#6222
  def ===(other); end

  # source://prism//lib/prism/node.rb#6104
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6109
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6119
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6114
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6124
  sig do
    params(
      lparen_loc: T.nilable(Prism::Location),
      value: Prism::Node,
      rparen_loc: T.nilable(Prism::Location),
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::DefinedNode)
  end
  def copy(lparen_loc: T.unsafe(nil), value: T.unsafe(nil), rparen_loc: T.unsafe(nil), keyword_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6109
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6132
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#6188
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#6183
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#6166
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#6173
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#6137
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#6178
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#6153
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#6206
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#6150
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#6216
    def type; end
  end
end

# source://prism//lib/prism/desugar_compiler.rb#4
class Prism::DesugarAndWriteNode
  # source://prism//lib/prism/desugar_compiler.rb#7
  def initialize(node, source, read_class, write_class, *arguments); end

  # source://prism//lib/prism/desugar_compiler.rb#5
  def arguments; end

  # source://prism//lib/prism/desugar_compiler.rb#16
  def compile; end

  # source://prism//lib/prism/desugar_compiler.rb#5
  def node; end

  # source://prism//lib/prism/desugar_compiler.rb#5
  def read_class; end

  # source://prism//lib/prism/desugar_compiler.rb#5
  def source; end

  # source://prism//lib/prism/desugar_compiler.rb#5
  def write_class; end
end

# source://prism//lib/prism/desugar_compiler.rb#218
class Prism::DesugarCompiler < ::Prism::MutationCompiler
  # source://prism//lib/prism/desugar_compiler.rb#224
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#242
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#233
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#251
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#269
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#260
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#278
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#296
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#287
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#305
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#323
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#314
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#332
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#350
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#341
  def visit_local_variable_or_write_node(node); end
end

# source://prism//lib/prism/desugar_compiler.rb#63
class Prism::DesugarOperatorWriteNode
  # source://prism//lib/prism/desugar_compiler.rb#66
  def initialize(node, source, read_class, write_class, *arguments); end

  # source://prism//lib/prism/desugar_compiler.rb#64
  def arguments; end

  # source://prism//lib/prism/desugar_compiler.rb#75
  def compile; end

  # source://prism//lib/prism/desugar_compiler.rb#64
  def node; end

  # source://prism//lib/prism/desugar_compiler.rb#64
  def read_class; end

  # source://prism//lib/prism/desugar_compiler.rb#64
  def source; end

  # source://prism//lib/prism/desugar_compiler.rb#64
  def write_class; end
end

# source://prism//lib/prism/desugar_compiler.rb#27
class Prism::DesugarOrWriteDefinedNode
  # source://prism//lib/prism/desugar_compiler.rb#30
  def initialize(node, source, read_class, write_class, *arguments); end

  # source://prism//lib/prism/desugar_compiler.rb#28
  def arguments; end

  # source://prism//lib/prism/desugar_compiler.rb#39
  def compile; end

  # source://prism//lib/prism/desugar_compiler.rb#28
  def node; end

  # source://prism//lib/prism/desugar_compiler.rb#28
  def read_class; end

  # source://prism//lib/prism/desugar_compiler.rb#28
  def source; end

  # source://prism//lib/prism/desugar_compiler.rb#28
  def write_class; end
end

# source://prism//lib/prism/desugar_compiler.rb#101
class Prism::DesugarOrWriteNode
  # source://prism//lib/prism/desugar_compiler.rb#104
  def initialize(node, source, read_class, write_class, *arguments); end

  # source://prism//lib/prism/desugar_compiler.rb#102
  def arguments; end

  # source://prism//lib/prism/desugar_compiler.rb#113
  def compile; end

  # source://prism//lib/prism/desugar_compiler.rb#102
  def node; end

  # source://prism//lib/prism/desugar_compiler.rb#102
  def read_class; end

  # source://prism//lib/prism/desugar_compiler.rb#102
  def source; end

  # source://prism//lib/prism/desugar_compiler.rb#102
  def write_class; end
end

# source://prism//lib/prism/dispatcher.rb#41
class Prism::Dispatcher < ::Prism::Visitor
  # source://prism//lib/prism/dispatcher.rb#46
  def initialize; end

  # source://prism//lib/prism/visitor.rb#17
  def dispatch(node); end

  # source://prism//lib/prism/dispatcher.rb#65
  def dispatch_once(node); end

  # source://prism//lib/prism/dispatcher.rb#43
  def listeners; end

  # source://prism//lib/prism/dispatcher.rb#53
  def register(listener, *events); end

  # source://prism//lib/prism/dispatcher.rb#71
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#79
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/dispatcher.rb#87
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#95
  def visit_and_node(node); end

  # source://prism//lib/prism/dispatcher.rb#103
  def visit_arguments_node(node); end

  # source://prism//lib/prism/dispatcher.rb#111
  def visit_array_node(node); end

  # source://prism//lib/prism/dispatcher.rb#119
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#127
  def visit_assoc_node(node); end

  # source://prism//lib/prism/dispatcher.rb#135
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/dispatcher.rb#143
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#151
  def visit_begin_node(node); end

  # source://prism//lib/prism/dispatcher.rb#159
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/dispatcher.rb#167
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#175
  def visit_block_node(node); end

  # source://prism//lib/prism/dispatcher.rb#183
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#191
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#199
  def visit_break_node(node); end

  # source://prism//lib/prism/dispatcher.rb#207
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#215
  def visit_call_node(node); end

  # source://prism//lib/prism/dispatcher.rb#223
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#231
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#239
  def visit_call_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#247
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#255
  def visit_case_match_node(node); end

  # source://prism//lib/prism/dispatcher.rb#263
  def visit_case_node(node); end

  # source://prism//lib/prism/dispatcher.rb#271
  def visit_class_node(node); end

  # source://prism//lib/prism/dispatcher.rb#279
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#287
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#295
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#303
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#311
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#319
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#327
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#335
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#343
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#351
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#359
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/dispatcher.rb#367
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#375
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#383
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#391
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#399
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#407
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#415
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#423
  def visit_def_node(node); end

  # source://prism//lib/prism/dispatcher.rb#431
  def visit_defined_node(node); end

  # source://prism//lib/prism/dispatcher.rb#439
  def visit_else_node(node); end

  # source://prism//lib/prism/dispatcher.rb#447
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/dispatcher.rb#455
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#463
  def visit_ensure_node(node); end

  # source://prism//lib/prism/dispatcher.rb#471
  def visit_false_node(node); end

  # source://prism//lib/prism/dispatcher.rb#479
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#487
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/dispatcher.rb#495
  def visit_float_node(node); end

  # source://prism//lib/prism/dispatcher.rb#503
  def visit_for_node(node); end

  # source://prism//lib/prism/dispatcher.rb#511
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/dispatcher.rb#519
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#527
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/dispatcher.rb#535
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#543
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#551
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#559
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#567
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#575
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#583
  def visit_hash_node(node); end

  # source://prism//lib/prism/dispatcher.rb#591
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#599
  def visit_if_node(node); end

  # source://prism//lib/prism/dispatcher.rb#607
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/dispatcher.rb#615
  def visit_implicit_node(node); end

  # source://prism//lib/prism/dispatcher.rb#623
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/dispatcher.rb#631
  def visit_in_node(node); end

  # source://prism//lib/prism/dispatcher.rb#639
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#647
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#655
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#663
  def visit_index_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#671
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#679
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#687
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#695
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#703
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#711
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#719
  def visit_integer_node(node); end

  # source://prism//lib/prism/dispatcher.rb#727
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#735
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#743
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#751
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/dispatcher.rb#759
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#767
  def visit_it_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#775
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/dispatcher.rb#783
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#791
  def visit_lambda_node(node); end

  # source://prism//lib/prism/dispatcher.rb#799
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#807
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#815
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#823
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#831
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#839
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#847
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#855
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/dispatcher.rb#863
  def visit_match_required_node(node); end

  # source://prism//lib/prism/dispatcher.rb#871
  def visit_match_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#879
  def visit_missing_node(node); end

  # source://prism//lib/prism/dispatcher.rb#887
  def visit_module_node(node); end

  # source://prism//lib/prism/dispatcher.rb#895
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#903
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#911
  def visit_next_node(node); end

  # source://prism//lib/prism/dispatcher.rb#919
  def visit_nil_node(node); end

  # source://prism//lib/prism/dispatcher.rb#927
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#935
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#943
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#951
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#959
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#967
  def visit_or_node(node); end

  # source://prism//lib/prism/dispatcher.rb#975
  def visit_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#983
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/dispatcher.rb#991
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#999
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1007
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1015
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1023
  def visit_program_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1031
  def visit_range_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1039
  def visit_rational_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1047
  def visit_redo_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1055
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1063
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1071
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1079
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1087
  def visit_rescue_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1095
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1103
  def visit_retry_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1111
  def visit_return_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1119
  def visit_self_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1127
  def visit_shareable_constant_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1135
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1143
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1151
  def visit_source_file_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1159
  def visit_source_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1167
  def visit_splat_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1175
  def visit_statements_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1183
  def visit_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1191
  def visit_super_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1199
  def visit_symbol_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1207
  def visit_true_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1215
  def visit_undef_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1223
  def visit_unless_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1231
  def visit_until_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1239
  def visit_when_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1247
  def visit_while_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1255
  def visit_x_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1263
  def visit_yield_node(node); end
end

# source://prism//lib/prism/dispatcher.rb#1269
class Prism::Dispatcher::DispatchOnce < ::Prism::Visitor
  # source://prism//lib/prism/dispatcher.rb#1272
  def initialize(listeners); end

  # source://prism//lib/prism/dispatcher.rb#1270
  def listeners; end

  # source://prism//lib/prism/dispatcher.rb#1277
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1283
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1289
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1295
  def visit_and_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1301
  def visit_arguments_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1307
  def visit_array_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1313
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1319
  def visit_assoc_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1325
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1331
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1337
  def visit_begin_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1343
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1349
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1355
  def visit_block_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1361
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1367
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1373
  def visit_break_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1379
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1385
  def visit_call_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1391
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1397
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1403
  def visit_call_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1409
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1415
  def visit_case_match_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1421
  def visit_case_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1427
  def visit_class_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1433
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1439
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1445
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1451
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1457
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1463
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1469
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1475
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1481
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1487
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1493
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1499
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1505
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1511
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1517
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1523
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1529
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1535
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1541
  def visit_def_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1547
  def visit_defined_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1553
  def visit_else_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1559
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1565
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1571
  def visit_ensure_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1577
  def visit_false_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1583
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1589
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1595
  def visit_float_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1601
  def visit_for_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1607
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1613
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1619
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1625
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1631
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1637
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1643
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1649
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1655
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1661
  def visit_hash_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1667
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1673
  def visit_if_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1679
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1685
  def visit_implicit_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1691
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1697
  def visit_in_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1703
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1709
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1715
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1721
  def visit_index_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1727
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1733
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1739
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1745
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1751
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1757
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1763
  def visit_integer_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1769
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1775
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1781
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1787
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1793
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1799
  def visit_it_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1805
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1811
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1817
  def visit_lambda_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1823
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1829
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1835
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1841
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1847
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1853
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1859
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1865
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1871
  def visit_match_required_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1877
  def visit_match_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1883
  def visit_missing_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1889
  def visit_module_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1895
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1901
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1907
  def visit_next_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1913
  def visit_nil_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1919
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1925
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1931
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1937
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1943
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1949
  def visit_or_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1955
  def visit_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1961
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1967
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1973
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1979
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1985
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1991
  def visit_program_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1997
  def visit_range_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2003
  def visit_rational_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2009
  def visit_redo_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2015
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2021
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2027
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2033
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2039
  def visit_rescue_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2045
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2051
  def visit_retry_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2057
  def visit_return_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2063
  def visit_self_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2069
  def visit_shareable_constant_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2075
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2081
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2087
  def visit_source_file_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2093
  def visit_source_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2099
  def visit_splat_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2105
  def visit_statements_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2111
  def visit_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2117
  def visit_super_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2123
  def visit_symbol_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2129
  def visit_true_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2135
  def visit_undef_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2141
  def visit_unless_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2147
  def visit_until_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2153
  def visit_when_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2159
  def visit_while_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2165
  def visit_x_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2171
  def visit_yield_node(node); end
end

# source://prism//lib/prism/dot_visitor.rb#14
class Prism::DotVisitor < ::Prism::Visitor
  # source://prism//lib/prism/dot_visitor.rb#106
  def initialize; end

  # source://prism//lib/prism/dot_visitor.rb#103
  def digraph; end

  # source://prism//lib/prism/dot_visitor.rb#111
  def to_dot; end

  # source://prism//lib/prism/dot_visitor.rb#116
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#141
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#166
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#191
  def visit_and_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#216
  def visit_arguments_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#246
  def visit_array_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#286
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#348
  def visit_assoc_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#375
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#398
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#415
  def visit_begin_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#463
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#486
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#506
  def visit_block_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#541
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#569
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#612
  def visit_break_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#635
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#681
  def visit_call_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#739
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#788
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#834
  def visit_call_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#864
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#889
  def visit_case_match_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#934
  def visit_case_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#979
  def visit_class_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1026
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1053
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1083
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1110
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1127
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1144
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1171
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1198
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1228
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1255
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1280
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1309
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1337
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1362
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1391
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1416
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1433
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1450
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1477
  def visit_def_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1546
  def visit_defined_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1577
  def visit_else_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1605
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1631
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1652
  def visit_ensure_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1678
  def visit_false_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1692
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1743
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1775
  def visit_float_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1792
  def visit_for_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1834
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1848
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1862
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1882
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1909
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1939
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1966
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1983
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2000
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2027
  def visit_hash_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2060
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2109
  def visit_if_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2154
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2172
  def visit_implicit_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2190
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2204
  def visit_in_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2236
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2289
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2345
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2398
  def visit_index_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2437
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2464
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2494
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2521
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2538
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2555
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2582
  def visit_integer_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2602
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2638
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2674
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2714
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2751
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2784
  def visit_it_parameters_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2798
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2828
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2856
  def visit_lambda_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2894
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2924
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2957
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2987
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3007
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3027
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3057
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3086
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3111
  def visit_match_required_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3136
  def visit_match_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3167
  def visit_missing_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3181
  def visit_module_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3217
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3273
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3336
  def visit_next_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3359
  def visit_nil_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3373
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3393
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3410
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3427
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3454
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3484
  def visit_or_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3509
  def visit_parameters_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3593
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3619
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3646
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3667
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3696
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3725
  def visit_program_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3746
  def visit_range_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3778
  def visit_rational_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3796
  def visit_redo_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3810
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3839
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3862
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3882
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3907
  def visit_rescue_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3960
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3988
  def visit_retry_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4002
  def visit_return_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4028
  def visit_self_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4042
  def visit_shareable_constant_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4063
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4099
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4113
  def visit_source_file_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4133
  def visit_source_line_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4147
  def visit_splat_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4170
  def visit_statements_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4197
  def visit_string_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4230
  def visit_super_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4269
  def visit_symbol_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4304
  def visit_true_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4318
  def visit_undef_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4348
  def visit_unless_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4391
  def visit_until_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4426
  def visit_when_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4467
  def visit_while_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4502
  def visit_x_string_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4531
  def visit_yield_node(node); end

  private

  # source://prism//lib/prism/dot_visitor.rb#4577
  def arguments_node_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4586
  def array_node_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4594
  def call_node_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4605
  def encoding_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4614
  def integer_base_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4625
  def interpolated_string_node_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4634
  def keyword_hash_node_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4571
  def location_inspect(location); end

  # source://prism//lib/prism/dot_visitor.rb#4642
  def loop_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4566
  def node_id(node); end

  # source://prism//lib/prism/dot_visitor.rb#4650
  def parameter_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4658
  def range_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4666
  def regular_expression_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4684
  def return_node_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4692
  def shareable_constant_node_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4702
  def string_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4713
  def symbol_flags_inspect(node); end
end

# source://prism//lib/prism/dot_visitor.rb#59
class Prism::DotVisitor::Digraph
  # source://prism//lib/prism/dot_visitor.rb#62
  def initialize; end

  # source://prism//lib/prism/dot_visitor.rb#76
  def edge(value); end

  # source://prism//lib/prism/dot_visitor.rb#60
  def edges; end

  # source://prism//lib/prism/dot_visitor.rb#68
  def node(value); end

  # source://prism//lib/prism/dot_visitor.rb#60
  def nodes; end

  # source://prism//lib/prism/dot_visitor.rb#80
  def to_dot; end

  # source://prism//lib/prism/dot_visitor.rb#72
  def waypoint(value); end

  # source://prism//lib/prism/dot_visitor.rb#60
  def waypoints; end
end

# source://prism//lib/prism/dot_visitor.rb#15
class Prism::DotVisitor::Field
  # source://prism//lib/prism/dot_visitor.rb#18
  def initialize(name, value, port); end

  # source://prism//lib/prism/dot_visitor.rb#16
  def name; end

  # source://prism//lib/prism/dot_visitor.rb#16
  def port; end

  # source://prism//lib/prism/dot_visitor.rb#24
  def to_dot; end

  # source://prism//lib/prism/dot_visitor.rb#16
  def value; end
end

# source://prism//lib/prism/dot_visitor.rb#33
class Prism::DotVisitor::Table
  # source://prism//lib/prism/dot_visitor.rb#36
  def initialize(name); end

  # source://prism//lib/prism/dot_visitor.rb#41
  def field(name, value = T.unsafe(nil), port: T.unsafe(nil)); end

  # source://prism//lib/prism/dot_visitor.rb#34
  def fields; end

  # source://prism//lib/prism/dot_visitor.rb#34
  def name; end

  # source://prism//lib/prism/dot_visitor.rb#45
  def to_dot; end
end

# source://prism//lib/prism/node.rb#6235
class Prism::ElseNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6237
  sig do
    params(
      source: Prism::Source,
      else_keyword_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, else_keyword_loc, statements, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#6349
  def ===(other); end

  # source://prism//lib/prism/node.rb#6247
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6252
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6264
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6257
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6269
  sig do
    params(
      else_keyword_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::ElseNode)
  end
  def copy(else_keyword_loc: T.unsafe(nil), statements: T.unsafe(nil), end_keyword_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6252
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6277
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6305
  sig { returns(String) }
  def else_keyword; end

  # source://prism//lib/prism/node.rb#6282
  sig { returns(Prism::Location) }
  def else_keyword_loc; end

  # source://prism//lib/prism/node.rb#6310
  sig { returns(T.nilable(String)) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#6292
  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#6315
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#6289
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#6333
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6343
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#403
class Prism::EmbDocComment < ::Prism::Comment
  # source://prism//lib/prism/parse_result.rb#410
  sig { returns(String) }
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#405
  sig { override.returns(T::Boolean) }
  def trailing?; end
end

# source://prism//lib/prism/node.rb#6361
class Prism::EmbeddedStatementsNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6363
  sig do
    params(
      source: Prism::Source,
      opening_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, opening_loc, statements, closing_loc, location); end

  # source://prism//lib/prism/node.rb#6469
  def ===(other); end

  # source://prism//lib/prism/node.rb#6373
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6378
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6430
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#6418
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#6390
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6383
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6395
  sig do
    params(
      opening_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      closing_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::EmbeddedStatementsNode)
  end
  def copy(opening_loc: T.unsafe(nil), statements: T.unsafe(nil), closing_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6378
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6403
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#6435
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#6425
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#6408
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#6415
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#6453
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6463
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6481
class Prism::EmbeddedVariableNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6483
  sig do
    params(
      source: Prism::Source,
      operator_loc: Prism::Location,
      variable: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, operator_loc, variable, location); end

  # source://prism//lib/prism/node.rb#6574
  def ===(other); end

  # source://prism//lib/prism/node.rb#6492
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6497
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6507
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6502
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6512
  sig do
    params(
      operator_loc: Prism::Location,
      variable: Prism::Node,
      location: Prism::Location
    ).returns(Prism::EmbeddedVariableNode)
  end
  def copy(operator_loc: T.unsafe(nil), variable: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6497
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6520
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#6540
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#6535
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#6525
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#6558
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#6532
  sig { returns(Prism::Node) }
  def variable; end

  class << self
    # source://prism//lib/prism/node.rb#6568
    def type; end
  end
end

# source://prism//lib/prism/node.rb#19232
# Flags for nodes that have unescaped content.
module Prism::EncodingFlags; end

# source://prism//lib/prism/node.rb#19237
Prism::EncodingFlags::FORCED_BINARY_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19234
Prism::EncodingFlags::FORCED_UTF8_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#6589
class Prism::EnsureNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6591
  sig do
    params(
      source: Prism::Source,
      ensure_keyword_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, ensure_keyword_loc, statements, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#6697
  def ===(other); end

  # source://prism//lib/prism/node.rb#6601
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6606
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6618
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6611
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6623
  sig do
    params(
      ensure_keyword_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::EnsureNode)
  end
  def copy(ensure_keyword_loc: T.unsafe(nil), statements: T.unsafe(nil), end_keyword_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6606
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6631
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6658
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#6646
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#6653
  sig { returns(String) }
  def ensure_keyword; end

  # source://prism//lib/prism/node.rb#6636
  sig { returns(Prism::Location) }
  def ensure_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#6663
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#6643
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#6681
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6691
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6709
class Prism::FalseNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6711
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  # source://prism//lib/prism/node.rb#6785
  def ===(other); end

  # source://prism//lib/prism/node.rb#6718
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6723
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6733
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6728
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6738
  sig { params(location: Prism::Location).returns(Prism::FalseNode) }
  def copy(location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6723
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6746
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#6751
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#6769
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6779
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6800
class Prism::FindPatternNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6802
  sig do
    params(
      source: Prism::Source,
      constant: T.nilable(Prism::Node),
      left: Prism::Node,
      requireds: T::Array[Prism::Node],
      right: Prism::Node,
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, constant, left, requireds, right, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#6935
  def ===(other); end

  # source://prism//lib/prism/node.rb#6815
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6820
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6896
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#6878
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#6835
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6825
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6853
  sig { returns(T.nilable(Prism::Node)) }
  def constant; end

  # source://prism//lib/prism/node.rb#6840
  sig do
    params(
      constant: T.nilable(Prism::Node),
      left: Prism::Node,
      requireds: T::Array[Prism::Node],
      right: Prism::Node,
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::FindPatternNode)
  end
  def copy(constant: T.unsafe(nil), left: T.unsafe(nil), requireds: T.unsafe(nil), right: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6820
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6848
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#6901
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#6856
  sig { returns(Prism::Node) }
  def left; end

  # source://prism//lib/prism/node.rb#6891
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#6865
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#6859
  sig { returns(T::Array[Prism::Node]) }
  def requireds; end

  # source://prism//lib/prism/node.rb#6862
  sig { returns(Prism::Node) }
  def right; end

  # source://prism//lib/prism/node.rb#6919
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6929
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6951
class Prism::FlipFlopNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6953
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      left: T.nilable(Prism::Node),
      right: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, left, right, operator_loc, location); end

  # source://prism//lib/prism/node.rb#7061
  def ===(other); end

  # source://prism//lib/prism/node.rb#6964
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6969
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6982
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6974
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6987
  sig do
    params(
      flags: Integer,
      left: T.nilable(Prism::Node),
      right: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::FlipFlopNode)
  end
  def copy(flags: T.unsafe(nil), left: T.unsafe(nil), right: T.unsafe(nil), operator_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6969
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6995
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7017
  sig { returns(T::Boolean) }
  def exclude_end?; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#7027
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#7004
  sig { returns(T.nilable(Prism::Node)) }
  def left; end

  # source://prism//lib/prism/node.rb#7022
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#7010
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#7007
  sig { returns(T.nilable(Prism::Node)) }
  def right; end

  # source://prism//lib/prism/node.rb#7045
  sig { override.returns(Symbol) }
  def type; end

  protected

  # source://prism//lib/prism/node.rb#7000
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#7055
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7074
class Prism::FloatNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7076
  sig { params(source: Prism::Source, value: Float, location: Prism::Location).void }
  def initialize(source, value, location); end

  # source://prism//lib/prism/node.rb#7154
  def ===(other); end

  # source://prism//lib/prism/node.rb#7084
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7089
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7099
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7094
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7104
  sig { params(value: Float, location: Prism::Location).returns(Prism::FloatNode) }
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7089
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7112
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#7120
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#7138
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#7117
  sig { returns(Float) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#7148
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7164
class Prism::ForNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7166
  sig do
    params(
      source: Prism::Source,
      index: Prism::Node,
      collection: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      for_keyword_loc: Prism::Location,
      in_keyword_loc: Prism::Location,
      do_keyword_loc: T.nilable(Prism::Location),
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, index, collection, statements, for_keyword_loc, in_keyword_loc, do_keyword_loc, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#7314
  def ===(other); end

  # source://prism//lib/prism/node.rb#7180
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7185
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7220
  sig { returns(Prism::Node) }
  def collection; end

  # source://prism//lib/prism/node.rb#7199
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7190
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7204
  sig do
    params(
      index: Prism::Node,
      collection: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      for_keyword_loc: Prism::Location,
      in_keyword_loc: Prism::Location,
      do_keyword_loc: T.nilable(Prism::Location),
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::ForNode)
  end
  def copy(index: T.unsafe(nil), collection: T.unsafe(nil), statements: T.unsafe(nil), for_keyword_loc: T.unsafe(nil), in_keyword_loc: T.unsafe(nil), do_keyword_loc: T.unsafe(nil), end_keyword_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7185
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7212
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7270
  sig { returns(T.nilable(String)) }
  def do_keyword; end

  # source://prism//lib/prism/node.rb#7240
  sig { returns(T.nilable(Prism::Location)) }
  def do_keyword_loc; end

  # source://prism//lib/prism/node.rb#7275
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#7253
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#7260
  sig { returns(String) }
  def for_keyword; end

  # source://prism//lib/prism/node.rb#7226
  sig { returns(Prism::Location) }
  def for_keyword_loc; end

  # source://prism//lib/prism/node.rb#7265
  sig { returns(String) }
  def in_keyword; end

  # source://prism//lib/prism/node.rb#7233
  sig { returns(Prism::Location) }
  def in_keyword_loc; end

  # source://prism//lib/prism/node.rb#7217
  sig { returns(Prism::Node) }
  def index; end

  # source://prism//lib/prism/node.rb#7280
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#7223
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#7298
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#7308
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7332
class Prism::ForwardingArgumentsNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7334
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  # source://prism//lib/prism/node.rb#7408
  def ===(other); end

  # source://prism//lib/prism/node.rb#7341
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7346
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7356
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7351
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7361
  sig { params(location: Prism::Location).returns(Prism::ForwardingArgumentsNode) }
  def copy(location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7346
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7369
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#7374
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#7392
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#7402
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7418
class Prism::ForwardingParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7420
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  # source://prism//lib/prism/node.rb#7494
  def ===(other); end

  # source://prism//lib/prism/node.rb#7427
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7432
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7442
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7437
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7447
  sig { params(location: Prism::Location).returns(Prism::ForwardingParameterNode) }
  def copy(location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7432
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7455
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#7460
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#7478
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#7488
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7503
class Prism::ForwardingSuperNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7505
  sig { params(source: Prism::Source, block: T.nilable(Prism::BlockNode), location: Prism::Location).void }
  def initialize(source, block, location); end

  # source://prism//lib/prism/node.rb#7585
  def ===(other); end

  # source://prism//lib/prism/node.rb#7513
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7548
  sig { returns(T.nilable(Prism::BlockNode)) }
  def block; end

  # source://prism//lib/prism/node.rb#7518
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7530
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7523
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7535
  sig { params(block: T.nilable(Prism::BlockNode), location: Prism::Location).returns(Prism::ForwardingSuperNode) }
  def copy(block: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7518
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7543
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#7551
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#7569
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#7579
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7595
class Prism::GlobalVariableAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7597
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#7700
  def ===(other); end

  # source://prism//lib/prism/node.rb#7608
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7613
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7623
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7618
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7628
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::GlobalVariableAndWriteNode)
  end
  def copy(name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7613
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7636
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#163
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#7666
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#7641
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#7644
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#7661
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#7651
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#7684
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#7658
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#7694
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7713
class Prism::GlobalVariableOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7715
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, binary_operator_loc, value, binary_operator, location); end

  # source://prism//lib/prism/node.rb#7817
  def ===(other); end

  # source://prism//lib/prism/node.rb#7727
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7780
  sig { returns(Symbol) }
  def binary_operator; end

  # source://prism//lib/prism/node.rb#7770
  sig { returns(Prism::Location) }
  def binary_operator_loc; end

  # source://prism//lib/prism/node.rb#7732
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7742
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7737
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7747
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol,
      location: Prism::Location
    ).returns(Prism::GlobalVariableOperatorWriteNode)
  end
  def copy(name: T.unsafe(nil), name_loc: T.unsafe(nil), binary_operator_loc: T.unsafe(nil), value: T.unsafe(nil), binary_operator: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7732
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7755
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#175
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#7783
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#7760
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#7763
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node_ext.rb#371
  def operator; end

  # source://prism//lib/prism/node_ext.rb#378
  def operator_loc; end

  # source://prism//lib/prism/node.rb#7801
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#7777
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#7811
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7831
class Prism::GlobalVariableOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7833
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#7936
  def ===(other); end

  # source://prism//lib/prism/node.rb#7844
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7849
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7859
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7854
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7864
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::GlobalVariableOrWriteNode)
  end
  def copy(name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7849
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7872
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#169
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#7902
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#7877
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#7880
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#7897
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#7887
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#7920
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#7894
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#7930
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7949
class Prism::GlobalVariableReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7951
  sig { params(source: Prism::Source, name: Symbol, location: Prism::Location).void }
  def initialize(source, name, location); end

  # source://prism//lib/prism/node.rb#8033
  def ===(other); end

  # source://prism//lib/prism/node.rb#7959
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7964
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7974
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7969
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7979
  sig { params(name: Symbol, location: Prism::Location).returns(Prism::GlobalVariableReadNode) }
  def copy(name: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7964
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7987
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#7999
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#7996
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#8017
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#8027
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8043
class Prism::GlobalVariableTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8045
  sig { params(source: Prism::Source, name: Symbol, location: Prism::Location).void }
  def initialize(source, name, location); end

  # source://prism//lib/prism/node.rb#8123
  def ===(other); end

  # source://prism//lib/prism/node.rb#8053
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8058
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8068
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8063
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8073
  sig { params(name: Symbol, location: Prism::Location).returns(Prism::GlobalVariableTargetNode) }
  def copy(name: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8058
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8081
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#8089
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#8086
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#8107
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#8117
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8133
class Prism::GlobalVariableWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8135
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#8254
  def ===(other); end

  # source://prism//lib/prism/node.rb#8146
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8151
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8161
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8156
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8166
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::GlobalVariableWriteNode)
  end
  def copy(name: T.unsafe(nil), name_loc: T.unsafe(nil), value: T.unsafe(nil), operator_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8151
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8174
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#8220
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#8183
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#8189
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#8215
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#8208
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#8238
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#8202
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#8248
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8267
class Prism::HashNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8269
  sig do
    params(
      source: Prism::Source,
      opening_loc: Prism::Location,
      elements: T::Array[T.any(Prism::AssocNode, Prism::AssocSplatNode)],
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, opening_loc, elements, closing_loc, location); end

  # source://prism//lib/prism/node.rb#8385
  def ===(other); end

  # source://prism//lib/prism/node.rb#8279
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8284
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8346
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#8334
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#8294
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8289
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8299
  sig do
    params(
      opening_loc: Prism::Location,
      elements: T::Array[T.any(Prism::AssocNode, Prism::AssocSplatNode)],
      closing_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::HashNode)
  end
  def copy(opening_loc: T.unsafe(nil), elements: T.unsafe(nil), closing_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8284
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8307
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8328
  sig { returns(T::Array[T.any(Prism::AssocNode, Prism::AssocSplatNode)]) }
  def elements; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#8351
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#8341
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#8315
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#8369
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#8379
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8401
class Prism::HashPatternNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8403
  sig do
    params(
      source: Prism::Source,
      constant: T.nilable(Prism::Node),
      elements: T::Array[Prism::AssocNode],
      rest: T.nilable(T.any(Prism::AssocSplatNode, Prism::NoKeywordsParameterNode)),
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, constant, elements, rest, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#8531
  def ===(other); end

  # source://prism//lib/prism/node.rb#8415
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8420
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8492
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#8474
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#8434
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8425
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8452
  sig { returns(T.nilable(Prism::Node)) }
  def constant; end

  # source://prism//lib/prism/node.rb#8439
  sig do
    params(
      constant: T.nilable(Prism::Node),
      elements: T::Array[Prism::AssocNode],
      rest: T.nilable(T.any(Prism::AssocSplatNode, Prism::NoKeywordsParameterNode)),
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::HashPatternNode)
  end
  def copy(constant: T.unsafe(nil), elements: T.unsafe(nil), rest: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8420
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8447
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8455
  sig { returns(T::Array[Prism::AssocNode]) }
  def elements; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#8497
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#8487
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#8461
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#8458
  sig { returns(T.nilable(T.any(Prism::AssocSplatNode, Prism::NoKeywordsParameterNode))) }
  def rest; end

  # source://prism//lib/prism/node.rb#8515
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#8525
    def type; end
  end
end

# source://prism//lib/prism/node_ext.rb#46
module Prism::HeredocQuery
  # source://prism//lib/prism/node_ext.rb#48
  def heredoc?; end
end

# source://prism//lib/prism/node.rb#8552
class Prism::IfNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8554
  sig do
    params(
      source: Prism::Source,
      if_keyword_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      then_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      consequent: T.nilable(Prism::Node),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, if_keyword_loc, predicate, then_keyword_loc, statements, consequent, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#8751
  def ===(other); end

  # source://prism//lib/prism/node.rb#8567
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8576
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8590
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8581
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8681
  sig { returns(T.nilable(Prism::Node)) }
  def consequent; end

  # source://prism//lib/prism/node.rb#8595
  sig do
    params(
      if_keyword_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      then_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      consequent: T.nilable(Prism::Node),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::IfNode)
  end
  def copy(if_keyword_loc: T.unsafe(nil), predicate: T.unsafe(nil), then_keyword_loc: T.unsafe(nil), statements: T.unsafe(nil), consequent: T.unsafe(nil), end_keyword_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8576
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8603
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8712
  sig { returns(T.nilable(String)) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#8689
  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#8702
  sig { returns(T.nilable(String)) }
  def if_keyword; end

  # source://prism//lib/prism/node.rb#8613
  sig { returns(T.nilable(Prism::Location)) }
  def if_keyword_loc; end

  # source://prism//lib/prism/node.rb#8717
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#8637
  sig { returns(Prism::Node) }
  def predicate; end

  # source://prism//lib/prism/node.rb#8571
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#8666
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#8707
  sig { returns(T.nilable(String)) }
  def then_keyword; end

  # source://prism//lib/prism/node.rb#8646
  sig { returns(T.nilable(Prism::Location)) }
  def then_keyword_loc; end

  # source://prism//lib/prism/node.rb#8735
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#8745
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8766
class Prism::ImaginaryNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8768
  sig do
    params(
      source: Prism::Source,
      numeric: T.any(Prism::FloatNode, Prism::IntegerNode, Prism::RationalNode),
      location: Prism::Location
    ).void
  end
  def initialize(source, numeric, location); end

  # source://prism//lib/prism/node.rb#8846
  def ===(other); end

  # source://prism//lib/prism/node.rb#8776
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8781
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8791
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8786
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8796
  sig do
    params(
      numeric: T.any(Prism::FloatNode, Prism::IntegerNode, Prism::RationalNode),
      location: Prism::Location
    ).returns(Prism::ImaginaryNode)
  end
  def copy(numeric: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8781
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8804
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#8812
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#8809
  sig { returns(T.any(Prism::FloatNode, Prism::IntegerNode, Prism::RationalNode)) }
  def numeric; end

  # source://prism//lib/prism/node.rb#8830
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node_ext.rb#98
  sig { returns(Complex) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#8840
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8862
class Prism::ImplicitNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8864
  sig { params(source: Prism::Source, value: Prism::Node, location: Prism::Location).void }
  def initialize(source, value, location); end

  # source://prism//lib/prism/node.rb#8942
  def ===(other); end

  # source://prism//lib/prism/node.rb#8872
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8877
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8887
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8882
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8892
  sig { params(value: Prism::Node, location: Prism::Location).returns(Prism::ImplicitNode) }
  def copy(value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8877
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8900
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#8908
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#8926
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#8905
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#8936
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8961
class Prism::ImplicitRestNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8963
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  # source://prism//lib/prism/node.rb#9037
  def ===(other); end

  # source://prism//lib/prism/node.rb#8970
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8975
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8985
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8980
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8990
  sig { params(location: Prism::Location).returns(Prism::ImplicitRestNode) }
  def copy(location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8975
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8998
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#9003
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#9021
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#9031
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9046
class Prism::InNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9048
  sig do
    params(
      source: Prism::Source,
      pattern: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      in_loc: Prism::Location,
      then_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, pattern, statements, in_loc, then_loc, location); end

  # source://prism//lib/prism/node.rb#9165
  def ===(other); end

  # source://prism//lib/prism/node.rb#9059
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9064
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9077
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9069
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9082
  sig do
    params(
      pattern: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      in_loc: Prism::Location,
      then_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::InNode)
  end
  def copy(pattern: T.unsafe(nil), statements: T.unsafe(nil), in_loc: T.unsafe(nil), then_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9064
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9090
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#9121
  sig { returns(String) }
  def in; end

  # source://prism//lib/prism/node.rb#9101
  sig { returns(Prism::Location) }
  def in_loc; end

  # source://prism//lib/prism/node.rb#9131
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#9095
  sig { returns(Prism::Node) }
  def pattern; end

  # source://prism//lib/prism/node.rb#9098
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#9126
  sig { returns(T.nilable(String)) }
  def then; end

  # source://prism//lib/prism/node.rb#9108
  sig { returns(T.nilable(Prism::Location)) }
  def then_loc; end

  # source://prism//lib/prism/node.rb#9149
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#9159
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9178
class Prism::IndexAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9180
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#9358
  def ===(other); end

  # source://prism//lib/prism/node.rb#9196
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9261
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#9294
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#9271
  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  # source://prism//lib/prism/node.rb#9304
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#9241
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#9201
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9314
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#9264
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#9216
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9206
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9221
  sig do
    params(
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::IndexAndWriteNode)
  end
  def copy(flags: T.unsafe(nil), receiver: T.unsafe(nil), call_operator_loc: T.unsafe(nil), opening_loc: T.unsafe(nil), arguments: T.unsafe(nil), closing_loc: T.unsafe(nil), block: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9201
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9229
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#9299
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#9324
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#9309
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#9254
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#9319
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#9274
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#9238
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#9284
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#9342
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#9281
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#9289
  sig { returns(T::Boolean) }
  def variable_call?; end

  protected

  # source://prism//lib/prism/node.rb#9234
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#9352
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9376
class Prism::IndexOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9378
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::Node),
      binary_operator: Symbol,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, binary_operator, binary_operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#9555
  def ===(other); end

  # source://prism//lib/prism/node.rb#9395
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9460
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#9496
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#9473
  sig { returns(Symbol) }
  def binary_operator; end

  # source://prism//lib/prism/node.rb#9476
  sig { returns(Prism::Location) }
  def binary_operator_loc; end

  # source://prism//lib/prism/node.rb#9470
  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  # source://prism//lib/prism/node.rb#9506
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#9440
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#9400
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9516
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#9463
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#9415
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9405
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9420
  sig do
    params(
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::Node),
      binary_operator: Symbol,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::IndexOperatorWriteNode)
  end
  def copy(flags: T.unsafe(nil), receiver: T.unsafe(nil), call_operator_loc: T.unsafe(nil), opening_loc: T.unsafe(nil), arguments: T.unsafe(nil), closing_loc: T.unsafe(nil), block: T.unsafe(nil), binary_operator: T.unsafe(nil), binary_operator_loc: T.unsafe(nil), value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9400
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9428
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#9501
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#9521
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#9511
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#9453
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node_ext.rb#387
  def operator; end

  # source://prism//lib/prism/node_ext.rb#394
  def operator_loc; end

  # source://prism//lib/prism/node.rb#9437
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#9486
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#9539
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#9483
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#9491
  sig { returns(T::Boolean) }
  def variable_call?; end

  protected

  # source://prism//lib/prism/node.rb#9433
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#9549
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9574
class Prism::IndexOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9576
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#9754
  def ===(other); end

  # source://prism//lib/prism/node.rb#9592
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9657
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#9690
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#9667
  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  # source://prism//lib/prism/node.rb#9700
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#9637
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#9597
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9710
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#9660
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#9612
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9602
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9617
  sig do
    params(
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::IndexOrWriteNode)
  end
  def copy(flags: T.unsafe(nil), receiver: T.unsafe(nil), call_operator_loc: T.unsafe(nil), opening_loc: T.unsafe(nil), arguments: T.unsafe(nil), closing_loc: T.unsafe(nil), block: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9597
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9625
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#9695
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#9720
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#9705
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#9650
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#9715
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#9670
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#9634
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#9680
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#9738
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#9677
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#9685
  sig { returns(T::Boolean) }
  def variable_call?; end

  protected

  # source://prism//lib/prism/node.rb#9630
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#9748
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9780
class Prism::IndexTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9782
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      receiver: Prism::Node,
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::Node),
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, receiver, opening_loc, arguments, closing_loc, block, location); end

  # source://prism//lib/prism/node.rb#9923
  def ===(other); end

  # source://prism//lib/prism/node.rb#9795
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9846
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#9869
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#9856
  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  # source://prism//lib/prism/node.rb#9800
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9884
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#9849
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#9814
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9805
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9819
  sig do
    params(
      flags: Integer,
      receiver: Prism::Node,
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::Node),
      location: Prism::Location
    ).returns(Prism::IndexTargetNode)
  end
  def copy(flags: T.unsafe(nil), receiver: T.unsafe(nil), opening_loc: T.unsafe(nil), arguments: T.unsafe(nil), closing_loc: T.unsafe(nil), block: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9800
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9827
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#9874
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#9889
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#9879
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#9839
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#9836
  sig { returns(Prism::Node) }
  def receiver; end

  # source://prism//lib/prism/node.rb#9859
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#9907
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#9864
  sig { returns(T::Boolean) }
  def variable_call?; end

  protected

  # source://prism//lib/prism/node.rb#9832
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#9917
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#388
class Prism::InlineComment < ::Prism::Comment
  # source://prism//lib/prism/parse_result.rb#396
  sig { returns(String) }
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#391
  sig { override.returns(T::Boolean) }
  def trailing?; end
end

# source://prism//lib/prism/inspect_visitor.rb#12
class Prism::InspectVisitor < ::Prism::Visitor
  # source://prism//lib/prism/inspect_visitor.rb#35
  sig { params(indent: String).void }
  def initialize(indent = T.unsafe(nil)); end

  # source://prism//lib/prism/inspect_visitor.rb#32
  def commands; end

  # source://prism//lib/prism/inspect_visitor.rb#48
  sig { returns(String) }
  def compose; end

  # source://prism//lib/prism/inspect_visitor.rb#28
  def indent; end

  # source://prism//lib/prism/inspect_visitor.rb#77
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#87
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#97
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#107
  def visit_and_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#117
  def visit_arguments_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#133
  def visit_array_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#151
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#188
  def visit_assoc_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#198
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#210
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#216
  def visit_begin_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#247
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#259
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#267
  def visit_block_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#287
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#301
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#323
  def visit_break_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#335
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#355
  def visit_call_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#385
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#406
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#426
  def visit_call_target_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#438
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#448
  def visit_case_match_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#476
  def visit_case_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#504
  def visit_class_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#528
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#538
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#549
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#559
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#565
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#571
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#581
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#591
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#602
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#612
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#622
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#640
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#651
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#661
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#679
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#689
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#695
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#701
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#711
  def visit_def_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#743
  def visit_defined_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#753
  def visit_else_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#766
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#779
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#787
  def visit_ensure_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#800
  def visit_false_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#805
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#831
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#851
  def visit_float_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#857
  def visit_for_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#876
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#881
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#886
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#897
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#907
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#918
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#928
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#934
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#940
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#950
  def visit_hash_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#966
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#994
  def visit_if_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1016
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1023
  def visit_implicit_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1030
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1035
  def visit_in_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1050
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1081
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1113
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1144
  def visit_index_target_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1167
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1177
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1188
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1198
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1204
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1210
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1220
  def visit_integer_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1228
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1246
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1264
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1282
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1298
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1314
  def visit_it_parameters_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1319
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1335
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1349
  def visit_lambda_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1370
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1381
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1393
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1404
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1411
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1418
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1429
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1440
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1450
  def visit_match_required_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1460
  def visit_match_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1476
  def visit_missing_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1481
  def visit_module_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1498
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1529
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1563
  def visit_next_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1575
  def visit_nil_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1580
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1587
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1593
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1599
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1610
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1622
  def visit_or_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1632
  def visit_parameters_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1691
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1704
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1714
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1722
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1736
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1750
  def visit_program_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1758
  def visit_range_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1778
  def visit_rational_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1785
  def visit_redo_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1790
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1801
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1810
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1818
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1828
  def visit_rescue_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1862
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1876
  def visit_retry_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1881
  def visit_return_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1895
  def visit_self_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1900
  def visit_shareable_constant_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1909
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1926
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1931
  def visit_source_file_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1939
  def visit_source_line_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1944
  def visit_splat_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1956
  def visit_statements_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1970
  def visit_string_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1981
  def visit_super_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2001
  def visit_symbol_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2012
  def visit_true_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2017
  def visit_undef_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2032
  def visit_unless_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2054
  def visit_until_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2071
  def visit_when_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2093
  def visit_while_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2110
  def visit_x_string_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2121
  def visit_yield_node(node); end

  private

  # source://prism//lib/prism/inspect_visitor.rb#2148
  def inspect_location(location); end

  # source://prism//lib/prism/inspect_visitor.rb#2137
  def inspect_node(name, node); end

  class << self
    # source://prism//lib/prism/inspect_visitor.rb#41
    sig { params(node: Prism::Node).returns(String) }
    def compose(node); end
  end
end

# source://prism//lib/prism/inspect_visitor.rb#17
class Prism::InspectVisitor::Replace
  # source://prism//lib/prism/inspect_visitor.rb#20
  def initialize(value); end

  # source://prism//lib/prism/inspect_visitor.rb#18
  def value; end
end

# source://prism//lib/prism/node.rb#9938
class Prism::InstanceVariableAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9940
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#10043
  def ===(other); end

  # source://prism//lib/prism/node.rb#9951
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9956
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9966
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9961
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9971
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::InstanceVariableAndWriteNode)
  end
  def copy(name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9956
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9979
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#181
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#10009
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#9984
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#9987
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#10004
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#9994
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#10027
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#10001
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#10037
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10056
class Prism::InstanceVariableOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10058
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, binary_operator_loc, value, binary_operator, location); end

  # source://prism//lib/prism/node.rb#10160
  def ===(other); end

  # source://prism//lib/prism/node.rb#10070
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10123
  sig { returns(Symbol) }
  def binary_operator; end

  # source://prism//lib/prism/node.rb#10113
  sig { returns(Prism::Location) }
  def binary_operator_loc; end

  # source://prism//lib/prism/node.rb#10075
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10085
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10080
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10090
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol,
      location: Prism::Location
    ).returns(Prism::InstanceVariableOperatorWriteNode)
  end
  def copy(name: T.unsafe(nil), name_loc: T.unsafe(nil), binary_operator_loc: T.unsafe(nil), value: T.unsafe(nil), binary_operator: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10075
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10098
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#193
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#10126
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#10103
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#10106
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node_ext.rb#403
  def operator; end

  # source://prism//lib/prism/node_ext.rb#410
  def operator_loc; end

  # source://prism//lib/prism/node.rb#10144
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#10120
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#10154
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10174
class Prism::InstanceVariableOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10176
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#10279
  def ===(other); end

  # source://prism//lib/prism/node.rb#10187
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10192
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10202
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10197
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10207
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::InstanceVariableOrWriteNode)
  end
  def copy(name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10192
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10215
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#187
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#10245
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#10220
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#10223
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#10240
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#10230
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#10263
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#10237
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#10273
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10292
class Prism::InstanceVariableReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10294
  sig { params(source: Prism::Source, name: Symbol, location: Prism::Location).void }
  def initialize(source, name, location); end

  # source://prism//lib/prism/node.rb#10376
  def ===(other); end

  # source://prism//lib/prism/node.rb#10302
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10307
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10317
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10312
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10322
  sig { params(name: Symbol, location: Prism::Location).returns(Prism::InstanceVariableReadNode) }
  def copy(name: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10307
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10330
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#10342
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#10339
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#10360
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#10370
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10386
class Prism::InstanceVariableTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10388
  sig { params(source: Prism::Source, name: Symbol, location: Prism::Location).void }
  def initialize(source, name, location); end

  # source://prism//lib/prism/node.rb#10466
  def ===(other); end

  # source://prism//lib/prism/node.rb#10396
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10401
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10411
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10406
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10416
  sig { params(name: Symbol, location: Prism::Location).returns(Prism::InstanceVariableTargetNode) }
  def copy(name: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10401
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10424
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#10432
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#10429
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#10450
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#10460
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10476
class Prism::InstanceVariableWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10478
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#10597
  def ===(other); end

  # source://prism//lib/prism/node.rb#10489
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10494
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10504
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10499
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10509
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::InstanceVariableWriteNode)
  end
  def copy(name: T.unsafe(nil), name_loc: T.unsafe(nil), value: T.unsafe(nil), operator_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10494
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10517
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#10563
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#10526
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#10532
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#10558
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#10551
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#10581
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#10545
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#10591
    def type; end
  end
end

# source://prism//lib/prism/node.rb#19241
# Flags for integer nodes that correspond to the base of the integer.
module Prism::IntegerBaseFlags; end

# source://prism//lib/prism/node.rb#19243
Prism::IntegerBaseFlags::BINARY = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19246
Prism::IntegerBaseFlags::DECIMAL = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19252
Prism::IntegerBaseFlags::HEXADECIMAL = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19249
Prism::IntegerBaseFlags::OCTAL = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#10610
class Prism::IntegerNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10612
  sig { params(source: Prism::Source, flags: Integer, value: Integer, location: Prism::Location).void }
  def initialize(source, flags, value, location); end

  # source://prism//lib/prism/node.rb#10715
  def ===(other); end

  # source://prism//lib/prism/node.rb#10621
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10661
  sig { returns(T::Boolean) }
  def binary?; end

  # source://prism//lib/prism/node.rb#10626
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10636
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10631
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10641
  sig { params(flags: Integer, value: Integer, location: Prism::Location).returns(Prism::IntegerNode) }
  def copy(flags: T.unsafe(nil), value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10666
  sig { returns(T::Boolean) }
  def decimal?; end

  # source://prism//lib/prism/node.rb#10626
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10649
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#10676
  sig { returns(T::Boolean) }
  def hexadecimal?; end

  # source://prism//lib/prism/node.rb#10681
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#10671
  sig { returns(T::Boolean) }
  def octal?; end

  # source://prism//lib/prism/node.rb#10699
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#10658
  sig { returns(Integer) }
  def value; end

  protected

  # source://prism//lib/prism/node.rb#10654
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#10709
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10726
class Prism::InterpolatedMatchLastLineNode < ::Prism::Node
  include ::Prism::RegularExpressionOptions

  # source://prism//lib/prism/node.rb#10728
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      opening_loc: Prism::Location,
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, opening_loc, parts, closing_loc, location); end

  # source://prism//lib/prism/node.rb#10897
  def ===(other); end

  # source://prism//lib/prism/node.rb#10739
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10823
  sig { returns(T::Boolean) }
  def ascii_8bit?; end

  # source://prism//lib/prism/node.rb#10749
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10858
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#10791
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#10759
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10754
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10764
  sig do
    params(
      flags: Integer,
      opening_loc: Prism::Location,
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::InterpolatedMatchLastLineNode)
  end
  def copy(flags: T.unsafe(nil), opening_loc: T.unsafe(nil), parts: T.unsafe(nil), closing_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10749
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10772
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#10818
  sig { returns(T::Boolean) }
  def euc_jp?; end

  # source://prism//lib/prism/node.rb#10803
  sig { returns(T::Boolean) }
  def extended?; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#10843
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#10848
  sig { returns(T::Boolean) }
  def forced_us_ascii_encoding?; end

  # source://prism//lib/prism/node.rb#10838
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#10798
  sig { returns(T::Boolean) }
  def ignore_case?; end

  # source://prism//lib/prism/node.rb#10863
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#10808
  sig { returns(T::Boolean) }
  def multi_line?; end

  # source://prism//lib/prism/node.rb#10813
  sig { returns(T::Boolean) }
  def once?; end

  # source://prism//lib/prism/node.rb#10853
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#10781
  sig { returns(Prism::Location) }
  def opening_loc; end

  sig { returns(Integer) }
  def options; end

  # source://prism//lib/prism/node.rb#10788
  sig { returns(T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)]) }
  def parts; end

  # source://prism//lib/prism/node.rb#10743
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#10881
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#10833
  sig { returns(T::Boolean) }
  def utf_8?; end

  # source://prism//lib/prism/node.rb#10828
  sig { returns(T::Boolean) }
  def windows_31j?; end

  protected

  # source://prism//lib/prism/node.rb#10777
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#10891
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10911
class Prism::InterpolatedRegularExpressionNode < ::Prism::Node
  include ::Prism::RegularExpressionOptions

  # source://prism//lib/prism/node.rb#10913
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      opening_loc: Prism::Location,
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, opening_loc, parts, closing_loc, location); end

  # source://prism//lib/prism/node.rb#11082
  def ===(other); end

  # source://prism//lib/prism/node.rb#10924
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11008
  sig { returns(T::Boolean) }
  def ascii_8bit?; end

  # source://prism//lib/prism/node.rb#10934
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11043
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#10976
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#10944
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10939
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10949
  sig do
    params(
      flags: Integer,
      opening_loc: Prism::Location,
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::InterpolatedRegularExpressionNode)
  end
  def copy(flags: T.unsafe(nil), opening_loc: T.unsafe(nil), parts: T.unsafe(nil), closing_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10934
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10957
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11003
  sig { returns(T::Boolean) }
  def euc_jp?; end

  # source://prism//lib/prism/node.rb#10988
  sig { returns(T::Boolean) }
  def extended?; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#11028
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#11033
  sig { returns(T::Boolean) }
  def forced_us_ascii_encoding?; end

  # source://prism//lib/prism/node.rb#11023
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#10983
  sig { returns(T::Boolean) }
  def ignore_case?; end

  # source://prism//lib/prism/node.rb#11048
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#10993
  sig { returns(T::Boolean) }
  def multi_line?; end

  # source://prism//lib/prism/node.rb#10998
  sig { returns(T::Boolean) }
  def once?; end

  # source://prism//lib/prism/node.rb#11038
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#10966
  sig { returns(Prism::Location) }
  def opening_loc; end

  sig { returns(Integer) }
  def options; end

  # source://prism//lib/prism/node.rb#10973
  sig { returns(T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)]) }
  def parts; end

  # source://prism//lib/prism/node.rb#10928
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#11066
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#11018
  sig { returns(T::Boolean) }
  def utf_8?; end

  # source://prism//lib/prism/node.rb#11013
  sig { returns(T::Boolean) }
  def windows_31j?; end

  protected

  # source://prism//lib/prism/node.rb#10962
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#11076
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11096
class Prism::InterpolatedStringNode < ::Prism::Node
  include ::Prism::HeredocQuery

  # source://prism//lib/prism/node.rb#11098
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode, Prism::InterpolatedStringNode)],
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, opening_loc, parts, closing_loc, location); end

  # source://prism//lib/prism/node.rb#11234
  def ===(other); end

  # source://prism//lib/prism/node.rb#11109
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11119
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11195
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#11167
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#11129
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11124
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11134
  sig do
    params(
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode, Prism::InterpolatedStringNode)],
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::InterpolatedStringNode)
  end
  def copy(flags: T.unsafe(nil), opening_loc: T.unsafe(nil), parts: T.unsafe(nil), closing_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11119
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11142
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#11180
  sig { returns(T::Boolean) }
  def frozen?; end

  sig { returns(T::Boolean) }
  def heredoc?; end

  # source://prism//lib/prism/node.rb#11200
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#11185
  sig { returns(T::Boolean) }
  def mutable?; end

  # source://prism//lib/prism/node.rb#11190
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#11151
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#11164
  sig do
    returns(T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode, Prism::InterpolatedStringNode)])
  end
  def parts; end

  # source://prism//lib/prism/node.rb#11113
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#11218
  sig { override.returns(Symbol) }
  def type; end

  protected

  # source://prism//lib/prism/node.rb#11147
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#11228
    def type; end
  end
end

# source://prism//lib/prism/node.rb#19256
# Flags for interpolated string nodes that indicated mutability if they are also marked as literals.
module Prism::InterpolatedStringNodeFlags; end

# source://prism//lib/prism/node.rb#19258
Prism::InterpolatedStringNodeFlags::FROZEN = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19261
Prism::InterpolatedStringNodeFlags::MUTABLE = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#11248
class Prism::InterpolatedSymbolNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11250
  sig do
    params(
      source: Prism::Source,
      opening_loc: T.nilable(Prism::Location),
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, opening_loc, parts, closing_loc, location); end

  # source://prism//lib/prism/node.rb#11371
  def ===(other); end

  # source://prism//lib/prism/node.rb#11260
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11270
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11332
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#11314
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#11280
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11275
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11285
  sig do
    params(
      opening_loc: T.nilable(Prism::Location),
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::InterpolatedSymbolNode)
  end
  def copy(opening_loc: T.unsafe(nil), parts: T.unsafe(nil), closing_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11270
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11293
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#11337
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#11327
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#11298
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#11311
  sig { returns(T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)]) }
  def parts; end

  # source://prism//lib/prism/node.rb#11264
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#11355
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#11365
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11384
class Prism::InterpolatedXStringNode < ::Prism::Node
  include ::Prism::HeredocQuery

  # source://prism//lib/prism/node.rb#11386
  sig do
    params(
      source: Prism::Source,
      opening_loc: Prism::Location,
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, opening_loc, parts, closing_loc, location); end

  # source://prism//lib/prism/node.rb#11495
  def ===(other); end

  # source://prism//lib/prism/node.rb#11396
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11406
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11456
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#11444
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#11416
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11411
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11421
  sig do
    params(
      opening_loc: Prism::Location,
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::InterpolatedXStringNode)
  end
  def copy(opening_loc: T.unsafe(nil), parts: T.unsafe(nil), closing_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11406
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11429
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(T::Boolean) }
  def heredoc?; end

  # source://prism//lib/prism/node.rb#11461
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#11451
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#11434
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#11441
  sig { returns(T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)]) }
  def parts; end

  # source://prism//lib/prism/node.rb#11400
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#11479
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#11489
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11508
class Prism::ItParametersNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11510
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  # source://prism//lib/prism/node.rb#11584
  def ===(other); end

  # source://prism//lib/prism/node.rb#11517
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11522
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11532
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11527
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11537
  sig { params(location: Prism::Location).returns(Prism::ItParametersNode) }
  def copy(location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11522
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11545
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#11550
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#11568
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#11578
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11593
class Prism::KeywordHashNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11595
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      elements: T::Array[T.any(Prism::AssocNode, Prism::AssocSplatNode)],
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, elements, location); end

  # source://prism//lib/prism/node.rb#11683
  def ===(other); end

  # source://prism//lib/prism/node.rb#11604
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11609
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11619
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11614
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11624
  sig do
    params(
      flags: Integer,
      elements: T::Array[T.any(Prism::AssocNode, Prism::AssocSplatNode)],
      location: Prism::Location
    ).returns(Prism::KeywordHashNode)
  end
  def copy(flags: T.unsafe(nil), elements: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11609
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11632
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11641
  sig { returns(T::Array[T.any(Prism::AssocNode, Prism::AssocSplatNode)]) }
  def elements; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#11649
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#11644
  sig { returns(T::Boolean) }
  def symbol_keys?; end

  # source://prism//lib/prism/node.rb#11667
  sig { override.returns(Symbol) }
  def type; end

  protected

  # source://prism//lib/prism/node.rb#11637
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#11677
    def type; end
  end
end

# source://prism//lib/prism/node.rb#19265
# Flags for keyword hash nodes.
module Prism::KeywordHashNodeFlags; end

# source://prism//lib/prism/node.rb#19267
Prism::KeywordHashNodeFlags::SYMBOL_KEYS = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#11696
class Prism::KeywordRestParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11698
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, name, name_loc, operator_loc, location); end

  # source://prism//lib/prism/node.rb#11813
  def ===(other); end

  # source://prism//lib/prism/node.rb#11709
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11714
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11724
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11719
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11729
  sig do
    params(
      flags: Integer,
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::KeywordRestParameterNode)
  end
  def copy(flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11714
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11737
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#11779
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#11746
  sig { returns(T.nilable(Symbol)) }
  def name; end

  # source://prism//lib/prism/node.rb#11749
  sig { returns(T.nilable(Prism::Location)) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#11774
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#11762
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#11769
  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  # source://prism//lib/prism/node.rb#11797
  sig { override.returns(Symbol) }
  def type; end

  protected

  # source://prism//lib/prism/node.rb#11742
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#11807
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11826
class Prism::LambdaNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11828
  sig do
    params(
      source: Prism::Source,
      locals: T::Array[Symbol],
      operator_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      parameters: T.nilable(Prism::Node),
      body: T.nilable(Prism::Node),
      location: Prism::Location
    ).void
  end
  def initialize(source, locals, operator_loc, opening_loc, closing_loc, parameters, body, location); end

  # source://prism//lib/prism/node.rb#11956
  def ===(other); end

  # source://prism//lib/prism/node.rb#11841
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11904
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#11846
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11917
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#11894
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#11859
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11851
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11864
  sig do
    params(
      locals: T::Array[Symbol],
      operator_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      parameters: T.nilable(Prism::Node),
      body: T.nilable(Prism::Node),
      location: Prism::Location
    ).returns(Prism::LambdaNode)
  end
  def copy(locals: T.unsafe(nil), operator_loc: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), parameters: T.unsafe(nil), body: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11846
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11872
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#11922
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#11877
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#11912
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#11887
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#11907
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#11880
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#11901
  sig { returns(T.nilable(Prism::Node)) }
  def parameters; end

  # source://prism//lib/prism/node.rb#11940
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#11950
    def type; end
  end
end

# source://prism//lib/prism/lex_compat.rb#12
class Prism::LexCompat
  # source://prism//lib/prism/lex_compat.rb#619
  def initialize(source, **options); end

  # source://prism//lib/prism/lex_compat.rb#617
  def options; end

  # source://prism//lib/prism/lex_compat.rb#624
  def result; end

  # source://prism//lib/prism/lex_compat.rb#617
  def source; end
end

# source://prism//lib/prism/lex_compat.rb#230
class Prism::LexCompat::EndContentToken < ::Prism::LexCompat::Token
  # source://prism//lib/prism/lex_compat.rb#231
  def ==(other); end
end

# source://prism//lib/prism/lex_compat.rb#291
module Prism::LexCompat::Heredoc
  class << self
    # source://prism//lib/prism/lex_compat.rb#603
    def build(opening); end
  end
end

# source://prism//lib/prism/lex_compat.rb#315
class Prism::LexCompat::Heredoc::DashHeredoc
  # source://prism//lib/prism/lex_compat.rb#318
  def initialize(split); end

  # source://prism//lib/prism/lex_compat.rb#323
  def <<(token); end

  # source://prism//lib/prism/lex_compat.rb#316
  def split; end

  # source://prism//lib/prism/lex_compat.rb#327
  def to_a; end

  # source://prism//lib/prism/lex_compat.rb#316
  def tokens; end
end

# source://prism//lib/prism/lex_compat.rb#374
class Prism::LexCompat::Heredoc::DedentingHeredoc
  # source://prism//lib/prism/lex_compat.rb#379
  def initialize; end

  # source://prism//lib/prism/lex_compat.rb#390
  def <<(token); end

  # source://prism//lib/prism/lex_compat.rb#377
  def dedent; end

  # source://prism//lib/prism/lex_compat.rb#377
  def dedent_next; end

  # source://prism//lib/prism/lex_compat.rb#377
  def embexpr_balance; end

  # source://prism//lib/prism/lex_compat.rb#427
  def to_a; end

  # source://prism//lib/prism/lex_compat.rb#377
  def tokens; end
end

# source://prism//lib/prism/lex_compat.rb#375
Prism::LexCompat::Heredoc::DedentingHeredoc::TAB_WIDTH = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/lex_compat.rb#296
class Prism::LexCompat::Heredoc::PlainHeredoc
  # source://prism//lib/prism/lex_compat.rb#299
  def initialize; end

  # source://prism//lib/prism/lex_compat.rb#303
  def <<(token); end

  # source://prism//lib/prism/lex_compat.rb#307
  def to_a; end

  # source://prism//lib/prism/lex_compat.rb#297
  def tokens; end
end

# source://prism//lib/prism/lex_compat.rb#248
class Prism::LexCompat::IdentToken < ::Prism::LexCompat::Token
  # source://prism//lib/prism/lex_compat.rb#249
  def ==(other); end
end

# source://prism//lib/prism/lex_compat.rb#238
class Prism::LexCompat::IgnoreStateToken < ::Prism::LexCompat::Token
  # source://prism//lib/prism/lex_compat.rb#239
  def ==(other); end
end

# source://prism//lib/prism/lex_compat.rb#259
class Prism::LexCompat::IgnoredNewlineToken < ::Prism::LexCompat::Token
  # source://prism//lib/prism/lex_compat.rb#260
  def ==(other); end
end

# source://prism//lib/prism/lex_compat.rb#279
class Prism::LexCompat::ParamToken < ::Prism::LexCompat::Token
  # source://prism//lib/prism/lex_compat.rb#280
  def ==(other); end
end

# source://prism//lib/prism/lex_compat.rb#33
Prism::LexCompat::RIPPER = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/lex_compat.rb#14
class Prism::LexCompat::Result < ::Prism::Result
  # source://prism//lib/prism/lex_compat.rb#19
  def initialize(value, comments, magic_comments, data_loc, errors, warnings, source); end

  # source://prism//lib/prism/lex_compat.rb#25
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/lex_compat.rb#16
  def value; end
end

# source://prism//lib/prism/lex_compat.rb#204
class Prism::LexCompat::Token < ::SimpleDelegator
  # source://prism//lib/prism/lex_compat.rb#213
  def event; end

  # source://prism//lib/prism/lex_compat.rb#208
  def location; end

  # source://prism//lib/prism/lex_compat.rb#223
  def state; end

  # source://prism//lib/prism/lex_compat.rb#218
  def value; end
end

# source://prism//lib/prism/parse_result.rb#593
class Prism::LexResult < ::Prism::Result
  # source://prism//lib/prism/parse_result.rb#598
  sig do
    params(
      value: T::Array[T.untyped],
      comments: T::Array[Prism::Comment],
      magic_comments: T::Array[Prism::MagicComment],
      data_loc: T.nilable(Prism::Location),
      errors: T::Array[Prism::ParseError],
      warnings: T::Array[Prism::ParseWarning],
      source: Prism::Source
    ).void
  end
  def initialize(value, comments, magic_comments, data_loc, errors, warnings, source); end

  # source://prism//lib/prism/parse_result.rb#604
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#595
  sig { returns(T::Array[T.untyped]) }
  def value; end
end

# source://prism//lib/prism/lex_compat.rb#872
class Prism::LexRipper
  # source://prism//lib/prism/lex_compat.rb#875
  def initialize(source); end

  # source://prism//lib/prism/lex_compat.rb#879
  def result; end

  # source://prism//lib/prism/lex_compat.rb#873
  def source; end

  private

  # source://prism//lib/prism/lex_compat.rb#913
  def lex(source); end
end

# source://prism//lib/prism/node.rb#11972
class Prism::LocalVariableAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11974
  sig do
    params(
      source: Prism::Source,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      depth: Integer,
      location: Prism::Location
    ).void
  end
  def initialize(source, name_loc, operator_loc, value, name, depth, location); end

  # source://prism//lib/prism/node.rb#12081
  def ===(other); end

  # source://prism//lib/prism/node.rb#11986
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11991
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12001
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11996
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12006
  sig do
    params(
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      depth: Integer,
      location: Prism::Location
    ).returns(Prism::LocalVariableAndWriteNode)
  end
  def copy(name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil), name: T.unsafe(nil), depth: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11991
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12014
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12039
  sig { returns(Integer) }
  def depth; end

  # source://prism//lib/prism/desugar_compiler.rb#199
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#12047
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#12036
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#12019
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#12042
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#12026
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#12065
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#12033
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#12075
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12095
class Prism::LocalVariableOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12097
  sig do
    params(
      source: Prism::Source,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      binary_operator: Symbol,
      depth: Integer,
      location: Prism::Location
    ).void
  end
  def initialize(source, name_loc, binary_operator_loc, value, name, binary_operator, depth, location); end

  # source://prism//lib/prism/node.rb#12203
  def ===(other); end

  # source://prism//lib/prism/node.rb#12110
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12163
  sig { returns(Symbol) }
  def binary_operator; end

  # source://prism//lib/prism/node.rb#12150
  sig { returns(Prism::Location) }
  def binary_operator_loc; end

  # source://prism//lib/prism/node.rb#12115
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12125
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12120
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12130
  sig do
    params(
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      binary_operator: Symbol,
      depth: Integer,
      location: Prism::Location
    ).returns(Prism::LocalVariableOperatorWriteNode)
  end
  def copy(name_loc: T.unsafe(nil), binary_operator_loc: T.unsafe(nil), value: T.unsafe(nil), name: T.unsafe(nil), binary_operator: T.unsafe(nil), depth: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12115
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12138
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12166
  sig { returns(Integer) }
  def depth; end

  # source://prism//lib/prism/desugar_compiler.rb#211
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#12169
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#12160
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#12143
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node_ext.rb#419
  def operator; end

  # source://prism//lib/prism/node_ext.rb#426
  def operator_loc; end

  # source://prism//lib/prism/node.rb#12187
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#12157
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#12197
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12218
class Prism::LocalVariableOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12220
  sig do
    params(
      source: Prism::Source,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      depth: Integer,
      location: Prism::Location
    ).void
  end
  def initialize(source, name_loc, operator_loc, value, name, depth, location); end

  # source://prism//lib/prism/node.rb#12327
  def ===(other); end

  # source://prism//lib/prism/node.rb#12232
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12237
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12247
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12242
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12252
  sig do
    params(
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      depth: Integer,
      location: Prism::Location
    ).returns(Prism::LocalVariableOrWriteNode)
  end
  def copy(name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil), name: T.unsafe(nil), depth: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12237
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12260
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12285
  sig { returns(Integer) }
  def depth; end

  # source://prism//lib/prism/desugar_compiler.rb#205
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#12293
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#12282
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#12265
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#12288
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#12272
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#12311
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#12279
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#12321
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12341
class Prism::LocalVariableReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12343
  sig { params(source: Prism::Source, name: Symbol, depth: Integer, location: Prism::Location).void }
  def initialize(source, name, depth, location); end

  # source://prism//lib/prism/node.rb#12443
  def ===(other); end

  # source://prism//lib/prism/node.rb#12352
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12357
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12367
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12362
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12372
  sig { params(name: Symbol, depth: Integer, location: Prism::Location).returns(Prism::LocalVariableReadNode) }
  def copy(name: T.unsafe(nil), depth: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12357
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12380
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12406
  sig { returns(Integer) }
  def depth; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#12409
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#12397
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#12427
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#12437
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12454
class Prism::LocalVariableTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12456
  sig { params(source: Prism::Source, name: Symbol, depth: Integer, location: Prism::Location).void }
  def initialize(source, name, depth, location); end

  # source://prism//lib/prism/node.rb#12538
  def ===(other); end

  # source://prism//lib/prism/node.rb#12465
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12470
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12480
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12475
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12485
  sig { params(name: Symbol, depth: Integer, location: Prism::Location).returns(Prism::LocalVariableTargetNode) }
  def copy(name: T.unsafe(nil), depth: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12470
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12493
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12501
  sig { returns(Integer) }
  def depth; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#12504
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#12498
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#12522
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#12532
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12549
class Prism::LocalVariableWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12551
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      depth: Integer,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, depth, name_loc, value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#12684
  def ===(other); end

  # source://prism//lib/prism/node.rb#12563
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12568
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12578
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12573
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12583
  sig do
    params(
      name: Symbol,
      depth: Integer,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::LocalVariableWriteNode)
  end
  def copy(name: T.unsafe(nil), depth: T.unsafe(nil), name_loc: T.unsafe(nil), value: T.unsafe(nil), operator_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12568
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12591
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12609
  sig { returns(Integer) }
  def depth; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#12650
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#12600
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#12615
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#12645
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#12638
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#12668
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#12632
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#12678
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#156
class Prism::Location
  # source://prism//lib/prism/parse_result.rb#171
  sig { params(source: Prism::Source, start_offset: Integer, length: Integer).void }
  def initialize(source, start_offset, length); end

  # source://prism//lib/prism/parse_result.rb#335
  sig { params(other: T.untyped).returns(T::Boolean) }
  def ==(other); end

  # source://prism//lib/prism/parse_result.rb#354
  sig { params(string: String).returns(Prism::Location) }
  def adjoin(string); end

  # source://prism//lib/prism/parse_result.rb#217
  sig { returns(Prism::Location) }
  def chop; end

  # source://prism//lib/prism/parse_result.rb#207
  sig { returns(T::Array[Prism::Comment]) }
  def comments; end

  # source://prism//lib/prism/parse_result.rb#212
  sig { params(source: Prism::Source, start_offset: Integer, length: Integer).returns(Prism::Location) }
  def copy(source: T.unsafe(nil), start_offset: T.unsafe(nil), length: T.unsafe(nil)); end

  # source://prism//lib/prism/parse_result.rb#325
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#314
  sig { returns(Integer) }
  def end_character_column; end

  # source://prism//lib/prism/parse_result.rb#263
  sig { returns(Integer) }
  def end_character_offset; end

  # source://prism//lib/prism/parse_result.rb#320
  sig { params(encoding: Encoding).returns(Integer) }
  def end_code_units_column(encoding = T.unsafe(nil)); end

  # source://prism//lib/prism/parse_result.rb#268
  sig { params(encoding: Encoding).returns(Integer) }
  def end_code_units_offset(encoding = T.unsafe(nil)); end

  # source://prism//lib/prism/parse_result.rb#308
  sig { returns(Integer) }
  def end_column; end

  # source://prism//lib/prism/parse_result.rb#284
  sig { returns(Integer) }
  def end_line; end

  # source://prism//lib/prism/parse_result.rb#257
  sig { returns(Integer) }
  def end_offset; end

  # source://prism//lib/prism/parse_result.rb#222
  sig { returns(String) }
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#344
  sig { params(other: Prism::Location).returns(Prism::Location) }
  def join(other); end

  # source://prism//lib/prism/parse_result.rb#190
  sig { params(comment: Prism::Comment).void }
  def leading_comment(comment); end

  # source://prism//lib/prism/parse_result.rb#185
  sig { returns(T::Array[Prism::Comment]) }
  def leading_comments; end

  # source://prism//lib/prism/parse_result.rb#167
  sig { returns(Integer) }
  def length; end

  # source://prism//lib/prism/parse_result.rb#330
  sig { params(q: T.untyped).void }
  def pretty_print(q); end

  # source://prism//lib/prism/parse_result.rb#232
  sig { returns(String) }
  def slice; end

  # source://prism//lib/prism/parse_result.rb#239
  def slice_lines; end

  # source://prism//lib/prism/parse_result.rb#227
  sig { returns(T::Array[String]) }
  def source_lines; end

  # source://prism//lib/prism/parse_result.rb#296
  sig { returns(Integer) }
  def start_character_column; end

  # source://prism//lib/prism/parse_result.rb#247
  sig { returns(Integer) }
  def start_character_offset; end

  # source://prism//lib/prism/parse_result.rb#302
  sig { params(encoding: Encoding).returns(Integer) }
  def start_code_units_column(encoding = T.unsafe(nil)); end

  # source://prism//lib/prism/parse_result.rb#252
  sig { params(encoding: Encoding).returns(Integer) }
  def start_code_units_offset(encoding = T.unsafe(nil)); end

  # source://prism//lib/prism/parse_result.rb#290
  sig { returns(Integer) }
  def start_column; end

  # source://prism//lib/prism/parse_result.rb#273
  sig { returns(Integer) }
  def start_line; end

  # source://prism//lib/prism/parse_result.rb#278
  sig { returns(String) }
  def start_line_slice; end

  # source://prism//lib/prism/parse_result.rb#164
  sig { returns(Integer) }
  def start_offset; end

  # source://prism//lib/prism/parse_result.rb#201
  sig { params(comment: Prism::Comment).void }
  def trailing_comment(comment); end

  # source://prism//lib/prism/parse_result.rb#196
  sig { returns(T::Array[Prism::Comment]) }
  def trailing_comments; end

  protected

  # source://prism//lib/prism/parse_result.rb#159
  sig { returns(Prism::Source) }
  def source; end
end

# source://prism//lib/prism/node.rb#19271
# Flags for while and until loop nodes.
module Prism::LoopFlags; end

# source://prism//lib/prism/node.rb#19273
Prism::LoopFlags::BEGIN_MODIFIER = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/parse_result.rb#416
class Prism::MagicComment
  # source://prism//lib/prism/parse_result.rb#424
  sig { params(key_loc: Prism::Location, value_loc: Prism::Location).void }
  def initialize(key_loc, value_loc); end

  # source://prism//lib/prism/parse_result.rb#440
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#445
  sig { returns(String) }
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#430
  sig { returns(String) }
  def key; end

  # source://prism//lib/prism/parse_result.rb#418
  sig { returns(Prism::Location) }
  def key_loc; end

  # source://prism//lib/prism/parse_result.rb#435
  sig { returns(String) }
  def value; end

  # source://prism//lib/prism/parse_result.rb#421
  sig { returns(Prism::Location) }
  def value_loc; end
end

# source://prism//lib/prism/node.rb#12698
class Prism::MatchLastLineNode < ::Prism::Node
  include ::Prism::RegularExpressionOptions

  # source://prism//lib/prism/node.rb#12700
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, opening_loc, content_loc, closing_loc, unescaped, location); end

  # source://prism//lib/prism/node.rb#12877
  def ===(other); end

  # source://prism//lib/prism/node.rb#12712
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12798
  sig { returns(T::Boolean) }
  def ascii_8bit?; end

  # source://prism//lib/prism/node.rb#12717
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12838
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#12763
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#12727
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12722
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12833
  sig { returns(String) }
  def content; end

  # source://prism//lib/prism/node.rb#12756
  sig { returns(Prism::Location) }
  def content_loc; end

  # source://prism//lib/prism/node.rb#12732
  sig do
    params(
      flags: Integer,
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String,
      location: Prism::Location
    ).returns(Prism::MatchLastLineNode)
  end
  def copy(flags: T.unsafe(nil), opening_loc: T.unsafe(nil), content_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), unescaped: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12717
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12740
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12793
  sig { returns(T::Boolean) }
  def euc_jp?; end

  # source://prism//lib/prism/node.rb#12778
  sig { returns(T::Boolean) }
  def extended?; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#12818
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#12823
  sig { returns(T::Boolean) }
  def forced_us_ascii_encoding?; end

  # source://prism//lib/prism/node.rb#12813
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#12773
  sig { returns(T::Boolean) }
  def ignore_case?; end

  # source://prism//lib/prism/node.rb#12843
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#12783
  sig { returns(T::Boolean) }
  def multi_line?; end

  # source://prism//lib/prism/node.rb#12788
  sig { returns(T::Boolean) }
  def once?; end

  # source://prism//lib/prism/node.rb#12828
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#12749
  sig { returns(Prism::Location) }
  def opening_loc; end

  sig { returns(Integer) }
  def options; end

  # source://prism//lib/prism/node.rb#12861
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#12770
  sig { returns(String) }
  def unescaped; end

  # source://prism//lib/prism/node.rb#12808
  sig { returns(T::Boolean) }
  def utf_8?; end

  # source://prism//lib/prism/node.rb#12803
  sig { returns(T::Boolean) }
  def windows_31j?; end

  protected

  # source://prism//lib/prism/node.rb#12745
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#12871
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12891
class Prism::MatchPredicateNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12893
  sig do
    params(
      source: Prism::Source,
      value: Prism::Node,
      pattern: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, value, pattern, operator_loc, location); end

  # source://prism//lib/prism/node.rb#12988
  def ===(other); end

  # source://prism//lib/prism/node.rb#12903
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12908
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12918
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12913
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12923
  sig do
    params(
      value: Prism::Node,
      pattern: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::MatchPredicateNode)
  end
  def copy(value: T.unsafe(nil), pattern: T.unsafe(nil), operator_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12908
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12931
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#12954
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#12949
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#12942
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#12939
  sig { returns(Prism::Node) }
  def pattern; end

  # source://prism//lib/prism/node.rb#12972
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#12936
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#12982
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13000
class Prism::MatchRequiredNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13002
  sig do
    params(
      source: Prism::Source,
      value: Prism::Node,
      pattern: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, value, pattern, operator_loc, location); end

  # source://prism//lib/prism/node.rb#13097
  def ===(other); end

  # source://prism//lib/prism/node.rb#13012
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13017
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13027
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13022
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13032
  sig do
    params(
      value: Prism::Node,
      pattern: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::MatchRequiredNode)
  end
  def copy(value: T.unsafe(nil), pattern: T.unsafe(nil), operator_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13017
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13040
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#13063
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#13058
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#13051
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#13048
  sig { returns(Prism::Node) }
  def pattern; end

  # source://prism//lib/prism/node.rb#13081
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#13045
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#13091
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13109
class Prism::MatchWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13111
  sig do
    params(
      source: Prism::Source,
      call: Prism::CallNode,
      targets: T::Array[Prism::LocalVariableTargetNode],
      location: Prism::Location
    ).void
  end
  def initialize(source, call, targets, location); end

  # source://prism//lib/prism/node.rb#13193
  def ===(other); end

  # source://prism//lib/prism/node.rb#13120
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13153
  sig { returns(Prism::CallNode) }
  def call; end

  # source://prism//lib/prism/node.rb#13125
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13135
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13130
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13140
  sig do
    params(
      call: Prism::CallNode,
      targets: T::Array[Prism::LocalVariableTargetNode],
      location: Prism::Location
    ).returns(Prism::MatchWriteNode)
  end
  def copy(call: T.unsafe(nil), targets: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13125
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13148
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#13159
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#13156
  sig { returns(T::Array[Prism::LocalVariableTargetNode]) }
  def targets; end

  # source://prism//lib/prism/node.rb#13177
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13187
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13202
class Prism::MissingNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13204
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  # source://prism//lib/prism/node.rb#13278
  def ===(other); end

  # source://prism//lib/prism/node.rb#13211
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13216
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13226
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13221
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13231
  sig { params(location: Prism::Location).returns(Prism::MissingNode) }
  def copy(location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13216
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13239
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#13244
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#13262
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13272
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13287
class Prism::ModuleNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13289
  sig do
    params(
      source: Prism::Source,
      locals: T::Array[Symbol],
      module_keyword_loc: Prism::Location,
      constant_path: Prism::Node,
      body: T.nilable(Prism::Node),
      end_keyword_loc: Prism::Location,
      name: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(source, locals, module_keyword_loc, constant_path, body, end_keyword_loc, name, location); end

  # source://prism//lib/prism/node.rb#13408
  def ===(other); end

  # source://prism//lib/prism/node.rb#13302
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13351
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#13307
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13320
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13312
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13348
  sig { returns(Prism::Node) }
  def constant_path; end

  # source://prism//lib/prism/node.rb#13325
  sig do
    params(
      locals: T::Array[Symbol],
      module_keyword_loc: Prism::Location,
      constant_path: Prism::Node,
      body: T.nilable(Prism::Node),
      end_keyword_loc: Prism::Location,
      name: Symbol,
      location: Prism::Location
    ).returns(Prism::ModuleNode)
  end
  def copy(locals: T.unsafe(nil), module_keyword_loc: T.unsafe(nil), constant_path: T.unsafe(nil), body: T.unsafe(nil), end_keyword_loc: T.unsafe(nil), name: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13307
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13333
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13369
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#13354
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#13374
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#13338
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#13364
  sig { returns(String) }
  def module_keyword; end

  # source://prism//lib/prism/node.rb#13341
  sig { returns(Prism::Location) }
  def module_keyword_loc; end

  # source://prism//lib/prism/node.rb#13361
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#13392
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13402
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13424
class Prism::MultiTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13426
  sig do
    params(
      source: Prism::Source,
      lefts: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::RequiredParameterNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode)],
      rest: T.nilable(Prism::Node),
      rights: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::RequiredParameterNode, Prism::BackReferenceReadNode)],
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, lefts, rest, rights, lparen_loc, rparen_loc, location); end

  # source://prism//lib/prism/node.rb#13554
  def ===(other); end

  # source://prism//lib/prism/node.rb#13438
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13443
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13457
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13448
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13462
  sig do
    params(
      lefts: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::RequiredParameterNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode)],
      rest: T.nilable(Prism::Node),
      rights: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::RequiredParameterNode, Prism::BackReferenceReadNode)],
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::MultiTargetNode)
  end
  def copy(lefts: T.unsafe(nil), rest: T.unsafe(nil), rights: T.unsafe(nil), lparen_loc: T.unsafe(nil), rparen_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13443
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13470
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#13520
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#13475
  sig do
    returns(T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::RequiredParameterNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode)])
  end
  def lefts; end

  # source://prism//lib/prism/node.rb#13510
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#13484
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#13478
  sig { returns(T.nilable(Prism::Node)) }
  def rest; end

  # source://prism//lib/prism/node.rb#13481
  sig do
    returns(T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::RequiredParameterNode, Prism::BackReferenceReadNode)])
  end
  def rights; end

  # source://prism//lib/prism/node.rb#13515
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#13497
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#13538
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13548
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13570
class Prism::MultiWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13572
  sig do
    params(
      source: Prism::Source,
      lefts: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode)],
      rest: T.nilable(Prism::Node),
      rights: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode)],
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, lefts, rest, rights, lparen_loc, rparen_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#13718
  def ===(other); end

  # source://prism//lib/prism/node.rb#13586
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13591
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13606
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13596
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13611
  sig do
    params(
      lefts: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode)],
      rest: T.nilable(Prism::Node),
      rights: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode)],
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::MultiWriteNode)
  end
  def copy(lefts: T.unsafe(nil), rest: T.unsafe(nil), rights: T.unsafe(nil), lparen_loc: T.unsafe(nil), rparen_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13591
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13619
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#13684
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#13624
  sig do
    returns(T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode)])
  end
  def lefts; end

  # source://prism//lib/prism/node.rb#13669
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#13633
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#13679
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#13659
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#13627
  sig { returns(T.nilable(Prism::Node)) }
  def rest; end

  # source://prism//lib/prism/node.rb#13630
  sig do
    returns(T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode)])
  end
  def rights; end

  # source://prism//lib/prism/node.rb#13674
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#13646
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#13702
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#13666
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#13712
    def type; end
  end
end

# source://prism//lib/prism/mutation_compiler.rb#13
class Prism::MutationCompiler < ::Prism::Compiler
  # source://prism//lib/prism/mutation_compiler.rb#15
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#20
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#25
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#30
  def visit_and_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#35
  def visit_arguments_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#40
  def visit_array_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#45
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#50
  def visit_assoc_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#55
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#60
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#65
  def visit_begin_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#70
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#75
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#80
  def visit_block_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#85
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#90
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#95
  def visit_break_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#100
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#105
  def visit_call_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#110
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#115
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#120
  def visit_call_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#125
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#130
  def visit_case_match_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#135
  def visit_case_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#140
  def visit_class_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#145
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#150
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#155
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#160
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#165
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#170
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#175
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#180
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#185
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#190
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#195
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#200
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#205
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#210
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#215
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#220
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#225
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#230
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#235
  def visit_def_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#240
  def visit_defined_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#245
  def visit_else_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#250
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#255
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#260
  def visit_ensure_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#265
  def visit_false_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#270
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#275
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#280
  def visit_float_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#285
  def visit_for_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#290
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#295
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#300
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#305
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#310
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#315
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#320
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#325
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#330
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#335
  def visit_hash_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#340
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#345
  def visit_if_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#350
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#355
  def visit_implicit_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#360
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#365
  def visit_in_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#370
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#375
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#380
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#385
  def visit_index_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#390
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#395
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#400
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#405
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#410
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#415
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#420
  def visit_integer_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#425
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#430
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#435
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#440
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#445
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#450
  def visit_it_parameters_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#455
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#460
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#465
  def visit_lambda_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#470
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#475
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#480
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#485
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#490
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#495
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#500
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#505
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#510
  def visit_match_required_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#515
  def visit_match_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#520
  def visit_missing_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#525
  def visit_module_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#530
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#535
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#540
  def visit_next_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#545
  def visit_nil_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#550
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#555
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#560
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#565
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#570
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#575
  def visit_or_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#580
  def visit_parameters_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#585
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#590
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#595
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#600
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#605
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#610
  def visit_program_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#615
  def visit_range_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#620
  def visit_rational_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#625
  def visit_redo_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#630
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#635
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#640
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#645
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#650
  def visit_rescue_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#655
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#660
  def visit_retry_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#665
  def visit_return_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#670
  def visit_self_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#675
  def visit_shareable_constant_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#680
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#685
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#690
  def visit_source_file_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#695
  def visit_source_line_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#700
  def visit_splat_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#705
  def visit_statements_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#710
  def visit_string_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#715
  def visit_super_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#720
  def visit_symbol_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#725
  def visit_true_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#730
  def visit_undef_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#735
  def visit_unless_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#740
  def visit_until_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#745
  def visit_when_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#750
  def visit_while_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#755
  def visit_x_string_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#760
  def visit_yield_node(node); end
end

# source://prism//lib/prism/node.rb#13736
class Prism::NextNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13738
  sig do
    params(
      source: Prism::Source,
      arguments: T.nilable(Prism::ArgumentsNode),
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, arguments, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#13831
  def ===(other); end

  # source://prism//lib/prism/node.rb#13747
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13782
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#13752
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13764
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13757
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13769
  sig do
    params(
      arguments: T.nilable(Prism::ArgumentsNode),
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::NextNode)
  end
  def copy(arguments: T.unsafe(nil), keyword_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13752
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13777
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#13797
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#13792
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#13785
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#13815
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13825
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13842
class Prism::NilNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13844
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  # source://prism//lib/prism/node.rb#13918
  def ===(other); end

  # source://prism//lib/prism/node.rb#13851
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13856
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13866
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13861
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13871
  sig { params(location: Prism::Location).returns(Prism::NilNode) }
  def copy(location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13856
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13879
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#13884
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#13902
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13912
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13928
class Prism::NoKeywordsParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13930
  sig do
    params(
      source: Prism::Source,
      operator_loc: Prism::Location,
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, operator_loc, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#14030
  def ===(other); end

  # source://prism//lib/prism/node.rb#13939
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13944
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13954
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13949
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13959
  sig do
    params(
      operator_loc: Prism::Location,
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::NoKeywordsParameterNode)
  end
  def copy(operator_loc: T.unsafe(nil), keyword_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13944
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13967
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#13996
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#13991
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#13979
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#13986
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#13972
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#14014
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14024
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12
class Prism::Node
  abstract!

  # source://prism//lib/prism/node.rb#143
  sig { abstract.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#149
  sig { abstract.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#163
  sig { abstract.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#157
  sig { abstract.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#149
  sig { abstract.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node_ext.rb#7
  def deprecated(*replacements); end

  # source://prism//lib/prism/node.rb#34
  sig { returns(Integer) }
  def end_offset; end

  sig { abstract.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#174
  sig { abstract.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#19
  sig { returns(Prism::Location) }
  def location; end

  # source://prism//lib/prism/node.rb#39
  def newline?; end

  # source://prism//lib/prism/node.rb#74
  sig { params(q: T.untyped).void }
  def pretty_print(q); end

  # source://prism//lib/prism/node.rb#52
  sig { returns(T::Array[String]) }
  def script_lines; end

  # source://prism//lib/prism/node.rb#43
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#61
  sig { returns(String) }
  def slice; end

  # source://prism//lib/prism/node.rb#68
  sig { returns(String) }
  def slice_lines; end

  # source://prism//lib/prism/node.rb#52
  sig { returns(T::Array[String]) }
  def source_lines; end

  # source://prism//lib/prism/node.rb#27
  sig { returns(Integer) }
  def start_offset; end

  # source://prism//lib/prism/node.rb#82
  sig { returns(String) }
  def to_dot; end

  # source://prism//lib/prism/node.rb#93
  sig { params(line: Integer, column: Integer).returns(T::Array[Prism::Node]) }
  def tunnel(line, column); end

  # source://prism//lib/prism/node.rb#169
  sig { abstract.returns(Symbol) }
  def type; end

  private

  # source://prism//lib/prism/node.rb#14
  sig { returns(Prism::Source) }
  def source; end

  class << self
    # source://prism//lib/prism/node.rb#127
    def fields; end

    # source://prism//lib/prism/node.rb#179
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14041
class Prism::NumberedParametersNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14043
  sig { params(source: Prism::Source, maximum: Integer, location: Prism::Location).void }
  def initialize(source, maximum, location); end

  # source://prism//lib/prism/node.rb#14121
  def ===(other); end

  # source://prism//lib/prism/node.rb#14051
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14056
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14066
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14061
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14071
  sig { params(maximum: Integer, location: Prism::Location).returns(Prism::NumberedParametersNode) }
  def copy(maximum: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14056
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14079
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#14087
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#14084
  sig { returns(Integer) }
  def maximum; end

  # source://prism//lib/prism/node.rb#14105
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14115
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14131
class Prism::NumberedReferenceReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14133
  sig { params(source: Prism::Source, number: Integer, location: Prism::Location).void }
  def initialize(source, number, location); end

  # source://prism//lib/prism/node.rb#14217
  def ===(other); end

  # source://prism//lib/prism/node.rb#14141
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14146
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14156
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14151
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14161
  sig { params(number: Integer, location: Prism::Location).returns(Prism::NumberedReferenceReadNode) }
  def copy(number: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14146
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14169
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#14183
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#14180
  sig { returns(Integer) }
  def number; end

  # source://prism//lib/prism/node.rb#14201
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14211
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14228
class Prism::OptionalKeywordParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14230
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, name, name_loc, value, location); end

  # source://prism//lib/prism/node.rb#14330
  def ===(other); end

  # source://prism//lib/prism/node.rb#14241
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14246
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14256
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14251
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14261
  sig do
    params(
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::OptionalKeywordParameterNode)
  end
  def copy(flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14246
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14269
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#14296
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#14278
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#14281
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#14291
  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  # source://prism//lib/prism/node.rb#14314
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#14288
  sig { returns(Prism::Node) }
  def value; end

  protected

  # source://prism//lib/prism/node.rb#14274
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#14324
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14344
class Prism::OptionalParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14346
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#14459
  def ===(other); end

  # source://prism//lib/prism/node.rb#14358
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14363
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14373
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14368
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14378
  sig do
    params(
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::OptionalParameterNode)
  end
  def copy(flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14363
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14386
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#14425
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#14395
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#14398
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#14420
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#14405
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#14415
  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  # source://prism//lib/prism/node.rb#14443
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#14412
  sig { returns(Prism::Node) }
  def value; end

  protected

  # source://prism//lib/prism/node.rb#14391
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#14453
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14473
class Prism::OrNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14475
  sig do
    params(
      source: Prism::Source,
      left: Prism::Node,
      right: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, left, right, operator_loc, location); end

  # source://prism//lib/prism/node.rb#14585
  def ===(other); end

  # source://prism//lib/prism/node.rb#14485
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14490
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14500
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14495
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14505
  sig do
    params(
      left: Prism::Node,
      right: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::OrNode)
  end
  def copy(left: T.unsafe(nil), right: T.unsafe(nil), operator_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14490
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14513
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#14551
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#14524
  sig { returns(Prism::Node) }
  def left; end

  # source://prism//lib/prism/node.rb#14546
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#14539
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#14533
  sig { returns(Prism::Node) }
  def right; end

  # source://prism//lib/prism/node.rb#14569
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14579
    def type; end
  end
end

# source://prism//lib/prism/pack.rb#6
module Prism::Pack
  class << self
    def parse(_arg0, _arg1, _arg2); end
  end
end

# source://prism//lib/prism/pack.rb#56
Prism::Pack::AGNOSTIC_ENDIAN = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::BACK = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::BER = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::BIG_ENDIAN = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::COMMENT = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#60
class Prism::Pack::Directive
  # source://prism//lib/prism/pack.rb#89
  def initialize(version, variant, source, type, signed, endian, size, length_type, length); end

  # source://prism//lib/prism/pack.rb#131
  def describe; end

  # source://prism//lib/prism/pack.rb#77
  def endian; end

  # source://prism//lib/prism/pack.rb#86
  def length; end

  # source://prism//lib/prism/pack.rb#83
  def length_type; end

  # source://prism//lib/prism/pack.rb#74
  def signed; end

  # source://prism//lib/prism/pack.rb#80
  def size; end

  # source://prism//lib/prism/pack.rb#68
  def source; end

  # source://prism//lib/prism/pack.rb#71
  def type; end

  # source://prism//lib/prism/pack.rb#65
  def variant; end

  # source://prism//lib/prism/pack.rb#62
  def version; end
end

# source://prism//lib/prism/pack.rb#102
Prism::Pack::Directive::ENDIAN_DESCRIPTIONS = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/pack.rb#111
Prism::Pack::Directive::SIGNED_DESCRIPTIONS = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/pack.rb#118
Prism::Pack::Directive::SIZE_DESCRIPTIONS = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::ENDIAN_NA = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::FLOAT = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#198
class Prism::Pack::Format
  # source://prism//lib/prism/pack.rb#206
  def initialize(directives, encoding); end

  # source://prism//lib/prism/pack.rb#212
  def describe; end

  # source://prism//lib/prism/pack.rb#200
  def directives; end

  # source://prism//lib/prism/pack.rb#203
  def encoding; end
end

# source://prism//lib/prism/pack.rb#56
Prism::Pack::INTEGER = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::LENGTH_FIXED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::LENGTH_MAX = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::LENGTH_NA = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::LENGTH_RELATIVE = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::LITTLE_ENDIAN = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::MOVE = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::NATIVE_ENDIAN = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::NULL = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::SIGNED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::SIGNED_NA = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::SIZE_16 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::SIZE_32 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::SIZE_64 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::SIZE_8 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::SIZE_INT = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::SIZE_LONG = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::SIZE_LONG_LONG = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::SIZE_NA = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::SIZE_P = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::SIZE_SHORT = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::SPACE = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::STRING_BASE64 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::STRING_FIXED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::STRING_HEX_HIGH = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::STRING_HEX_LOW = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::STRING_LSB = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::STRING_MIME = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::STRING_MSB = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::STRING_NULL_PADDED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::STRING_NULL_TERMINATED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::STRING_POINTER = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::STRING_SPACE_PADDED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::STRING_UU = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::UNSIGNED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#56
Prism::Pack::UTF8 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/node.rb#19277
# Flags for parameter nodes.
module Prism::ParameterFlags; end

# source://prism//lib/prism/node.rb#19279
Prism::ParameterFlags::REPEATED_PARAMETER = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#14598
class Prism::ParametersNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14600
  sig do
    params(
      source: Prism::Source,
      requireds: T::Array[T.any(Prism::RequiredParameterNode, Prism::MultiTargetNode)],
      optionals: T::Array[Prism::OptionalParameterNode],
      rest: T.nilable(T.any(Prism::RestParameterNode, Prism::ImplicitRestNode)),
      posts: T::Array[T.any(Prism::RequiredParameterNode, Prism::MultiTargetNode, Prism::KeywordRestParameterNode, Prism::NoKeywordsParameterNode, Prism::ForwardingParameterNode)],
      keywords: T::Array[T.any(Prism::RequiredKeywordParameterNode, Prism::OptionalKeywordParameterNode)],
      keyword_rest: T.nilable(T.any(Prism::KeywordRestParameterNode, Prism::ForwardingParameterNode, Prism::NoKeywordsParameterNode)),
      block: T.nilable(Prism::BlockParameterNode),
      location: Prism::Location
    ).void
  end
  def initialize(source, requireds, optionals, rest, posts, keywords, keyword_rest, block, location); end

  # source://prism//lib/prism/node.rb#14710
  def ===(other); end

  # source://prism//lib/prism/node.rb#14614
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14673
  sig { returns(T.nilable(Prism::BlockParameterNode)) }
  def block; end

  # source://prism//lib/prism/node.rb#14619
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14637
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14624
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14642
  sig do
    params(
      requireds: T::Array[T.any(Prism::RequiredParameterNode, Prism::MultiTargetNode)],
      optionals: T::Array[Prism::OptionalParameterNode],
      rest: T.nilable(T.any(Prism::RestParameterNode, Prism::ImplicitRestNode)),
      posts: T::Array[T.any(Prism::RequiredParameterNode, Prism::MultiTargetNode, Prism::KeywordRestParameterNode, Prism::NoKeywordsParameterNode, Prism::ForwardingParameterNode)],
      keywords: T::Array[T.any(Prism::RequiredKeywordParameterNode, Prism::OptionalKeywordParameterNode)],
      keyword_rest: T.nilable(T.any(Prism::KeywordRestParameterNode, Prism::ForwardingParameterNode, Prism::NoKeywordsParameterNode)),
      block: T.nilable(Prism::BlockParameterNode),
      location: Prism::Location
    ).returns(Prism::ParametersNode)
  end
  def copy(requireds: T.unsafe(nil), optionals: T.unsafe(nil), rest: T.unsafe(nil), posts: T.unsafe(nil), keywords: T.unsafe(nil), keyword_rest: T.unsafe(nil), block: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14619
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14650
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#14676
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#14670
  sig do
    returns(T.nilable(T.any(Prism::KeywordRestParameterNode, Prism::ForwardingParameterNode, Prism::NoKeywordsParameterNode)))
  end
  def keyword_rest; end

  # source://prism//lib/prism/node.rb#14667
  sig { returns(T::Array[T.any(Prism::RequiredKeywordParameterNode, Prism::OptionalKeywordParameterNode)]) }
  def keywords; end

  # source://prism//lib/prism/node.rb#14658
  sig { returns(T::Array[Prism::OptionalParameterNode]) }
  def optionals; end

  # source://prism//lib/prism/node.rb#14664
  sig do
    returns(T::Array[T.any(Prism::RequiredParameterNode, Prism::MultiTargetNode, Prism::KeywordRestParameterNode, Prism::NoKeywordsParameterNode, Prism::ForwardingParameterNode)])
  end
  def posts; end

  # source://prism//lib/prism/node.rb#14655
  sig { returns(T::Array[T.any(Prism::RequiredParameterNode, Prism::MultiTargetNode)]) }
  def requireds; end

  # source://prism//lib/prism/node.rb#14661
  sig { returns(T.nilable(T.any(Prism::RestParameterNode, Prism::ImplicitRestNode))) }
  def rest; end

  # source://prism//lib/prism/node_ext.rb#238
  sig { returns(T::Array[T.any([Symbol, Symbol], [Symbol])]) }
  def signature; end

  # source://prism//lib/prism/node.rb#14694
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14704
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14730
class Prism::ParenthesesNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14732
  sig do
    params(
      source: Prism::Source,
      body: T.nilable(Prism::Node),
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, body, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#14842
  def ===(other); end

  # source://prism//lib/prism/node.rb#14742
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14781
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#14751
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14803
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#14791
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#14763
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14756
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14768
  sig do
    params(
      body: T.nilable(Prism::Node),
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::ParenthesesNode)
  end
  def copy(body: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14751
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14776
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#14808
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#14798
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#14784
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#14746
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#14826
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14836
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#451
class Prism::ParseError
  # source://prism//lib/prism/parse_result.rb#466
  sig { params(type: Symbol, message: String, location: Prism::Location, level: Symbol).void }
  def initialize(type, message, location, level); end

  # source://prism//lib/prism/parse_result.rb#474
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#479
  sig { returns(String) }
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#463
  sig { returns(Symbol) }
  def level; end

  # source://prism//lib/prism/parse_result.rb#460
  sig { returns(Prism::Location) }
  def location; end

  # source://prism//lib/prism/parse_result.rb#457
  sig { returns(String) }
  def message; end

  # source://prism//lib/prism/parse_result.rb#454
  sig { returns(Symbol) }
  def type; end
end

# source://prism//lib/prism/parse_result.rb#610
class Prism::ParseLexResult < ::Prism::Result
  # source://prism//lib/prism/parse_result.rb#616
  sig do
    params(
      value: [Prism::ProgramNode, T::Array[T.untyped]],
      comments: T::Array[Prism::Comment],
      magic_comments: T::Array[Prism::MagicComment],
      data_loc: T.nilable(Prism::Location),
      errors: T::Array[Prism::ParseError],
      warnings: T::Array[Prism::ParseWarning],
      source: Prism::Source
    ).void
  end
  def initialize(value, comments, magic_comments, data_loc, errors, warnings, source); end

  # source://prism//lib/prism/parse_result.rb#622
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#613
  sig { returns([Prism::ProgramNode, T::Array[T.untyped]]) }
  def value; end
end

# source://prism//lib/prism/parse_result.rb#576
class Prism::ParseResult < ::Prism::Result
  # source://prism//lib/prism/parse_result.rb#581
  sig do
    params(
      value: Prism::ProgramNode,
      comments: T::Array[Prism::Comment],
      magic_comments: T::Array[Prism::MagicComment],
      data_loc: T.nilable(Prism::Location),
      errors: T::Array[Prism::ParseError],
      warnings: T::Array[Prism::ParseWarning],
      source: Prism::Source
    ).void
  end
  def initialize(value, comments, magic_comments, data_loc, errors, warnings, source); end

  # source://prism//lib/prism/parse_result/comments.rb#190
  def attach_comments!; end

  # source://prism//lib/prism/parse_result.rb#587
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result/newlines.rb#60
  def mark_newlines!; end

  # source://prism//lib/prism/parse_result.rb#578
  sig { returns(Prism::ProgramNode) }
  def value; end
end

# source://prism//lib/prism/parse_result/comments.rb#19
class Prism::ParseResult::Comments
  # source://prism//lib/prism/parse_result/comments.rb#86
  def initialize(parse_result); end

  # source://prism//lib/prism/parse_result/comments.rb#92
  def attach!; end

  # source://prism//lib/prism/parse_result/comments.rb#82
  def parse_result; end

  private

  # source://prism//lib/prism/parse_result/comments.rb#119
  def nearest_targets(node, comment); end
end

# source://prism//lib/prism/parse_result/comments.rb#53
class Prism::ParseResult::Comments::LocationTarget
  # source://prism//lib/prism/parse_result/comments.rb#56
  def initialize(location); end

  # source://prism//lib/prism/parse_result/comments.rb#68
  def encloses?(comment); end

  # source://prism//lib/prism/parse_result/comments.rb#64
  def end_offset; end

  # source://prism//lib/prism/parse_result/comments.rb#72
  def leading_comment(comment); end

  # source://prism//lib/prism/parse_result/comments.rb#54
  def location; end

  # source://prism//lib/prism/parse_result/comments.rb#60
  def start_offset; end

  # source://prism//lib/prism/parse_result/comments.rb#76
  def trailing_comment(comment); end
end

# source://prism//lib/prism/parse_result/comments.rb#22
class Prism::ParseResult::Comments::NodeTarget
  # source://prism//lib/prism/parse_result/comments.rb#25
  def initialize(node); end

  # source://prism//lib/prism/parse_result/comments.rb#37
  def encloses?(comment); end

  # source://prism//lib/prism/parse_result/comments.rb#33
  def end_offset; end

  # source://prism//lib/prism/parse_result/comments.rb#42
  def leading_comment(comment); end

  # source://prism//lib/prism/parse_result/comments.rb#23
  def node; end

  # source://prism//lib/prism/parse_result/comments.rb#29
  def start_offset; end

  # source://prism//lib/prism/parse_result/comments.rb#46
  def trailing_comment(comment); end
end

# source://prism//lib/prism/parse_result/newlines.rb#20
class Prism::ParseResult::Newlines < ::Prism::Visitor
  # source://prism//lib/prism/parse_result/newlines.rb#22
  def initialize(newline_marked); end

  # source://prism//lib/prism/parse_result/newlines.rb#27
  def visit_block_node(node); end

  # source://prism//lib/prism/parse_result/newlines.rb#41
  def visit_if_node(node); end

  # source://prism//lib/prism/parse_result/newlines.rb#27
  def visit_lambda_node(node); end

  # source://prism//lib/prism/parse_result/newlines.rb#49
  def visit_statements_node(node); end

  # source://prism//lib/prism/parse_result/newlines.rb#41
  def visit_unless_node(node); end
end

# source://prism//lib/prism/parse_result.rb#485
class Prism::ParseWarning
  # source://prism//lib/prism/parse_result.rb#500
  sig { params(type: Symbol, message: String, location: Prism::Location, level: Symbol).void }
  def initialize(type, message, location, level); end

  # source://prism//lib/prism/parse_result.rb#508
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#513
  sig { returns(String) }
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#497
  sig { returns(Symbol) }
  def level; end

  # source://prism//lib/prism/parse_result.rb#494
  sig { returns(Prism::Location) }
  def location; end

  # source://prism//lib/prism/parse_result.rb#491
  sig { returns(String) }
  def message; end

  # source://prism//lib/prism/parse_result.rb#488
  sig { returns(Symbol) }
  def type; end
end

# source://prism//lib/prism/pattern.rb#37
class Prism::Pattern
  # source://prism//lib/prism/pattern.rb#63
  def initialize(query); end

  # source://prism//lib/prism/pattern.rb#70
  def compile; end

  # source://prism//lib/prism/pattern.rb#59
  def query; end

  # source://prism//lib/prism/pattern.rb#86
  def scan(root); end

  private

  # source://prism//lib/prism/pattern.rb#102
  def combine_and(left, right); end

  # source://prism//lib/prism/pattern.rb#108
  def combine_or(left, right); end

  # source://prism//lib/prism/pattern.rb#143
  def compile_alternation_pattern_node(node); end

  # source://prism//lib/prism/pattern.rb#118
  def compile_array_pattern_node(node); end

  # source://prism//lib/prism/pattern.rb#168
  def compile_constant_name(node, name); end

  # source://prism//lib/prism/pattern.rb#148
  def compile_constant_path_node(node); end

  # source://prism//lib/prism/pattern.rb#163
  def compile_constant_read_node(node); end

  # source://prism//lib/prism/pattern.rb#113
  def compile_error(node); end

  # source://prism//lib/prism/pattern.rb#184
  def compile_hash_pattern_node(node); end

  # source://prism//lib/prism/pattern.rb#214
  def compile_nil_node(node); end

  # source://prism//lib/prism/pattern.rb#243
  def compile_node(node); end

  # source://prism//lib/prism/pattern.rb#219
  def compile_regular_expression_node(node); end

  # source://prism//lib/prism/pattern.rb#227
  def compile_string_node(node); end

  # source://prism//lib/prism/pattern.rb#235
  def compile_symbol_node(node); end
end

# source://prism//lib/prism/pattern.rb#40
class Prism::Pattern::CompilationError < ::StandardError
  # source://prism//lib/prism/pattern.rb#43
  def initialize(repr); end
end

# source://prism//lib/prism/node.rb#14854
class Prism::PinnedExpressionNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14856
  sig do
    params(
      source: Prism::Source,
      expression: Prism::Node,
      operator_loc: Prism::Location,
      lparen_loc: Prism::Location,
      rparen_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, expression, operator_loc, lparen_loc, rparen_loc, location); end

  # source://prism//lib/prism/node.rb#14973
  def ===(other); end

  # source://prism//lib/prism/node.rb#14867
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14872
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14882
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14877
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14887
  sig do
    params(
      expression: Prism::Node,
      operator_loc: Prism::Location,
      lparen_loc: Prism::Location,
      rparen_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::PinnedExpressionNode)
  end
  def copy(expression: T.unsafe(nil), operator_loc: T.unsafe(nil), lparen_loc: T.unsafe(nil), rparen_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14872
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14895
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14900
  sig { returns(Prism::Node) }
  def expression; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#14939
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#14929
  sig { returns(String) }
  def lparen; end

  # source://prism//lib/prism/node.rb#14910
  sig { returns(Prism::Location) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#14924
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#14903
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#14934
  sig { returns(String) }
  def rparen; end

  # source://prism//lib/prism/node.rb#14917
  sig { returns(Prism::Location) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#14957
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14967
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14986
class Prism::PinnedVariableNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14988
  sig do
    params(
      source: Prism::Source,
      variable: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, variable, operator_loc, location); end

  # source://prism//lib/prism/node.rb#15079
  def ===(other); end

  # source://prism//lib/prism/node.rb#14997
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15002
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15012
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15007
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15017
  sig do
    params(
      variable: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::PinnedVariableNode)
  end
  def copy(variable: T.unsafe(nil), operator_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15002
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15025
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#15045
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#15040
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#15033
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#15063
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#15030
  sig { returns(Prism::Node) }
  def variable; end

  class << self
    # source://prism//lib/prism/node.rb#15073
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15090
class Prism::PostExecutionNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15092
  sig do
    params(
      source: Prism::Source,
      statements: T.nilable(Prism::StatementsNode),
      keyword_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, statements, keyword_loc, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#15211
  def ===(other); end

  # source://prism//lib/prism/node.rb#15103
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15108
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15172
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#15155
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#15120
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15113
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15125
  sig do
    params(
      statements: T.nilable(Prism::StatementsNode),
      keyword_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::PostExecutionNode)
  end
  def copy(statements: T.unsafe(nil), keyword_loc: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15108
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15133
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#15177
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#15162
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#15141
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#15167
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#15148
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#15138
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#15195
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15205
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15224
class Prism::PreExecutionNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15226
  sig do
    params(
      source: Prism::Source,
      statements: T.nilable(Prism::StatementsNode),
      keyword_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, statements, keyword_loc, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#15345
  def ===(other); end

  # source://prism//lib/prism/node.rb#15237
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15242
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15306
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#15289
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#15254
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15247
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15259
  sig do
    params(
      statements: T.nilable(Prism::StatementsNode),
      keyword_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::PreExecutionNode)
  end
  def copy(statements: T.unsafe(nil), keyword_loc: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15242
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15267
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#15311
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#15296
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#15275
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#15301
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#15282
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#15272
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#15329
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15339
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15355
class Prism::ProgramNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15357
  sig do
    params(
      source: Prism::Source,
      locals: T::Array[Symbol],
      statements: Prism::StatementsNode,
      location: Prism::Location
    ).void
  end
  def initialize(source, locals, statements, location); end

  # source://prism//lib/prism/node.rb#15439
  def ===(other); end

  # source://prism//lib/prism/node.rb#15366
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15371
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15381
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15376
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15386
  sig do
    params(
      locals: T::Array[Symbol],
      statements: Prism::StatementsNode,
      location: Prism::Location
    ).returns(Prism::ProgramNode)
  end
  def copy(locals: T.unsafe(nil), statements: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15371
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15394
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#15405
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#15399
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#15402
  sig { returns(Prism::StatementsNode) }
  def statements; end

  # source://prism//lib/prism/node.rb#15423
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15433
    def type; end
  end
end

# source://prism//lib/prism/node.rb#19283
# Flags for range and flip-flop nodes.
module Prism::RangeFlags; end

# source://prism//lib/prism/node.rb#19285
Prism::RangeFlags::EXCLUDE_END = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#15454
class Prism::RangeNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15456
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      left: T.nilable(Prism::Node),
      right: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, left, right, operator_loc, location); end

  # source://prism//lib/prism/node.rb#15577
  def ===(other); end

  # source://prism//lib/prism/node.rb#15467
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15472
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15485
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15477
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15490
  sig do
    params(
      flags: Integer,
      left: T.nilable(Prism::Node),
      right: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::RangeNode)
  end
  def copy(flags: T.unsafe(nil), left: T.unsafe(nil), right: T.unsafe(nil), operator_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15472
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15498
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15533
  sig { returns(T::Boolean) }
  def exclude_end?; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#15543
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#15513
  sig { returns(T.nilable(Prism::Node)) }
  def left; end

  # source://prism//lib/prism/node.rb#15538
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#15526
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#15523
  sig { returns(T.nilable(Prism::Node)) }
  def right; end

  # source://prism//lib/prism/node.rb#15561
  sig { override.returns(Symbol) }
  def type; end

  protected

  # source://prism//lib/prism/node.rb#15503
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#15571
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15590
class Prism::RationalNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15592
  sig { params(source: Prism::Source, numeric: Prism::Node, location: Prism::Location).void }
  def initialize(source, numeric, location); end

  # source://prism//lib/prism/node.rb#15670
  def ===(other); end

  # source://prism//lib/prism/node.rb#15600
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15605
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15615
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15610
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15620
  sig { params(numeric: Prism::Node, location: Prism::Location).returns(Prism::RationalNode) }
  def copy(numeric: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15605
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15628
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#15636
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#15633
  sig { returns(Prism::Node) }
  def numeric; end

  # source://prism//lib/prism/node.rb#15654
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node_ext.rb#105
  sig { returns(Rational) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#15664
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15680
class Prism::RedoNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15682
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  # source://prism//lib/prism/node.rb#15756
  def ===(other); end

  # source://prism//lib/prism/node.rb#15689
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15694
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15704
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15699
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15709
  sig { params(location: Prism::Location).returns(Prism::RedoNode) }
  def copy(location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15694
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15717
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#15722
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#15740
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15750
    def type; end
  end
end

# source://prism//lib/prism/reflection.rb#13
module Prism::Reflection
  class << self
    # source://prism//lib/prism/reflection.rb#104
    sig { params(node: T.class_of(Prism::Node)).returns(T::Array[Prism::Reflection::Field]) }
    def fields_for(node); end
  end
end

# source://prism//lib/prism/reflection.rb#45
class Prism::Reflection::ConstantField < ::Prism::Reflection::Field; end

# source://prism//lib/prism/reflection.rb#55
class Prism::Reflection::ConstantListField < ::Prism::Reflection::Field; end

# source://prism//lib/prism/reflection.rb#16
class Prism::Reflection::Field
  # source://prism//lib/prism/reflection.rb#21
  sig { params(name: Symbol).void }
  def initialize(name); end

  # source://prism//lib/prism/reflection.rb#18
  sig { returns(Symbol) }
  def name; end
end

# source://prism//lib/prism/reflection.rb#92
class Prism::Reflection::FlagsField < ::Prism::Reflection::Field
  # source://prism//lib/prism/reflection.rb#97
  sig { params(name: Symbol, flags: T::Array[Symbol]).void }
  def initialize(name, flags); end

  # source://prism//lib/prism/reflection.rb#94
  sig { returns(T::Array[Symbol]) }
  def flags; end
end

# source://prism//lib/prism/reflection.rb#85
class Prism::Reflection::FloatField < ::Prism::Reflection::Field; end

# source://prism//lib/prism/reflection.rb#79
class Prism::Reflection::IntegerField < ::Prism::Reflection::Field; end

# source://prism//lib/prism/reflection.rb#67
class Prism::Reflection::LocationField < ::Prism::Reflection::Field; end

# source://prism//lib/prism/reflection.rb#28
class Prism::Reflection::NodeField < ::Prism::Reflection::Field; end

# source://prism//lib/prism/reflection.rb#39
class Prism::Reflection::NodeListField < ::Prism::Reflection::Field; end

# source://prism//lib/prism/reflection.rb#50
class Prism::Reflection::OptionalConstantField < ::Prism::Reflection::Field; end

# source://prism//lib/prism/reflection.rb#73
class Prism::Reflection::OptionalLocationField < ::Prism::Reflection::Field; end

# source://prism//lib/prism/reflection.rb#34
class Prism::Reflection::OptionalNodeField < ::Prism::Reflection::Field; end

# source://prism//lib/prism/reflection.rb#61
class Prism::Reflection::StringField < ::Prism::Reflection::Field; end

# source://prism//lib/prism/node.rb#19289
# Flags for regular expression and match last line nodes.
module Prism::RegularExpressionFlags; end

# source://prism//lib/prism/node.rb#19306
Prism::RegularExpressionFlags::ASCII_8BIT = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19303
Prism::RegularExpressionFlags::EUC_JP = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19294
Prism::RegularExpressionFlags::EXTENDED = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19318
Prism::RegularExpressionFlags::FORCED_BINARY_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19321
Prism::RegularExpressionFlags::FORCED_US_ASCII_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19315
Prism::RegularExpressionFlags::FORCED_UTF8_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19291
Prism::RegularExpressionFlags::IGNORE_CASE = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19297
Prism::RegularExpressionFlags::MULTI_LINE = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19300
Prism::RegularExpressionFlags::ONCE = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19312
Prism::RegularExpressionFlags::UTF_8 = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19309
Prism::RegularExpressionFlags::WINDOWS_31J = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#15765
class Prism::RegularExpressionNode < ::Prism::Node
  include ::Prism::RegularExpressionOptions

  # source://prism//lib/prism/node.rb#15767
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, opening_loc, content_loc, closing_loc, unescaped, location); end

  # source://prism//lib/prism/node.rb#15944
  def ===(other); end

  # source://prism//lib/prism/node.rb#15779
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15865
  sig { returns(T::Boolean) }
  def ascii_8bit?; end

  # source://prism//lib/prism/node.rb#15784
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15905
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#15830
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#15794
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15789
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15900
  sig { returns(String) }
  def content; end

  # source://prism//lib/prism/node.rb#15823
  sig { returns(Prism::Location) }
  def content_loc; end

  # source://prism//lib/prism/node.rb#15799
  sig do
    params(
      flags: Integer,
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String,
      location: Prism::Location
    ).returns(Prism::RegularExpressionNode)
  end
  def copy(flags: T.unsafe(nil), opening_loc: T.unsafe(nil), content_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), unescaped: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15784
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15807
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15860
  sig { returns(T::Boolean) }
  def euc_jp?; end

  # source://prism//lib/prism/node.rb#15845
  sig { returns(T::Boolean) }
  def extended?; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#15885
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#15890
  sig { returns(T::Boolean) }
  def forced_us_ascii_encoding?; end

  # source://prism//lib/prism/node.rb#15880
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#15840
  sig { returns(T::Boolean) }
  def ignore_case?; end

  # source://prism//lib/prism/node.rb#15910
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#15850
  sig { returns(T::Boolean) }
  def multi_line?; end

  # source://prism//lib/prism/node.rb#15855
  sig { returns(T::Boolean) }
  def once?; end

  # source://prism//lib/prism/node.rb#15895
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#15816
  sig { returns(Prism::Location) }
  def opening_loc; end

  sig { returns(Integer) }
  def options; end

  # source://prism//lib/prism/node.rb#15928
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#15837
  sig { returns(String) }
  def unescaped; end

  # source://prism//lib/prism/node.rb#15875
  sig { returns(T::Boolean) }
  def utf_8?; end

  # source://prism//lib/prism/node.rb#15870
  sig { returns(T::Boolean) }
  def windows_31j?; end

  protected

  # source://prism//lib/prism/node.rb#15812
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#15938
    def type; end
  end
end

# source://prism//lib/prism/node_ext.rb#17
module Prism::RegularExpressionOptions
  # source://prism//lib/prism/node_ext.rb#20
  def options; end
end

# source://prism//lib/prism/node.rb#15959
class Prism::RequiredKeywordParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15961
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, name, name_loc, location); end

  # source://prism//lib/prism/node.rb#16057
  def ===(other); end

  # source://prism//lib/prism/node.rb#15971
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15976
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15986
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15981
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15991
  sig do
    params(
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::RequiredKeywordParameterNode)
  end
  def copy(flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15976
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15999
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#16023
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#16008
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#16011
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#16018
  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  # source://prism//lib/prism/node.rb#16041
  sig { override.returns(Symbol) }
  def type; end

  protected

  # source://prism//lib/prism/node.rb#16004
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#16051
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16070
class Prism::RequiredParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16072
  sig { params(source: Prism::Source, flags: Integer, name: Symbol, location: Prism::Location).void }
  def initialize(source, flags, name, location); end

  # source://prism//lib/prism/node.rb#16160
  def ===(other); end

  # source://prism//lib/prism/node.rb#16081
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16086
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16096
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16091
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16101
  sig { params(flags: Integer, name: Symbol, location: Prism::Location).returns(Prism::RequiredParameterNode) }
  def copy(flags: T.unsafe(nil), name: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16086
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16109
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#16126
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#16118
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#16121
  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  # source://prism//lib/prism/node.rb#16144
  sig { override.returns(Symbol) }
  def type; end

  protected

  # source://prism//lib/prism/node.rb#16114
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#16154
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16171
class Prism::RescueModifierNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16173
  sig do
    params(
      source: Prism::Source,
      expression: Prism::Node,
      keyword_loc: Prism::Location,
      rescue_expression: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, expression, keyword_loc, rescue_expression, location); end

  # source://prism//lib/prism/node.rb#16272
  def ===(other); end

  # source://prism//lib/prism/node.rb#16183
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16192
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16202
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16197
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16207
  sig do
    params(
      expression: Prism::Node,
      keyword_loc: Prism::Location,
      rescue_expression: Prism::Node,
      location: Prism::Location
    ).returns(Prism::RescueModifierNode)
  end
  def copy(expression: T.unsafe(nil), keyword_loc: T.unsafe(nil), rescue_expression: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16192
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16215
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16220
  sig { returns(Prism::Node) }
  def expression; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#16238
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#16233
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#16223
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#16230
  sig { returns(Prism::Node) }
  def rescue_expression; end

  # source://prism//lib/prism/node.rb#16187
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#16256
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#16266
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16289
class Prism::RescueNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16291
  sig do
    params(
      source: Prism::Source,
      keyword_loc: Prism::Location,
      exceptions: T::Array[Prism::Node],
      operator_loc: T.nilable(Prism::Location),
      reference: T.nilable(Prism::Node),
      statements: T.nilable(Prism::StatementsNode),
      consequent: T.nilable(Prism::RescueNode),
      location: Prism::Location
    ).void
  end
  def initialize(source, keyword_loc, exceptions, operator_loc, reference, statements, consequent, location); end

  # source://prism//lib/prism/node.rb#16418
  def ===(other); end

  # source://prism//lib/prism/node.rb#16304
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16309
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16324
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16314
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16371
  sig { returns(T.nilable(Prism::RescueNode)) }
  def consequent; end

  # source://prism//lib/prism/node.rb#16329
  sig do
    params(
      keyword_loc: Prism::Location,
      exceptions: T::Array[Prism::Node],
      operator_loc: T.nilable(Prism::Location),
      reference: T.nilable(Prism::Node),
      statements: T.nilable(Prism::StatementsNode),
      consequent: T.nilable(Prism::RescueNode),
      location: Prism::Location
    ).returns(Prism::RescueNode)
  end
  def copy(keyword_loc: T.unsafe(nil), exceptions: T.unsafe(nil), operator_loc: T.unsafe(nil), reference: T.unsafe(nil), statements: T.unsafe(nil), consequent: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16309
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16337
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16349
  sig { returns(T::Array[Prism::Node]) }
  def exceptions; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#16384
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#16374
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#16342
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#16379
  sig { returns(T.nilable(String)) }
  def operator; end

  # source://prism//lib/prism/node.rb#16352
  sig { returns(T.nilable(Prism::Location)) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#16365
  sig { returns(T.nilable(Prism::Node)) }
  def reference; end

  # source://prism//lib/prism/node.rb#16368
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#16402
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#16412
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16435
class Prism::RestParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16437
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, name, name_loc, operator_loc, location); end

  # source://prism//lib/prism/node.rb#16552
  def ===(other); end

  # source://prism//lib/prism/node.rb#16448
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16453
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16463
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16458
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16468
  sig do
    params(
      flags: Integer,
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::RestParameterNode)
  end
  def copy(flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16453
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16476
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#16518
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#16485
  sig { returns(T.nilable(Symbol)) }
  def name; end

  # source://prism//lib/prism/node.rb#16488
  sig { returns(T.nilable(Prism::Location)) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#16513
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#16501
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#16508
  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  # source://prism//lib/prism/node.rb#16536
  sig { override.returns(Symbol) }
  def type; end

  protected

  # source://prism//lib/prism/node.rb#16481
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#16546
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#521
class Prism::Result
  # source://prism//lib/prism/parse_result.rb#543
  sig do
    params(
      comments: T::Array[Prism::Comment],
      magic_comments: T::Array[Prism::MagicComment],
      data_loc: T.nilable(Prism::Location),
      errors: T::Array[Prism::ParseError],
      warnings: T::Array[Prism::ParseWarning],
      source: Prism::Source
    ).void
  end
  def initialize(comments, magic_comments, data_loc, errors, warnings, source); end

  # source://prism//lib/prism/parse_result.rb#523
  sig { returns(T::Array[Prism::Comment]) }
  def comments; end

  # source://prism//lib/prism/parse_result.rb#531
  sig { returns(T.nilable(Prism::Location)) }
  def data_loc; end

  # source://prism//lib/prism/parse_result.rb#553
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#558
  sig { returns(Encoding) }
  def encoding; end

  # source://prism//lib/prism/parse_result.rb#534
  sig { returns(T::Array[Prism::ParseError]) }
  def errors; end

  # source://prism//lib/prism/parse_result.rb#570
  sig { returns(T::Boolean) }
  def failure?; end

  # source://prism//lib/prism/parse_result.rb#526
  sig { returns(T::Array[Prism::MagicComment]) }
  def magic_comments; end

  # source://prism//lib/prism/parse_result.rb#540
  sig { returns(Prism::Source) }
  def source; end

  # source://prism//lib/prism/parse_result.rb#564
  sig { returns(T::Boolean) }
  def success?; end

  # source://prism//lib/prism/parse_result.rb#537
  sig { returns(T::Array[Prism::ParseWarning]) }
  def warnings; end
end

# source://prism//lib/prism/node.rb#16565
class Prism::RetryNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16567
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  # source://prism//lib/prism/node.rb#16641
  def ===(other); end

  # source://prism//lib/prism/node.rb#16574
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16579
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16589
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16584
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16594
  sig { params(location: Prism::Location).returns(Prism::RetryNode) }
  def copy(location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16579
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16602
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#16607
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#16625
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#16635
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16650
class Prism::ReturnNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16652
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      keyword_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, keyword_loc, arguments, location); end

  # source://prism//lib/prism/node.rb#16755
  def ===(other); end

  # source://prism//lib/prism/node.rb#16662
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16708
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#16667
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16679
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16672
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16684
  sig do
    params(
      flags: Integer,
      keyword_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      location: Prism::Location
    ).returns(Prism::ReturnNode)
  end
  def copy(flags: T.unsafe(nil), keyword_loc: T.unsafe(nil), arguments: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16667
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16692
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#16721
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#16716
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#16701
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#16711
  sig { returns(T::Boolean) }
  def redundant?; end

  # source://prism//lib/prism/node.rb#16739
  sig { override.returns(Symbol) }
  def type; end

  protected

  # source://prism//lib/prism/node.rb#16697
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#16749
    def type; end
  end
end

# source://prism//lib/prism/node.rb#19325
# Flags for return nodes.
module Prism::ReturnNodeFlags; end

# source://prism//lib/prism/node.rb#19327
Prism::ReturnNodeFlags::REDUNDANT = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#16767
class Prism::SelfNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16769
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  # source://prism//lib/prism/node.rb#16843
  def ===(other); end

  # source://prism//lib/prism/node.rb#16776
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16781
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16791
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16786
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16796
  sig { params(location: Prism::Location).returns(Prism::SelfNode) }
  def copy(location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16781
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16804
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#16809
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#16827
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#16837
    def type; end
  end
end

# source://prism//lib/prism/serialize.rb#14
module Prism::Serialize
  class << self
    # source://prism//lib/prism/serialize.rb#28
    def load(input, serialized); end

    # source://prism//lib/prism/serialize.rb#40
    def load_tokens(source, serialized); end
  end
end

# source://prism//lib/prism/serialize.rb#44
class Prism::Serialize::Loader
  # source://prism//lib/prism/serialize.rb#80
  def initialize(source, serialized); end

  # source://prism//lib/prism/serialize.rb#77
  def constant_pool; end

  # source://prism//lib/prism/serialize.rb#77
  def constant_pool_offset; end

  # source://prism//lib/prism/serialize.rb#76
  def encoding; end

  # source://prism//lib/prism/serialize.rb#76
  def input; end

  # source://prism//lib/prism/serialize.rb#76
  def io; end

  # source://prism//lib/prism/serialize.rb#118
  def load_comments; end

  # source://prism//lib/prism/serialize.rb#104
  def load_encoding; end

  # source://prism//lib/prism/serialize.rb#95
  def load_header; end

  # source://prism//lib/prism/serialize.rb#114
  def load_line_offsets; end

  # source://prism//lib/prism/serialize.rb#433
  def load_metadata; end

  # source://prism//lib/prism/serialize.rb#467
  def load_nodes; end

  # source://prism//lib/prism/serialize.rb#481
  def load_result; end

  # source://prism//lib/prism/serialize.rb#110
  def load_start_line; end

  # source://prism//lib/prism/serialize.rb#442
  def load_tokens; end

  # source://prism//lib/prism/serialize.rb#455
  def load_tokens_result; end

  # source://prism//lib/prism/serialize.rb#76
  def serialized; end

  # source://prism//lib/prism/serialize.rb#77
  def source; end

  # source://prism//lib/prism/serialize.rb#78
  def start_line; end

  private

  # source://prism//lib/prism/serialize.rb#567
  def load_constant(index); end

  # source://prism//lib/prism/serialize.rb#520
  def load_double; end

  # source://prism//lib/prism/serialize.rb#535
  def load_embedded_string; end

  # source://prism//lib/prism/serialize.rb#597
  def load_error_level; end

  # source://prism//lib/prism/serialize.rb#509
  def load_integer; end

  # source://prism//lib/prism/serialize.rb#551
  def load_location; end

  # source://prism//lib/prism/serialize.rb#555
  def load_location_object; end

  # source://prism//lib/prism/serialize.rb#626
  def load_node; end

  # source://prism//lib/prism/serialize.rb#592
  def load_optional_constant; end

  # source://prism//lib/prism/serialize.rb#559
  def load_optional_location; end

  # source://prism//lib/prism/serialize.rb#563
  def load_optional_location_object; end

  # source://prism//lib/prism/serialize.rb#528
  def load_optional_node; end

  # source://prism//lib/prism/serialize.rb#588
  def load_required_constant; end

  # source://prism//lib/prism/serialize.rb#539
  def load_string; end

  # source://prism//lib/prism/serialize.rb#524
  def load_uint32; end

  # source://prism//lib/prism/serialize.rb#504
  def load_varsint; end

  # source://prism//lib/prism/serialize.rb#490
  def load_varuint; end

  # source://prism//lib/prism/serialize.rb#612
  def load_warning_level; end
end

# source://prism//lib/prism/serialize.rb#127
Prism::Serialize::Loader::DIAGNOSTIC_TYPES = T.let(T.unsafe(nil), Array)

# source://prism//lib/prism/serialize.rb#72
Prism::Serialize::Loader::FastStringIO = StringIO

# source://prism//lib/prism/serialize.rb#17
Prism::Serialize::MAJOR_VERSION = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/serialize.rb#21
Prism::Serialize::MINOR_VERSION = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/serialize.rb#25
Prism::Serialize::PATCH_VERSION = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/serialize.rb#1850
Prism::Serialize::TOKEN_TYPES = T.let(T.unsafe(nil), Array)

# source://prism//lib/prism/node.rb#16853
class Prism::ShareableConstantNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16855
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      write: T.any(Prism::ConstantWriteNode, Prism::ConstantAndWriteNode, Prism::ConstantOrWriteNode, Prism::ConstantOperatorWriteNode, Prism::ConstantPathWriteNode, Prism::ConstantPathAndWriteNode, Prism::ConstantPathOrWriteNode, Prism::ConstantPathOperatorWriteNode),
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, write, location); end

  # source://prism//lib/prism/node.rb#16953
  def ===(other); end

  # source://prism//lib/prism/node.rb#16864
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16869
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16879
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16874
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16884
  sig do
    params(
      flags: Integer,
      write: T.any(Prism::ConstantWriteNode, Prism::ConstantAndWriteNode, Prism::ConstantOrWriteNode, Prism::ConstantOperatorWriteNode, Prism::ConstantPathWriteNode, Prism::ConstantPathAndWriteNode, Prism::ConstantPathOrWriteNode, Prism::ConstantPathOperatorWriteNode),
      location: Prism::Location
    ).returns(Prism::ShareableConstantNode)
  end
  def copy(flags: T.unsafe(nil), write: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16869
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16892
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16914
  sig { returns(T::Boolean) }
  def experimental_copy?; end

  # source://prism//lib/prism/node.rb#16909
  sig { returns(T::Boolean) }
  def experimental_everything?; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#16919
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#16904
  sig { returns(T::Boolean) }
  def literal?; end

  # source://prism//lib/prism/node.rb#16937
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#16901
  sig do
    returns(T.any(Prism::ConstantWriteNode, Prism::ConstantAndWriteNode, Prism::ConstantOrWriteNode, Prism::ConstantOperatorWriteNode, Prism::ConstantPathWriteNode, Prism::ConstantPathAndWriteNode, Prism::ConstantPathOrWriteNode, Prism::ConstantPathOperatorWriteNode))
  end
  def write; end

  protected

  # source://prism//lib/prism/node.rb#16897
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#16947
    def type; end
  end
end

# source://prism//lib/prism/node.rb#19331
# Flags for shareable constant nodes.
module Prism::ShareableConstantNodeFlags; end

# source://prism//lib/prism/node.rb#19339
Prism::ShareableConstantNodeFlags::EXPERIMENTAL_COPY = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19336
Prism::ShareableConstantNodeFlags::EXPERIMENTAL_EVERYTHING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19333
Prism::ShareableConstantNodeFlags::LITERAL = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#16964
class Prism::SingletonClassNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16966
  sig do
    params(
      source: Prism::Source,
      locals: T::Array[Symbol],
      class_keyword_loc: Prism::Location,
      operator_loc: Prism::Location,
      expression: Prism::Node,
      body: T.nilable(Prism::Node),
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, locals, class_keyword_loc, operator_loc, expression, body, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#17094
  def ===(other); end

  # source://prism//lib/prism/node.rb#16979
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17035
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#16984
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#17045
  sig { returns(String) }
  def class_keyword; end

  # source://prism//lib/prism/node.rb#17018
  sig { returns(Prism::Location) }
  def class_keyword_loc; end

  # source://prism//lib/prism/node.rb#16997
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16989
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#17002
  sig do
    params(
      locals: T::Array[Symbol],
      class_keyword_loc: Prism::Location,
      operator_loc: Prism::Location,
      expression: Prism::Node,
      body: T.nilable(Prism::Node),
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::SingletonClassNode)
  end
  def copy(locals: T.unsafe(nil), class_keyword_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), expression: T.unsafe(nil), body: T.unsafe(nil), end_keyword_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16984
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17010
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#17055
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#17038
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#17032
  sig { returns(Prism::Node) }
  def expression; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#17060
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#17015
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#17050
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#17025
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#17078
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#17088
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#7
class Prism::Source
  # source://prism//lib/prism/parse_result.rb#26
  sig { params(source: String, start_line: Integer, offsets: T::Array[Integer]).void }
  def initialize(source, start_line = T.unsafe(nil), offsets = T.unsafe(nil)); end

  # source://prism//lib/prism/parse_result.rb#78
  sig { params(byte_offset: Integer).returns(Integer) }
  def character_column(byte_offset); end

  # source://prism//lib/prism/parse_result.rb#73
  sig { params(byte_offset: Integer).returns(Integer) }
  def character_offset(byte_offset); end

  # source://prism//lib/prism/parse_result.rb#95
  sig { params(byte_offset: Integer, encoding: Encoding).returns(Integer) }
  def code_units_column(byte_offset, encoding); end

  # source://prism//lib/prism/parse_result.rb#88
  sig { params(byte_offset: Integer, encoding: Encoding).returns(Integer) }
  def code_units_offset(byte_offset, encoding); end

  # source://prism//lib/prism/parse_result.rb#68
  sig { params(byte_offset: Integer).returns(Integer) }
  def column(byte_offset); end

  # source://prism//lib/prism/parse_result.rb#34
  sig { returns(Encoding) }
  def encoding; end

  # source://prism//lib/prism/parse_result.rb#51
  sig { params(byte_offset: Integer).returns(Integer) }
  def line(byte_offset); end

  # source://prism//lib/prism/parse_result.rb#63
  def line_end(byte_offset); end

  # source://prism//lib/prism/parse_result.rb#57
  sig { params(byte_offset: Integer).returns(Integer) }
  def line_start(byte_offset); end

  # source://prism//lib/prism/parse_result.rb#39
  sig { returns(T::Array[String]) }
  def lines; end

  # source://prism//lib/prism/parse_result.rb#23
  sig { returns(T::Array[Integer]) }
  def offsets; end

  # source://prism//lib/prism/parse_result.rb#45
  sig { params(byte_offset: Integer, length: Integer).returns(String) }
  def slice(byte_offset, length); end

  # source://prism//lib/prism/parse_result.rb#17
  sig { returns(String) }
  def source; end

  # source://prism//lib/prism/parse_result.rb#20
  sig { returns(Integer) }
  def start_line; end

  private

  # source://prism//lib/prism/parse_result.rb#103
  def find_line(byte_offset); end

  class << self
    # source://prism//lib/prism/parse_result.rb#12
    def for(source, start_line = T.unsafe(nil), offsets = T.unsafe(nil)); end
  end
end

# source://prism//lib/prism/node.rb#17110
class Prism::SourceEncodingNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#17112
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  # source://prism//lib/prism/node.rb#17186
  def ===(other); end

  # source://prism//lib/prism/node.rb#17119
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17124
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#17134
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#17129
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#17139
  sig { params(location: Prism::Location).returns(Prism::SourceEncodingNode) }
  def copy(location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#17124
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17147
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#17152
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#17170
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#17180
    def type; end
  end
end

# source://prism//lib/prism/node.rb#17195
class Prism::SourceFileNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#17197
  sig { params(source: Prism::Source, flags: Integer, filepath: String, location: Prism::Location).void }
  def initialize(source, flags, filepath, location); end

  # source://prism//lib/prism/node.rb#17300
  def ===(other); end

  # source://prism//lib/prism/node.rb#17206
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17211
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#17221
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#17216
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#17226
  sig { params(flags: Integer, filepath: String, location: Prism::Location).returns(Prism::SourceFileNode) }
  def copy(flags: T.unsafe(nil), filepath: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#17211
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17234
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#17243
  sig { returns(String) }
  def filepath; end

  # source://prism//lib/prism/node.rb#17251
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#17246
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#17256
  sig { returns(T::Boolean) }
  def frozen?; end

  # source://prism//lib/prism/node.rb#17266
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#17261
  sig { returns(T::Boolean) }
  def mutable?; end

  # source://prism//lib/prism/node.rb#17284
  sig { override.returns(Symbol) }
  def type; end

  protected

  # source://prism//lib/prism/node.rb#17239
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#17294
    def type; end
  end
end

# source://prism//lib/prism/node.rb#17311
class Prism::SourceLineNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#17313
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  # source://prism//lib/prism/node.rb#17387
  def ===(other); end

  # source://prism//lib/prism/node.rb#17320
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17325
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#17335
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#17330
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#17340
  sig { params(location: Prism::Location).returns(Prism::SourceLineNode) }
  def copy(location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#17325
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17348
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#17353
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#17371
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#17381
    def type; end
  end
end

# source://prism//lib/prism/node.rb#17396
class Prism::SplatNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#17398
  sig do
    params(
      source: Prism::Source,
      operator_loc: Prism::Location,
      expression: T.nilable(Prism::Node),
      location: Prism::Location
    ).void
  end
  def initialize(source, operator_loc, expression, location); end

  # source://prism//lib/prism/node.rb#17491
  def ===(other); end

  # source://prism//lib/prism/node.rb#17407
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17412
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#17424
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#17417
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#17429
  sig do
    params(
      operator_loc: Prism::Location,
      expression: T.nilable(Prism::Node),
      location: Prism::Location
    ).returns(Prism::SplatNode)
  end
  def copy(operator_loc: T.unsafe(nil), expression: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#17412
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17437
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#17449
  sig { returns(T.nilable(Prism::Node)) }
  def expression; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#17457
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#17452
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#17442
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#17475
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#17485
    def type; end
  end
end

# source://prism//lib/prism/node.rb#17502
class Prism::StatementsNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#17504
  sig { params(source: Prism::Source, body: T::Array[Prism::Node], location: Prism::Location).void }
  def initialize(source, body, location); end

  # source://prism//lib/prism/node.rb#17582
  def ===(other); end

  # source://prism//lib/prism/node.rb#17512
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17545
  sig { returns(T::Array[Prism::Node]) }
  def body; end

  # source://prism//lib/prism/node.rb#17517
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#17527
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#17522
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#17532
  sig { params(body: T::Array[Prism::Node], location: Prism::Location).returns(Prism::StatementsNode) }
  def copy(body: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#17517
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17540
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#17548
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#17566
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#17576
    def type; end
  end
end

# source://prism//lib/prism/node.rb#19343
# Flags for string nodes.
module Prism::StringFlags; end

# source://prism//lib/prism/node.rb#19348
Prism::StringFlags::FORCED_BINARY_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19345
Prism::StringFlags::FORCED_UTF8_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19351
Prism::StringFlags::FROZEN = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19354
Prism::StringFlags::MUTABLE = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#17599
class Prism::StringNode < ::Prism::Node
  include ::Prism::HeredocQuery

  # source://prism//lib/prism/node.rb#17601
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      content_loc: Prism::Location,
      closing_loc: T.nilable(Prism::Location),
      unescaped: String,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, opening_loc, content_loc, closing_loc, unescaped, location); end

  # source://prism//lib/prism/node.rb#17755
  def ===(other); end

  # source://prism//lib/prism/node.rb#17613
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17618
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#17716
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#17670
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#17628
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#17623
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#17711
  sig { returns(String) }
  def content; end

  # source://prism//lib/prism/node.rb#17663
  sig { returns(Prism::Location) }
  def content_loc; end

  # source://prism//lib/prism/node.rb#17633
  sig do
    params(
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      content_loc: Prism::Location,
      closing_loc: T.nilable(Prism::Location),
      unescaped: String,
      location: Prism::Location
    ).returns(Prism::StringNode)
  end
  def copy(flags: T.unsafe(nil), opening_loc: T.unsafe(nil), content_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), unescaped: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#17618
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17641
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#17691
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#17686
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#17696
  sig { returns(T::Boolean) }
  def frozen?; end

  sig { returns(T::Boolean) }
  def heredoc?; end

  # source://prism//lib/prism/node.rb#17721
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#17701
  sig { returns(T::Boolean) }
  def mutable?; end

  # source://prism//lib/prism/node.rb#17706
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#17650
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node_ext.rb#66
  sig { returns(Prism::InterpolatedStringNode) }
  def to_interpolated; end

  # source://prism//lib/prism/node.rb#17739
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#17683
  sig { returns(String) }
  def unescaped; end

  protected

  # source://prism//lib/prism/node.rb#17646
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#17749
    def type; end
  end
end

# source://prism//lib/prism/node.rb#17772
class Prism::SuperNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#17774
  sig do
    params(
      source: Prism::Source,
      keyword_loc: Prism::Location,
      lparen_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      rparen_loc: T.nilable(Prism::Location),
      block: T.nilable(Prism::Node),
      location: Prism::Location
    ).void
  end
  def initialize(source, keyword_loc, lparen_loc, arguments, rparen_loc, block, location); end

  # source://prism//lib/prism/node.rb#17910
  def ===(other); end

  # source://prism//lib/prism/node.rb#17786
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17842
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#17858
  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  # source://prism//lib/prism/node.rb#17791
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#17804
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#17796
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#17809
  sig do
    params(
      keyword_loc: Prism::Location,
      lparen_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      rparen_loc: T.nilable(Prism::Location),
      block: T.nilable(Prism::Node),
      location: Prism::Location
    ).returns(Prism::SuperNode)
  end
  def copy(keyword_loc: T.unsafe(nil), lparen_loc: T.unsafe(nil), arguments: T.unsafe(nil), rparen_loc: T.unsafe(nil), block: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#17791
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17817
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#17876
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#17861
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#17822
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#17866
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#17829
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#17871
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#17845
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#17894
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#17904
    def type; end
  end
end

# source://prism//lib/prism/node.rb#19358
# Flags for symbol nodes.
module Prism::SymbolFlags; end

# source://prism//lib/prism/node.rb#19363
Prism::SymbolFlags::FORCED_BINARY_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19366
Prism::SymbolFlags::FORCED_US_ASCII_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19360
Prism::SymbolFlags::FORCED_UTF8_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#17927
class Prism::SymbolNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#17929
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      value_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      unescaped: String,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, opening_loc, value_loc, closing_loc, unescaped, location); end

  # source://prism//lib/prism/node.rb#18084
  def ===(other); end

  # source://prism//lib/prism/node.rb#17941
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17946
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#18045
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#18004
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#17956
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#17951
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#17961
  sig do
    params(
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      value_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      unescaped: String,
      location: Prism::Location
    ).returns(Prism::SymbolNode)
  end
  def copy(flags: T.unsafe(nil), opening_loc: T.unsafe(nil), value_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), unescaped: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#17946
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17969
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#18025
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#18030
  sig { returns(T::Boolean) }
  def forced_us_ascii_encoding?; end

  # source://prism//lib/prism/node.rb#18020
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#18050
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#18035
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#17978
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#18068
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#18017
  sig { returns(String) }
  def unescaped; end

  # source://prism//lib/prism/node.rb#18040
  sig { returns(T.nilable(String)) }
  def value; end

  # source://prism//lib/prism/node.rb#17991
  sig { returns(T.nilable(Prism::Location)) }
  def value_loc; end

  protected

  # source://prism//lib/prism/node.rb#17974
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#18078
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#628
class Prism::Token
  # source://prism//lib/prism/parse_result.rb#640
  sig { params(source: Prism::Source, type: Symbol, value: String, location: T.any(Integer, Prism::Location)).void }
  def initialize(source, type, value, location); end

  # source://prism//lib/prism/parse_result.rb#675
  sig { params(other: T.untyped).returns(T::Boolean) }
  def ==(other); end

  # source://prism//lib/prism/parse_result.rb#648
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#653
  sig { returns(Prism::Location) }
  def location; end

  # source://prism//lib/prism/parse_result.rb#660
  sig { params(q: T.untyped).void }
  def pretty_print(q); end

  # source://prism//lib/prism/parse_result.rb#634
  sig { returns(Symbol) }
  def type; end

  # source://prism//lib/prism/parse_result.rb#637
  sig { returns(String) }
  def value; end

  private

  # source://prism//lib/prism/parse_result.rb#630
  sig { returns(Prism::Source) }
  def source; end
end

# source://prism//lib/prism/translation.rb#6
module Prism::Translation; end

# source://prism//lib/prism/translation/parser.rb#11
class Prism::Translation::Parser < ::Parser::Base
  # source://prism//lib/prism/translation/parser.rb#36
  def default_encoding; end

  # source://prism//lib/prism/translation/parser.rb#44
  def parse(source_buffer); end

  # source://prism//lib/prism/translation/parser.rb#57
  def parse_with_comments(source_buffer); end

  # source://prism//lib/prism/translation/parser.rb#74
  def tokenize(source_buffer, recover = T.unsafe(nil)); end

  # source://prism//lib/prism/translation/parser.rb#100
  def try_declare_numparam(node); end

  # source://prism//lib/prism/translation/parser.rb#31
  sig { overridable.returns(Integer) }
  def version; end

  # source://prism//lib/prism/translation/parser.rb#40
  def yyerror; end

  private

  # source://prism//lib/prism/translation/parser.rb#258
  def build_ast(program, offset_cache); end

  # source://prism//lib/prism/translation/parser.rb#263
  def build_comments(comments, offset_cache); end

  # source://prism//lib/prism/translation/parser.rb#241
  def build_offset_cache(source); end

  # source://prism//lib/prism/translation/parser.rb#275
  def build_range(location, offset_cache); end

  # source://prism//lib/prism/translation/parser.rb#270
  def build_tokens(tokens, offset_cache); end

  # source://prism//lib/prism/translation/parser.rb#284
  def convert_for_prism(version); end

  # source://prism//lib/prism/translation/parser.rb#119
  def error_diagnostic(error, offset_cache); end

  # source://prism//lib/prism/translation/parser.rb#219
  def unwrap(result, offset_cache); end

  # source://prism//lib/prism/translation/parser.rb#108
  def valid_error?(error); end

  # source://prism//lib/prism/translation/parser.rb#114
  def valid_warning?(warning); end

  # source://prism//lib/prism/translation/parser.rb#192
  def warning_diagnostic(warning, offset_cache); end
end

# source://prism//lib/prism/translation/parser33.rb#6
class Prism::Translation::Parser33 < ::Prism::Translation::Parser
  # source://prism//lib/prism/translation/parser33.rb#7
  sig { override.returns(Integer) }
  def version; end
end

# source://prism//lib/prism/translation/parser34.rb#6
class Prism::Translation::Parser34 < ::Prism::Translation::Parser
  # source://prism//lib/prism/translation/parser34.rb#7
  sig { override.returns(Integer) }
  def version; end
end

# source://prism//lib/prism/translation/parser/compiler.rb#8
class Prism::Translation::Parser::Compiler < ::Prism::Compiler
  # source://prism//lib/prism/translation/parser/compiler.rb#39
  def initialize(parser, offset_cache, forwarding: T.unsafe(nil), in_destructure: T.unsafe(nil), in_pattern: T.unsafe(nil)); end

  # source://prism//lib/prism/translation/parser/compiler.rb#18
  def builder; end

  # source://prism//lib/prism/translation/parser/compiler.rb#29
  def forwarding; end

  # source://prism//lib/prism/translation/parser/compiler.rb#32
  def in_destructure; end

  # source://prism//lib/prism/translation/parser/compiler.rb#35
  def in_pattern; end

  # source://prism//lib/prism/translation/parser/compiler.rb#26
  def offset_cache; end

  # source://prism//lib/prism/translation/parser/compiler.rb#14
  def parser; end

  # source://prism//lib/prism/translation/parser/compiler.rb#22
  def source_buffer; end

  # source://prism//lib/prism/translation/parser/compiler.rb#58
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#52
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#64
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#70
  def visit_and_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#101
  def visit_arguments_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#76
  def visit_array_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#82
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#107
  def visit_assoc_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#148
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#158
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#164
  def visit_begin_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#202
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#208
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#213
  def visit_block_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#219
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#224
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#233
  def visit_break_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#338
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#245
  def visit_call_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#319
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#357
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#376
  def visit_call_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#388
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#407
  def visit_case_match_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#394
  def visit_case_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#420
  def visit_class_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#459
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#449
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#469
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#433
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#479
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#439
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#510
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#500
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#520
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#576
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#536
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#566
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#586
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#596
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#556
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#485
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#530
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#494
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#605
  def visit_def_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#652
  def visit_defined_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#664
  def visit_else_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#670
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#680
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#686
  def visit_ensure_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#692
  def visit_false_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#698
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1494
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#710
  def visit_float_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#716
  def visit_for_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#734
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#740
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#749
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#787
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#777
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#797
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#761
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#807
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#767
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#813
  def visit_hash_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#823
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#841
  def visit_if_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#883
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#889
  def visit_implicit_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#895
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#901
  def visit_in_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#945
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#927
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#963
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#981
  def visit_index_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1018
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1008
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1028
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#992
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1038
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#998
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1044
  def visit_integer_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1050
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1050
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1065
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1128
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1138
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1153
  def visit_it_parameters_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1159
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1168
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1177
  def visit_lambda_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1236
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1226
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1246
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1203
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1256
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1216
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1528
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1266
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1276
  def visit_match_required_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1286
  def visit_match_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1297
  def visit_missing_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1303
  def visit_module_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1314
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1328
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1349
  def visit_next_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1361
  def visit_nil_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1367
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1377
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1383
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1389
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1395
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1401
  def visit_or_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1407
  def visit_parameters_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1446
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1456
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1463
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1468
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1478
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1488
  def visit_program_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1494
  def visit_range_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1516
  def visit_rational_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1522
  def visit_redo_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1528
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1543
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1549
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1555
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1573
  def visit_rescue_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1582
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1588
  def visit_retry_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1597
  def visit_return_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1609
  def visit_self_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1614
  def visit_shareable_constant_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1620
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1632
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1638
  def visit_source_file_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1644
  def visit_source_line_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1656
  def visit_splat_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1669
  def visit_statements_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1675
  def visit_string_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1716
  def visit_super_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1739
  def visit_symbol_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1771
  def visit_true_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1777
  def visit_undef_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1786
  def visit_unless_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1816
  def visit_until_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1838
  def visit_when_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1856
  def visit_while_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1878
  def visit_x_string_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1910
  def visit_yield_node(node); end

  private

  # source://prism//lib/prism/translation/parser/compiler.rb#1924
  def copy_compiler(forwarding: T.unsafe(nil), in_destructure: T.unsafe(nil), in_pattern: T.unsafe(nil)); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1931
  def find_forwarding(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1945
  def imaginary_value(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1954
  def numeric_negate(message_loc, receiver); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1966
  def procarg0?(parameters); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1979
  def rational_value(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1993
  def srange(location); end

  # source://prism//lib/prism/translation/parser/compiler.rb#2008
  def srange_find(start_offset, end_offset, tokens); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1998
  def srange_offsets(start_offset, end_offset); end

  # source://prism//lib/prism/translation/parser/compiler.rb#2018
  def token(location); end

  # source://prism//lib/prism/translation/parser/compiler.rb#2023
  def visit_block(call, block); end

  # source://prism//lib/prism/translation/parser/compiler.rb#2057
  def visit_heredoc(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#2103
  def visit_numeric(node, value); end

  # source://prism//lib/prism/translation/parser/compiler.rb#2115
  def within_pattern; end
end

# source://prism//lib/prism/translation/parser/compiler.rb#10
class Prism::Translation::Parser::Compiler::CompilationError < ::StandardError; end

# source://prism//lib/prism/translation/parser/compiler.rb#1990
Prism::Translation::Parser::Compiler::Range = Parser::Source::Range

# source://prism//lib/prism/translation/parser.rb#12
Prism::Translation::Parser::Diagnostic = Parser::Diagnostic

# source://prism//lib/prism/translation/parser/lexer.rb#8
class Prism::Translation::Parser::Lexer
  # source://prism//lib/prism/translation/parser/lexer.rb#204
  def initialize(source_buffer, lexed, offset_cache); end

  # source://prism//lib/prism/translation/parser/lexer.rb#197
  def lexed; end

  # source://prism//lib/prism/translation/parser/lexer.rb#200
  def offset_cache; end

  # source://prism//lib/prism/translation/parser/lexer.rb#193
  def source_buffer; end

  # source://prism//lib/prism/translation/parser/lexer.rb#214
  def to_a; end

  private

  # source://prism//lib/prism/translation/parser/lexer.rb#387
  def parse_complex(value); end

  # source://prism//lib/prism/translation/parser/lexer.rb#380
  def parse_float(value); end

  # source://prism//lib/prism/translation/parser/lexer.rb#373
  def parse_integer(value); end

  # source://prism//lib/prism/translation/parser/lexer.rb#402
  def parse_rational(value); end
end

# source://prism//lib/prism/translation/parser/lexer.rb#187
Prism::Translation::Parser::Lexer::EXPR_BEG = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/translation/parser/lexer.rb#188
Prism::Translation::Parser::Lexer::EXPR_LABEL = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/translation/parser/lexer.rb#210
Prism::Translation::Parser::Lexer::Range = Parser::Source::Range

# source://prism//lib/prism/translation/parser/lexer.rb#10
Prism::Translation::Parser::Lexer::TYPES = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/translation/parser.rb#18
class Prism::Translation::Parser::PrismDiagnostic < ::Parser::Diagnostic
  # source://prism//lib/prism/translation/parser.rb#23
  def initialize(message, level, reason, location); end

  # source://prism//lib/prism/translation/parser.rb#20
  def message; end
end

# source://prism//lib/prism/translation/parser.rb#29
Prism::Translation::Parser::Racc_debug_parser = T.let(T.unsafe(nil), FalseClass)

# source://prism//lib/prism/translation/ripper.rb#43
class Prism::Translation::Ripper < ::Prism::Compiler
  # source://prism//lib/prism/translation/ripper.rb#444
  def initialize(source, filename = T.unsafe(nil), lineno = T.unsafe(nil)); end

  # source://prism//lib/prism/translation/ripper.rb#441
  def column; end

  # source://prism//lib/prism/translation/ripper.rb#457
  sig { returns(T::Boolean) }
  def error?; end

  # source://prism//lib/prism/translation/ripper.rb#435
  def filename; end

  # source://prism//lib/prism/translation/ripper.rb#438
  def lineno; end

  # source://prism//lib/prism/translation/ripper.rb#462
  sig { returns(T.untyped) }
  def parse; end

  # source://prism//lib/prism/translation/ripper.rb#432
  def source; end

  # source://prism//lib/prism/translation/ripper.rb#561
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#551
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#585
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#605
  def visit_and_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#796
  def visit_arguments_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#615
  def visit_array_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#775
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#803
  def visit_assoc_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#816
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#825
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#832
  def visit_begin_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#896
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#902
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#908
  def visit_block_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#944
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#958
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#982
  def visit_break_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1194
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1002
  def visit_call_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1172
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1216
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1238
  def visit_call_target_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1263
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1286
  def visit_case_match_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1273
  def visit_case_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1299
  def visit_class_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1352
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1338
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1366
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1317
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1380
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1327
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1422
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1408
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1436
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1523
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1457
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1509
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1537
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1551
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1480
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1387
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1450
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1397
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1560
  def visit_def_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1607
  def visit_defined_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1614
  def visit_else_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1630
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1651
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1662
  def visit_ensure_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1680
  def visit_false_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1687
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1712
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1726
  def visit_float_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1732
  def visit_for_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1749
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1756
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1766
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1815
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1801
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1829
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1780
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1843
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1790
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1850
  def visit_hash_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1865
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1907
  def visit_if_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1943
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1949
  def visit_implicit_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1954
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1961
  def visit_in_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1996
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1979
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2013
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2030
  def visit_index_target_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2072
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2058
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2086
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2040
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2100
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2047
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2107
  def visit_integer_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2113
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2132
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2151
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2179
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2192
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2222
  def visit_it_parameters_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2227
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2239
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2253
  def visit_lambda_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2350
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2336
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2364
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2313
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2378
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2325
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2385
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2400
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2409
  def visit_match_required_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2418
  def visit_match_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2424
  def visit_missing_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2430
  def visit_module_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2447
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2501
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2521
  def visit_next_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2535
  def visit_nil_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2542
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2551
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2556
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2563
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2573
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2583
  def visit_or_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2593
  def visit_parameters_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2620
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2634
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2643
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2649
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2664
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2678
  def visit_program_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2689
  def visit_range_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2703
  def visit_rational_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2709
  def visit_redo_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2716
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2738
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2745
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2752
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2762
  def visit_rescue_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2820
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2832
  def visit_retry_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2842
  def visit_return_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2856
  def visit_self_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2862
  def visit_shareable_constant_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2868
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2878
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2885
  def visit_source_file_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2892
  def visit_source_line_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2905
  def visit_splat_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2910
  def visit_statements_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2927
  def visit_string_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#3059
  def visit_super_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#3080
  def visit_symbol_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#3104
  def visit_true_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#3111
  def visit_undef_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#3123
  def visit_unless_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#3151
  def visit_until_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#3175
  def visit_when_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#3196
  def visit_while_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#3220
  def visit_x_string_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#3243
  def visit_yield_node(node); end

  private

  # source://prism//lib/prism/translation/ripper.rb#3387
  def _dispatch_0; end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def _dispatch_1(_); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def _dispatch_2(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3390
  def _dispatch_3(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3391
  def _dispatch_4(_, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3392
  def _dispatch_5(_, _, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3393
  def _dispatch_7(_, _, _, _, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3377
  def bounds(location); end

  # source://prism//lib/prism/translation/ripper.rb#1163
  def command?(node); end

  # source://prism//lib/prism/translation/ripper.rb#3415
  def compile_error(msg); end

  # source://prism//lib/prism/translation/ripper.rb#3430
  def dedent_string(string, width); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_BEGIN(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_CHAR(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_END(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on___end__(_); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_alias(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_alias_error(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_aref(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_aref_field(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_arg_ambiguous(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_arg_paren(_); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_args_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_args_add_block(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_args_add_star(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3387
  def on_args_forward; end

  # source://prism//lib/prism/translation/ripper.rb#3387
  def on_args_new; end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_array(_); end

  # source://prism//lib/prism/translation/ripper.rb#3391
  def on_aryptn(_, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_assign(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_assign_error(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_assoc_new(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_assoc_splat(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_assoclist_from_args(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_backref(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_backtick(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_bare_assoc_hash(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_begin(_); end

  # source://prism//lib/prism/translation/ripper.rb#3390
  def on_binary(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_block_var(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_blockarg(_); end

  # source://prism//lib/prism/translation/ripper.rb#3391
  def on_bodystmt(_, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_brace_block(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_break(_); end

  # source://prism//lib/prism/translation/ripper.rb#3390
  def on_call(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_case(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3390
  def on_class(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_class_name_error(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_comma(_); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_command(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3391
  def on_command_call(_, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_comment(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_const(_); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_const_path_field(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_const_path_ref(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_const_ref(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_cvar(_); end

  # source://prism//lib/prism/translation/ripper.rb#3390
  def on_def(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_defined(_); end

  # source://prism//lib/prism/translation/ripper.rb#3392
  def on_defs(_, _, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_do_block(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_dot2(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_dot3(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_dyna_symbol(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_else(_); end

  # source://prism//lib/prism/translation/ripper.rb#3390
  def on_elsif(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_embdoc(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_embdoc_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_embdoc_end(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_embexpr_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_embexpr_end(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_embvar(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_ensure(_); end

  # source://prism//lib/prism/translation/ripper.rb#3387
  def on_excessed_comma; end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_fcall(_); end

  # source://prism//lib/prism/translation/ripper.rb#3390
  def on_field(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_float(_); end

  # source://prism//lib/prism/translation/ripper.rb#3391
  def on_fndptn(_, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3390
  def on_for(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_gvar(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_hash(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_heredoc_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_heredoc_dedent(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_heredoc_end(_); end

  # source://prism//lib/prism/translation/ripper.rb#3390
  def on_hshptn(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_ident(_); end

  # source://prism//lib/prism/translation/ripper.rb#3390
  def on_if(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_if_mod(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3390
  def on_ifop(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_ignored_nl(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_ignored_sp(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_imaginary(_); end

  # source://prism//lib/prism/translation/ripper.rb#3390
  def on_in(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_int(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_ivar(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_kw(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_kwrest_param(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_label(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_label_end(_); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_lambda(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_lbrace(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_lbracket(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_lparen(_); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_magic_comment(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_massign(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_method_add_arg(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_method_add_block(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_mlhs_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_mlhs_add_post(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_mlhs_add_star(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3387
  def on_mlhs_new; end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_mlhs_paren(_); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_module(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_mrhs_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_mrhs_add_star(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3387
  def on_mrhs_new; end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_mrhs_new_from_args(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_next(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_nl(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_nokw_param(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_op(_); end

  # source://prism//lib/prism/translation/ripper.rb#3390
  def on_opassign(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_operator_ambiguous(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_param_error(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3393
  def on_params(_, _, _, _, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_paren(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_parse_error(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_period(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_program(_); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_qsymbols_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_qsymbols_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#3387
  def on_qsymbols_new; end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_qwords_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_qwords_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#3387
  def on_qwords_new; end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_rational(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_rbrace(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_rbracket(_); end

  # source://prism//lib/prism/translation/ripper.rb#3387
  def on_redo; end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_regexp_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_regexp_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_regexp_end(_); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_regexp_literal(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3387
  def on_regexp_new; end

  # source://prism//lib/prism/translation/ripper.rb#3391
  def on_rescue(_, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_rescue_mod(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_rest_param(_); end

  # source://prism//lib/prism/translation/ripper.rb#3387
  def on_retry; end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_return(_); end

  # source://prism//lib/prism/translation/ripper.rb#3387
  def on_return0; end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_rparen(_); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_sclass(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_semicolon(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_sp(_); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_stmts_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3387
  def on_stmts_new; end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_string_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_string_concat(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3387
  def on_string_content; end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_string_dvar(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_string_embexpr(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_string_literal(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_super(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_symbeg(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_symbol(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_symbol_literal(_); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_symbols_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_symbols_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#3387
  def on_symbols_new; end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_tlambda(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_tlambeg(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_top_const_field(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_top_const_ref(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_tstring_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_tstring_content(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_tstring_end(_); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_unary(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_undef(_); end

  # source://prism//lib/prism/translation/ripper.rb#3390
  def on_unless(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_unless_mod(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_until(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_until_mod(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_var_alias(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_var_field(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_var_ref(_); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_vcall(_); end

  # source://prism//lib/prism/translation/ripper.rb#3387
  def on_void_stmt; end

  # source://prism//lib/prism/translation/ripper.rb#3390
  def on_when(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_while(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_while_mod(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_word_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3387
  def on_word_new; end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_words_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_words_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#3387
  def on_words_new; end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_words_sep(_); end

  # source://prism//lib/prism/translation/ripper.rb#3389
  def on_xstring_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_xstring_literal(_); end

  # source://prism//lib/prism/translation/ripper.rb#3387
  def on_xstring_new; end

  # source://prism//lib/prism/translation/ripper.rb#3388
  def on_yield(_); end

  # source://prism//lib/prism/translation/ripper.rb#3387
  def on_yield0; end

  # source://prism//lib/prism/translation/ripper.rb#3387
  def on_zsuper; end

  # source://prism//lib/prism/translation/ripper.rb#3269
  def result; end

  # source://prism//lib/prism/translation/ripper.rb#3282
  def trailing_comma?(left, right); end

  # source://prism//lib/prism/translation/ripper.rb#570
  def visit_alias_global_variable_node_value(node); end

  # source://prism//lib/prism/translation/ripper.rb#756
  def visit_arguments(elements); end

  # source://prism//lib/prism/translation/ripper.rb#840
  def visit_begin_node_clauses(location, node, allow_newline); end

  # source://prism//lib/prism/translation/ripper.rb#875
  def visit_body_node(location, node, allow_newline = T.unsafe(nil)); end

  # source://prism//lib/prism/translation/ripper.rb#1136
  def visit_call_node_arguments(arguments_node, block_node, trailing_comma); end

  # source://prism//lib/prism/translation/ripper.rb#1489
  def visit_constant_path_write_node_target(node); end

  # source://prism//lib/prism/translation/ripper.rb#2607
  def visit_destructured_parameter_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2978
  def visit_heredoc_node(parts, base); end

  # source://prism//lib/prism/translation/ripper.rb#2953
  def visit_heredoc_node_whitespace(parts); end

  # source://prism//lib/prism/translation/ripper.rb#3024
  def visit_heredoc_string_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#3041
  def visit_heredoc_x_string_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2460
  def visit_multi_target_node_targets(lefts, rest, rights, skippable); end

  # source://prism//lib/prism/translation/ripper.rb#3321
  def visit_number_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#595
  def visit_pattern_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2919
  def visit_statements_node_body(body); end

  # source://prism//lib/prism/translation/ripper.rb#2211
  def visit_string_content(part); end

  # source://prism//lib/prism/translation/ripper.rb#3294
  def visit_token(token, allow_keywords = T.unsafe(nil)); end

  # source://prism//lib/prism/translation/ripper.rb#745
  def visit_words_sep(opening_loc, previous, current); end

  # source://prism//lib/prism/translation/ripper.rb#3339
  def visit_write_value(node); end

  # source://prism//lib/prism/translation/ripper.rb#3287
  def void_stmt?(left, right, allow_newline); end

  # source://prism//lib/prism/translation/ripper.rb#3406
  def warn(fmt, *args); end

  # source://prism//lib/prism/translation/ripper.rb#3411
  def warning(fmt, *args); end

  class << self
    # source://prism//lib/prism/translation/ripper.rb#72
    def lex(src, filename = T.unsafe(nil), lineno = T.unsafe(nil), raise_errors: T.unsafe(nil)); end

    # source://prism//lib/prism/translation/ripper.rb#46
    def parse(src, filename = T.unsafe(nil), lineno = T.unsafe(nil)); end

    # source://prism//lib/prism/translation/ripper.rb#381
    def sexp(src, filename = T.unsafe(nil), lineno = T.unsafe(nil), raise_errors: T.unsafe(nil)); end

    # source://prism//lib/prism/translation/ripper.rb#416
    def sexp_raw(src, filename = T.unsafe(nil), lineno = T.unsafe(nil), raise_errors: T.unsafe(nil)); end
  end
end

# source://prism//lib/prism/translation/ripper.rb#337
Prism::Translation::Ripper::BINARY_OPERATORS = T.let(T.unsafe(nil), Array)

# source://prism//lib/prism/translation/ripper.rb#289
Prism::Translation::Ripper::EVENTS = T.let(T.unsafe(nil), Array)

# source://prism//lib/prism/translation/ripper.rb#292
Prism::Translation::Ripper::KEYWORDS = T.let(T.unsafe(nil), Array)

# source://prism//lib/prism/translation/ripper.rb#283
Prism::Translation::Ripper::PARSER_EVENTS = T.let(T.unsafe(nil), Array)

# source://prism//lib/prism/translation/ripper.rb#84
Prism::Translation::Ripper::PARSER_EVENT_TABLE = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/translation/ripper.rb#286
Prism::Translation::Ripper::SCANNER_EVENTS = T.let(T.unsafe(nil), Array)

# source://prism//lib/prism/translation/ripper.rb#227
Prism::Translation::Ripper::SCANNER_EVENT_TABLE = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/translation/ripper/sexp.rb#10
class Prism::Translation::Ripper::SexpBuilder < ::Prism::Translation::Ripper
  # source://prism//lib/prism/translation/ripper/sexp.rb#13
  def error; end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_BEGIN(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_CHAR(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_END(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on___end__(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_alias(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_alias_error(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_aref(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_aref_field(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_arg_ambiguous(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_arg_paren(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_args_add(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_args_add_block(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_args_add_star(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_args_forward(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_args_new(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_array(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_aryptn(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_assign(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_assign_error(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_assoc_new(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_assoc_splat(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_assoclist_from_args(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_backref(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_backtick(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_bare_assoc_hash(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_begin(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_binary(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_block_var(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_blockarg(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_bodystmt(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_brace_block(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_break(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_call(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_case(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_class(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_class_name_error(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_comma(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_command(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_command_call(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_comment(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_const(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_const_path_field(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_const_path_ref(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_const_ref(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_cvar(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_def(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_defined(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_defs(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_do_block(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_dot2(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_dot3(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_dyna_symbol(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_else(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_elsif(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_embdoc(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_embdoc_beg(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_embdoc_end(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_embexpr_beg(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_embexpr_end(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_embvar(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_ensure(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_excessed_comma(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_fcall(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_field(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_float(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_fndptn(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_for(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_gvar(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_hash(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_heredoc_beg(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_heredoc_end(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_hshptn(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_ident(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_if(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_if_mod(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_ifop(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_ignored_nl(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_ignored_sp(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_imaginary(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_in(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_int(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_ivar(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_kw(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_kwrest_param(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_label(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_label_end(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_lambda(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_lbrace(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_lbracket(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_lparen(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_magic_comment(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_massign(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_method_add_arg(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_method_add_block(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_mlhs_add(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_mlhs_add_post(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_mlhs_add_star(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_mlhs_new(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_mlhs_paren(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_module(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_mrhs_add(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_mrhs_add_star(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_mrhs_new(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_mrhs_new_from_args(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_next(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_nl(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_nokw_param(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_op(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_opassign(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_operator_ambiguous(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_param_error(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_params(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_paren(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_period(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_program(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_qsymbols_add(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_qsymbols_beg(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_qsymbols_new(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_qwords_add(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_qwords_beg(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_qwords_new(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_rational(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_rbrace(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_rbracket(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_redo(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_regexp_add(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_regexp_beg(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_regexp_end(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_regexp_literal(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_regexp_new(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_rescue(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_rescue_mod(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_rest_param(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_retry(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_return(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_return0(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_rparen(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_sclass(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_semicolon(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_sp(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_stmts_add(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_stmts_new(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_string_add(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_string_concat(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_string_content(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_string_dvar(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_string_embexpr(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_string_literal(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_super(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_symbeg(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_symbol(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_symbol_literal(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_symbols_add(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_symbols_beg(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_symbols_new(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_tlambda(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_tlambeg(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_top_const_field(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_top_const_ref(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_tstring_beg(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_tstring_content(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_tstring_end(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_unary(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_undef(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_unless(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_unless_mod(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_until(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_until_mod(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_var_alias(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_var_field(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_var_ref(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_vcall(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_void_stmt(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_when(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_while(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_while_mod(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_word_add(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_word_new(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_words_add(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_words_beg(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_words_new(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#55
  def on_words_sep(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_xstring_add(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_xstring_literal(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_xstring_new(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_yield(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_yield0(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#47
  def on_zsuper(*args); end

  private

  # source://prism//lib/prism/translation/ripper/sexp.rb#61
  def compile_error(mesg); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#17
  def dedent_element(e, width); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#61
  def on_error(mesg); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#24
  def on_heredoc_dedent(val, width); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#61
  def on_parse_error(mesg); end
end

# source://prism//lib/prism/translation/ripper/sexp.rb#74
class Prism::Translation::Ripper::SexpBuilderPP < ::Prism::Translation::Ripper::SexpBuilder
  private

  # source://prism//lib/prism/translation/ripper/sexp.rb#92
  def _dispatch_event_new; end

  # source://prism//lib/prism/translation/ripper/sexp.rb#96
  def _dispatch_event_push(list, item); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#96
  def on_args_add(list, item); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#92
  def on_args_new; end

  # source://prism//lib/prism/translation/ripper/sexp.rb#79
  def on_heredoc_dedent(val, width); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#96
  def on_mlhs_add(list, item); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#109
  def on_mlhs_add_post(list, post); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#105
  def on_mlhs_add_star(list, star); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#92
  def on_mlhs_new; end

  # source://prism//lib/prism/translation/ripper/sexp.rb#101
  def on_mlhs_paren(list); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#96
  def on_mrhs_add(list, item); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#92
  def on_mrhs_new; end

  # source://prism//lib/prism/translation/ripper/sexp.rb#96
  def on_qsymbols_add(list, item); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#92
  def on_qsymbols_new; end

  # source://prism//lib/prism/translation/ripper/sexp.rb#96
  def on_qwords_add(list, item); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#92
  def on_qwords_new; end

  # source://prism//lib/prism/translation/ripper/sexp.rb#96
  def on_regexp_add(list, item); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#92
  def on_regexp_new; end

  # source://prism//lib/prism/translation/ripper/sexp.rb#96
  def on_stmts_add(list, item); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#92
  def on_stmts_new; end

  # source://prism//lib/prism/translation/ripper/sexp.rb#96
  def on_string_add(list, item); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#96
  def on_symbols_add(list, item); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#92
  def on_symbols_new; end

  # source://prism//lib/prism/translation/ripper/sexp.rb#96
  def on_word_add(list, item); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#92
  def on_word_new; end

  # source://prism//lib/prism/translation/ripper/sexp.rb#96
  def on_words_add(list, item); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#92
  def on_words_new; end

  # source://prism//lib/prism/translation/ripper/sexp.rb#96
  def on_xstring_add(list, item); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#92
  def on_xstring_new; end
end

# source://prism//lib/prism/node.rb#18098
class Prism::TrueNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#18100
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  # source://prism//lib/prism/node.rb#18174
  def ===(other); end

  # source://prism//lib/prism/node.rb#18107
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#18112
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#18122
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#18117
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#18127
  sig { params(location: Prism::Location).returns(Prism::TrueNode) }
  def copy(location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#18112
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#18135
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#18140
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#18158
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#18168
    def type; end
  end
end

# source://prism//lib/prism/node.rb#18183
class Prism::UndefNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#18185
  sig do
    params(
      source: Prism::Source,
      names: T::Array[T.any(Prism::SymbolNode, Prism::InterpolatedSymbolNode)],
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, names, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#18276
  def ===(other); end

  # source://prism//lib/prism/node.rb#18194
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#18199
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#18209
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#18204
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#18214
  sig do
    params(
      names: T::Array[T.any(Prism::SymbolNode, Prism::InterpolatedSymbolNode)],
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::UndefNode)
  end
  def copy(names: T.unsafe(nil), keyword_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#18199
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#18222
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#18242
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#18237
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#18230
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#18227
  sig { returns(T::Array[T.any(Prism::SymbolNode, Prism::InterpolatedSymbolNode)]) }
  def names; end

  # source://prism//lib/prism/node.rb#18260
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#18270
    def type; end
  end
end

# source://prism//lib/prism/node.rb#18291
class Prism::UnlessNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#18293
  sig do
    params(
      source: Prism::Source,
      keyword_loc: Prism::Location,
      predicate: Prism::Node,
      then_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      consequent: T.nilable(Prism::ElseNode),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, keyword_loc, predicate, then_keyword_loc, statements, consequent, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#18461
  def ===(other); end

  # source://prism//lib/prism/node.rb#18306
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#18315
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#18329
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#18320
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#18393
  sig { returns(T.nilable(Prism::ElseNode)) }
  def consequent; end

  # source://prism//lib/prism/node.rb#18334
  sig do
    params(
      keyword_loc: Prism::Location,
      predicate: Prism::Node,
      then_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      consequent: T.nilable(Prism::ElseNode),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::UnlessNode)
  end
  def copy(keyword_loc: T.unsafe(nil), predicate: T.unsafe(nil), then_keyword_loc: T.unsafe(nil), statements: T.unsafe(nil), consequent: T.unsafe(nil), end_keyword_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#18315
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#18342
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#18422
  sig { returns(T.nilable(String)) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#18399
  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#18427
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#18412
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#18353
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#18366
  sig { returns(Prism::Node) }
  def predicate; end

  # source://prism//lib/prism/node.rb#18310
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#18387
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#18417
  sig { returns(T.nilable(String)) }
  def then_keyword; end

  # source://prism//lib/prism/node.rb#18370
  sig { returns(T.nilable(Prism::Location)) }
  def then_keyword_loc; end

  # source://prism//lib/prism/node.rb#18445
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#18455
    def type; end
  end
end

# source://prism//lib/prism/node.rb#18479
class Prism::UntilNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#18481
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      keyword_loc: Prism::Location,
      closing_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, keyword_loc, closing_loc, predicate, statements, location); end

  # source://prism//lib/prism/node.rb#18612
  def ===(other); end

  # source://prism//lib/prism/node.rb#18493
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#18563
  sig { returns(T::Boolean) }
  def begin_modifier?; end

  # source://prism//lib/prism/node.rb#18502
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#18573
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#18544
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#18515
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#18507
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#18520
  sig do
    params(
      flags: Integer,
      keyword_loc: Prism::Location,
      closing_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      location: Prism::Location
    ).returns(Prism::UntilNode)
  end
  def copy(flags: T.unsafe(nil), keyword_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), predicate: T.unsafe(nil), statements: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#18502
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#18528
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#18578
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#18568
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#18537
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#18557
  sig { returns(Prism::Node) }
  def predicate; end

  # source://prism//lib/prism/node.rb#18497
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#18560
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#18596
  sig { override.returns(Symbol) }
  def type; end

  protected

  # source://prism//lib/prism/node.rb#18533
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#18606
    def type; end
  end
end

Prism::VERSION = T.let(T.unsafe(nil), String)

# source://prism//lib/prism/visitor.rb#54
class Prism::Visitor < ::Prism::BasicVisitor
  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::AliasGlobalVariableNode).void }
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::AliasMethodNode).void }
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::AlternationPatternNode).void }
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::AndNode).void }
  def visit_and_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ArgumentsNode).void }
  def visit_arguments_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ArrayNode).void }
  def visit_array_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ArrayPatternNode).void }
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::AssocNode).void }
  def visit_assoc_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::AssocSplatNode).void }
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::BackReferenceReadNode).void }
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::BeginNode).void }
  def visit_begin_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::BlockArgumentNode).void }
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::BlockLocalVariableNode).void }
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::BlockNode).void }
  def visit_block_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::BlockParameterNode).void }
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::BlockParametersNode).void }
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::BreakNode).void }
  def visit_break_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::CallAndWriteNode).void }
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::CallNode).void }
  def visit_call_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::CallOperatorWriteNode).void }
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::CallOrWriteNode).void }
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::CallTargetNode).void }
  def visit_call_target_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::CapturePatternNode).void }
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::CaseMatchNode).void }
  def visit_case_match_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::CaseNode).void }
  def visit_case_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ClassNode).void }
  def visit_class_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ClassVariableAndWriteNode).void }
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ClassVariableOperatorWriteNode).void }
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ClassVariableOrWriteNode).void }
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ClassVariableReadNode).void }
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ClassVariableTargetNode).void }
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ClassVariableWriteNode).void }
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ConstantAndWriteNode).void }
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ConstantOperatorWriteNode).void }
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ConstantOrWriteNode).void }
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ConstantPathAndWriteNode).void }
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ConstantPathNode).void }
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ConstantPathOperatorWriteNode).void }
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ConstantPathOrWriteNode).void }
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ConstantPathTargetNode).void }
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ConstantPathWriteNode).void }
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ConstantReadNode).void }
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ConstantTargetNode).void }
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ConstantWriteNode).void }
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::DefNode).void }
  def visit_def_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::DefinedNode).void }
  def visit_defined_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ElseNode).void }
  def visit_else_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::EmbeddedStatementsNode).void }
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::EmbeddedVariableNode).void }
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::EnsureNode).void }
  def visit_ensure_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::FalseNode).void }
  def visit_false_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::FindPatternNode).void }
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::FlipFlopNode).void }
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::FloatNode).void }
  def visit_float_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ForNode).void }
  def visit_for_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ForwardingArgumentsNode).void }
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ForwardingParameterNode).void }
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ForwardingSuperNode).void }
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::GlobalVariableAndWriteNode).void }
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::GlobalVariableOperatorWriteNode).void }
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::GlobalVariableOrWriteNode).void }
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::GlobalVariableReadNode).void }
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::GlobalVariableTargetNode).void }
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::GlobalVariableWriteNode).void }
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::HashNode).void }
  def visit_hash_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::HashPatternNode).void }
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::IfNode).void }
  def visit_if_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ImaginaryNode).void }
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ImplicitNode).void }
  def visit_implicit_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ImplicitRestNode).void }
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::InNode).void }
  def visit_in_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::IndexAndWriteNode).void }
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::IndexOperatorWriteNode).void }
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::IndexOrWriteNode).void }
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::IndexTargetNode).void }
  def visit_index_target_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::InstanceVariableAndWriteNode).void }
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::InstanceVariableOperatorWriteNode).void }
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::InstanceVariableOrWriteNode).void }
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::InstanceVariableReadNode).void }
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::InstanceVariableTargetNode).void }
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::InstanceVariableWriteNode).void }
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::IntegerNode).void }
  def visit_integer_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::InterpolatedMatchLastLineNode).void }
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::InterpolatedRegularExpressionNode).void }
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::InterpolatedStringNode).void }
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::InterpolatedSymbolNode).void }
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::InterpolatedXStringNode).void }
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ItParametersNode).void }
  def visit_it_parameters_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::KeywordHashNode).void }
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::KeywordRestParameterNode).void }
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::LambdaNode).void }
  def visit_lambda_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::LocalVariableAndWriteNode).void }
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::LocalVariableOperatorWriteNode).void }
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::LocalVariableOrWriteNode).void }
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::LocalVariableReadNode).void }
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::LocalVariableTargetNode).void }
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::LocalVariableWriteNode).void }
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::MatchLastLineNode).void }
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::MatchPredicateNode).void }
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::MatchRequiredNode).void }
  def visit_match_required_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::MatchWriteNode).void }
  def visit_match_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::MissingNode).void }
  def visit_missing_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ModuleNode).void }
  def visit_module_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::MultiTargetNode).void }
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::MultiWriteNode).void }
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::NextNode).void }
  def visit_next_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::NilNode).void }
  def visit_nil_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::NoKeywordsParameterNode).void }
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::NumberedParametersNode).void }
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::NumberedReferenceReadNode).void }
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::OptionalKeywordParameterNode).void }
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::OptionalParameterNode).void }
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::OrNode).void }
  def visit_or_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ParametersNode).void }
  def visit_parameters_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ParenthesesNode).void }
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::PinnedExpressionNode).void }
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::PinnedVariableNode).void }
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::PostExecutionNode).void }
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::PreExecutionNode).void }
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ProgramNode).void }
  def visit_program_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::RangeNode).void }
  def visit_range_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::RationalNode).void }
  def visit_rational_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::RedoNode).void }
  def visit_redo_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::RegularExpressionNode).void }
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::RequiredKeywordParameterNode).void }
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::RequiredParameterNode).void }
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::RescueModifierNode).void }
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::RescueNode).void }
  def visit_rescue_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::RestParameterNode).void }
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::RetryNode).void }
  def visit_retry_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ReturnNode).void }
  def visit_return_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::SelfNode).void }
  def visit_self_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::ShareableConstantNode).void }
  def visit_shareable_constant_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::SingletonClassNode).void }
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::SourceEncodingNode).void }
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::SourceFileNode).void }
  def visit_source_file_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::SourceLineNode).void }
  def visit_source_line_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::SplatNode).void }
  def visit_splat_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::StatementsNode).void }
  def visit_statements_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::StringNode).void }
  def visit_string_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::SuperNode).void }
  def visit_super_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::SymbolNode).void }
  def visit_symbol_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::TrueNode).void }
  def visit_true_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::UndefNode).void }
  def visit_undef_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::UnlessNode).void }
  def visit_unless_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::UntilNode).void }
  def visit_until_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::WhenNode).void }
  def visit_when_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::WhileNode).void }
  def visit_while_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::XStringNode).void }
  def visit_x_string_node(node); end

  # source://prism//lib/prism/visitor.rb#29
  sig { params(node: Prism::YieldNode).void }
  def visit_yield_node(node); end
end

# source://prism//lib/prism/node.rb#18628
class Prism::WhenNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#18630
  sig do
    params(
      source: Prism::Source,
      keyword_loc: Prism::Location,
      conditions: T::Array[Prism::Node],
      then_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      location: Prism::Location
    ).void
  end
  def initialize(source, keyword_loc, conditions, then_keyword_loc, statements, location); end

  # source://prism//lib/prism/node.rb#18747
  def ===(other); end

  # source://prism//lib/prism/node.rb#18641
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#18646
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#18659
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#18651
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#18684
  sig { returns(T::Array[Prism::Node]) }
  def conditions; end

  # source://prism//lib/prism/node.rb#18664
  sig do
    params(
      keyword_loc: Prism::Location,
      conditions: T::Array[Prism::Node],
      then_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      location: Prism::Location
    ).returns(Prism::WhenNode)
  end
  def copy(keyword_loc: T.unsafe(nil), conditions: T.unsafe(nil), then_keyword_loc: T.unsafe(nil), statements: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#18646
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#18672
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#18713
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#18703
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#18677
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#18700
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#18708
  sig { returns(T.nilable(String)) }
  def then_keyword; end

  # source://prism//lib/prism/node.rb#18687
  sig { returns(T.nilable(Prism::Location)) }
  def then_keyword_loc; end

  # source://prism//lib/prism/node.rb#18731
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#18741
    def type; end
  end
end

# source://prism//lib/prism/node.rb#18764
class Prism::WhileNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#18766
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      keyword_loc: Prism::Location,
      closing_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, keyword_loc, closing_loc, predicate, statements, location); end

  # source://prism//lib/prism/node.rb#18897
  def ===(other); end

  # source://prism//lib/prism/node.rb#18778
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#18848
  sig { returns(T::Boolean) }
  def begin_modifier?; end

  # source://prism//lib/prism/node.rb#18787
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#18858
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#18829
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#18800
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#18792
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#18805
  sig do
    params(
      flags: Integer,
      keyword_loc: Prism::Location,
      closing_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      location: Prism::Location
    ).returns(Prism::WhileNode)
  end
  def copy(flags: T.unsafe(nil), keyword_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), predicate: T.unsafe(nil), statements: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#18787
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#18813
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#18863
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#18853
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#18822
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#18842
  sig { returns(Prism::Node) }
  def predicate; end

  # source://prism//lib/prism/node.rb#18782
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#18845
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#18881
  sig { override.returns(Symbol) }
  def type; end

  protected

  # source://prism//lib/prism/node.rb#18818
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#18891
    def type; end
  end
end

# source://prism//lib/prism/node.rb#18911
class Prism::XStringNode < ::Prism::Node
  include ::Prism::HeredocQuery

  # source://prism//lib/prism/node.rb#18913
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, opening_loc, content_loc, closing_loc, unescaped, location); end

  # source://prism//lib/prism/node.rb#19045
  def ===(other); end

  # source://prism//lib/prism/node.rb#18925
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#18930
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#19006
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#18976
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#18940
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#18935
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#19001
  sig { returns(String) }
  def content; end

  # source://prism//lib/prism/node.rb#18969
  sig { returns(Prism::Location) }
  def content_loc; end

  # source://prism//lib/prism/node.rb#18945
  sig do
    params(
      flags: Integer,
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String,
      location: Prism::Location
    ).returns(Prism::XStringNode)
  end
  def copy(flags: T.unsafe(nil), opening_loc: T.unsafe(nil), content_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), unescaped: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#18930
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#18953
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#18991
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#18986
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  sig { returns(T::Boolean) }
  def heredoc?; end

  # source://prism//lib/prism/node.rb#19011
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#18996
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#18962
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node_ext.rb#83
  sig { returns(Prism::InterpolatedXStringNode) }
  def to_interpolated; end

  # source://prism//lib/prism/node.rb#19029
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#18983
  sig { returns(String) }
  def unescaped; end

  protected

  # source://prism//lib/prism/node.rb#18958
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#19039
    def type; end
  end
end

# source://prism//lib/prism/node.rb#19059
class Prism::YieldNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#19061
  sig do
    params(
      source: Prism::Source,
      keyword_loc: Prism::Location,
      lparen_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      rparen_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, keyword_loc, lparen_loc, arguments, rparen_loc, location); end

  # source://prism//lib/prism/node.rb#19192
  def ===(other); end

  # source://prism//lib/prism/node.rb#19072
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#19127
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#19077
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#19089
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#19082
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#19094
  sig do
    params(
      keyword_loc: Prism::Location,
      lparen_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      rparen_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::YieldNode)
  end
  def copy(keyword_loc: T.unsafe(nil), lparen_loc: T.unsafe(nil), arguments: T.unsafe(nil), rparen_loc: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#19077
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#19102
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#19158
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#19143
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#19107
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#19148
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#19114
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#19153
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#19130
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#19176
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#19186
    def type; end
  end
end
